// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ColabSchedule struct {
	pulumi.CustomResourceState

	// Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be
	// queued instead of skipped. Default to false.
	AllowQueueing   pulumi.BoolPtrOutput `pulumi:"allowQueueing"`
	ColabScheduleId pulumi.StringOutput  `pulumi:"colabScheduleId"`
	// Request for google_colab_notebook_execution.
	CreateNotebookExecutionJobRequest ColabScheduleCreateNotebookExecutionJobRequestOutput `pulumi:"createNotebookExecutionJobRequest"`
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
	Cron pulumi.StringOutput `pulumi:"cron"`
	// Desired state of the Colab Schedule. Set this field to 'ACTIVE' to start/resume the schedule, and 'PAUSED' to pause the
	// schedule.
	DesiredState pulumi.StringPtrOutput `pulumi:"desiredState"`
	// Required. The display name of the Schedule.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Timestamp after which no new runs can be scheduled. If specified, the schedule will be completed when either end_time is
	// reached or when scheduled_run_count >= max_run_count. Must be in the RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt)
	// format.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringOutput `pulumi:"location"`
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled
	// requests and not the execution of the notebook execution jobs created by the requests.
	MaxConcurrentRunCount pulumi.StringOutput `pulumi:"maxConcurrentRunCount"`
	// Maximum run count of the schedule. If specified, The schedule will be completed when either startedRunCount >=
	// maxRunCount or when endTime is reached. If not specified, new runs will keep getting scheduled until this Schedule is
	// paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount pulumi.StringPtrOutput `pulumi:"maxRunCount"`
	// The resource name of the Schedule
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The timestamp after which the first run can be scheduled. Defaults to the schedule creation time. Must be in the RFC
	// 3339 (https://www.ietf.org/rfc/rfc3339.txt) format.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// Output only. The state of the schedule.
	State    pulumi.StringOutput            `pulumi:"state"`
	Timeouts ColabScheduleTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewColabSchedule registers a new resource with the given unique name, arguments, and options.
func NewColabSchedule(ctx *pulumi.Context,
	name string, args *ColabScheduleArgs, opts ...pulumi.ResourceOption) (*ColabSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreateNotebookExecutionJobRequest == nil {
		return nil, errors.New("invalid value for required argument 'CreateNotebookExecutionJobRequest'")
	}
	if args.Cron == nil {
		return nil, errors.New("invalid value for required argument 'Cron'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MaxConcurrentRunCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxConcurrentRunCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ColabSchedule
	err = ctx.RegisterPackageResource("google:index/colabSchedule:ColabSchedule", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetColabSchedule gets an existing ColabSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetColabSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ColabScheduleState, opts ...pulumi.ResourceOption) (*ColabSchedule, error) {
	var resource ColabSchedule
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/colabSchedule:ColabSchedule", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ColabSchedule resources.
type colabScheduleState struct {
	// Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be
	// queued instead of skipped. Default to false.
	AllowQueueing   *bool   `pulumi:"allowQueueing"`
	ColabScheduleId *string `pulumi:"colabScheduleId"`
	// Request for google_colab_notebook_execution.
	CreateNotebookExecutionJobRequest *ColabScheduleCreateNotebookExecutionJobRequest `pulumi:"createNotebookExecutionJobRequest"`
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
	Cron *string `pulumi:"cron"`
	// Desired state of the Colab Schedule. Set this field to 'ACTIVE' to start/resume the schedule, and 'PAUSED' to pause the
	// schedule.
	DesiredState *string `pulumi:"desiredState"`
	// Required. The display name of the Schedule.
	DisplayName *string `pulumi:"displayName"`
	// Timestamp after which no new runs can be scheduled. If specified, the schedule will be completed when either end_time is
	// reached or when scheduled_run_count >= max_run_count. Must be in the RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt)
	// format.
	EndTime *string `pulumi:"endTime"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location *string `pulumi:"location"`
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled
	// requests and not the execution of the notebook execution jobs created by the requests.
	MaxConcurrentRunCount *string `pulumi:"maxConcurrentRunCount"`
	// Maximum run count of the schedule. If specified, The schedule will be completed when either startedRunCount >=
	// maxRunCount or when endTime is reached. If not specified, new runs will keep getting scheduled until this Schedule is
	// paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount *string `pulumi:"maxRunCount"`
	// The resource name of the Schedule
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The timestamp after which the first run can be scheduled. Defaults to the schedule creation time. Must be in the RFC
	// 3339 (https://www.ietf.org/rfc/rfc3339.txt) format.
	StartTime *string `pulumi:"startTime"`
	// Output only. The state of the schedule.
	State    *string                `pulumi:"state"`
	Timeouts *ColabScheduleTimeouts `pulumi:"timeouts"`
}

type ColabScheduleState struct {
	// Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be
	// queued instead of skipped. Default to false.
	AllowQueueing   pulumi.BoolPtrInput
	ColabScheduleId pulumi.StringPtrInput
	// Request for google_colab_notebook_execution.
	CreateNotebookExecutionJobRequest ColabScheduleCreateNotebookExecutionJobRequestPtrInput
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
	Cron pulumi.StringPtrInput
	// Desired state of the Colab Schedule. Set this field to 'ACTIVE' to start/resume the schedule, and 'PAUSED' to pause the
	// schedule.
	DesiredState pulumi.StringPtrInput
	// Required. The display name of the Schedule.
	DisplayName pulumi.StringPtrInput
	// Timestamp after which no new runs can be scheduled. If specified, the schedule will be completed when either end_time is
	// reached or when scheduled_run_count >= max_run_count. Must be in the RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt)
	// format.
	EndTime pulumi.StringPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringPtrInput
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled
	// requests and not the execution of the notebook execution jobs created by the requests.
	MaxConcurrentRunCount pulumi.StringPtrInput
	// Maximum run count of the schedule. If specified, The schedule will be completed when either startedRunCount >=
	// maxRunCount or when endTime is reached. If not specified, new runs will keep getting scheduled until this Schedule is
	// paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount pulumi.StringPtrInput
	// The resource name of the Schedule
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The timestamp after which the first run can be scheduled. Defaults to the schedule creation time. Must be in the RFC
	// 3339 (https://www.ietf.org/rfc/rfc3339.txt) format.
	StartTime pulumi.StringPtrInput
	// Output only. The state of the schedule.
	State    pulumi.StringPtrInput
	Timeouts ColabScheduleTimeoutsPtrInput
}

func (ColabScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*colabScheduleState)(nil)).Elem()
}

type colabScheduleArgs struct {
	// Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be
	// queued instead of skipped. Default to false.
	AllowQueueing   *bool   `pulumi:"allowQueueing"`
	ColabScheduleId *string `pulumi:"colabScheduleId"`
	// Request for google_colab_notebook_execution.
	CreateNotebookExecutionJobRequest ColabScheduleCreateNotebookExecutionJobRequest `pulumi:"createNotebookExecutionJobRequest"`
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
	Cron string `pulumi:"cron"`
	// Desired state of the Colab Schedule. Set this field to 'ACTIVE' to start/resume the schedule, and 'PAUSED' to pause the
	// schedule.
	DesiredState *string `pulumi:"desiredState"`
	// Required. The display name of the Schedule.
	DisplayName string `pulumi:"displayName"`
	// Timestamp after which no new runs can be scheduled. If specified, the schedule will be completed when either end_time is
	// reached or when scheduled_run_count >= max_run_count. Must be in the RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt)
	// format.
	EndTime *string `pulumi:"endTime"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location string `pulumi:"location"`
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled
	// requests and not the execution of the notebook execution jobs created by the requests.
	MaxConcurrentRunCount string `pulumi:"maxConcurrentRunCount"`
	// Maximum run count of the schedule. If specified, The schedule will be completed when either startedRunCount >=
	// maxRunCount or when endTime is reached. If not specified, new runs will keep getting scheduled until this Schedule is
	// paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount *string `pulumi:"maxRunCount"`
	Project     *string `pulumi:"project"`
	// The timestamp after which the first run can be scheduled. Defaults to the schedule creation time. Must be in the RFC
	// 3339 (https://www.ietf.org/rfc/rfc3339.txt) format.
	StartTime *string                `pulumi:"startTime"`
	Timeouts  *ColabScheduleTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ColabSchedule resource.
type ColabScheduleArgs struct {
	// Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be
	// queued instead of skipped. Default to false.
	AllowQueueing   pulumi.BoolPtrInput
	ColabScheduleId pulumi.StringPtrInput
	// Request for google_colab_notebook_execution.
	CreateNotebookExecutionJobRequest ColabScheduleCreateNotebookExecutionJobRequestInput
	// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
	Cron pulumi.StringInput
	// Desired state of the Colab Schedule. Set this field to 'ACTIVE' to start/resume the schedule, and 'PAUSED' to pause the
	// schedule.
	DesiredState pulumi.StringPtrInput
	// Required. The display name of the Schedule.
	DisplayName pulumi.StringInput
	// Timestamp after which no new runs can be scheduled. If specified, the schedule will be completed when either end_time is
	// reached or when scheduled_run_count >= max_run_count. Must be in the RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt)
	// format.
	EndTime pulumi.StringPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringInput
	// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled
	// requests and not the execution of the notebook execution jobs created by the requests.
	MaxConcurrentRunCount pulumi.StringInput
	// Maximum run count of the schedule. If specified, The schedule will be completed when either startedRunCount >=
	// maxRunCount or when endTime is reached. If not specified, new runs will keep getting scheduled until this Schedule is
	// paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
	MaxRunCount pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	// The timestamp after which the first run can be scheduled. Defaults to the schedule creation time. Must be in the RFC
	// 3339 (https://www.ietf.org/rfc/rfc3339.txt) format.
	StartTime pulumi.StringPtrInput
	Timeouts  ColabScheduleTimeoutsPtrInput
}

func (ColabScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*colabScheduleArgs)(nil)).Elem()
}

type ColabScheduleInput interface {
	pulumi.Input

	ToColabScheduleOutput() ColabScheduleOutput
	ToColabScheduleOutputWithContext(ctx context.Context) ColabScheduleOutput
}

func (*ColabSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabSchedule)(nil)).Elem()
}

func (i *ColabSchedule) ToColabScheduleOutput() ColabScheduleOutput {
	return i.ToColabScheduleOutputWithContext(context.Background())
}

func (i *ColabSchedule) ToColabScheduleOutputWithContext(ctx context.Context) ColabScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColabScheduleOutput)
}

type ColabScheduleOutput struct{ *pulumi.OutputState }

func (ColabScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabSchedule)(nil)).Elem()
}

func (o ColabScheduleOutput) ToColabScheduleOutput() ColabScheduleOutput {
	return o
}

func (o ColabScheduleOutput) ToColabScheduleOutputWithContext(ctx context.Context) ColabScheduleOutput {
	return o
}

// Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be
// queued instead of skipped. Default to false.
func (o ColabScheduleOutput) AllowQueueing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.BoolPtrOutput { return v.AllowQueueing }).(pulumi.BoolPtrOutput)
}

func (o ColabScheduleOutput) ColabScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.ColabScheduleId }).(pulumi.StringOutput)
}

// Request for google_colab_notebook_execution.
func (o ColabScheduleOutput) CreateNotebookExecutionJobRequest() ColabScheduleCreateNotebookExecutionJobRequestOutput {
	return o.ApplyT(func(v *ColabSchedule) ColabScheduleCreateNotebookExecutionJobRequestOutput {
		return v.CreateNotebookExecutionJobRequest
	}).(ColabScheduleCreateNotebookExecutionJobRequestOutput)
}

// Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
func (o ColabScheduleOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.Cron }).(pulumi.StringOutput)
}

// Desired state of the Colab Schedule. Set this field to 'ACTIVE' to start/resume the schedule, and 'PAUSED' to pause the
// schedule.
func (o ColabScheduleOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringPtrOutput { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Required. The display name of the Schedule.
func (o ColabScheduleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Timestamp after which no new runs can be scheduled. If specified, the schedule will be completed when either end_time is
// reached or when scheduled_run_count >= max_run_count. Must be in the RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt)
// format.
func (o ColabScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
func (o ColabScheduleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled
// requests and not the execution of the notebook execution jobs created by the requests.
func (o ColabScheduleOutput) MaxConcurrentRunCount() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.MaxConcurrentRunCount }).(pulumi.StringOutput)
}

// Maximum run count of the schedule. If specified, The schedule will be completed when either startedRunCount >=
// maxRunCount or when endTime is reached. If not specified, new runs will keep getting scheduled until this Schedule is
// paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
func (o ColabScheduleOutput) MaxRunCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringPtrOutput { return v.MaxRunCount }).(pulumi.StringPtrOutput)
}

// The resource name of the Schedule
func (o ColabScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ColabScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The timestamp after which the first run can be scheduled. Defaults to the schedule creation time. Must be in the RFC
// 3339 (https://www.ietf.org/rfc/rfc3339.txt) format.
func (o ColabScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// Output only. The state of the schedule.
func (o ColabScheduleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabSchedule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ColabScheduleOutput) Timeouts() ColabScheduleTimeoutsPtrOutput {
	return o.ApplyT(func(v *ColabSchedule) ColabScheduleTimeoutsPtrOutput { return v.Timeouts }).(ColabScheduleTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ColabScheduleInput)(nil)).Elem(), &ColabSchedule{})
	pulumi.RegisterOutputType(ColabScheduleOutput{})
}
