// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudTasksQueue struct {
	pulumi.CustomResourceState

	// Overrides for task-level appEngineRouting. These settings apply only to App Engine tasks in this queue
	AppEngineRoutingOverride CloudTasksQueueAppEngineRoutingOverridePtrOutput `pulumi:"appEngineRoutingOverride"`
	CloudTasksQueueId        pulumi.StringOutput                              `pulumi:"cloudTasksQueueId"`
	// Modifies HTTP target for HTTP tasks.
	HttpTarget CloudTasksQueueHttpTargetPtrOutput `pulumi:"httpTarget"`
	// The location of the queue
	Location pulumi.StringOutput `pulumi:"location"`
	// The queue name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Rate limits for task dispatches. The queue's actual dispatch rate is the result of: * Number of tasks in the queue *
	// User-specified throttling: rateLimits, retryConfig, and the queue's state. * System throttling due to 429 (Too Many
	// Requests) or 503 (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic
	// spikes.
	RateLimits CloudTasksQueueRateLimitsPtrOutput `pulumi:"rateLimits"`
	// Settings that determine the retry behavior.
	RetryConfig CloudTasksQueueRetryConfigPtrOutput `pulumi:"retryConfig"`
	// Configuration options for writing logs to Stackdriver Logging.
	StackdriverLoggingConfig CloudTasksQueueStackdriverLoggingConfigPtrOutput `pulumi:"stackdriverLoggingConfig"`
	Timeouts                 CloudTasksQueueTimeoutsPtrOutput                 `pulumi:"timeouts"`
}

// NewCloudTasksQueue registers a new resource with the given unique name, arguments, and options.
func NewCloudTasksQueue(ctx *pulumi.Context,
	name string, args *CloudTasksQueueArgs, opts ...pulumi.ResourceOption) (*CloudTasksQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudTasksQueue
	err = ctx.RegisterPackageResource("google:index/cloudTasksQueue:CloudTasksQueue", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudTasksQueue gets an existing CloudTasksQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudTasksQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudTasksQueueState, opts ...pulumi.ResourceOption) (*CloudTasksQueue, error) {
	var resource CloudTasksQueue
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/cloudTasksQueue:CloudTasksQueue", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudTasksQueue resources.
type cloudTasksQueueState struct {
	// Overrides for task-level appEngineRouting. These settings apply only to App Engine tasks in this queue
	AppEngineRoutingOverride *CloudTasksQueueAppEngineRoutingOverride `pulumi:"appEngineRoutingOverride"`
	CloudTasksQueueId        *string                                  `pulumi:"cloudTasksQueueId"`
	// Modifies HTTP target for HTTP tasks.
	HttpTarget *CloudTasksQueueHttpTarget `pulumi:"httpTarget"`
	// The location of the queue
	Location *string `pulumi:"location"`
	// The queue name.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Rate limits for task dispatches. The queue's actual dispatch rate is the result of: * Number of tasks in the queue *
	// User-specified throttling: rateLimits, retryConfig, and the queue's state. * System throttling due to 429 (Too Many
	// Requests) or 503 (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic
	// spikes.
	RateLimits *CloudTasksQueueRateLimits `pulumi:"rateLimits"`
	// Settings that determine the retry behavior.
	RetryConfig *CloudTasksQueueRetryConfig `pulumi:"retryConfig"`
	// Configuration options for writing logs to Stackdriver Logging.
	StackdriverLoggingConfig *CloudTasksQueueStackdriverLoggingConfig `pulumi:"stackdriverLoggingConfig"`
	Timeouts                 *CloudTasksQueueTimeouts                 `pulumi:"timeouts"`
}

type CloudTasksQueueState struct {
	// Overrides for task-level appEngineRouting. These settings apply only to App Engine tasks in this queue
	AppEngineRoutingOverride CloudTasksQueueAppEngineRoutingOverridePtrInput
	CloudTasksQueueId        pulumi.StringPtrInput
	// Modifies HTTP target for HTTP tasks.
	HttpTarget CloudTasksQueueHttpTargetPtrInput
	// The location of the queue
	Location pulumi.StringPtrInput
	// The queue name.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Rate limits for task dispatches. The queue's actual dispatch rate is the result of: * Number of tasks in the queue *
	// User-specified throttling: rateLimits, retryConfig, and the queue's state. * System throttling due to 429 (Too Many
	// Requests) or 503 (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic
	// spikes.
	RateLimits CloudTasksQueueRateLimitsPtrInput
	// Settings that determine the retry behavior.
	RetryConfig CloudTasksQueueRetryConfigPtrInput
	// Configuration options for writing logs to Stackdriver Logging.
	StackdriverLoggingConfig CloudTasksQueueStackdriverLoggingConfigPtrInput
	Timeouts                 CloudTasksQueueTimeoutsPtrInput
}

func (CloudTasksQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudTasksQueueState)(nil)).Elem()
}

type cloudTasksQueueArgs struct {
	// Overrides for task-level appEngineRouting. These settings apply only to App Engine tasks in this queue
	AppEngineRoutingOverride *CloudTasksQueueAppEngineRoutingOverride `pulumi:"appEngineRoutingOverride"`
	CloudTasksQueueId        *string                                  `pulumi:"cloudTasksQueueId"`
	// Modifies HTTP target for HTTP tasks.
	HttpTarget *CloudTasksQueueHttpTarget `pulumi:"httpTarget"`
	// The location of the queue
	Location string `pulumi:"location"`
	// The queue name.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Rate limits for task dispatches. The queue's actual dispatch rate is the result of: * Number of tasks in the queue *
	// User-specified throttling: rateLimits, retryConfig, and the queue's state. * System throttling due to 429 (Too Many
	// Requests) or 503 (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic
	// spikes.
	RateLimits *CloudTasksQueueRateLimits `pulumi:"rateLimits"`
	// Settings that determine the retry behavior.
	RetryConfig *CloudTasksQueueRetryConfig `pulumi:"retryConfig"`
	// Configuration options for writing logs to Stackdriver Logging.
	StackdriverLoggingConfig *CloudTasksQueueStackdriverLoggingConfig `pulumi:"stackdriverLoggingConfig"`
	Timeouts                 *CloudTasksQueueTimeouts                 `pulumi:"timeouts"`
}

// The set of arguments for constructing a CloudTasksQueue resource.
type CloudTasksQueueArgs struct {
	// Overrides for task-level appEngineRouting. These settings apply only to App Engine tasks in this queue
	AppEngineRoutingOverride CloudTasksQueueAppEngineRoutingOverridePtrInput
	CloudTasksQueueId        pulumi.StringPtrInput
	// Modifies HTTP target for HTTP tasks.
	HttpTarget CloudTasksQueueHttpTargetPtrInput
	// The location of the queue
	Location pulumi.StringInput
	// The queue name.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Rate limits for task dispatches. The queue's actual dispatch rate is the result of: * Number of tasks in the queue *
	// User-specified throttling: rateLimits, retryConfig, and the queue's state. * System throttling due to 429 (Too Many
	// Requests) or 503 (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic
	// spikes.
	RateLimits CloudTasksQueueRateLimitsPtrInput
	// Settings that determine the retry behavior.
	RetryConfig CloudTasksQueueRetryConfigPtrInput
	// Configuration options for writing logs to Stackdriver Logging.
	StackdriverLoggingConfig CloudTasksQueueStackdriverLoggingConfigPtrInput
	Timeouts                 CloudTasksQueueTimeoutsPtrInput
}

func (CloudTasksQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudTasksQueueArgs)(nil)).Elem()
}

type CloudTasksQueueInput interface {
	pulumi.Input

	ToCloudTasksQueueOutput() CloudTasksQueueOutput
	ToCloudTasksQueueOutputWithContext(ctx context.Context) CloudTasksQueueOutput
}

func (*CloudTasksQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudTasksQueue)(nil)).Elem()
}

func (i *CloudTasksQueue) ToCloudTasksQueueOutput() CloudTasksQueueOutput {
	return i.ToCloudTasksQueueOutputWithContext(context.Background())
}

func (i *CloudTasksQueue) ToCloudTasksQueueOutputWithContext(ctx context.Context) CloudTasksQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudTasksQueueOutput)
}

type CloudTasksQueueOutput struct{ *pulumi.OutputState }

func (CloudTasksQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudTasksQueue)(nil)).Elem()
}

func (o CloudTasksQueueOutput) ToCloudTasksQueueOutput() CloudTasksQueueOutput {
	return o
}

func (o CloudTasksQueueOutput) ToCloudTasksQueueOutputWithContext(ctx context.Context) CloudTasksQueueOutput {
	return o
}

// Overrides for task-level appEngineRouting. These settings apply only to App Engine tasks in this queue
func (o CloudTasksQueueOutput) AppEngineRoutingOverride() CloudTasksQueueAppEngineRoutingOverridePtrOutput {
	return o.ApplyT(func(v *CloudTasksQueue) CloudTasksQueueAppEngineRoutingOverridePtrOutput {
		return v.AppEngineRoutingOverride
	}).(CloudTasksQueueAppEngineRoutingOverridePtrOutput)
}

func (o CloudTasksQueueOutput) CloudTasksQueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudTasksQueue) pulumi.StringOutput { return v.CloudTasksQueueId }).(pulumi.StringOutput)
}

// Modifies HTTP target for HTTP tasks.
func (o CloudTasksQueueOutput) HttpTarget() CloudTasksQueueHttpTargetPtrOutput {
	return o.ApplyT(func(v *CloudTasksQueue) CloudTasksQueueHttpTargetPtrOutput { return v.HttpTarget }).(CloudTasksQueueHttpTargetPtrOutput)
}

// The location of the queue
func (o CloudTasksQueueOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudTasksQueue) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The queue name.
func (o CloudTasksQueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudTasksQueue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloudTasksQueueOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudTasksQueue) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Rate limits for task dispatches. The queue's actual dispatch rate is the result of: * Number of tasks in the queue *
// User-specified throttling: rateLimits, retryConfig, and the queue's state. * System throttling due to 429 (Too Many
// Requests) or 503 (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic
// spikes.
func (o CloudTasksQueueOutput) RateLimits() CloudTasksQueueRateLimitsPtrOutput {
	return o.ApplyT(func(v *CloudTasksQueue) CloudTasksQueueRateLimitsPtrOutput { return v.RateLimits }).(CloudTasksQueueRateLimitsPtrOutput)
}

// Settings that determine the retry behavior.
func (o CloudTasksQueueOutput) RetryConfig() CloudTasksQueueRetryConfigPtrOutput {
	return o.ApplyT(func(v *CloudTasksQueue) CloudTasksQueueRetryConfigPtrOutput { return v.RetryConfig }).(CloudTasksQueueRetryConfigPtrOutput)
}

// Configuration options for writing logs to Stackdriver Logging.
func (o CloudTasksQueueOutput) StackdriverLoggingConfig() CloudTasksQueueStackdriverLoggingConfigPtrOutput {
	return o.ApplyT(func(v *CloudTasksQueue) CloudTasksQueueStackdriverLoggingConfigPtrOutput {
		return v.StackdriverLoggingConfig
	}).(CloudTasksQueueStackdriverLoggingConfigPtrOutput)
}

func (o CloudTasksQueueOutput) Timeouts() CloudTasksQueueTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudTasksQueue) CloudTasksQueueTimeoutsPtrOutput { return v.Timeouts }).(CloudTasksQueueTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudTasksQueueInput)(nil)).Elem(), &CloudTasksQueue{})
	pulumi.RegisterOutputType(CloudTasksQueueOutput{})
}
