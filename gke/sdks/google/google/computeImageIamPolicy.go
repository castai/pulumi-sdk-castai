// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeImageIamPolicy struct {
	pulumi.CustomResourceState

	ComputeImageIamPolicyId pulumi.StringOutput `pulumi:"computeImageIamPolicyId"`
	Etag                    pulumi.StringOutput `pulumi:"etag"`
	Image                   pulumi.StringOutput `pulumi:"image"`
	PolicyData              pulumi.StringOutput `pulumi:"policyData"`
	Project                 pulumi.StringOutput `pulumi:"project"`
}

// NewComputeImageIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewComputeImageIamPolicy(ctx *pulumi.Context,
	name string, args *ComputeImageIamPolicyArgs, opts ...pulumi.ResourceOption) (*ComputeImageIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeImageIamPolicy
	err = ctx.RegisterPackageResource("google:index/computeImageIamPolicy:ComputeImageIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeImageIamPolicy gets an existing ComputeImageIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeImageIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeImageIamPolicyState, opts ...pulumi.ResourceOption) (*ComputeImageIamPolicy, error) {
	var resource ComputeImageIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeImageIamPolicy:ComputeImageIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeImageIamPolicy resources.
type computeImageIamPolicyState struct {
	ComputeImageIamPolicyId *string `pulumi:"computeImageIamPolicyId"`
	Etag                    *string `pulumi:"etag"`
	Image                   *string `pulumi:"image"`
	PolicyData              *string `pulumi:"policyData"`
	Project                 *string `pulumi:"project"`
}

type ComputeImageIamPolicyState struct {
	ComputeImageIamPolicyId pulumi.StringPtrInput
	Etag                    pulumi.StringPtrInput
	Image                   pulumi.StringPtrInput
	PolicyData              pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
}

func (ComputeImageIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeImageIamPolicyState)(nil)).Elem()
}

type computeImageIamPolicyArgs struct {
	ComputeImageIamPolicyId *string `pulumi:"computeImageIamPolicyId"`
	Image                   string  `pulumi:"image"`
	PolicyData              string  `pulumi:"policyData"`
	Project                 *string `pulumi:"project"`
}

// The set of arguments for constructing a ComputeImageIamPolicy resource.
type ComputeImageIamPolicyArgs struct {
	ComputeImageIamPolicyId pulumi.StringPtrInput
	Image                   pulumi.StringInput
	PolicyData              pulumi.StringInput
	Project                 pulumi.StringPtrInput
}

func (ComputeImageIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeImageIamPolicyArgs)(nil)).Elem()
}

type ComputeImageIamPolicyInput interface {
	pulumi.Input

	ToComputeImageIamPolicyOutput() ComputeImageIamPolicyOutput
	ToComputeImageIamPolicyOutputWithContext(ctx context.Context) ComputeImageIamPolicyOutput
}

func (*ComputeImageIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeImageIamPolicy)(nil)).Elem()
}

func (i *ComputeImageIamPolicy) ToComputeImageIamPolicyOutput() ComputeImageIamPolicyOutput {
	return i.ToComputeImageIamPolicyOutputWithContext(context.Background())
}

func (i *ComputeImageIamPolicy) ToComputeImageIamPolicyOutputWithContext(ctx context.Context) ComputeImageIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeImageIamPolicyOutput)
}

type ComputeImageIamPolicyOutput struct{ *pulumi.OutputState }

func (ComputeImageIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeImageIamPolicy)(nil)).Elem()
}

func (o ComputeImageIamPolicyOutput) ToComputeImageIamPolicyOutput() ComputeImageIamPolicyOutput {
	return o
}

func (o ComputeImageIamPolicyOutput) ToComputeImageIamPolicyOutputWithContext(ctx context.Context) ComputeImageIamPolicyOutput {
	return o
}

func (o ComputeImageIamPolicyOutput) ComputeImageIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamPolicy) pulumi.StringOutput { return v.ComputeImageIamPolicyId }).(pulumi.StringOutput)
}

func (o ComputeImageIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeImageIamPolicyOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamPolicy) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

func (o ComputeImageIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ComputeImageIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeImageIamPolicyInput)(nil)).Elem(), &ComputeImageIamPolicy{})
	pulumi.RegisterOutputType(ComputeImageIamPolicyOutput{})
}
