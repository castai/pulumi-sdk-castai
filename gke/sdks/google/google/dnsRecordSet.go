// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsRecordSet struct {
	pulumi.CustomResourceState

	DnsRecordSetId pulumi.StringOutput `pulumi:"dnsRecordSetId"`
	// The name of the zone in which this record set will reside.
	ManagedZone pulumi.StringOutput `pulumi:"managedZone"`
	// The DNS name this record set will apply to.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
	// Geolocation(GEO) type.
	RoutingPolicy DnsRecordSetRoutingPolicyPtrOutput `pulumi:"routingPolicy"`
	Rrdatas       pulumi.StringArrayOutput           `pulumi:"rrdatas"`
	// The time-to-live of this record set (seconds).
	Ttl pulumi.Float64PtrOutput `pulumi:"ttl"`
	// The DNS record set type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDnsRecordSet registers a new resource with the given unique name, arguments, and options.
func NewDnsRecordSet(ctx *pulumi.Context,
	name string, args *DnsRecordSetArgs, opts ...pulumi.ResourceOption) (*DnsRecordSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedZone == nil {
		return nil, errors.New("invalid value for required argument 'ManagedZone'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DnsRecordSet
	err = ctx.RegisterPackageResource("google:index/dnsRecordSet:DnsRecordSet", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsRecordSet gets an existing DnsRecordSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRecordSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsRecordSetState, opts ...pulumi.ResourceOption) (*DnsRecordSet, error) {
	var resource DnsRecordSet
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/dnsRecordSet:DnsRecordSet", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsRecordSet resources.
type dnsRecordSetState struct {
	DnsRecordSetId *string `pulumi:"dnsRecordSetId"`
	// The name of the zone in which this record set will reside.
	ManagedZone *string `pulumi:"managedZone"`
	// The DNS name this record set will apply to.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
	// Geolocation(GEO) type.
	RoutingPolicy *DnsRecordSetRoutingPolicy `pulumi:"routingPolicy"`
	Rrdatas       []string                   `pulumi:"rrdatas"`
	// The time-to-live of this record set (seconds).
	Ttl *float64 `pulumi:"ttl"`
	// The DNS record set type.
	Type *string `pulumi:"type"`
}

type DnsRecordSetState struct {
	DnsRecordSetId pulumi.StringPtrInput
	// The name of the zone in which this record set will reside.
	ManagedZone pulumi.StringPtrInput
	// The DNS name this record set will apply to.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
	// Geolocation(GEO) type.
	RoutingPolicy DnsRecordSetRoutingPolicyPtrInput
	Rrdatas       pulumi.StringArrayInput
	// The time-to-live of this record set (seconds).
	Ttl pulumi.Float64PtrInput
	// The DNS record set type.
	Type pulumi.StringPtrInput
}

func (DnsRecordSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordSetState)(nil)).Elem()
}

type dnsRecordSetArgs struct {
	DnsRecordSetId *string `pulumi:"dnsRecordSetId"`
	// The name of the zone in which this record set will reside.
	ManagedZone string `pulumi:"managedZone"`
	// The DNS name this record set will apply to.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
	// Geolocation(GEO) type.
	RoutingPolicy *DnsRecordSetRoutingPolicy `pulumi:"routingPolicy"`
	Rrdatas       []string                   `pulumi:"rrdatas"`
	// The time-to-live of this record set (seconds).
	Ttl *float64 `pulumi:"ttl"`
	// The DNS record set type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DnsRecordSet resource.
type DnsRecordSetArgs struct {
	DnsRecordSetId pulumi.StringPtrInput
	// The name of the zone in which this record set will reside.
	ManagedZone pulumi.StringInput
	// The DNS name this record set will apply to.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
	// Geolocation(GEO) type.
	RoutingPolicy DnsRecordSetRoutingPolicyPtrInput
	Rrdatas       pulumi.StringArrayInput
	// The time-to-live of this record set (seconds).
	Ttl pulumi.Float64PtrInput
	// The DNS record set type.
	Type pulumi.StringInput
}

func (DnsRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordSetArgs)(nil)).Elem()
}

type DnsRecordSetInput interface {
	pulumi.Input

	ToDnsRecordSetOutput() DnsRecordSetOutput
	ToDnsRecordSetOutputWithContext(ctx context.Context) DnsRecordSetOutput
}

func (*DnsRecordSet) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecordSet)(nil)).Elem()
}

func (i *DnsRecordSet) ToDnsRecordSetOutput() DnsRecordSetOutput {
	return i.ToDnsRecordSetOutputWithContext(context.Background())
}

func (i *DnsRecordSet) ToDnsRecordSetOutputWithContext(ctx context.Context) DnsRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordSetOutput)
}

type DnsRecordSetOutput struct{ *pulumi.OutputState }

func (DnsRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecordSet)(nil)).Elem()
}

func (o DnsRecordSetOutput) ToDnsRecordSetOutput() DnsRecordSetOutput {
	return o
}

func (o DnsRecordSetOutput) ToDnsRecordSetOutputWithContext(ctx context.Context) DnsRecordSetOutput {
	return o
}

func (o DnsRecordSetOutput) DnsRecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.StringOutput { return v.DnsRecordSetId }).(pulumi.StringOutput)
}

// The name of the zone in which this record set will reside.
func (o DnsRecordSetOutput) ManagedZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.StringOutput { return v.ManagedZone }).(pulumi.StringOutput)
}

// The DNS name this record set will apply to.
func (o DnsRecordSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (o DnsRecordSetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
// Geolocation(GEO) type.
func (o DnsRecordSetOutput) RoutingPolicy() DnsRecordSetRoutingPolicyPtrOutput {
	return o.ApplyT(func(v *DnsRecordSet) DnsRecordSetRoutingPolicyPtrOutput { return v.RoutingPolicy }).(DnsRecordSetRoutingPolicyPtrOutput)
}

func (o DnsRecordSetOutput) Rrdatas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.StringArrayOutput { return v.Rrdatas }).(pulumi.StringArrayOutput)
}

// The time-to-live of this record set (seconds).
func (o DnsRecordSetOutput) Ttl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.Float64PtrOutput { return v.Ttl }).(pulumi.Float64PtrOutput)
}

// The DNS record set type.
func (o DnsRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordSet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordSetInput)(nil)).Elem(), &DnsRecordSet{})
	pulumi.RegisterOutputType(DnsRecordSetOutput{})
}
