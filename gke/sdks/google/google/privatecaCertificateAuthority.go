// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PrivatecaCertificateAuthority struct {
	pulumi.CustomResourceState

	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	AccessUrls PrivatecaCertificateAuthorityAccessUrlArrayOutput `pulumi:"accessUrls"`
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId pulumi.StringOutput `pulumi:"certificateAuthorityId"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config PrivatecaCertificateAuthorityConfigOutput `pulumi:"config"`
	// The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime         pulumi.StringOutput  `pulumi:"createTime"`
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState    pulumi.StringPtrOutput `pulumi:"desiredState"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket pulumi.StringPtrOutput `pulumi:"gcsBucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion pulumi.BoolPtrOutput `pulumi:"ignoreActiveCertificatesOnDeletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed
	// CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
	KeySpec PrivatecaCertificateAuthorityKeySpecOutput `pulumi:"keySpec"`
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrOutput `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by running 'gcloud privateca locations
	// list'.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for this CertificateAuthority in the format projects/*/locations/*/certificateAuthorities/*.
	Name pulumi.StringOutput `pulumi:"name"`
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate pulumi.StringPtrOutput `pulumi:"pemCaCertificate"`
	// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
	// that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
	// current CertificateAuthority's certificate.
	PemCaCertificates pulumi.StringArrayOutput `pulumi:"pemCaCertificates"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool                            pulumi.StringOutput `pulumi:"pool"`
	PrivatecaCertificateAuthorityId pulumi.StringOutput `pulumi:"privatecaCertificateAuthorityId"`
	Project                         pulumi.StringOutput `pulumi:"project"`
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod pulumi.BoolPtrOutput `pulumi:"skipGracePeriod"`
	// The State for this CertificateAuthority.
	State pulumi.StringOutput `pulumi:"state"`
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig PrivatecaCertificateAuthoritySubordinateConfigPtrOutput `pulumi:"subordinateConfig"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                         `pulumi:"terraformLabels"`
	Timeouts        PrivatecaCertificateAuthorityTimeoutsPtrOutput `pulumi:"timeouts"`
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls PrivatecaCertificateAuthorityUserDefinedAccessUrlsPtrOutput `pulumi:"userDefinedAccessUrls"`
}

// NewPrivatecaCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewPrivatecaCertificateAuthority(ctx *pulumi.Context,
	name string, args *PrivatecaCertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*PrivatecaCertificateAuthority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityId'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.KeySpec == nil {
		return nil, errors.New("invalid value for required argument 'KeySpec'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PrivatecaCertificateAuthority
	err = ctx.RegisterPackageResource("google:index/privatecaCertificateAuthority:PrivatecaCertificateAuthority", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivatecaCertificateAuthority gets an existing PrivatecaCertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivatecaCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivatecaCertificateAuthorityState, opts ...pulumi.ResourceOption) (*PrivatecaCertificateAuthority, error) {
	var resource PrivatecaCertificateAuthority
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/privatecaCertificateAuthority:PrivatecaCertificateAuthority", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivatecaCertificateAuthority resources.
type privatecaCertificateAuthorityState struct {
	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	AccessUrls []PrivatecaCertificateAuthorityAccessUrl `pulumi:"accessUrls"`
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId *string `pulumi:"certificateAuthorityId"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config *PrivatecaCertificateAuthorityConfig `pulumi:"config"`
	// The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime         *string `pulumi:"createTime"`
	DeletionProtection *bool   `pulumi:"deletionProtection"`
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState    *string           `pulumi:"desiredState"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket *string `pulumi:"gcsBucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion *bool `pulumi:"ignoreActiveCertificatesOnDeletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed
	// CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
	KeySpec *PrivatecaCertificateAuthorityKeySpec `pulumi:"keySpec"`
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by running 'gcloud privateca locations
	// list'.
	Location *string `pulumi:"location"`
	// The resource name for this CertificateAuthority in the format projects/*/locations/*/certificateAuthorities/*.
	Name *string `pulumi:"name"`
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate *string `pulumi:"pemCaCertificate"`
	// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
	// that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
	// current CertificateAuthority's certificate.
	PemCaCertificates []string `pulumi:"pemCaCertificates"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool                            *string `pulumi:"pool"`
	PrivatecaCertificateAuthorityId *string `pulumi:"privatecaCertificateAuthorityId"`
	Project                         *string `pulumi:"project"`
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod *bool `pulumi:"skipGracePeriod"`
	// The State for this CertificateAuthority.
	State *string `pulumi:"state"`
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig *PrivatecaCertificateAuthoritySubordinateConfig `pulumi:"subordinateConfig"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                      `pulumi:"terraformLabels"`
	Timeouts        *PrivatecaCertificateAuthorityTimeouts `pulumi:"timeouts"`
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type *string `pulumi:"type"`
	// The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls *PrivatecaCertificateAuthorityUserDefinedAccessUrls `pulumi:"userDefinedAccessUrls"`
}

type PrivatecaCertificateAuthorityState struct {
	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	AccessUrls PrivatecaCertificateAuthorityAccessUrlArrayInput
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId pulumi.StringPtrInput
	// The config used to create a self-signed X.509 certificate or CSR.
	Config PrivatecaCertificateAuthorityConfigPtrInput
	// The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime         pulumi.StringPtrInput
	DeletionProtection pulumi.BoolPtrInput
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState    pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket pulumi.StringPtrInput
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion pulumi.BoolPtrInput
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed
	// CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
	KeySpec PrivatecaCertificateAuthorityKeySpecPtrInput
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the CertificateAuthority. A full list of valid locations can be found by running 'gcloud privateca locations
	// list'.
	Location pulumi.StringPtrInput
	// The resource name for this CertificateAuthority in the format projects/*/locations/*/certificateAuthorities/*.
	Name pulumi.StringPtrInput
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate pulumi.StringPtrInput
	// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
	// that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
	// current CertificateAuthority's certificate.
	PemCaCertificates pulumi.StringArrayInput
	// The name of the CaPool this Certificate Authority belongs to.
	Pool                            pulumi.StringPtrInput
	PrivatecaCertificateAuthorityId pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod pulumi.BoolPtrInput
	// The State for this CertificateAuthority.
	State pulumi.StringPtrInput
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig PrivatecaCertificateAuthoritySubordinateConfigPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        PrivatecaCertificateAuthorityTimeoutsPtrInput
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type pulumi.StringPtrInput
	// The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls PrivatecaCertificateAuthorityUserDefinedAccessUrlsPtrInput
}

func (PrivatecaCertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*privatecaCertificateAuthorityState)(nil)).Elem()
}

type privatecaCertificateAuthorityArgs struct {
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId string `pulumi:"certificateAuthorityId"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config             PrivatecaCertificateAuthorityConfig `pulumi:"config"`
	DeletionProtection *bool                               `pulumi:"deletionProtection"`
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState *string `pulumi:"desiredState"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket *string `pulumi:"gcsBucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion *bool `pulumi:"ignoreActiveCertificatesOnDeletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed
	// CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
	KeySpec PrivatecaCertificateAuthorityKeySpec `pulumi:"keySpec"`
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by running 'gcloud privateca locations
	// list'.
	Location string `pulumi:"location"`
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate *string `pulumi:"pemCaCertificate"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool                            string  `pulumi:"pool"`
	PrivatecaCertificateAuthorityId *string `pulumi:"privatecaCertificateAuthorityId"`
	Project                         *string `pulumi:"project"`
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod *bool `pulumi:"skipGracePeriod"`
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig *PrivatecaCertificateAuthoritySubordinateConfig `pulumi:"subordinateConfig"`
	Timeouts          *PrivatecaCertificateAuthorityTimeouts          `pulumi:"timeouts"`
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type *string `pulumi:"type"`
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls *PrivatecaCertificateAuthorityUserDefinedAccessUrls `pulumi:"userDefinedAccessUrls"`
}

// The set of arguments for constructing a PrivatecaCertificateAuthority resource.
type PrivatecaCertificateAuthorityArgs struct {
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId pulumi.StringInput
	// The config used to create a self-signed X.509 certificate or CSR.
	Config             PrivatecaCertificateAuthorityConfigInput
	DeletionProtection pulumi.BoolPtrInput
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState pulumi.StringPtrInput
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket pulumi.StringPtrInput
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion pulumi.BoolPtrInput
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed
	// CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
	KeySpec PrivatecaCertificateAuthorityKeySpecInput
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the CertificateAuthority. A full list of valid locations can be found by running 'gcloud privateca locations
	// list'.
	Location pulumi.StringInput
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate pulumi.StringPtrInput
	// The name of the CaPool this Certificate Authority belongs to.
	Pool                            pulumi.StringInput
	PrivatecaCertificateAuthorityId pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod pulumi.BoolPtrInput
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig PrivatecaCertificateAuthoritySubordinateConfigPtrInput
	Timeouts          PrivatecaCertificateAuthorityTimeoutsPtrInput
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type pulumi.StringPtrInput
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls PrivatecaCertificateAuthorityUserDefinedAccessUrlsPtrInput
}

func (PrivatecaCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privatecaCertificateAuthorityArgs)(nil)).Elem()
}

type PrivatecaCertificateAuthorityInput interface {
	pulumi.Input

	ToPrivatecaCertificateAuthorityOutput() PrivatecaCertificateAuthorityOutput
	ToPrivatecaCertificateAuthorityOutputWithContext(ctx context.Context) PrivatecaCertificateAuthorityOutput
}

func (*PrivatecaCertificateAuthority) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatecaCertificateAuthority)(nil)).Elem()
}

func (i *PrivatecaCertificateAuthority) ToPrivatecaCertificateAuthorityOutput() PrivatecaCertificateAuthorityOutput {
	return i.ToPrivatecaCertificateAuthorityOutputWithContext(context.Background())
}

func (i *PrivatecaCertificateAuthority) ToPrivatecaCertificateAuthorityOutputWithContext(ctx context.Context) PrivatecaCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatecaCertificateAuthorityOutput)
}

type PrivatecaCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (PrivatecaCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatecaCertificateAuthority)(nil)).Elem()
}

func (o PrivatecaCertificateAuthorityOutput) ToPrivatecaCertificateAuthorityOutput() PrivatecaCertificateAuthorityOutput {
	return o
}

func (o PrivatecaCertificateAuthorityOutput) ToPrivatecaCertificateAuthorityOutputWithContext(ctx context.Context) PrivatecaCertificateAuthorityOutput {
	return o
}

// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
func (o PrivatecaCertificateAuthorityOutput) AccessUrls() PrivatecaCertificateAuthorityAccessUrlArrayOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) PrivatecaCertificateAuthorityAccessUrlArrayOutput {
		return v.AccessUrls
	}).(PrivatecaCertificateAuthorityAccessUrlArrayOutput)
}

// The user provided Resource ID for this Certificate Authority.
func (o PrivatecaCertificateAuthorityOutput) CertificateAuthorityId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.CertificateAuthorityId }).(pulumi.StringOutput)
}

// The config used to create a self-signed X.509 certificate or CSR.
func (o PrivatecaCertificateAuthorityOutput) Config() PrivatecaCertificateAuthorityConfigOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) PrivatecaCertificateAuthorityConfigOutput { return v.Config }).(PrivatecaCertificateAuthorityConfigOutput)
}

// The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o PrivatecaCertificateAuthorityOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o PrivatecaCertificateAuthorityOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
// ENABLED, DISABLED, STAGED.
func (o PrivatecaCertificateAuthorityOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringPtrOutput { return v.DesiredState }).(pulumi.StringPtrOutput)
}

func (o PrivatecaCertificateAuthorityOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
// be created.
func (o PrivatecaCertificateAuthorityOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringPtrOutput { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
// unexpired certs. Use with care. Defaults to 'false'.
func (o PrivatecaCertificateAuthorityOutput) IgnoreActiveCertificatesOnDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.BoolPtrOutput {
		return v.IgnoreActiveCertificatesOnDeletion
	}).(pulumi.BoolPtrOutput)
}

// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed
// CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
func (o PrivatecaCertificateAuthorityOutput) KeySpec() PrivatecaCertificateAuthorityKeySpecOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) PrivatecaCertificateAuthorityKeySpecOutput { return v.KeySpec }).(PrivatecaCertificateAuthorityKeySpecOutput)
}

// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o PrivatecaCertificateAuthorityOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o PrivatecaCertificateAuthorityOutput) Lifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringPtrOutput { return v.Lifetime }).(pulumi.StringPtrOutput)
}

// Location of the CertificateAuthority. A full list of valid locations can be found by running 'gcloud privateca locations
// list'.
func (o PrivatecaCertificateAuthorityOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for this CertificateAuthority in the format projects/*/locations/*/certificateAuthorities/*.
func (o PrivatecaCertificateAuthorityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
// a third party issuer.
func (o PrivatecaCertificateAuthorityOutput) PemCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringPtrOutput { return v.PemCaCertificate }).(pulumi.StringPtrOutput)
}

// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
// that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
// current CertificateAuthority's certificate.
func (o PrivatecaCertificateAuthorityOutput) PemCaCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringArrayOutput { return v.PemCaCertificates }).(pulumi.StringArrayOutput)
}

// The name of the CaPool this Certificate Authority belongs to.
func (o PrivatecaCertificateAuthorityOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

func (o PrivatecaCertificateAuthorityOutput) PrivatecaCertificateAuthorityId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.PrivatecaCertificateAuthorityId }).(pulumi.StringOutput)
}

func (o PrivatecaCertificateAuthorityOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
// 'false'.
func (o PrivatecaCertificateAuthorityOutput) SkipGracePeriod() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.BoolPtrOutput { return v.SkipGracePeriod }).(pulumi.BoolPtrOutput)
}

// The State for this CertificateAuthority.
func (o PrivatecaCertificateAuthorityOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
// describes its issuers.
func (o PrivatecaCertificateAuthorityOutput) SubordinateConfig() PrivatecaCertificateAuthoritySubordinateConfigPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) PrivatecaCertificateAuthoritySubordinateConfigPtrOutput {
		return v.SubordinateConfig
	}).(PrivatecaCertificateAuthoritySubordinateConfigPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o PrivatecaCertificateAuthorityOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o PrivatecaCertificateAuthorityOutput) Timeouts() PrivatecaCertificateAuthorityTimeoutsPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) PrivatecaCertificateAuthorityTimeoutsPtrOutput {
		return v.Timeouts
	}).(PrivatecaCertificateAuthorityTimeoutsPtrOutput)
}

// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
func (o PrivatecaCertificateAuthorityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o PrivatecaCertificateAuthorityOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
// users.
func (o PrivatecaCertificateAuthorityOutput) UserDefinedAccessUrls() PrivatecaCertificateAuthorityUserDefinedAccessUrlsPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificateAuthority) PrivatecaCertificateAuthorityUserDefinedAccessUrlsPtrOutput {
		return v.UserDefinedAccessUrls
	}).(PrivatecaCertificateAuthorityUserDefinedAccessUrlsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatecaCertificateAuthorityInput)(nil)).Elem(), &PrivatecaCertificateAuthority{})
	pulumi.RegisterOutputType(PrivatecaCertificateAuthorityOutput{})
}
