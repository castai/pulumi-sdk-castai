// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ColabNotebookExecution struct {
	pulumi.CustomResourceState

	ColabNotebookExecutionId pulumi.StringOutput `pulumi:"colabNotebookExecutionId"`
	// The Dataform Repository containing the input notebook.
	DataformRepositorySource ColabNotebookExecutionDataformRepositorySourcePtrOutput `pulumi:"dataformRepositorySource"`
	// The content of the input notebook in ipynb format.
	DirectNotebookSource ColabNotebookExecutionDirectNotebookSourcePtrOutput `pulumi:"directNotebookSource"`
	// Required. The display name of the Notebook Execution.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout pulumi.StringPtrOutput `pulumi:"executionTimeout"`
	// The user email to run the execution as.
	ExecutionUser pulumi.StringPtrOutput `pulumi:"executionUser"`
	// The Cloud Storage uri for the input notebook.
	GcsNotebookSource ColabNotebookExecutionGcsNotebookSourcePtrOutput `pulumi:"gcsNotebookSource"`
	// The Cloud Storage location to upload the result to. Format:'gs://bucket-name'
	GcsOutputUri pulumi.StringOutput `pulumi:"gcsOutputUri"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringOutput `pulumi:"location"`
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId pulumi.StringOutput `pulumi:"notebookExecutionJobId"`
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName pulumi.StringPtrOutput `pulumi:"notebookRuntimeTemplateResourceName"`
	Project                             pulumi.StringOutput    `pulumi:"project"`
	// The service account to run the execution as.
	ServiceAccount pulumi.StringPtrOutput                  `pulumi:"serviceAccount"`
	Timeouts       ColabNotebookExecutionTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewColabNotebookExecution registers a new resource with the given unique name, arguments, and options.
func NewColabNotebookExecution(ctx *pulumi.Context,
	name string, args *ColabNotebookExecutionArgs, opts ...pulumi.ResourceOption) (*ColabNotebookExecution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.GcsOutputUri == nil {
		return nil, errors.New("invalid value for required argument 'GcsOutputUri'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ColabNotebookExecution
	err = ctx.RegisterPackageResource("google:index/colabNotebookExecution:ColabNotebookExecution", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetColabNotebookExecution gets an existing ColabNotebookExecution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetColabNotebookExecution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ColabNotebookExecutionState, opts ...pulumi.ResourceOption) (*ColabNotebookExecution, error) {
	var resource ColabNotebookExecution
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/colabNotebookExecution:ColabNotebookExecution", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ColabNotebookExecution resources.
type colabNotebookExecutionState struct {
	ColabNotebookExecutionId *string `pulumi:"colabNotebookExecutionId"`
	// The Dataform Repository containing the input notebook.
	DataformRepositorySource *ColabNotebookExecutionDataformRepositorySource `pulumi:"dataformRepositorySource"`
	// The content of the input notebook in ipynb format.
	DirectNotebookSource *ColabNotebookExecutionDirectNotebookSource `pulumi:"directNotebookSource"`
	// Required. The display name of the Notebook Execution.
	DisplayName *string `pulumi:"displayName"`
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout *string `pulumi:"executionTimeout"`
	// The user email to run the execution as.
	ExecutionUser *string `pulumi:"executionUser"`
	// The Cloud Storage uri for the input notebook.
	GcsNotebookSource *ColabNotebookExecutionGcsNotebookSource `pulumi:"gcsNotebookSource"`
	// The Cloud Storage location to upload the result to. Format:'gs://bucket-name'
	GcsOutputUri *string `pulumi:"gcsOutputUri"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location *string `pulumi:"location"`
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId *string `pulumi:"notebookExecutionJobId"`
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName *string `pulumi:"notebookRuntimeTemplateResourceName"`
	Project                             *string `pulumi:"project"`
	// The service account to run the execution as.
	ServiceAccount *string                         `pulumi:"serviceAccount"`
	Timeouts       *ColabNotebookExecutionTimeouts `pulumi:"timeouts"`
}

type ColabNotebookExecutionState struct {
	ColabNotebookExecutionId pulumi.StringPtrInput
	// The Dataform Repository containing the input notebook.
	DataformRepositorySource ColabNotebookExecutionDataformRepositorySourcePtrInput
	// The content of the input notebook in ipynb format.
	DirectNotebookSource ColabNotebookExecutionDirectNotebookSourcePtrInput
	// Required. The display name of the Notebook Execution.
	DisplayName pulumi.StringPtrInput
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout pulumi.StringPtrInput
	// The user email to run the execution as.
	ExecutionUser pulumi.StringPtrInput
	// The Cloud Storage uri for the input notebook.
	GcsNotebookSource ColabNotebookExecutionGcsNotebookSourcePtrInput
	// The Cloud Storage location to upload the result to. Format:'gs://bucket-name'
	GcsOutputUri pulumi.StringPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringPtrInput
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId pulumi.StringPtrInput
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName pulumi.StringPtrInput
	Project                             pulumi.StringPtrInput
	// The service account to run the execution as.
	ServiceAccount pulumi.StringPtrInput
	Timeouts       ColabNotebookExecutionTimeoutsPtrInput
}

func (ColabNotebookExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*colabNotebookExecutionState)(nil)).Elem()
}

type colabNotebookExecutionArgs struct {
	ColabNotebookExecutionId *string `pulumi:"colabNotebookExecutionId"`
	// The Dataform Repository containing the input notebook.
	DataformRepositorySource *ColabNotebookExecutionDataformRepositorySource `pulumi:"dataformRepositorySource"`
	// The content of the input notebook in ipynb format.
	DirectNotebookSource *ColabNotebookExecutionDirectNotebookSource `pulumi:"directNotebookSource"`
	// Required. The display name of the Notebook Execution.
	DisplayName string `pulumi:"displayName"`
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout *string `pulumi:"executionTimeout"`
	// The user email to run the execution as.
	ExecutionUser *string `pulumi:"executionUser"`
	// The Cloud Storage uri for the input notebook.
	GcsNotebookSource *ColabNotebookExecutionGcsNotebookSource `pulumi:"gcsNotebookSource"`
	// The Cloud Storage location to upload the result to. Format:'gs://bucket-name'
	GcsOutputUri string `pulumi:"gcsOutputUri"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location string `pulumi:"location"`
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId *string `pulumi:"notebookExecutionJobId"`
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName *string `pulumi:"notebookRuntimeTemplateResourceName"`
	Project                             *string `pulumi:"project"`
	// The service account to run the execution as.
	ServiceAccount *string                         `pulumi:"serviceAccount"`
	Timeouts       *ColabNotebookExecutionTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ColabNotebookExecution resource.
type ColabNotebookExecutionArgs struct {
	ColabNotebookExecutionId pulumi.StringPtrInput
	// The Dataform Repository containing the input notebook.
	DataformRepositorySource ColabNotebookExecutionDataformRepositorySourcePtrInput
	// The content of the input notebook in ipynb format.
	DirectNotebookSource ColabNotebookExecutionDirectNotebookSourcePtrInput
	// Required. The display name of the Notebook Execution.
	DisplayName pulumi.StringInput
	// Max running time of the execution job in seconds (default 86400s / 24 hrs).
	ExecutionTimeout pulumi.StringPtrInput
	// The user email to run the execution as.
	ExecutionUser pulumi.StringPtrInput
	// The Cloud Storage uri for the input notebook.
	GcsNotebookSource ColabNotebookExecutionGcsNotebookSourcePtrInput
	// The Cloud Storage location to upload the result to. Format:'gs://bucket-name'
	GcsOutputUri pulumi.StringInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringInput
	// User specified ID for the Notebook Execution Job
	NotebookExecutionJobId pulumi.StringPtrInput
	// The NotebookRuntimeTemplate to source compute configuration from.
	NotebookRuntimeTemplateResourceName pulumi.StringPtrInput
	Project                             pulumi.StringPtrInput
	// The service account to run the execution as.
	ServiceAccount pulumi.StringPtrInput
	Timeouts       ColabNotebookExecutionTimeoutsPtrInput
}

func (ColabNotebookExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*colabNotebookExecutionArgs)(nil)).Elem()
}

type ColabNotebookExecutionInput interface {
	pulumi.Input

	ToColabNotebookExecutionOutput() ColabNotebookExecutionOutput
	ToColabNotebookExecutionOutputWithContext(ctx context.Context) ColabNotebookExecutionOutput
}

func (*ColabNotebookExecution) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabNotebookExecution)(nil)).Elem()
}

func (i *ColabNotebookExecution) ToColabNotebookExecutionOutput() ColabNotebookExecutionOutput {
	return i.ToColabNotebookExecutionOutputWithContext(context.Background())
}

func (i *ColabNotebookExecution) ToColabNotebookExecutionOutputWithContext(ctx context.Context) ColabNotebookExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColabNotebookExecutionOutput)
}

type ColabNotebookExecutionOutput struct{ *pulumi.OutputState }

func (ColabNotebookExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabNotebookExecution)(nil)).Elem()
}

func (o ColabNotebookExecutionOutput) ToColabNotebookExecutionOutput() ColabNotebookExecutionOutput {
	return o
}

func (o ColabNotebookExecutionOutput) ToColabNotebookExecutionOutputWithContext(ctx context.Context) ColabNotebookExecutionOutput {
	return o
}

func (o ColabNotebookExecutionOutput) ColabNotebookExecutionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringOutput { return v.ColabNotebookExecutionId }).(pulumi.StringOutput)
}

// The Dataform Repository containing the input notebook.
func (o ColabNotebookExecutionOutput) DataformRepositorySource() ColabNotebookExecutionDataformRepositorySourcePtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) ColabNotebookExecutionDataformRepositorySourcePtrOutput {
		return v.DataformRepositorySource
	}).(ColabNotebookExecutionDataformRepositorySourcePtrOutput)
}

// The content of the input notebook in ipynb format.
func (o ColabNotebookExecutionOutput) DirectNotebookSource() ColabNotebookExecutionDirectNotebookSourcePtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) ColabNotebookExecutionDirectNotebookSourcePtrOutput {
		return v.DirectNotebookSource
	}).(ColabNotebookExecutionDirectNotebookSourcePtrOutput)
}

// Required. The display name of the Notebook Execution.
func (o ColabNotebookExecutionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Max running time of the execution job in seconds (default 86400s / 24 hrs).
func (o ColabNotebookExecutionOutput) ExecutionTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringPtrOutput { return v.ExecutionTimeout }).(pulumi.StringPtrOutput)
}

// The user email to run the execution as.
func (o ColabNotebookExecutionOutput) ExecutionUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringPtrOutput { return v.ExecutionUser }).(pulumi.StringPtrOutput)
}

// The Cloud Storage uri for the input notebook.
func (o ColabNotebookExecutionOutput) GcsNotebookSource() ColabNotebookExecutionGcsNotebookSourcePtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) ColabNotebookExecutionGcsNotebookSourcePtrOutput {
		return v.GcsNotebookSource
	}).(ColabNotebookExecutionGcsNotebookSourcePtrOutput)
}

// The Cloud Storage location to upload the result to. Format:'gs://bucket-name'
func (o ColabNotebookExecutionOutput) GcsOutputUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringOutput { return v.GcsOutputUri }).(pulumi.StringOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
func (o ColabNotebookExecutionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// User specified ID for the Notebook Execution Job
func (o ColabNotebookExecutionOutput) NotebookExecutionJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringOutput { return v.NotebookExecutionJobId }).(pulumi.StringOutput)
}

// The NotebookRuntimeTemplate to source compute configuration from.
func (o ColabNotebookExecutionOutput) NotebookRuntimeTemplateResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringPtrOutput { return v.NotebookRuntimeTemplateResourceName }).(pulumi.StringPtrOutput)
}

func (o ColabNotebookExecutionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The service account to run the execution as.
func (o ColabNotebookExecutionOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

func (o ColabNotebookExecutionOutput) Timeouts() ColabNotebookExecutionTimeoutsPtrOutput {
	return o.ApplyT(func(v *ColabNotebookExecution) ColabNotebookExecutionTimeoutsPtrOutput { return v.Timeouts }).(ColabNotebookExecutionTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ColabNotebookExecutionInput)(nil)).Elem(), &ColabNotebookExecution{})
	pulumi.RegisterOutputType(ColabNotebookExecutionOutput{})
}
