// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupPubsubTopic(ctx *pulumi.Context, args *LookupPubsubTopicArgs, opts ...pulumi.InvokeOption) (*LookupPubsubTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupPubsubTopicResult
	err = ctx.InvokePackage("google:index/getPubsubTopic:getPubsubTopic", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPubsubTopic.
type LookupPubsubTopicArgs struct {
	Id      *string `pulumi:"id"`
	Name    string  `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// A collection of values returned by getPubsubTopic.
type LookupPubsubTopicResult struct {
	EffectiveLabels             map[string]string                          `pulumi:"effectiveLabels"`
	Id                          string                                     `pulumi:"id"`
	IngestionDataSourceSettings []GetPubsubTopicIngestionDataSourceSetting `pulumi:"ingestionDataSourceSettings"`
	KmsKeyName                  string                                     `pulumi:"kmsKeyName"`
	Labels                      map[string]string                          `pulumi:"labels"`
	MessageRetentionDuration    string                                     `pulumi:"messageRetentionDuration"`
	MessageStoragePolicies      []GetPubsubTopicMessageStoragePolicy       `pulumi:"messageStoragePolicies"`
	Name                        string                                     `pulumi:"name"`
	Project                     *string                                    `pulumi:"project"`
	SchemaSettings              []GetPubsubTopicSchemaSetting              `pulumi:"schemaSettings"`
	TerraformLabels             map[string]string                          `pulumi:"terraformLabels"`
}

func LookupPubsubTopicOutput(ctx *pulumi.Context, args LookupPubsubTopicOutputArgs, opts ...pulumi.InvokeOption) LookupPubsubTopicResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPubsubTopicResultOutput, error) {
			args := v.(LookupPubsubTopicArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupPubsubTopicResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google:index/getPubsubTopic:getPubsubTopic", args, LookupPubsubTopicResultOutput{}, options).(LookupPubsubTopicResultOutput), nil
		}).(LookupPubsubTopicResultOutput)
}

// A collection of arguments for invoking getPubsubTopic.
type LookupPubsubTopicOutputArgs struct {
	Id      pulumi.StringPtrInput `pulumi:"id"`
	Name    pulumi.StringInput    `pulumi:"name"`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupPubsubTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPubsubTopicArgs)(nil)).Elem()
}

// A collection of values returned by getPubsubTopic.
type LookupPubsubTopicResultOutput struct{ *pulumi.OutputState }

func (LookupPubsubTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPubsubTopicResult)(nil)).Elem()
}

func (o LookupPubsubTopicResultOutput) ToLookupPubsubTopicResultOutput() LookupPubsubTopicResultOutput {
	return o
}

func (o LookupPubsubTopicResultOutput) ToLookupPubsubTopicResultOutputWithContext(ctx context.Context) LookupPubsubTopicResultOutput {
	return o
}

func (o LookupPubsubTopicResultOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o LookupPubsubTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicResultOutput) IngestionDataSourceSettings() GetPubsubTopicIngestionDataSourceSettingArrayOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) []GetPubsubTopicIngestionDataSourceSetting {
		return v.IngestionDataSourceSettings
	}).(GetPubsubTopicIngestionDataSourceSettingArrayOutput)
}

func (o LookupPubsubTopicResultOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupPubsubTopicResultOutput) MessageRetentionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) string { return v.MessageRetentionDuration }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicResultOutput) MessageStoragePolicies() GetPubsubTopicMessageStoragePolicyArrayOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) []GetPubsubTopicMessageStoragePolicy { return v.MessageStoragePolicies }).(GetPubsubTopicMessageStoragePolicyArrayOutput)
}

func (o LookupPubsubTopicResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupPubsubTopicResultOutput) SchemaSettings() GetPubsubTopicSchemaSettingArrayOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) []GetPubsubTopicSchemaSetting { return v.SchemaSettings }).(GetPubsubTopicSchemaSettingArrayOutput)
}

func (o LookupPubsubTopicResultOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPubsubTopicResult) map[string]string { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPubsubTopicResultOutput{})
}
