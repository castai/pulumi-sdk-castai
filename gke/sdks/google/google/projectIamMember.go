// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectIamMember struct {
	pulumi.CustomResourceState

	Condition          ProjectIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag               pulumi.StringOutput                `pulumi:"etag"`
	Member             pulumi.StringOutput                `pulumi:"member"`
	Project            pulumi.StringOutput                `pulumi:"project"`
	ProjectIamMemberId pulumi.StringOutput                `pulumi:"projectIamMemberId"`
	Role               pulumi.StringOutput                `pulumi:"role"`
}

// NewProjectIamMember registers a new resource with the given unique name, arguments, and options.
func NewProjectIamMember(ctx *pulumi.Context,
	name string, args *ProjectIamMemberArgs, opts ...pulumi.ResourceOption) (*ProjectIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectIamMember
	err = ctx.RegisterPackageResource("google:index/projectIamMember:ProjectIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIamMember gets an existing ProjectIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIamMemberState, opts ...pulumi.ResourceOption) (*ProjectIamMember, error) {
	var resource ProjectIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/projectIamMember:ProjectIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIamMember resources.
type projectIamMemberState struct {
	Condition          *ProjectIamMemberCondition `pulumi:"condition"`
	Etag               *string                    `pulumi:"etag"`
	Member             *string                    `pulumi:"member"`
	Project            *string                    `pulumi:"project"`
	ProjectIamMemberId *string                    `pulumi:"projectIamMemberId"`
	Role               *string                    `pulumi:"role"`
}

type ProjectIamMemberState struct {
	Condition          ProjectIamMemberConditionPtrInput
	Etag               pulumi.StringPtrInput
	Member             pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
	ProjectIamMemberId pulumi.StringPtrInput
	Role               pulumi.StringPtrInput
}

func (ProjectIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamMemberState)(nil)).Elem()
}

type projectIamMemberArgs struct {
	Condition          *ProjectIamMemberCondition `pulumi:"condition"`
	Member             string                     `pulumi:"member"`
	Project            string                     `pulumi:"project"`
	ProjectIamMemberId *string                    `pulumi:"projectIamMemberId"`
	Role               string                     `pulumi:"role"`
}

// The set of arguments for constructing a ProjectIamMember resource.
type ProjectIamMemberArgs struct {
	Condition          ProjectIamMemberConditionPtrInput
	Member             pulumi.StringInput
	Project            pulumi.StringInput
	ProjectIamMemberId pulumi.StringPtrInput
	Role               pulumi.StringInput
}

func (ProjectIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamMemberArgs)(nil)).Elem()
}

type ProjectIamMemberInput interface {
	pulumi.Input

	ToProjectIamMemberOutput() ProjectIamMemberOutput
	ToProjectIamMemberOutputWithContext(ctx context.Context) ProjectIamMemberOutput
}

func (*ProjectIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamMember)(nil)).Elem()
}

func (i *ProjectIamMember) ToProjectIamMemberOutput() ProjectIamMemberOutput {
	return i.ToProjectIamMemberOutputWithContext(context.Background())
}

func (i *ProjectIamMember) ToProjectIamMemberOutputWithContext(ctx context.Context) ProjectIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIamMemberOutput)
}

type ProjectIamMemberOutput struct{ *pulumi.OutputState }

func (ProjectIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamMember)(nil)).Elem()
}

func (o ProjectIamMemberOutput) ToProjectIamMemberOutput() ProjectIamMemberOutput {
	return o
}

func (o ProjectIamMemberOutput) ToProjectIamMemberOutputWithContext(ctx context.Context) ProjectIamMemberOutput {
	return o
}

func (o ProjectIamMemberOutput) Condition() ProjectIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ProjectIamMember) ProjectIamMemberConditionPtrOutput { return v.Condition }).(ProjectIamMemberConditionPtrOutput)
}

func (o ProjectIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ProjectIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ProjectIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectIamMemberOutput) ProjectIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamMember) pulumi.StringOutput { return v.ProjectIamMemberId }).(pulumi.StringOutput)
}

func (o ProjectIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIamMemberInput)(nil)).Elem(), &ProjectIamMember{})
	pulumi.RegisterOutputType(ProjectIamMemberOutput{})
}
