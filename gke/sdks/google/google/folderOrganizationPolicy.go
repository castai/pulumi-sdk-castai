// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FolderOrganizationPolicy struct {
	pulumi.CustomResourceState

	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy FolderOrganizationPolicyBooleanPolicyPtrOutput `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint pulumi.StringOutput `pulumi:"constraint"`
	// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
	// simultaneous updates of a policy from overwriting each other.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder                     pulumi.StringOutput `pulumi:"folder"`
	FolderOrganizationPolicyId pulumi.StringOutput `pulumi:"folderOrganizationPolicyId"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy FolderOrganizationPolicyListPolicyPtrOutput `pulumi:"listPolicy"`
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy FolderOrganizationPolicyRestorePolicyPtrOutput `pulumi:"restorePolicy"`
	Timeouts      FolderOrganizationPolicyTimeoutsPtrOutput      `pulumi:"timeouts"`
	// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
	// Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Version of the Policy. Default version is 0.
	Version pulumi.Float64Output `pulumi:"version"`
}

// NewFolderOrganizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewFolderOrganizationPolicy(ctx *pulumi.Context,
	name string, args *FolderOrganizationPolicyArgs, opts ...pulumi.ResourceOption) (*FolderOrganizationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Constraint == nil {
		return nil, errors.New("invalid value for required argument 'Constraint'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FolderOrganizationPolicy
	err = ctx.RegisterPackageResource("google:index/folderOrganizationPolicy:FolderOrganizationPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderOrganizationPolicy gets an existing FolderOrganizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderOrganizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderOrganizationPolicyState, opts ...pulumi.ResourceOption) (*FolderOrganizationPolicy, error) {
	var resource FolderOrganizationPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/folderOrganizationPolicy:FolderOrganizationPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderOrganizationPolicy resources.
type folderOrganizationPolicyState struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy *FolderOrganizationPolicyBooleanPolicy `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint *string `pulumi:"constraint"`
	// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
	// simultaneous updates of a policy from overwriting each other.
	Etag *string `pulumi:"etag"`
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder                     *string `pulumi:"folder"`
	FolderOrganizationPolicyId *string `pulumi:"folderOrganizationPolicyId"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy *FolderOrganizationPolicyListPolicy `pulumi:"listPolicy"`
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy *FolderOrganizationPolicyRestorePolicy `pulumi:"restorePolicy"`
	Timeouts      *FolderOrganizationPolicyTimeouts      `pulumi:"timeouts"`
	// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
	// Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime *string `pulumi:"updateTime"`
	// Version of the Policy. Default version is 0.
	Version *float64 `pulumi:"version"`
}

type FolderOrganizationPolicyState struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy FolderOrganizationPolicyBooleanPolicyPtrInput
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint pulumi.StringPtrInput
	// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
	// simultaneous updates of a policy from overwriting each other.
	Etag pulumi.StringPtrInput
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder                     pulumi.StringPtrInput
	FolderOrganizationPolicyId pulumi.StringPtrInput
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy FolderOrganizationPolicyListPolicyPtrInput
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy FolderOrganizationPolicyRestorePolicyPtrInput
	Timeouts      FolderOrganizationPolicyTimeoutsPtrInput
	// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
	// Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime pulumi.StringPtrInput
	// Version of the Policy. Default version is 0.
	Version pulumi.Float64PtrInput
}

func (FolderOrganizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderOrganizationPolicyState)(nil)).Elem()
}

type folderOrganizationPolicyArgs struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy *FolderOrganizationPolicyBooleanPolicy `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint string `pulumi:"constraint"`
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder                     string  `pulumi:"folder"`
	FolderOrganizationPolicyId *string `pulumi:"folderOrganizationPolicyId"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy *FolderOrganizationPolicyListPolicy `pulumi:"listPolicy"`
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy *FolderOrganizationPolicyRestorePolicy `pulumi:"restorePolicy"`
	Timeouts      *FolderOrganizationPolicyTimeouts      `pulumi:"timeouts"`
	// Version of the Policy. Default version is 0.
	Version *float64 `pulumi:"version"`
}

// The set of arguments for constructing a FolderOrganizationPolicy resource.
type FolderOrganizationPolicyArgs struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy FolderOrganizationPolicyBooleanPolicyPtrInput
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint pulumi.StringInput
	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	Folder                     pulumi.StringInput
	FolderOrganizationPolicyId pulumi.StringPtrInput
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy FolderOrganizationPolicyListPolicyPtrInput
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy FolderOrganizationPolicyRestorePolicyPtrInput
	Timeouts      FolderOrganizationPolicyTimeoutsPtrInput
	// Version of the Policy. Default version is 0.
	Version pulumi.Float64PtrInput
}

func (FolderOrganizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderOrganizationPolicyArgs)(nil)).Elem()
}

type FolderOrganizationPolicyInput interface {
	pulumi.Input

	ToFolderOrganizationPolicyOutput() FolderOrganizationPolicyOutput
	ToFolderOrganizationPolicyOutputWithContext(ctx context.Context) FolderOrganizationPolicyOutput
}

func (*FolderOrganizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderOrganizationPolicy)(nil)).Elem()
}

func (i *FolderOrganizationPolicy) ToFolderOrganizationPolicyOutput() FolderOrganizationPolicyOutput {
	return i.ToFolderOrganizationPolicyOutputWithContext(context.Background())
}

func (i *FolderOrganizationPolicy) ToFolderOrganizationPolicyOutputWithContext(ctx context.Context) FolderOrganizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderOrganizationPolicyOutput)
}

type FolderOrganizationPolicyOutput struct{ *pulumi.OutputState }

func (FolderOrganizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderOrganizationPolicy)(nil)).Elem()
}

func (o FolderOrganizationPolicyOutput) ToFolderOrganizationPolicyOutput() FolderOrganizationPolicyOutput {
	return o
}

func (o FolderOrganizationPolicyOutput) ToFolderOrganizationPolicyOutputWithContext(ctx context.Context) FolderOrganizationPolicyOutput {
	return o
}

// A boolean policy is a constraint that is either enforced or not.
func (o FolderOrganizationPolicyOutput) BooleanPolicy() FolderOrganizationPolicyBooleanPolicyPtrOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) FolderOrganizationPolicyBooleanPolicyPtrOutput {
		return v.BooleanPolicy
	}).(FolderOrganizationPolicyBooleanPolicyPtrOutput)
}

// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
func (o FolderOrganizationPolicyOutput) Constraint() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) pulumi.StringOutput { return v.Constraint }).(pulumi.StringOutput)
}

// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
// simultaneous updates of a policy from overwriting each other.
func (o FolderOrganizationPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
func (o FolderOrganizationPolicyOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

func (o FolderOrganizationPolicyOutput) FolderOrganizationPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) pulumi.StringOutput { return v.FolderOrganizationPolicyId }).(pulumi.StringOutput)
}

// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
// allow or deny all values.
func (o FolderOrganizationPolicyOutput) ListPolicy() FolderOrganizationPolicyListPolicyPtrOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) FolderOrganizationPolicyListPolicyPtrOutput { return v.ListPolicy }).(FolderOrganizationPolicyListPolicyPtrOutput)
}

// A restore policy is a constraint to restore the default policy.
func (o FolderOrganizationPolicyOutput) RestorePolicy() FolderOrganizationPolicyRestorePolicyPtrOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) FolderOrganizationPolicyRestorePolicyPtrOutput {
		return v.RestorePolicy
	}).(FolderOrganizationPolicyRestorePolicyPtrOutput)
}

func (o FolderOrganizationPolicyOutput) Timeouts() FolderOrganizationPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) FolderOrganizationPolicyTimeoutsPtrOutput { return v.Timeouts }).(FolderOrganizationPolicyTimeoutsPtrOutput)
}

// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
// Example: "2016-10-09T12:33:37.578138407Z".
func (o FolderOrganizationPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderOrganizationPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Version of the Policy. Default version is 0.
func (o FolderOrganizationPolicyOutput) Version() pulumi.Float64Output {
	return o.ApplyT(func(v *FolderOrganizationPolicy) pulumi.Float64Output { return v.Version }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderOrganizationPolicyInput)(nil)).Elem(), &FolderOrganizationPolicy{})
	pulumi.RegisterOutputType(FolderOrganizationPolicyOutput{})
}
