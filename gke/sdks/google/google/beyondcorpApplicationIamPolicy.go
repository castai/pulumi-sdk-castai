// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BeyondcorpApplicationIamPolicy struct {
	pulumi.CustomResourceState

	ApplicationId                    pulumi.StringOutput `pulumi:"applicationId"`
	BeyondcorpApplicationIamPolicyId pulumi.StringOutput `pulumi:"beyondcorpApplicationIamPolicyId"`
	Etag                             pulumi.StringOutput `pulumi:"etag"`
	PolicyData                       pulumi.StringOutput `pulumi:"policyData"`
	Project                          pulumi.StringOutput `pulumi:"project"`
	SecurityGatewaysId               pulumi.StringOutput `pulumi:"securityGatewaysId"`
}

// NewBeyondcorpApplicationIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewBeyondcorpApplicationIamPolicy(ctx *pulumi.Context,
	name string, args *BeyondcorpApplicationIamPolicyArgs, opts ...pulumi.ResourceOption) (*BeyondcorpApplicationIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.SecurityGatewaysId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGatewaysId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BeyondcorpApplicationIamPolicy
	err = ctx.RegisterPackageResource("google:index/beyondcorpApplicationIamPolicy:BeyondcorpApplicationIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBeyondcorpApplicationIamPolicy gets an existing BeyondcorpApplicationIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBeyondcorpApplicationIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BeyondcorpApplicationIamPolicyState, opts ...pulumi.ResourceOption) (*BeyondcorpApplicationIamPolicy, error) {
	var resource BeyondcorpApplicationIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/beyondcorpApplicationIamPolicy:BeyondcorpApplicationIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BeyondcorpApplicationIamPolicy resources.
type beyondcorpApplicationIamPolicyState struct {
	ApplicationId                    *string `pulumi:"applicationId"`
	BeyondcorpApplicationIamPolicyId *string `pulumi:"beyondcorpApplicationIamPolicyId"`
	Etag                             *string `pulumi:"etag"`
	PolicyData                       *string `pulumi:"policyData"`
	Project                          *string `pulumi:"project"`
	SecurityGatewaysId               *string `pulumi:"securityGatewaysId"`
}

type BeyondcorpApplicationIamPolicyState struct {
	ApplicationId                    pulumi.StringPtrInput
	BeyondcorpApplicationIamPolicyId pulumi.StringPtrInput
	Etag                             pulumi.StringPtrInput
	PolicyData                       pulumi.StringPtrInput
	Project                          pulumi.StringPtrInput
	SecurityGatewaysId               pulumi.StringPtrInput
}

func (BeyondcorpApplicationIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*beyondcorpApplicationIamPolicyState)(nil)).Elem()
}

type beyondcorpApplicationIamPolicyArgs struct {
	ApplicationId                    string  `pulumi:"applicationId"`
	BeyondcorpApplicationIamPolicyId *string `pulumi:"beyondcorpApplicationIamPolicyId"`
	PolicyData                       string  `pulumi:"policyData"`
	Project                          *string `pulumi:"project"`
	SecurityGatewaysId               string  `pulumi:"securityGatewaysId"`
}

// The set of arguments for constructing a BeyondcorpApplicationIamPolicy resource.
type BeyondcorpApplicationIamPolicyArgs struct {
	ApplicationId                    pulumi.StringInput
	BeyondcorpApplicationIamPolicyId pulumi.StringPtrInput
	PolicyData                       pulumi.StringInput
	Project                          pulumi.StringPtrInput
	SecurityGatewaysId               pulumi.StringInput
}

func (BeyondcorpApplicationIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*beyondcorpApplicationIamPolicyArgs)(nil)).Elem()
}

type BeyondcorpApplicationIamPolicyInput interface {
	pulumi.Input

	ToBeyondcorpApplicationIamPolicyOutput() BeyondcorpApplicationIamPolicyOutput
	ToBeyondcorpApplicationIamPolicyOutputWithContext(ctx context.Context) BeyondcorpApplicationIamPolicyOutput
}

func (*BeyondcorpApplicationIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BeyondcorpApplicationIamPolicy)(nil)).Elem()
}

func (i *BeyondcorpApplicationIamPolicy) ToBeyondcorpApplicationIamPolicyOutput() BeyondcorpApplicationIamPolicyOutput {
	return i.ToBeyondcorpApplicationIamPolicyOutputWithContext(context.Background())
}

func (i *BeyondcorpApplicationIamPolicy) ToBeyondcorpApplicationIamPolicyOutputWithContext(ctx context.Context) BeyondcorpApplicationIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeyondcorpApplicationIamPolicyOutput)
}

type BeyondcorpApplicationIamPolicyOutput struct{ *pulumi.OutputState }

func (BeyondcorpApplicationIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeyondcorpApplicationIamPolicy)(nil)).Elem()
}

func (o BeyondcorpApplicationIamPolicyOutput) ToBeyondcorpApplicationIamPolicyOutput() BeyondcorpApplicationIamPolicyOutput {
	return o
}

func (o BeyondcorpApplicationIamPolicyOutput) ToBeyondcorpApplicationIamPolicyOutputWithContext(ctx context.Context) BeyondcorpApplicationIamPolicyOutput {
	return o
}

func (o BeyondcorpApplicationIamPolicyOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BeyondcorpApplicationIamPolicy) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o BeyondcorpApplicationIamPolicyOutput) BeyondcorpApplicationIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BeyondcorpApplicationIamPolicy) pulumi.StringOutput { return v.BeyondcorpApplicationIamPolicyId }).(pulumi.StringOutput)
}

func (o BeyondcorpApplicationIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BeyondcorpApplicationIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BeyondcorpApplicationIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *BeyondcorpApplicationIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o BeyondcorpApplicationIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BeyondcorpApplicationIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o BeyondcorpApplicationIamPolicyOutput) SecurityGatewaysId() pulumi.StringOutput {
	return o.ApplyT(func(v *BeyondcorpApplicationIamPolicy) pulumi.StringOutput { return v.SecurityGatewaysId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BeyondcorpApplicationIamPolicyInput)(nil)).Elem(), &BeyondcorpApplicationIamPolicy{})
	pulumi.RegisterOutputType(BeyondcorpApplicationIamPolicyOutput{})
}
