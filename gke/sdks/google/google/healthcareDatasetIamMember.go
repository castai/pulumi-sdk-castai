// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HealthcareDatasetIamMember struct {
	pulumi.CustomResourceState

	Condition                    HealthcareDatasetIamMemberConditionPtrOutput `pulumi:"condition"`
	DatasetId                    pulumi.StringOutput                          `pulumi:"datasetId"`
	Etag                         pulumi.StringOutput                          `pulumi:"etag"`
	HealthcareDatasetIamMemberId pulumi.StringOutput                          `pulumi:"healthcareDatasetIamMemberId"`
	Member                       pulumi.StringOutput                          `pulumi:"member"`
	Role                         pulumi.StringOutput                          `pulumi:"role"`
}

// NewHealthcareDatasetIamMember registers a new resource with the given unique name, arguments, and options.
func NewHealthcareDatasetIamMember(ctx *pulumi.Context,
	name string, args *HealthcareDatasetIamMemberArgs, opts ...pulumi.ResourceOption) (*HealthcareDatasetIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HealthcareDatasetIamMember
	err = ctx.RegisterPackageResource("google:index/healthcareDatasetIamMember:HealthcareDatasetIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcareDatasetIamMember gets an existing HealthcareDatasetIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcareDatasetIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcareDatasetIamMemberState, opts ...pulumi.ResourceOption) (*HealthcareDatasetIamMember, error) {
	var resource HealthcareDatasetIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/healthcareDatasetIamMember:HealthcareDatasetIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthcareDatasetIamMember resources.
type healthcareDatasetIamMemberState struct {
	Condition                    *HealthcareDatasetIamMemberCondition `pulumi:"condition"`
	DatasetId                    *string                              `pulumi:"datasetId"`
	Etag                         *string                              `pulumi:"etag"`
	HealthcareDatasetIamMemberId *string                              `pulumi:"healthcareDatasetIamMemberId"`
	Member                       *string                              `pulumi:"member"`
	Role                         *string                              `pulumi:"role"`
}

type HealthcareDatasetIamMemberState struct {
	Condition                    HealthcareDatasetIamMemberConditionPtrInput
	DatasetId                    pulumi.StringPtrInput
	Etag                         pulumi.StringPtrInput
	HealthcareDatasetIamMemberId pulumi.StringPtrInput
	Member                       pulumi.StringPtrInput
	Role                         pulumi.StringPtrInput
}

func (HealthcareDatasetIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareDatasetIamMemberState)(nil)).Elem()
}

type healthcareDatasetIamMemberArgs struct {
	Condition                    *HealthcareDatasetIamMemberCondition `pulumi:"condition"`
	DatasetId                    string                               `pulumi:"datasetId"`
	HealthcareDatasetIamMemberId *string                              `pulumi:"healthcareDatasetIamMemberId"`
	Member                       string                               `pulumi:"member"`
	Role                         string                               `pulumi:"role"`
}

// The set of arguments for constructing a HealthcareDatasetIamMember resource.
type HealthcareDatasetIamMemberArgs struct {
	Condition                    HealthcareDatasetIamMemberConditionPtrInput
	DatasetId                    pulumi.StringInput
	HealthcareDatasetIamMemberId pulumi.StringPtrInput
	Member                       pulumi.StringInput
	Role                         pulumi.StringInput
}

func (HealthcareDatasetIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareDatasetIamMemberArgs)(nil)).Elem()
}

type HealthcareDatasetIamMemberInput interface {
	pulumi.Input

	ToHealthcareDatasetIamMemberOutput() HealthcareDatasetIamMemberOutput
	ToHealthcareDatasetIamMemberOutputWithContext(ctx context.Context) HealthcareDatasetIamMemberOutput
}

func (*HealthcareDatasetIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareDatasetIamMember)(nil)).Elem()
}

func (i *HealthcareDatasetIamMember) ToHealthcareDatasetIamMemberOutput() HealthcareDatasetIamMemberOutput {
	return i.ToHealthcareDatasetIamMemberOutputWithContext(context.Background())
}

func (i *HealthcareDatasetIamMember) ToHealthcareDatasetIamMemberOutputWithContext(ctx context.Context) HealthcareDatasetIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcareDatasetIamMemberOutput)
}

type HealthcareDatasetIamMemberOutput struct{ *pulumi.OutputState }

func (HealthcareDatasetIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareDatasetIamMember)(nil)).Elem()
}

func (o HealthcareDatasetIamMemberOutput) ToHealthcareDatasetIamMemberOutput() HealthcareDatasetIamMemberOutput {
	return o
}

func (o HealthcareDatasetIamMemberOutput) ToHealthcareDatasetIamMemberOutputWithContext(ctx context.Context) HealthcareDatasetIamMemberOutput {
	return o
}

func (o HealthcareDatasetIamMemberOutput) Condition() HealthcareDatasetIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamMember) HealthcareDatasetIamMemberConditionPtrOutput { return v.Condition }).(HealthcareDatasetIamMemberConditionPtrOutput)
}

func (o HealthcareDatasetIamMemberOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamMember) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamMemberOutput) HealthcareDatasetIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamMember) pulumi.StringOutput { return v.HealthcareDatasetIamMemberId }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcareDatasetIamMemberInput)(nil)).Elem(), &HealthcareDatasetIamMember{})
	pulumi.RegisterOutputType(HealthcareDatasetIamMemberOutput{})
}
