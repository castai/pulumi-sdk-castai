// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HealthcareFhirStore struct {
	pulumi.CustomResourceState

	// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then
	// features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been
	// specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New
	// stores will have this value set to ENABLED by default after a notification period. Warning: turning on this flag causes
	// processing existing resources to fail if they contain references to non-existent resources. Possible values:
	// ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]
	ComplexDataTypeReferenceParsing pulumi.StringOutput `pulumi:"complexDataTypeReferenceParsing"`
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// If true, overrides the default search behavior for this FHIR store to handling=strict which returns an error for
	// unrecognized search parameters. If false, uses the FHIR specification default handling=lenient which ignores
	// unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting
	// the HTTP header Prefer: handling=strict or Prefer: handling=lenient.
	DefaultSearchHandlingStrict pulumi.BoolPtrOutput `pulumi:"defaultSearchHandlingStrict"`
	// Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The
	// default value is false, meaning that the API will enforce referential integrity and fail the requests that will result
	// in inconsistent state in the FHIR store. When this field is set to true, the API will skip referential integrity check.
	// Consequently, operations that rely on references, such as Patient.get$everything, will not return all the results if
	// broken references exist. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableReferentialIntegrity pulumi.BoolPtrOutput `pulumi:"disableReferentialIntegrity"`
	// Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR
	// store. If set to false, which is the default behavior, all write operations will cause historical versions to be
	// recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set
	// to true, no historical versions will be kept. The server will send back errors for attempts to read the historical
	// versions. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableResourceVersioning pulumi.BoolPtrOutput   `pulumi:"disableResourceVersioning"`
	EffectiveLabels           pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Whether to allow the bulk import API to accept history bundles and directly insert historical resource versions into the
	// FHIR store. Importing resource histories creates resource interactions that appear to have occurred in the past, which
	// clients may not want to allow. If set to false, history bundles within an import will fail with an error. ** Changing
	// this property may recreate the FHIR store (removing all data) ** ** This property can be changed manually in the Google
	// Cloud Healthcare admin console without recreating the FHIR store **
	EnableHistoryImport pulumi.BoolPtrOutput `pulumi:"enableHistoryImport"`
	// Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update operation to
	// create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and
	// attempts to Update a non-existent resource will return errors. Please treat the audit logs with appropriate levels of
	// care if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs will be part of the
	// FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications.
	EnableUpdateCreate    pulumi.BoolPtrOutput `pulumi:"enableUpdateCreate"`
	HealthcareFhirStoreId pulumi.StringOutput  `pulumi:"healthcareFhirStoreId"`
	// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
	// "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for the FhirStore. ** Changing this property may recreate the FHIR store (removing all data) **
	Name pulumi.StringOutput `pulumi:"name"`
	// A nested object resource.
	//
	// Deprecated: Deprecated
	NotificationConfig HealthcareFhirStoreNotificationConfigPtrOutput `pulumi:"notificationConfig"`
	// A list of notifcation configs that configure the notification for every resource mutation in this FHIR store.
	NotificationConfigs HealthcareFhirStoreNotificationConfigArrayOutput `pulumi:"notificationConfigs"`
	// The fully qualified name of this dataset
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR
	// store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation
	// is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server
	// stops streaming to that location. Before adding a new config, you must add the required bigquery.dataEditor role to your
	// project's Cloud Healthcare Service Agent service account. Some lag (typically on the order of dozens of seconds) is
	// expected before the results show up in the streaming destination.
	StreamConfigs HealthcareFhirStoreStreamConfigArrayOutput `pulumi:"streamConfigs"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput               `pulumi:"terraformLabels"`
	Timeouts        HealthcareFhirStoreTimeoutsPtrOutput `pulumi:"timeouts"`
	// The FHIR specification version. Possible values: ["DSTU2", "STU3", "R4"]
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewHealthcareFhirStore registers a new resource with the given unique name, arguments, and options.
func NewHealthcareFhirStore(ctx *pulumi.Context,
	name string, args *HealthcareFhirStoreArgs, opts ...pulumi.ResourceOption) (*HealthcareFhirStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HealthcareFhirStore
	err = ctx.RegisterPackageResource("google:index/healthcareFhirStore:HealthcareFhirStore", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcareFhirStore gets an existing HealthcareFhirStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcareFhirStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcareFhirStoreState, opts ...pulumi.ResourceOption) (*HealthcareFhirStore, error) {
	var resource HealthcareFhirStore
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/healthcareFhirStore:HealthcareFhirStore", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthcareFhirStore resources.
type healthcareFhirStoreState struct {
	// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then
	// features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been
	// specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New
	// stores will have this value set to ENABLED by default after a notification period. Warning: turning on this flag causes
	// processing existing resources to fail if they contain references to non-existent resources. Possible values:
	// ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]
	ComplexDataTypeReferenceParsing *string `pulumi:"complexDataTypeReferenceParsing"`
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset *string `pulumi:"dataset"`
	// If true, overrides the default search behavior for this FHIR store to handling=strict which returns an error for
	// unrecognized search parameters. If false, uses the FHIR specification default handling=lenient which ignores
	// unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting
	// the HTTP header Prefer: handling=strict or Prefer: handling=lenient.
	DefaultSearchHandlingStrict *bool `pulumi:"defaultSearchHandlingStrict"`
	// Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The
	// default value is false, meaning that the API will enforce referential integrity and fail the requests that will result
	// in inconsistent state in the FHIR store. When this field is set to true, the API will skip referential integrity check.
	// Consequently, operations that rely on references, such as Patient.get$everything, will not return all the results if
	// broken references exist. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableReferentialIntegrity *bool `pulumi:"disableReferentialIntegrity"`
	// Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR
	// store. If set to false, which is the default behavior, all write operations will cause historical versions to be
	// recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set
	// to true, no historical versions will be kept. The server will send back errors for attempts to read the historical
	// versions. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableResourceVersioning *bool             `pulumi:"disableResourceVersioning"`
	EffectiveLabels           map[string]string `pulumi:"effectiveLabels"`
	// Whether to allow the bulk import API to accept history bundles and directly insert historical resource versions into the
	// FHIR store. Importing resource histories creates resource interactions that appear to have occurred in the past, which
	// clients may not want to allow. If set to false, history bundles within an import will fail with an error. ** Changing
	// this property may recreate the FHIR store (removing all data) ** ** This property can be changed manually in the Google
	// Cloud Healthcare admin console without recreating the FHIR store **
	EnableHistoryImport *bool `pulumi:"enableHistoryImport"`
	// Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update operation to
	// create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and
	// attempts to Update a non-existent resource will return errors. Please treat the audit logs with appropriate levels of
	// care if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs will be part of the
	// FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications.
	EnableUpdateCreate    *bool   `pulumi:"enableUpdateCreate"`
	HealthcareFhirStoreId *string `pulumi:"healthcareFhirStoreId"`
	// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
	// "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the FhirStore. ** Changing this property may recreate the FHIR store (removing all data) **
	Name *string `pulumi:"name"`
	// A nested object resource.
	//
	// Deprecated: Deprecated
	NotificationConfig *HealthcareFhirStoreNotificationConfig `pulumi:"notificationConfig"`
	// A list of notifcation configs that configure the notification for every resource mutation in this FHIR store.
	NotificationConfigs []HealthcareFhirStoreNotificationConfig `pulumi:"notificationConfigs"`
	// The fully qualified name of this dataset
	SelfLink *string `pulumi:"selfLink"`
	// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR
	// store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation
	// is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server
	// stops streaming to that location. Before adding a new config, you must add the required bigquery.dataEditor role to your
	// project's Cloud Healthcare Service Agent service account. Some lag (typically on the order of dozens of seconds) is
	// expected before the results show up in the streaming destination.
	StreamConfigs []HealthcareFhirStoreStreamConfig `pulumi:"streamConfigs"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string            `pulumi:"terraformLabels"`
	Timeouts        *HealthcareFhirStoreTimeouts `pulumi:"timeouts"`
	// The FHIR specification version. Possible values: ["DSTU2", "STU3", "R4"]
	Version *string `pulumi:"version"`
}

type HealthcareFhirStoreState struct {
	// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then
	// features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been
	// specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New
	// stores will have this value set to ENABLED by default after a notification period. Warning: turning on this flag causes
	// processing existing resources to fail if they contain references to non-existent resources. Possible values:
	// ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]
	ComplexDataTypeReferenceParsing pulumi.StringPtrInput
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset pulumi.StringPtrInput
	// If true, overrides the default search behavior for this FHIR store to handling=strict which returns an error for
	// unrecognized search parameters. If false, uses the FHIR specification default handling=lenient which ignores
	// unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting
	// the HTTP header Prefer: handling=strict or Prefer: handling=lenient.
	DefaultSearchHandlingStrict pulumi.BoolPtrInput
	// Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The
	// default value is false, meaning that the API will enforce referential integrity and fail the requests that will result
	// in inconsistent state in the FHIR store. When this field is set to true, the API will skip referential integrity check.
	// Consequently, operations that rely on references, such as Patient.get$everything, will not return all the results if
	// broken references exist. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableReferentialIntegrity pulumi.BoolPtrInput
	// Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR
	// store. If set to false, which is the default behavior, all write operations will cause historical versions to be
	// recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set
	// to true, no historical versions will be kept. The server will send back errors for attempts to read the historical
	// versions. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableResourceVersioning pulumi.BoolPtrInput
	EffectiveLabels           pulumi.StringMapInput
	// Whether to allow the bulk import API to accept history bundles and directly insert historical resource versions into the
	// FHIR store. Importing resource histories creates resource interactions that appear to have occurred in the past, which
	// clients may not want to allow. If set to false, history bundles within an import will fail with an error. ** Changing
	// this property may recreate the FHIR store (removing all data) ** ** This property can be changed manually in the Google
	// Cloud Healthcare admin console without recreating the FHIR store **
	EnableHistoryImport pulumi.BoolPtrInput
	// Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update operation to
	// create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and
	// attempts to Update a non-existent resource will return errors. Please treat the audit logs with appropriate levels of
	// care if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs will be part of the
	// FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications.
	EnableUpdateCreate    pulumi.BoolPtrInput
	HealthcareFhirStoreId pulumi.StringPtrInput
	// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
	// "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the FhirStore. ** Changing this property may recreate the FHIR store (removing all data) **
	Name pulumi.StringPtrInput
	// A nested object resource.
	//
	// Deprecated: Deprecated
	NotificationConfig HealthcareFhirStoreNotificationConfigPtrInput
	// A list of notifcation configs that configure the notification for every resource mutation in this FHIR store.
	NotificationConfigs HealthcareFhirStoreNotificationConfigArrayInput
	// The fully qualified name of this dataset
	SelfLink pulumi.StringPtrInput
	// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR
	// store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation
	// is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server
	// stops streaming to that location. Before adding a new config, you must add the required bigquery.dataEditor role to your
	// project's Cloud Healthcare Service Agent service account. Some lag (typically on the order of dozens of seconds) is
	// expected before the results show up in the streaming destination.
	StreamConfigs HealthcareFhirStoreStreamConfigArrayInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        HealthcareFhirStoreTimeoutsPtrInput
	// The FHIR specification version. Possible values: ["DSTU2", "STU3", "R4"]
	Version pulumi.StringPtrInput
}

func (HealthcareFhirStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareFhirStoreState)(nil)).Elem()
}

type healthcareFhirStoreArgs struct {
	// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then
	// features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been
	// specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New
	// stores will have this value set to ENABLED by default after a notification period. Warning: turning on this flag causes
	// processing existing resources to fail if they contain references to non-existent resources. Possible values:
	// ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]
	ComplexDataTypeReferenceParsing *string `pulumi:"complexDataTypeReferenceParsing"`
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset string `pulumi:"dataset"`
	// If true, overrides the default search behavior for this FHIR store to handling=strict which returns an error for
	// unrecognized search parameters. If false, uses the FHIR specification default handling=lenient which ignores
	// unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting
	// the HTTP header Prefer: handling=strict or Prefer: handling=lenient.
	DefaultSearchHandlingStrict *bool `pulumi:"defaultSearchHandlingStrict"`
	// Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The
	// default value is false, meaning that the API will enforce referential integrity and fail the requests that will result
	// in inconsistent state in the FHIR store. When this field is set to true, the API will skip referential integrity check.
	// Consequently, operations that rely on references, such as Patient.get$everything, will not return all the results if
	// broken references exist. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableReferentialIntegrity *bool `pulumi:"disableReferentialIntegrity"`
	// Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR
	// store. If set to false, which is the default behavior, all write operations will cause historical versions to be
	// recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set
	// to true, no historical versions will be kept. The server will send back errors for attempts to read the historical
	// versions. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableResourceVersioning *bool `pulumi:"disableResourceVersioning"`
	// Whether to allow the bulk import API to accept history bundles and directly insert historical resource versions into the
	// FHIR store. Importing resource histories creates resource interactions that appear to have occurred in the past, which
	// clients may not want to allow. If set to false, history bundles within an import will fail with an error. ** Changing
	// this property may recreate the FHIR store (removing all data) ** ** This property can be changed manually in the Google
	// Cloud Healthcare admin console without recreating the FHIR store **
	EnableHistoryImport *bool `pulumi:"enableHistoryImport"`
	// Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update operation to
	// create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and
	// attempts to Update a non-existent resource will return errors. Please treat the audit logs with appropriate levels of
	// care if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs will be part of the
	// FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications.
	EnableUpdateCreate    *bool   `pulumi:"enableUpdateCreate"`
	HealthcareFhirStoreId *string `pulumi:"healthcareFhirStoreId"`
	// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
	// "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the FhirStore. ** Changing this property may recreate the FHIR store (removing all data) **
	Name *string `pulumi:"name"`
	// A nested object resource.
	//
	// Deprecated: Deprecated
	NotificationConfig *HealthcareFhirStoreNotificationConfig `pulumi:"notificationConfig"`
	// A list of notifcation configs that configure the notification for every resource mutation in this FHIR store.
	NotificationConfigs []HealthcareFhirStoreNotificationConfig `pulumi:"notificationConfigs"`
	// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR
	// store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation
	// is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server
	// stops streaming to that location. Before adding a new config, you must add the required bigquery.dataEditor role to your
	// project's Cloud Healthcare Service Agent service account. Some lag (typically on the order of dozens of seconds) is
	// expected before the results show up in the streaming destination.
	StreamConfigs []HealthcareFhirStoreStreamConfig `pulumi:"streamConfigs"`
	Timeouts      *HealthcareFhirStoreTimeouts      `pulumi:"timeouts"`
	// The FHIR specification version. Possible values: ["DSTU2", "STU3", "R4"]
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a HealthcareFhirStore resource.
type HealthcareFhirStoreArgs struct {
	// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then
	// features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been
	// specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New
	// stores will have this value set to ENABLED by default after a notification period. Warning: turning on this flag causes
	// processing existing resources to fail if they contain references to non-existent resources. Possible values:
	// ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]
	ComplexDataTypeReferenceParsing pulumi.StringPtrInput
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset pulumi.StringInput
	// If true, overrides the default search behavior for this FHIR store to handling=strict which returns an error for
	// unrecognized search parameters. If false, uses the FHIR specification default handling=lenient which ignores
	// unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting
	// the HTTP header Prefer: handling=strict or Prefer: handling=lenient.
	DefaultSearchHandlingStrict pulumi.BoolPtrInput
	// Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The
	// default value is false, meaning that the API will enforce referential integrity and fail the requests that will result
	// in inconsistent state in the FHIR store. When this field is set to true, the API will skip referential integrity check.
	// Consequently, operations that rely on references, such as Patient.get$everything, will not return all the results if
	// broken references exist. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableReferentialIntegrity pulumi.BoolPtrInput
	// Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR
	// store. If set to false, which is the default behavior, all write operations will cause historical versions to be
	// recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set
	// to true, no historical versions will be kept. The server will send back errors for attempts to read the historical
	// versions. ** Changing this property may recreate the FHIR store (removing all data) **
	DisableResourceVersioning pulumi.BoolPtrInput
	// Whether to allow the bulk import API to accept history bundles and directly insert historical resource versions into the
	// FHIR store. Importing resource histories creates resource interactions that appear to have occurred in the past, which
	// clients may not want to allow. If set to false, history bundles within an import will fail with an error. ** Changing
	// this property may recreate the FHIR store (removing all data) ** ** This property can be changed manually in the Google
	// Cloud Healthcare admin console without recreating the FHIR store **
	EnableHistoryImport pulumi.BoolPtrInput
	// Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update operation to
	// create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and
	// attempts to Update a non-existent resource will return errors. Please treat the audit logs with appropriate levels of
	// care if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs will be part of the
	// FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications.
	EnableUpdateCreate    pulumi.BoolPtrInput
	HealthcareFhirStoreId pulumi.StringPtrInput
	// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
	// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
	// [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
	// "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the FhirStore. ** Changing this property may recreate the FHIR store (removing all data) **
	Name pulumi.StringPtrInput
	// A nested object resource.
	//
	// Deprecated: Deprecated
	NotificationConfig HealthcareFhirStoreNotificationConfigPtrInput
	// A list of notifcation configs that configure the notification for every resource mutation in this FHIR store.
	NotificationConfigs HealthcareFhirStoreNotificationConfigArrayInput
	// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR
	// store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation
	// is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server
	// stops streaming to that location. Before adding a new config, you must add the required bigquery.dataEditor role to your
	// project's Cloud Healthcare Service Agent service account. Some lag (typically on the order of dozens of seconds) is
	// expected before the results show up in the streaming destination.
	StreamConfigs HealthcareFhirStoreStreamConfigArrayInput
	Timeouts      HealthcareFhirStoreTimeoutsPtrInput
	// The FHIR specification version. Possible values: ["DSTU2", "STU3", "R4"]
	Version pulumi.StringInput
}

func (HealthcareFhirStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareFhirStoreArgs)(nil)).Elem()
}

type HealthcareFhirStoreInput interface {
	pulumi.Input

	ToHealthcareFhirStoreOutput() HealthcareFhirStoreOutput
	ToHealthcareFhirStoreOutputWithContext(ctx context.Context) HealthcareFhirStoreOutput
}

func (*HealthcareFhirStore) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareFhirStore)(nil)).Elem()
}

func (i *HealthcareFhirStore) ToHealthcareFhirStoreOutput() HealthcareFhirStoreOutput {
	return i.ToHealthcareFhirStoreOutputWithContext(context.Background())
}

func (i *HealthcareFhirStore) ToHealthcareFhirStoreOutputWithContext(ctx context.Context) HealthcareFhirStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcareFhirStoreOutput)
}

type HealthcareFhirStoreOutput struct{ *pulumi.OutputState }

func (HealthcareFhirStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareFhirStore)(nil)).Elem()
}

func (o HealthcareFhirStoreOutput) ToHealthcareFhirStoreOutput() HealthcareFhirStoreOutput {
	return o
}

func (o HealthcareFhirStoreOutput) ToHealthcareFhirStoreOutputWithContext(ctx context.Context) HealthcareFhirStoreOutput {
	return o
}

// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then
// features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been
// specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New
// stores will have this value set to ENABLED by default after a notification period. Warning: turning on this flag causes
// processing existing resources to fail if they contain references to non-existent resources. Possible values:
// ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]
func (o HealthcareFhirStoreOutput) ComplexDataTypeReferenceParsing() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringOutput { return v.ComplexDataTypeReferenceParsing }).(pulumi.StringOutput)
}

// Identifies the dataset addressed by this request. Must be in the format
// 'projects/{project}/locations/{location}/datasets/{dataset}'
func (o HealthcareFhirStoreOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// If true, overrides the default search behavior for this FHIR store to handling=strict which returns an error for
// unrecognized search parameters. If false, uses the FHIR specification default handling=lenient which ignores
// unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting
// the HTTP header Prefer: handling=strict or Prefer: handling=lenient.
func (o HealthcareFhirStoreOutput) DefaultSearchHandlingStrict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.BoolPtrOutput { return v.DefaultSearchHandlingStrict }).(pulumi.BoolPtrOutput)
}

// Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The
// default value is false, meaning that the API will enforce referential integrity and fail the requests that will result
// in inconsistent state in the FHIR store. When this field is set to true, the API will skip referential integrity check.
// Consequently, operations that rely on references, such as Patient.get$everything, will not return all the results if
// broken references exist. ** Changing this property may recreate the FHIR store (removing all data) **
func (o HealthcareFhirStoreOutput) DisableReferentialIntegrity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.BoolPtrOutput { return v.DisableReferentialIntegrity }).(pulumi.BoolPtrOutput)
}

// Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR
// store. If set to false, which is the default behavior, all write operations will cause historical versions to be
// recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set
// to true, no historical versions will be kept. The server will send back errors for attempts to read the historical
// versions. ** Changing this property may recreate the FHIR store (removing all data) **
func (o HealthcareFhirStoreOutput) DisableResourceVersioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.BoolPtrOutput { return v.DisableResourceVersioning }).(pulumi.BoolPtrOutput)
}

func (o HealthcareFhirStoreOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether to allow the bulk import API to accept history bundles and directly insert historical resource versions into the
// FHIR store. Importing resource histories creates resource interactions that appear to have occurred in the past, which
// clients may not want to allow. If set to false, history bundles within an import will fail with an error. ** Changing
// this property may recreate the FHIR store (removing all data) ** ** This property can be changed manually in the Google
// Cloud Healthcare admin console without recreating the FHIR store **
func (o HealthcareFhirStoreOutput) EnableHistoryImport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.BoolPtrOutput { return v.EnableHistoryImport }).(pulumi.BoolPtrOutput)
}

// Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update operation to
// create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and
// attempts to Update a non-existent resource will return errors. Please treat the audit logs with appropriate levels of
// care if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs will be part of the
// FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications.
func (o HealthcareFhirStoreOutput) EnableUpdateCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.BoolPtrOutput { return v.EnableUpdateCreate }).(pulumi.BoolPtrOutput)
}

func (o HealthcareFhirStoreOutput) HealthcareFhirStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringOutput { return v.HealthcareFhirStoreId }).(pulumi.StringOutput)
}

// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a
// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
// [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
// UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
// [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
// "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o HealthcareFhirStoreOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the FhirStore. ** Changing this property may recreate the FHIR store (removing all data) **
func (o HealthcareFhirStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A nested object resource.
//
// Deprecated: Deprecated
func (o HealthcareFhirStoreOutput) NotificationConfig() HealthcareFhirStoreNotificationConfigPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) HealthcareFhirStoreNotificationConfigPtrOutput {
		return v.NotificationConfig
	}).(HealthcareFhirStoreNotificationConfigPtrOutput)
}

// A list of notifcation configs that configure the notification for every resource mutation in this FHIR store.
func (o HealthcareFhirStoreOutput) NotificationConfigs() HealthcareFhirStoreNotificationConfigArrayOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) HealthcareFhirStoreNotificationConfigArrayOutput {
		return v.NotificationConfigs
	}).(HealthcareFhirStoreNotificationConfigArrayOutput)
}

// The fully qualified name of this dataset
func (o HealthcareFhirStoreOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR
// store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation
// is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server
// stops streaming to that location. Before adding a new config, you must add the required bigquery.dataEditor role to your
// project's Cloud Healthcare Service Agent service account. Some lag (typically on the order of dozens of seconds) is
// expected before the results show up in the streaming destination.
func (o HealthcareFhirStoreOutput) StreamConfigs() HealthcareFhirStoreStreamConfigArrayOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) HealthcareFhirStoreStreamConfigArrayOutput { return v.StreamConfigs }).(HealthcareFhirStoreStreamConfigArrayOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o HealthcareFhirStoreOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o HealthcareFhirStoreOutput) Timeouts() HealthcareFhirStoreTimeoutsPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) HealthcareFhirStoreTimeoutsPtrOutput { return v.Timeouts }).(HealthcareFhirStoreTimeoutsPtrOutput)
}

// The FHIR specification version. Possible values: ["DSTU2", "STU3", "R4"]
func (o HealthcareFhirStoreOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStore) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcareFhirStoreInput)(nil)).Elem(), &HealthcareFhirStore{})
	pulumi.RegisterOutputType(HealthcareFhirStoreOutput{})
}
