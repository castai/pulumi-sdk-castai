// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeDiskAsyncReplication struct {
	pulumi.CustomResourceState

	ComputeDiskAsyncReplicationId pulumi.StringOutput `pulumi:"computeDiskAsyncReplicationId"`
	// Primary disk for asynchronous replication.
	PrimaryDisk pulumi.StringOutput `pulumi:"primaryDisk"`
	// Secondary disk for asynchronous replication.
	SecondaryDisk ComputeDiskAsyncReplicationSecondaryDiskOutput `pulumi:"secondaryDisk"`
	Timeouts      ComputeDiskAsyncReplicationTimeoutsPtrOutput   `pulumi:"timeouts"`
}

// NewComputeDiskAsyncReplication registers a new resource with the given unique name, arguments, and options.
func NewComputeDiskAsyncReplication(ctx *pulumi.Context,
	name string, args *ComputeDiskAsyncReplicationArgs, opts ...pulumi.ResourceOption) (*ComputeDiskAsyncReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrimaryDisk == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryDisk'")
	}
	if args.SecondaryDisk == nil {
		return nil, errors.New("invalid value for required argument 'SecondaryDisk'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeDiskAsyncReplication
	err = ctx.RegisterPackageResource("google:index/computeDiskAsyncReplication:ComputeDiskAsyncReplication", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeDiskAsyncReplication gets an existing ComputeDiskAsyncReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeDiskAsyncReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeDiskAsyncReplicationState, opts ...pulumi.ResourceOption) (*ComputeDiskAsyncReplication, error) {
	var resource ComputeDiskAsyncReplication
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeDiskAsyncReplication:ComputeDiskAsyncReplication", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeDiskAsyncReplication resources.
type computeDiskAsyncReplicationState struct {
	ComputeDiskAsyncReplicationId *string `pulumi:"computeDiskAsyncReplicationId"`
	// Primary disk for asynchronous replication.
	PrimaryDisk *string `pulumi:"primaryDisk"`
	// Secondary disk for asynchronous replication.
	SecondaryDisk *ComputeDiskAsyncReplicationSecondaryDisk `pulumi:"secondaryDisk"`
	Timeouts      *ComputeDiskAsyncReplicationTimeouts      `pulumi:"timeouts"`
}

type ComputeDiskAsyncReplicationState struct {
	ComputeDiskAsyncReplicationId pulumi.StringPtrInput
	// Primary disk for asynchronous replication.
	PrimaryDisk pulumi.StringPtrInput
	// Secondary disk for asynchronous replication.
	SecondaryDisk ComputeDiskAsyncReplicationSecondaryDiskPtrInput
	Timeouts      ComputeDiskAsyncReplicationTimeoutsPtrInput
}

func (ComputeDiskAsyncReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskAsyncReplicationState)(nil)).Elem()
}

type computeDiskAsyncReplicationArgs struct {
	ComputeDiskAsyncReplicationId *string `pulumi:"computeDiskAsyncReplicationId"`
	// Primary disk for asynchronous replication.
	PrimaryDisk string `pulumi:"primaryDisk"`
	// Secondary disk for asynchronous replication.
	SecondaryDisk ComputeDiskAsyncReplicationSecondaryDisk `pulumi:"secondaryDisk"`
	Timeouts      *ComputeDiskAsyncReplicationTimeouts     `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeDiskAsyncReplication resource.
type ComputeDiskAsyncReplicationArgs struct {
	ComputeDiskAsyncReplicationId pulumi.StringPtrInput
	// Primary disk for asynchronous replication.
	PrimaryDisk pulumi.StringInput
	// Secondary disk for asynchronous replication.
	SecondaryDisk ComputeDiskAsyncReplicationSecondaryDiskInput
	Timeouts      ComputeDiskAsyncReplicationTimeoutsPtrInput
}

func (ComputeDiskAsyncReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskAsyncReplicationArgs)(nil)).Elem()
}

type ComputeDiskAsyncReplicationInput interface {
	pulumi.Input

	ToComputeDiskAsyncReplicationOutput() ComputeDiskAsyncReplicationOutput
	ToComputeDiskAsyncReplicationOutputWithContext(ctx context.Context) ComputeDiskAsyncReplicationOutput
}

func (*ComputeDiskAsyncReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskAsyncReplication)(nil)).Elem()
}

func (i *ComputeDiskAsyncReplication) ToComputeDiskAsyncReplicationOutput() ComputeDiskAsyncReplicationOutput {
	return i.ToComputeDiskAsyncReplicationOutputWithContext(context.Background())
}

func (i *ComputeDiskAsyncReplication) ToComputeDiskAsyncReplicationOutputWithContext(ctx context.Context) ComputeDiskAsyncReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskAsyncReplicationOutput)
}

type ComputeDiskAsyncReplicationOutput struct{ *pulumi.OutputState }

func (ComputeDiskAsyncReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskAsyncReplication)(nil)).Elem()
}

func (o ComputeDiskAsyncReplicationOutput) ToComputeDiskAsyncReplicationOutput() ComputeDiskAsyncReplicationOutput {
	return o
}

func (o ComputeDiskAsyncReplicationOutput) ToComputeDiskAsyncReplicationOutputWithContext(ctx context.Context) ComputeDiskAsyncReplicationOutput {
	return o
}

func (o ComputeDiskAsyncReplicationOutput) ComputeDiskAsyncReplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskAsyncReplication) pulumi.StringOutput { return v.ComputeDiskAsyncReplicationId }).(pulumi.StringOutput)
}

// Primary disk for asynchronous replication.
func (o ComputeDiskAsyncReplicationOutput) PrimaryDisk() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskAsyncReplication) pulumi.StringOutput { return v.PrimaryDisk }).(pulumi.StringOutput)
}

// Secondary disk for asynchronous replication.
func (o ComputeDiskAsyncReplicationOutput) SecondaryDisk() ComputeDiskAsyncReplicationSecondaryDiskOutput {
	return o.ApplyT(func(v *ComputeDiskAsyncReplication) ComputeDiskAsyncReplicationSecondaryDiskOutput {
		return v.SecondaryDisk
	}).(ComputeDiskAsyncReplicationSecondaryDiskOutput)
}

func (o ComputeDiskAsyncReplicationOutput) Timeouts() ComputeDiskAsyncReplicationTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeDiskAsyncReplication) ComputeDiskAsyncReplicationTimeoutsPtrOutput { return v.Timeouts }).(ComputeDiskAsyncReplicationTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskAsyncReplicationInput)(nil)).Elem(), &ComputeDiskAsyncReplication{})
	pulumi.RegisterOutputType(ComputeDiskAsyncReplicationOutput{})
}
