// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryReservationAssignment struct {
	pulumi.CustomResourceState

	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee                        pulumi.StringOutput `pulumi:"assignee"`
	BigqueryReservationAssignmentId pulumi.StringOutput `pulumi:"bigqueryReservationAssignmentId"`
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE,
	// QUERY
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. The resource name of the assignment.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The reservation for the resource
	Reservation pulumi.StringOutput `pulumi:"reservation"`
	// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
	// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
	State    pulumi.StringOutput                            `pulumi:"state"`
	Timeouts BigqueryReservationAssignmentTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewBigqueryReservationAssignment registers a new resource with the given unique name, arguments, and options.
func NewBigqueryReservationAssignment(ctx *pulumi.Context,
	name string, args *BigqueryReservationAssignmentArgs, opts ...pulumi.ResourceOption) (*BigqueryReservationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Assignee == nil {
		return nil, errors.New("invalid value for required argument 'Assignee'")
	}
	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.Reservation == nil {
		return nil, errors.New("invalid value for required argument 'Reservation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryReservationAssignment
	err = ctx.RegisterPackageResource("google:index/bigqueryReservationAssignment:BigqueryReservationAssignment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryReservationAssignment gets an existing BigqueryReservationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryReservationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryReservationAssignmentState, opts ...pulumi.ResourceOption) (*BigqueryReservationAssignment, error) {
	var resource BigqueryReservationAssignment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/bigqueryReservationAssignment:BigqueryReservationAssignment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryReservationAssignment resources.
type bigqueryReservationAssignmentState struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee                        *string `pulumi:"assignee"`
	BigqueryReservationAssignmentId *string `pulumi:"bigqueryReservationAssignmentId"`
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE,
	// QUERY
	JobType *string `pulumi:"jobType"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Output only. The resource name of the assignment.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The reservation for the resource
	Reservation *string `pulumi:"reservation"`
	// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
	// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
	State    *string                                `pulumi:"state"`
	Timeouts *BigqueryReservationAssignmentTimeouts `pulumi:"timeouts"`
}

type BigqueryReservationAssignmentState struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee                        pulumi.StringPtrInput
	BigqueryReservationAssignmentId pulumi.StringPtrInput
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE,
	// QUERY
	JobType pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Output only. The resource name of the assignment.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The reservation for the resource
	Reservation pulumi.StringPtrInput
	// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
	// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
	State    pulumi.StringPtrInput
	Timeouts BigqueryReservationAssignmentTimeoutsPtrInput
}

func (BigqueryReservationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryReservationAssignmentState)(nil)).Elem()
}

type bigqueryReservationAssignmentArgs struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee                        string  `pulumi:"assignee"`
	BigqueryReservationAssignmentId *string `pulumi:"bigqueryReservationAssignmentId"`
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE,
	// QUERY
	JobType string `pulumi:"jobType"`
	// The location for the resource
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The reservation for the resource
	Reservation string                                 `pulumi:"reservation"`
	Timeouts    *BigqueryReservationAssignmentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a BigqueryReservationAssignment resource.
type BigqueryReservationAssignmentArgs struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee                        pulumi.StringInput
	BigqueryReservationAssignmentId pulumi.StringPtrInput
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE,
	// QUERY
	JobType pulumi.StringInput
	// The location for the resource
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// The reservation for the resource
	Reservation pulumi.StringInput
	Timeouts    BigqueryReservationAssignmentTimeoutsPtrInput
}

func (BigqueryReservationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryReservationAssignmentArgs)(nil)).Elem()
}

type BigqueryReservationAssignmentInput interface {
	pulumi.Input

	ToBigqueryReservationAssignmentOutput() BigqueryReservationAssignmentOutput
	ToBigqueryReservationAssignmentOutputWithContext(ctx context.Context) BigqueryReservationAssignmentOutput
}

func (*BigqueryReservationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryReservationAssignment)(nil)).Elem()
}

func (i *BigqueryReservationAssignment) ToBigqueryReservationAssignmentOutput() BigqueryReservationAssignmentOutput {
	return i.ToBigqueryReservationAssignmentOutputWithContext(context.Background())
}

func (i *BigqueryReservationAssignment) ToBigqueryReservationAssignmentOutputWithContext(ctx context.Context) BigqueryReservationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryReservationAssignmentOutput)
}

type BigqueryReservationAssignmentOutput struct{ *pulumi.OutputState }

func (BigqueryReservationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryReservationAssignment)(nil)).Elem()
}

func (o BigqueryReservationAssignmentOutput) ToBigqueryReservationAssignmentOutput() BigqueryReservationAssignmentOutput {
	return o
}

func (o BigqueryReservationAssignmentOutput) ToBigqueryReservationAssignmentOutputWithContext(ctx context.Context) BigqueryReservationAssignmentOutput {
	return o
}

// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
func (o BigqueryReservationAssignmentOutput) Assignee() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.Assignee }).(pulumi.StringOutput)
}

func (o BigqueryReservationAssignmentOutput) BigqueryReservationAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.BigqueryReservationAssignmentId }).(pulumi.StringOutput)
}

// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE,
// QUERY
func (o BigqueryReservationAssignmentOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// The location for the resource
func (o BigqueryReservationAssignmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. The resource name of the assignment.
func (o BigqueryReservationAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BigqueryReservationAssignmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The reservation for the resource
func (o BigqueryReservationAssignmentOutput) Reservation() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.Reservation }).(pulumi.StringOutput)
}

// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
func (o BigqueryReservationAssignmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o BigqueryReservationAssignmentOutput) Timeouts() BigqueryReservationAssignmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *BigqueryReservationAssignment) BigqueryReservationAssignmentTimeoutsPtrOutput {
		return v.Timeouts
	}).(BigqueryReservationAssignmentTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryReservationAssignmentInput)(nil)).Elem(), &BigqueryReservationAssignment{})
	pulumi.RegisterOutputType(BigqueryReservationAssignmentOutput{})
}
