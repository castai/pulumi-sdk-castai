// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppEngineApplication struct {
	pulumi.CustomResourceState

	AppEngineApplicationId pulumi.StringOutput `pulumi:"appEngineApplicationId"`
	// Identifier of the app.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain pulumi.StringOutput `pulumi:"authDomain"`
	// The GCS bucket code is being stored in for this app.
	CodeBucket   pulumi.StringOutput `pulumi:"codeBucket"`
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// The GCS bucket content is being stored in for this app.
	DefaultBucket pulumi.StringOutput `pulumi:"defaultBucket"`
	// The default hostname for this app.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings AppEngineApplicationFeatureSettingsPtrOutput `pulumi:"featureSettings"`
	// The GCR domain used for storing managed Docker images for this app.
	GcrDomain pulumi.StringOutput `pulumi:"gcrDomain"`
	// Settings for enabling Cloud Identity Aware Proxy
	Iap AppEngineApplicationIapPtrOutput `pulumi:"iap"`
	// The location to serve the app from.
	LocationId pulumi.StringOutput `pulumi:"locationId"`
	// Unique name of the app.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project ID to create the application under.
	Project pulumi.StringOutput `pulumi:"project"`
	// The serving status of the app.
	ServingStatus pulumi.StringOutput                   `pulumi:"servingStatus"`
	Timeouts      AppEngineApplicationTimeoutsPtrOutput `pulumi:"timeouts"`
	// A list of dispatch rule blocks. Each block has a domain, path, and service field.
	UrlDispatchRules AppEngineApplicationUrlDispatchRuleArrayOutput `pulumi:"urlDispatchRules"`
}

// NewAppEngineApplication registers a new resource with the given unique name, arguments, and options.
func NewAppEngineApplication(ctx *pulumi.Context,
	name string, args *AppEngineApplicationArgs, opts ...pulumi.ResourceOption) (*AppEngineApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationId == nil {
		return nil, errors.New("invalid value for required argument 'LocationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AppEngineApplication
	err = ctx.RegisterPackageResource("google:index/appEngineApplication:AppEngineApplication", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppEngineApplication gets an existing AppEngineApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppEngineApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppEngineApplicationState, opts ...pulumi.ResourceOption) (*AppEngineApplication, error) {
	var resource AppEngineApplication
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/appEngineApplication:AppEngineApplication", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppEngineApplication resources.
type appEngineApplicationState struct {
	AppEngineApplicationId *string `pulumi:"appEngineApplicationId"`
	// Identifier of the app.
	AppId *string `pulumi:"appId"`
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain *string `pulumi:"authDomain"`
	// The GCS bucket code is being stored in for this app.
	CodeBucket   *string `pulumi:"codeBucket"`
	DatabaseType *string `pulumi:"databaseType"`
	// The GCS bucket content is being stored in for this app.
	DefaultBucket *string `pulumi:"defaultBucket"`
	// The default hostname for this app.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings *AppEngineApplicationFeatureSettings `pulumi:"featureSettings"`
	// The GCR domain used for storing managed Docker images for this app.
	GcrDomain *string `pulumi:"gcrDomain"`
	// Settings for enabling Cloud Identity Aware Proxy
	Iap *AppEngineApplicationIap `pulumi:"iap"`
	// The location to serve the app from.
	LocationId *string `pulumi:"locationId"`
	// Unique name of the app.
	Name *string `pulumi:"name"`
	// The project ID to create the application under.
	Project *string `pulumi:"project"`
	// The serving status of the app.
	ServingStatus *string                       `pulumi:"servingStatus"`
	Timeouts      *AppEngineApplicationTimeouts `pulumi:"timeouts"`
	// A list of dispatch rule blocks. Each block has a domain, path, and service field.
	UrlDispatchRules []AppEngineApplicationUrlDispatchRule `pulumi:"urlDispatchRules"`
}

type AppEngineApplicationState struct {
	AppEngineApplicationId pulumi.StringPtrInput
	// Identifier of the app.
	AppId pulumi.StringPtrInput
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain pulumi.StringPtrInput
	// The GCS bucket code is being stored in for this app.
	CodeBucket   pulumi.StringPtrInput
	DatabaseType pulumi.StringPtrInput
	// The GCS bucket content is being stored in for this app.
	DefaultBucket pulumi.StringPtrInput
	// The default hostname for this app.
	DefaultHostname pulumi.StringPtrInput
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings AppEngineApplicationFeatureSettingsPtrInput
	// The GCR domain used for storing managed Docker images for this app.
	GcrDomain pulumi.StringPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	Iap AppEngineApplicationIapPtrInput
	// The location to serve the app from.
	LocationId pulumi.StringPtrInput
	// Unique name of the app.
	Name pulumi.StringPtrInput
	// The project ID to create the application under.
	Project pulumi.StringPtrInput
	// The serving status of the app.
	ServingStatus pulumi.StringPtrInput
	Timeouts      AppEngineApplicationTimeoutsPtrInput
	// A list of dispatch rule blocks. Each block has a domain, path, and service field.
	UrlDispatchRules AppEngineApplicationUrlDispatchRuleArrayInput
}

func (AppEngineApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*appEngineApplicationState)(nil)).Elem()
}

type appEngineApplicationArgs struct {
	AppEngineApplicationId *string `pulumi:"appEngineApplicationId"`
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain   *string `pulumi:"authDomain"`
	DatabaseType *string `pulumi:"databaseType"`
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings *AppEngineApplicationFeatureSettings `pulumi:"featureSettings"`
	// Settings for enabling Cloud Identity Aware Proxy
	Iap *AppEngineApplicationIap `pulumi:"iap"`
	// The location to serve the app from.
	LocationId string `pulumi:"locationId"`
	// The project ID to create the application under.
	Project *string `pulumi:"project"`
	// The serving status of the app.
	ServingStatus *string                       `pulumi:"servingStatus"`
	Timeouts      *AppEngineApplicationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AppEngineApplication resource.
type AppEngineApplicationArgs struct {
	AppEngineApplicationId pulumi.StringPtrInput
	// The domain to authenticate users with when using App Engine's User API.
	AuthDomain   pulumi.StringPtrInput
	DatabaseType pulumi.StringPtrInput
	// A block of optional settings to configure specific App Engine features:
	FeatureSettings AppEngineApplicationFeatureSettingsPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	Iap AppEngineApplicationIapPtrInput
	// The location to serve the app from.
	LocationId pulumi.StringInput
	// The project ID to create the application under.
	Project pulumi.StringPtrInput
	// The serving status of the app.
	ServingStatus pulumi.StringPtrInput
	Timeouts      AppEngineApplicationTimeoutsPtrInput
}

func (AppEngineApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appEngineApplicationArgs)(nil)).Elem()
}

type AppEngineApplicationInput interface {
	pulumi.Input

	ToAppEngineApplicationOutput() AppEngineApplicationOutput
	ToAppEngineApplicationOutputWithContext(ctx context.Context) AppEngineApplicationOutput
}

func (*AppEngineApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineApplication)(nil)).Elem()
}

func (i *AppEngineApplication) ToAppEngineApplicationOutput() AppEngineApplicationOutput {
	return i.ToAppEngineApplicationOutputWithContext(context.Background())
}

func (i *AppEngineApplication) ToAppEngineApplicationOutputWithContext(ctx context.Context) AppEngineApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineApplicationOutput)
}

type AppEngineApplicationOutput struct{ *pulumi.OutputState }

func (AppEngineApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineApplication)(nil)).Elem()
}

func (o AppEngineApplicationOutput) ToAppEngineApplicationOutput() AppEngineApplicationOutput {
	return o
}

func (o AppEngineApplicationOutput) ToAppEngineApplicationOutputWithContext(ctx context.Context) AppEngineApplicationOutput {
	return o
}

func (o AppEngineApplicationOutput) AppEngineApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.AppEngineApplicationId }).(pulumi.StringOutput)
}

// Identifier of the app.
func (o AppEngineApplicationOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The domain to authenticate users with when using App Engine's User API.
func (o AppEngineApplicationOutput) AuthDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.AuthDomain }).(pulumi.StringOutput)
}

// The GCS bucket code is being stored in for this app.
func (o AppEngineApplicationOutput) CodeBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.CodeBucket }).(pulumi.StringOutput)
}

func (o AppEngineApplicationOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

// The GCS bucket content is being stored in for this app.
func (o AppEngineApplicationOutput) DefaultBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.DefaultBucket }).(pulumi.StringOutput)
}

// The default hostname for this app.
func (o AppEngineApplicationOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// A block of optional settings to configure specific App Engine features:
func (o AppEngineApplicationOutput) FeatureSettings() AppEngineApplicationFeatureSettingsPtrOutput {
	return o.ApplyT(func(v *AppEngineApplication) AppEngineApplicationFeatureSettingsPtrOutput { return v.FeatureSettings }).(AppEngineApplicationFeatureSettingsPtrOutput)
}

// The GCR domain used for storing managed Docker images for this app.
func (o AppEngineApplicationOutput) GcrDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.GcrDomain }).(pulumi.StringOutput)
}

// Settings for enabling Cloud Identity Aware Proxy
func (o AppEngineApplicationOutput) Iap() AppEngineApplicationIapPtrOutput {
	return o.ApplyT(func(v *AppEngineApplication) AppEngineApplicationIapPtrOutput { return v.Iap }).(AppEngineApplicationIapPtrOutput)
}

// The location to serve the app from.
func (o AppEngineApplicationOutput) LocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.LocationId }).(pulumi.StringOutput)
}

// Unique name of the app.
func (o AppEngineApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project ID to create the application under.
func (o AppEngineApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The serving status of the app.
func (o AppEngineApplicationOutput) ServingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineApplication) pulumi.StringOutput { return v.ServingStatus }).(pulumi.StringOutput)
}

func (o AppEngineApplicationOutput) Timeouts() AppEngineApplicationTimeoutsPtrOutput {
	return o.ApplyT(func(v *AppEngineApplication) AppEngineApplicationTimeoutsPtrOutput { return v.Timeouts }).(AppEngineApplicationTimeoutsPtrOutput)
}

// A list of dispatch rule blocks. Each block has a domain, path, and service field.
func (o AppEngineApplicationOutput) UrlDispatchRules() AppEngineApplicationUrlDispatchRuleArrayOutput {
	return o.ApplyT(func(v *AppEngineApplication) AppEngineApplicationUrlDispatchRuleArrayOutput {
		return v.UrlDispatchRules
	}).(AppEngineApplicationUrlDispatchRuleArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppEngineApplicationInput)(nil)).Elem(), &AppEngineApplication{})
	pulumi.RegisterOutputType(AppEngineApplicationOutput{})
}
