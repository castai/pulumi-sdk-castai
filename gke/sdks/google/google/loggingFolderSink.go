// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoggingFolderSink struct {
	pulumi.CustomResourceState

	// Options that affect sinks exporting data to BigQuery.
	BigqueryOptions LoggingFolderSinkBigqueryOptionsPtrOutput `pulumi:"bigqueryOptions"`
	// A description of this sink. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub
	// topic, or a BigQuery dataset. Examples: "storage.googleapis.com/[GCS_BUCKET]"
	// "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
	// "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]" The writer associated with the sink must have access to
	// write to the above resource.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// If set to True, then this sink is disabled and it does not export any log entries.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and
	// one of exclusion's filters, it will not be exported.
	Exclusions LoggingFolderSinkExclusionArrayOutput `pulumi:"exclusions"`
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is accepted.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// Whether or not to include children folders in the sink export. If true, logs associated with child projects are also
	// exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren pulumi.BoolPtrOutput `pulumi:"includeChildren"`
	// Whether or not to intercept logs from child projects. If true, matching logs will not match with sinks in child
	// resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
	InterceptChildren   pulumi.BoolPtrOutput `pulumi:"interceptChildren"`
	LoggingFolderSinkId pulumi.StringOutput  `pulumi:"loggingFolderSinkId"`
	// The name of the logging sink.
	Name pulumi.StringOutput `pulumi:"name"`
	// The identity associated with this sink. This identity must be granted write access to the configured destination.
	WriterIdentity pulumi.StringOutput `pulumi:"writerIdentity"`
}

// NewLoggingFolderSink registers a new resource with the given unique name, arguments, and options.
func NewLoggingFolderSink(ctx *pulumi.Context,
	name string, args *LoggingFolderSinkArgs, opts ...pulumi.ResourceOption) (*LoggingFolderSink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource LoggingFolderSink
	err = ctx.RegisterPackageResource("google:index/loggingFolderSink:LoggingFolderSink", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingFolderSink gets an existing LoggingFolderSink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingFolderSink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingFolderSinkState, opts ...pulumi.ResourceOption) (*LoggingFolderSink, error) {
	var resource LoggingFolderSink
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/loggingFolderSink:LoggingFolderSink", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingFolderSink resources.
type loggingFolderSinkState struct {
	// Options that affect sinks exporting data to BigQuery.
	BigqueryOptions *LoggingFolderSinkBigqueryOptions `pulumi:"bigqueryOptions"`
	// A description of this sink. The maximum length of the description is 8000 characters.
	Description *string `pulumi:"description"`
	// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub
	// topic, or a BigQuery dataset. Examples: "storage.googleapis.com/[GCS_BUCKET]"
	// "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
	// "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]" The writer associated with the sink must have access to
	// write to the above resource.
	Destination *string `pulumi:"destination"`
	// If set to True, then this sink is disabled and it does not export any log entries.
	Disabled *bool `pulumi:"disabled"`
	// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and
	// one of exclusion's filters, it will not be exported.
	Exclusions []LoggingFolderSinkExclusion `pulumi:"exclusions"`
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	Filter *string `pulumi:"filter"`
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is accepted.
	Folder *string `pulumi:"folder"`
	// Whether or not to include children folders in the sink export. If true, logs associated with child projects are also
	// exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren *bool `pulumi:"includeChildren"`
	// Whether or not to intercept logs from child projects. If true, matching logs will not match with sinks in child
	// resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
	InterceptChildren   *bool   `pulumi:"interceptChildren"`
	LoggingFolderSinkId *string `pulumi:"loggingFolderSinkId"`
	// The name of the logging sink.
	Name *string `pulumi:"name"`
	// The identity associated with this sink. This identity must be granted write access to the configured destination.
	WriterIdentity *string `pulumi:"writerIdentity"`
}

type LoggingFolderSinkState struct {
	// Options that affect sinks exporting data to BigQuery.
	BigqueryOptions LoggingFolderSinkBigqueryOptionsPtrInput
	// A description of this sink. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrInput
	// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub
	// topic, or a BigQuery dataset. Examples: "storage.googleapis.com/[GCS_BUCKET]"
	// "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
	// "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]" The writer associated with the sink must have access to
	// write to the above resource.
	Destination pulumi.StringPtrInput
	// If set to True, then this sink is disabled and it does not export any log entries.
	Disabled pulumi.BoolPtrInput
	// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and
	// one of exclusion's filters, it will not be exported.
	Exclusions LoggingFolderSinkExclusionArrayInput
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	Filter pulumi.StringPtrInput
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is accepted.
	Folder pulumi.StringPtrInput
	// Whether or not to include children folders in the sink export. If true, logs associated with child projects are also
	// exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren pulumi.BoolPtrInput
	// Whether or not to intercept logs from child projects. If true, matching logs will not match with sinks in child
	// resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
	InterceptChildren   pulumi.BoolPtrInput
	LoggingFolderSinkId pulumi.StringPtrInput
	// The name of the logging sink.
	Name pulumi.StringPtrInput
	// The identity associated with this sink. This identity must be granted write access to the configured destination.
	WriterIdentity pulumi.StringPtrInput
}

func (LoggingFolderSinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingFolderSinkState)(nil)).Elem()
}

type loggingFolderSinkArgs struct {
	// Options that affect sinks exporting data to BigQuery.
	BigqueryOptions *LoggingFolderSinkBigqueryOptions `pulumi:"bigqueryOptions"`
	// A description of this sink. The maximum length of the description is 8000 characters.
	Description *string `pulumi:"description"`
	// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub
	// topic, or a BigQuery dataset. Examples: "storage.googleapis.com/[GCS_BUCKET]"
	// "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
	// "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]" The writer associated with the sink must have access to
	// write to the above resource.
	Destination string `pulumi:"destination"`
	// If set to True, then this sink is disabled and it does not export any log entries.
	Disabled *bool `pulumi:"disabled"`
	// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and
	// one of exclusion's filters, it will not be exported.
	Exclusions []LoggingFolderSinkExclusion `pulumi:"exclusions"`
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	Filter *string `pulumi:"filter"`
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is accepted.
	Folder string `pulumi:"folder"`
	// Whether or not to include children folders in the sink export. If true, logs associated with child projects are also
	// exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren *bool `pulumi:"includeChildren"`
	// Whether or not to intercept logs from child projects. If true, matching logs will not match with sinks in child
	// resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
	InterceptChildren   *bool   `pulumi:"interceptChildren"`
	LoggingFolderSinkId *string `pulumi:"loggingFolderSinkId"`
	// The name of the logging sink.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoggingFolderSink resource.
type LoggingFolderSinkArgs struct {
	// Options that affect sinks exporting data to BigQuery.
	BigqueryOptions LoggingFolderSinkBigqueryOptionsPtrInput
	// A description of this sink. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrInput
	// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub
	// topic, or a BigQuery dataset. Examples: "storage.googleapis.com/[GCS_BUCKET]"
	// "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
	// "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]" The writer associated with the sink must have access to
	// write to the above resource.
	Destination pulumi.StringInput
	// If set to True, then this sink is disabled and it does not export any log entries.
	Disabled pulumi.BoolPtrInput
	// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and
	// one of exclusion's filters, it will not be exported.
	Exclusions LoggingFolderSinkExclusionArrayInput
	// The filter to apply when exporting logs. Only log entries that match the filter are exported.
	Filter pulumi.StringPtrInput
	// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is accepted.
	Folder pulumi.StringInput
	// Whether or not to include children folders in the sink export. If true, logs associated with child projects are also
	// exported; otherwise only logs relating to the provided folder are included.
	IncludeChildren pulumi.BoolPtrInput
	// Whether or not to intercept logs from child projects. If true, matching logs will not match with sinks in child
	// resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
	InterceptChildren   pulumi.BoolPtrInput
	LoggingFolderSinkId pulumi.StringPtrInput
	// The name of the logging sink.
	Name pulumi.StringPtrInput
}

func (LoggingFolderSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingFolderSinkArgs)(nil)).Elem()
}

type LoggingFolderSinkInput interface {
	pulumi.Input

	ToLoggingFolderSinkOutput() LoggingFolderSinkOutput
	ToLoggingFolderSinkOutputWithContext(ctx context.Context) LoggingFolderSinkOutput
}

func (*LoggingFolderSink) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingFolderSink)(nil)).Elem()
}

func (i *LoggingFolderSink) ToLoggingFolderSinkOutput() LoggingFolderSinkOutput {
	return i.ToLoggingFolderSinkOutputWithContext(context.Background())
}

func (i *LoggingFolderSink) ToLoggingFolderSinkOutputWithContext(ctx context.Context) LoggingFolderSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingFolderSinkOutput)
}

type LoggingFolderSinkOutput struct{ *pulumi.OutputState }

func (LoggingFolderSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingFolderSink)(nil)).Elem()
}

func (o LoggingFolderSinkOutput) ToLoggingFolderSinkOutput() LoggingFolderSinkOutput {
	return o
}

func (o LoggingFolderSinkOutput) ToLoggingFolderSinkOutputWithContext(ctx context.Context) LoggingFolderSinkOutput {
	return o
}

// Options that affect sinks exporting data to BigQuery.
func (o LoggingFolderSinkOutput) BigqueryOptions() LoggingFolderSinkBigqueryOptionsPtrOutput {
	return o.ApplyT(func(v *LoggingFolderSink) LoggingFolderSinkBigqueryOptionsPtrOutput { return v.BigqueryOptions }).(LoggingFolderSinkBigqueryOptionsPtrOutput)
}

// A description of this sink. The maximum length of the description is 8000 characters.
func (o LoggingFolderSinkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub
// topic, or a BigQuery dataset. Examples: "storage.googleapis.com/[GCS_BUCKET]"
// "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
// "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]" The writer associated with the sink must have access to
// write to the above resource.
func (o LoggingFolderSinkOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// If set to True, then this sink is disabled and it does not export any log entries.
func (o LoggingFolderSinkOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and
// one of exclusion's filters, it will not be exported.
func (o LoggingFolderSinkOutput) Exclusions() LoggingFolderSinkExclusionArrayOutput {
	return o.ApplyT(func(v *LoggingFolderSink) LoggingFolderSinkExclusionArrayOutput { return v.Exclusions }).(LoggingFolderSinkExclusionArrayOutput)
}

// The filter to apply when exporting logs. Only log entries that match the filter are exported.
func (o LoggingFolderSinkOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is accepted.
func (o LoggingFolderSinkOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// Whether or not to include children folders in the sink export. If true, logs associated with child projects are also
// exported; otherwise only logs relating to the provided folder are included.
func (o LoggingFolderSinkOutput) IncludeChildren() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.BoolPtrOutput { return v.IncludeChildren }).(pulumi.BoolPtrOutput)
}

// Whether or not to intercept logs from child projects. If true, matching logs will not match with sinks in child
// resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
func (o LoggingFolderSinkOutput) InterceptChildren() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.BoolPtrOutput { return v.InterceptChildren }).(pulumi.BoolPtrOutput)
}

func (o LoggingFolderSinkOutput) LoggingFolderSinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringOutput { return v.LoggingFolderSinkId }).(pulumi.StringOutput)
}

// The name of the logging sink.
func (o LoggingFolderSinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The identity associated with this sink. This identity must be granted write access to the configured destination.
func (o LoggingFolderSinkOutput) WriterIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingFolderSink) pulumi.StringOutput { return v.WriterIdentity }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingFolderSinkInput)(nil)).Elem(), &LoggingFolderSink{})
	pulumi.RegisterOutputType(LoggingFolderSinkOutput{})
}
