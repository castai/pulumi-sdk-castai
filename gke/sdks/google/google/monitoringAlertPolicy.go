// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MonitoringAlertPolicy struct {
	pulumi.CustomResourceState

	// Control over how this alert policy's notification channels are notified.
	AlertStrategy MonitoringAlertPolicyAlertStrategyPtrOutput `pulumi:"alertStrategy"`
	// How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
	// "OR", "AND_WITH_MATCHING_RESOURCE"]
	Combiner pulumi.StringOutput `pulumi:"combiner"`
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions MonitoringAlertPolicyConditionArrayOutput `pulumi:"conditions"`
	// A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
	// ignored.
	CreationRecords MonitoringAlertPolicyCreationRecordArrayOutput `pulumi:"creationRecords"`
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Documentation that is included with notifications and incidents related to this policy. Best practice is for the
	// documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
	// problems detected by the alerting policy. Notification channels that have limited capacity might not show this
	// documentation.
	Documentation MonitoringAlertPolicyDocumentationPtrOutput `pulumi:"documentation"`
	// Whether or not the policy is enabled. The default is true.
	Enabled                 pulumi.BoolPtrOutput `pulumi:"enabled"`
	MonitoringAlertPolicyId pulumi.StringOutput  `pulumi:"monitoringAlertPolicyId"`
	// The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
	Name pulumi.StringOutput `pulumi:"name"`
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels pulumi.StringArrayOutput `pulumi:"notificationChannels"`
	Project              pulumi.StringOutput      `pulumi:"project"`
	// The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
	// be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
	Severity pulumi.StringPtrOutput                 `pulumi:"severity"`
	Timeouts MonitoringAlertPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels pulumi.StringMapOutput `pulumi:"userLabels"`
}

// NewMonitoringAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewMonitoringAlertPolicy(ctx *pulumi.Context,
	name string, args *MonitoringAlertPolicyArgs, opts ...pulumi.ResourceOption) (*MonitoringAlertPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Combiner == nil {
		return nil, errors.New("invalid value for required argument 'Combiner'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MonitoringAlertPolicy
	err = ctx.RegisterPackageResource("google:index/monitoringAlertPolicy:MonitoringAlertPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringAlertPolicy gets an existing MonitoringAlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringAlertPolicyState, opts ...pulumi.ResourceOption) (*MonitoringAlertPolicy, error) {
	var resource MonitoringAlertPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/monitoringAlertPolicy:MonitoringAlertPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringAlertPolicy resources.
type monitoringAlertPolicyState struct {
	// Control over how this alert policy's notification channels are notified.
	AlertStrategy *MonitoringAlertPolicyAlertStrategy `pulumi:"alertStrategy"`
	// How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
	// "OR", "AND_WITH_MATCHING_RESOURCE"]
	Combiner *string `pulumi:"combiner"`
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions []MonitoringAlertPolicyCondition `pulumi:"conditions"`
	// A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
	// ignored.
	CreationRecords []MonitoringAlertPolicyCreationRecord `pulumi:"creationRecords"`
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName *string `pulumi:"displayName"`
	// Documentation that is included with notifications and incidents related to this policy. Best practice is for the
	// documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
	// problems detected by the alerting policy. Notification channels that have limited capacity might not show this
	// documentation.
	Documentation *MonitoringAlertPolicyDocumentation `pulumi:"documentation"`
	// Whether or not the policy is enabled. The default is true.
	Enabled                 *bool   `pulumi:"enabled"`
	MonitoringAlertPolicyId *string `pulumi:"monitoringAlertPolicyId"`
	// The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
	Name *string `pulumi:"name"`
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels []string `pulumi:"notificationChannels"`
	Project              *string  `pulumi:"project"`
	// The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
	// be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
	Severity *string                        `pulumi:"severity"`
	Timeouts *MonitoringAlertPolicyTimeouts `pulumi:"timeouts"`
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels map[string]string `pulumi:"userLabels"`
}

type MonitoringAlertPolicyState struct {
	// Control over how this alert policy's notification channels are notified.
	AlertStrategy MonitoringAlertPolicyAlertStrategyPtrInput
	// How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
	// "OR", "AND_WITH_MATCHING_RESOURCE"]
	Combiner pulumi.StringPtrInput
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions MonitoringAlertPolicyConditionArrayInput
	// A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
	// ignored.
	CreationRecords MonitoringAlertPolicyCreationRecordArrayInput
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName pulumi.StringPtrInput
	// Documentation that is included with notifications and incidents related to this policy. Best practice is for the
	// documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
	// problems detected by the alerting policy. Notification channels that have limited capacity might not show this
	// documentation.
	Documentation MonitoringAlertPolicyDocumentationPtrInput
	// Whether or not the policy is enabled. The default is true.
	Enabled                 pulumi.BoolPtrInput
	MonitoringAlertPolicyId pulumi.StringPtrInput
	// The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
	Name pulumi.StringPtrInput
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels pulumi.StringArrayInput
	Project              pulumi.StringPtrInput
	// The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
	// be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
	Severity pulumi.StringPtrInput
	Timeouts MonitoringAlertPolicyTimeoutsPtrInput
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels pulumi.StringMapInput
}

func (MonitoringAlertPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringAlertPolicyState)(nil)).Elem()
}

type monitoringAlertPolicyArgs struct {
	// Control over how this alert policy's notification channels are notified.
	AlertStrategy *MonitoringAlertPolicyAlertStrategy `pulumi:"alertStrategy"`
	// How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
	// "OR", "AND_WITH_MATCHING_RESOURCE"]
	Combiner string `pulumi:"combiner"`
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions []MonitoringAlertPolicyCondition `pulumi:"conditions"`
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName string `pulumi:"displayName"`
	// Documentation that is included with notifications and incidents related to this policy. Best practice is for the
	// documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
	// problems detected by the alerting policy. Notification channels that have limited capacity might not show this
	// documentation.
	Documentation *MonitoringAlertPolicyDocumentation `pulumi:"documentation"`
	// Whether or not the policy is enabled. The default is true.
	Enabled                 *bool   `pulumi:"enabled"`
	MonitoringAlertPolicyId *string `pulumi:"monitoringAlertPolicyId"`
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels []string `pulumi:"notificationChannels"`
	Project              *string  `pulumi:"project"`
	// The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
	// be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
	Severity *string                        `pulumi:"severity"`
	Timeouts *MonitoringAlertPolicyTimeouts `pulumi:"timeouts"`
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// The set of arguments for constructing a MonitoringAlertPolicy resource.
type MonitoringAlertPolicyArgs struct {
	// Control over how this alert policy's notification channels are notified.
	AlertStrategy MonitoringAlertPolicyAlertStrategyPtrInput
	// How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
	// "OR", "AND_WITH_MATCHING_RESOURCE"]
	Combiner pulumi.StringInput
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions MonitoringAlertPolicyConditionArrayInput
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName pulumi.StringInput
	// Documentation that is included with notifications and incidents related to this policy. Best practice is for the
	// documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
	// problems detected by the alerting policy. Notification channels that have limited capacity might not show this
	// documentation.
	Documentation MonitoringAlertPolicyDocumentationPtrInput
	// Whether or not the policy is enabled. The default is true.
	Enabled                 pulumi.BoolPtrInput
	MonitoringAlertPolicyId pulumi.StringPtrInput
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels pulumi.StringArrayInput
	Project              pulumi.StringPtrInput
	// The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
	// be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
	Severity pulumi.StringPtrInput
	Timeouts MonitoringAlertPolicyTimeoutsPtrInput
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels pulumi.StringMapInput
}

func (MonitoringAlertPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringAlertPolicyArgs)(nil)).Elem()
}

type MonitoringAlertPolicyInput interface {
	pulumi.Input

	ToMonitoringAlertPolicyOutput() MonitoringAlertPolicyOutput
	ToMonitoringAlertPolicyOutputWithContext(ctx context.Context) MonitoringAlertPolicyOutput
}

func (*MonitoringAlertPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringAlertPolicy)(nil)).Elem()
}

func (i *MonitoringAlertPolicy) ToMonitoringAlertPolicyOutput() MonitoringAlertPolicyOutput {
	return i.ToMonitoringAlertPolicyOutputWithContext(context.Background())
}

func (i *MonitoringAlertPolicy) ToMonitoringAlertPolicyOutputWithContext(ctx context.Context) MonitoringAlertPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAlertPolicyOutput)
}

type MonitoringAlertPolicyOutput struct{ *pulumi.OutputState }

func (MonitoringAlertPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringAlertPolicy)(nil)).Elem()
}

func (o MonitoringAlertPolicyOutput) ToMonitoringAlertPolicyOutput() MonitoringAlertPolicyOutput {
	return o
}

func (o MonitoringAlertPolicyOutput) ToMonitoringAlertPolicyOutputWithContext(ctx context.Context) MonitoringAlertPolicyOutput {
	return o
}

// Control over how this alert policy's notification channels are notified.
func (o MonitoringAlertPolicyOutput) AlertStrategy() MonitoringAlertPolicyAlertStrategyPtrOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) MonitoringAlertPolicyAlertStrategyPtrOutput { return v.AlertStrategy }).(MonitoringAlertPolicyAlertStrategyPtrOutput)
}

// How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
// "OR", "AND_WITH_MATCHING_RESOURCE"]
func (o MonitoringAlertPolicyOutput) Combiner() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringOutput { return v.Combiner }).(pulumi.StringOutput)
}

// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
func (o MonitoringAlertPolicyOutput) Conditions() MonitoringAlertPolicyConditionArrayOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) MonitoringAlertPolicyConditionArrayOutput { return v.Conditions }).(MonitoringAlertPolicyConditionArrayOutput)
}

// A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
// ignored.
func (o MonitoringAlertPolicyOutput) CreationRecords() MonitoringAlertPolicyCreationRecordArrayOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) MonitoringAlertPolicyCreationRecordArrayOutput {
		return v.CreationRecords
	}).(MonitoringAlertPolicyCreationRecordArrayOutput)
}

// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
// characters.
func (o MonitoringAlertPolicyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Documentation that is included with notifications and incidents related to this policy. Best practice is for the
// documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
// problems detected by the alerting policy. Notification channels that have limited capacity might not show this
// documentation.
func (o MonitoringAlertPolicyOutput) Documentation() MonitoringAlertPolicyDocumentationPtrOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) MonitoringAlertPolicyDocumentationPtrOutput { return v.Documentation }).(MonitoringAlertPolicyDocumentationPtrOutput)
}

// Whether or not the policy is enabled. The default is true.
func (o MonitoringAlertPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o MonitoringAlertPolicyOutput) MonitoringAlertPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringOutput { return v.MonitoringAlertPolicyId }).(pulumi.StringOutput)
}

// The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
func (o MonitoringAlertPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
func (o MonitoringAlertPolicyOutput) NotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringArrayOutput { return v.NotificationChannels }).(pulumi.StringArrayOutput)
}

func (o MonitoringAlertPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
// be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
func (o MonitoringAlertPolicyOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringPtrOutput { return v.Severity }).(pulumi.StringPtrOutput)
}

func (o MonitoringAlertPolicyOutput) Timeouts() MonitoringAlertPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) MonitoringAlertPolicyTimeoutsPtrOutput { return v.Timeouts }).(MonitoringAlertPolicyTimeoutsPtrOutput)
}

// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
func (o MonitoringAlertPolicyOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringAlertPolicy) pulumi.StringMapOutput { return v.UserLabels }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringAlertPolicyInput)(nil)).Elem(), &MonitoringAlertPolicy{})
	pulumi.RegisterOutputType(MonitoringAlertPolicyOutput{})
}
