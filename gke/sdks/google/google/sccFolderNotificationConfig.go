// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccFolderNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// The resource name of this notification config, in the format 'folders/{{folder}}/notificationConfigs/{{config_id}}'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                   pulumi.StringOutput `pulumi:"pubsubTopic"`
	SccFolderNotificationConfigId pulumi.StringOutput `pulumi:"sccFolderNotificationConfigId"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig SccFolderNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
	Timeouts        SccFolderNotificationConfigTimeoutsPtrOutput     `pulumi:"timeouts"`
}

// NewSccFolderNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewSccFolderNotificationConfig(ctx *pulumi.Context,
	name string, args *SccFolderNotificationConfigArgs, opts ...pulumi.ResourceOption) (*SccFolderNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccFolderNotificationConfig
	err = ctx.RegisterPackageResource("google:index/sccFolderNotificationConfig:SccFolderNotificationConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccFolderNotificationConfig gets an existing SccFolderNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccFolderNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccFolderNotificationConfigState, opts ...pulumi.ResourceOption) (*SccFolderNotificationConfig, error) {
	var resource SccFolderNotificationConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/sccFolderNotificationConfig:SccFolderNotificationConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccFolderNotificationConfig resources.
type sccFolderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder *string `pulumi:"folder"`
	// The resource name of this notification config, in the format 'folders/{{folder}}/notificationConfigs/{{config_id}}'.
	Name *string `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                   *string `pulumi:"pubsubTopic"`
	SccFolderNotificationConfigId *string `pulumi:"sccFolderNotificationConfigId"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig *SccFolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
	Timeouts        *SccFolderNotificationConfigTimeouts        `pulumi:"timeouts"`
}

type SccFolderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringPtrInput
	// The resource name of this notification config, in the format 'folders/{{folder}}/notificationConfigs/{{config_id}}'.
	Name pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                   pulumi.StringPtrInput
	SccFolderNotificationConfigId pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig SccFolderNotificationConfigStreamingConfigPtrInput
	Timeouts        SccFolderNotificationConfigTimeoutsPtrInput
}

func (SccFolderNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccFolderNotificationConfigState)(nil)).Elem()
}

type sccFolderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder string `pulumi:"folder"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                   string  `pulumi:"pubsubTopic"`
	SccFolderNotificationConfigId *string `pulumi:"sccFolderNotificationConfigId"`
	// The config for triggering streaming-based notifications.
	StreamingConfig SccFolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
	Timeouts        *SccFolderNotificationConfigTimeouts       `pulumi:"timeouts"`
}

// The set of arguments for constructing a SccFolderNotificationConfig resource.
type SccFolderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                   pulumi.StringInput
	SccFolderNotificationConfigId pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig SccFolderNotificationConfigStreamingConfigInput
	Timeouts        SccFolderNotificationConfigTimeoutsPtrInput
}

func (SccFolderNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccFolderNotificationConfigArgs)(nil)).Elem()
}

type SccFolderNotificationConfigInput interface {
	pulumi.Input

	ToSccFolderNotificationConfigOutput() SccFolderNotificationConfigOutput
	ToSccFolderNotificationConfigOutputWithContext(ctx context.Context) SccFolderNotificationConfigOutput
}

func (*SccFolderNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SccFolderNotificationConfig)(nil)).Elem()
}

func (i *SccFolderNotificationConfig) ToSccFolderNotificationConfigOutput() SccFolderNotificationConfigOutput {
	return i.ToSccFolderNotificationConfigOutputWithContext(context.Background())
}

func (i *SccFolderNotificationConfig) ToSccFolderNotificationConfigOutputWithContext(ctx context.Context) SccFolderNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccFolderNotificationConfigOutput)
}

type SccFolderNotificationConfigOutput struct{ *pulumi.OutputState }

func (SccFolderNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccFolderNotificationConfig)(nil)).Elem()
}

func (o SccFolderNotificationConfigOutput) ToSccFolderNotificationConfigOutput() SccFolderNotificationConfigOutput {
	return o
}

func (o SccFolderNotificationConfigOutput) ToSccFolderNotificationConfigOutputWithContext(ctx context.Context) SccFolderNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o SccFolderNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o SccFolderNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Numerical ID of the parent folder.
func (o SccFolderNotificationConfigOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// The resource name of this notification config, in the format 'folders/{{folder}}/notificationConfigs/{{config_id}}'.
func (o SccFolderNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
func (o SccFolderNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

func (o SccFolderNotificationConfigOutput) SccFolderNotificationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringOutput { return v.SccFolderNotificationConfigId }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
func (o SccFolderNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
func (o SccFolderNotificationConfigOutput) StreamingConfig() SccFolderNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) SccFolderNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(SccFolderNotificationConfigStreamingConfigOutput)
}

func (o SccFolderNotificationConfigOutput) Timeouts() SccFolderNotificationConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccFolderNotificationConfig) SccFolderNotificationConfigTimeoutsPtrOutput { return v.Timeouts }).(SccFolderNotificationConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccFolderNotificationConfigInput)(nil)).Elem(), &SccFolderNotificationConfig{})
	pulumi.RegisterOutputType(SccFolderNotificationConfigOutput{})
}
