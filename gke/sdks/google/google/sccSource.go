// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccSource struct {
	pulumi.CustomResourceState

	// The description of the source (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
	// with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
	// contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The resource name of this source, in the format 'organizations/{{organization}}/sources/{{source}}'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Source lives in.
	Organization pulumi.StringOutput        `pulumi:"organization"`
	SccSourceId  pulumi.StringOutput        `pulumi:"sccSourceId"`
	Timeouts     SccSourceTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewSccSource registers a new resource with the given unique name, arguments, and options.
func NewSccSource(ctx *pulumi.Context,
	name string, args *SccSourceArgs, opts ...pulumi.ResourceOption) (*SccSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccSource
	err = ctx.RegisterPackageResource("google:index/sccSource:SccSource", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccSource gets an existing SccSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccSourceState, opts ...pulumi.ResourceOption) (*SccSource, error) {
	var resource SccSource
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/sccSource:SccSource", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccSource resources.
type sccSourceState struct {
	// The description of the source (max of 1024 characters).
	Description *string `pulumi:"description"`
	// The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
	// with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
	// contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
	DisplayName *string `pulumi:"displayName"`
	// The resource name of this source, in the format 'organizations/{{organization}}/sources/{{source}}'.
	Name *string `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Source lives in.
	Organization *string            `pulumi:"organization"`
	SccSourceId  *string            `pulumi:"sccSourceId"`
	Timeouts     *SccSourceTimeouts `pulumi:"timeouts"`
}

type SccSourceState struct {
	// The description of the source (max of 1024 characters).
	Description pulumi.StringPtrInput
	// The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
	// with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
	// contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
	DisplayName pulumi.StringPtrInput
	// The resource name of this source, in the format 'organizations/{{organization}}/sources/{{source}}'.
	Name pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Source lives in.
	Organization pulumi.StringPtrInput
	SccSourceId  pulumi.StringPtrInput
	Timeouts     SccSourceTimeoutsPtrInput
}

func (SccSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccSourceState)(nil)).Elem()
}

type sccSourceArgs struct {
	// The description of the source (max of 1024 characters).
	Description *string `pulumi:"description"`
	// The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
	// with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
	// contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
	DisplayName string `pulumi:"displayName"`
	// The organization whose Cloud Security Command Center the Source lives in.
	Organization string             `pulumi:"organization"`
	SccSourceId  *string            `pulumi:"sccSourceId"`
	Timeouts     *SccSourceTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SccSource resource.
type SccSourceArgs struct {
	// The description of the source (max of 1024 characters).
	Description pulumi.StringPtrInput
	// The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
	// with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
	// contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
	DisplayName pulumi.StringInput
	// The organization whose Cloud Security Command Center the Source lives in.
	Organization pulumi.StringInput
	SccSourceId  pulumi.StringPtrInput
	Timeouts     SccSourceTimeoutsPtrInput
}

func (SccSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccSourceArgs)(nil)).Elem()
}

type SccSourceInput interface {
	pulumi.Input

	ToSccSourceOutput() SccSourceOutput
	ToSccSourceOutputWithContext(ctx context.Context) SccSourceOutput
}

func (*SccSource) ElementType() reflect.Type {
	return reflect.TypeOf((**SccSource)(nil)).Elem()
}

func (i *SccSource) ToSccSourceOutput() SccSourceOutput {
	return i.ToSccSourceOutputWithContext(context.Background())
}

func (i *SccSource) ToSccSourceOutputWithContext(ctx context.Context) SccSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccSourceOutput)
}

type SccSourceOutput struct{ *pulumi.OutputState }

func (SccSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccSource)(nil)).Elem()
}

func (o SccSourceOutput) ToSccSourceOutput() SccSourceOutput {
	return o
}

func (o SccSourceOutput) ToSccSourceOutputWithContext(ctx context.Context) SccSourceOutput {
	return o
}

// The description of the source (max of 1024 characters).
func (o SccSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
// with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
// contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
func (o SccSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The resource name of this source, in the format 'organizations/{{organization}}/sources/{{source}}'.
func (o SccSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization whose Cloud Security Command Center the Source lives in.
func (o SccSourceOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSource) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SccSourceOutput) SccSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSource) pulumi.StringOutput { return v.SccSourceId }).(pulumi.StringOutput)
}

func (o SccSourceOutput) Timeouts() SccSourceTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccSource) SccSourceTimeoutsPtrOutput { return v.Timeouts }).(SccSourceTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccSourceInput)(nil)).Elem(), &SccSource{})
	pulumi.RegisterOutputType(SccSourceOutput{})
}
