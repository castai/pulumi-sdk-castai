// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlSslCert struct {
	pulumi.CustomResourceState

	// The actual certificate data for this client certificate.
	Cert pulumi.StringOutput `pulumi:"cert"`
	// The serial number extracted from the certificate data.
	CertSerialNumber pulumi.StringOutput `pulumi:"certSerialNumber"`
	// The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
	// a new resource to be created.
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// The name of the Cloud SQL instance. Changing this forces a new resource to be created.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The private key associated with the client certificate.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The CA cert of the server this client cert was generated from.
	ServerCaCert pulumi.StringOutput `pulumi:"serverCaCert"`
	// The SHA1 Fingerprint of the certificate.
	Sha1Fingerprint pulumi.StringOutput         `pulumi:"sha1Fingerprint"`
	SqlSslCertId    pulumi.StringOutput         `pulumi:"sqlSslCertId"`
	Timeouts        SqlSslCertTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewSqlSslCert registers a new resource with the given unique name, arguments, and options.
func NewSqlSslCert(ctx *pulumi.Context,
	name string, args *SqlSslCertArgs, opts ...pulumi.ResourceOption) (*SqlSslCert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"cert",
		"privateKey",
		"serverCaCert",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SqlSslCert
	err = ctx.RegisterPackageResource("google:index/sqlSslCert:SqlSslCert", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlSslCert gets an existing SqlSslCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlSslCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlSslCertState, opts ...pulumi.ResourceOption) (*SqlSslCert, error) {
	var resource SqlSslCert
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/sqlSslCert:SqlSslCert", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlSslCert resources.
type sqlSslCertState struct {
	// The actual certificate data for this client certificate.
	Cert *string `pulumi:"cert"`
	// The serial number extracted from the certificate data.
	CertSerialNumber *string `pulumi:"certSerialNumber"`
	// The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
	// a new resource to be created.
	CommonName *string `pulumi:"commonName"`
	// The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
	CreateTime *string `pulumi:"createTime"`
	// The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The name of the Cloud SQL instance. Changing this forces a new resource to be created.
	Instance *string `pulumi:"instance"`
	// The private key associated with the client certificate.
	PrivateKey *string `pulumi:"privateKey"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The CA cert of the server this client cert was generated from.
	ServerCaCert *string `pulumi:"serverCaCert"`
	// The SHA1 Fingerprint of the certificate.
	Sha1Fingerprint *string             `pulumi:"sha1Fingerprint"`
	SqlSslCertId    *string             `pulumi:"sqlSslCertId"`
	Timeouts        *SqlSslCertTimeouts `pulumi:"timeouts"`
}

type SqlSslCertState struct {
	// The actual certificate data for this client certificate.
	Cert pulumi.StringPtrInput
	// The serial number extracted from the certificate data.
	CertSerialNumber pulumi.StringPtrInput
	// The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
	// a new resource to be created.
	CommonName pulumi.StringPtrInput
	// The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
	CreateTime pulumi.StringPtrInput
	// The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
	ExpirationTime pulumi.StringPtrInput
	// The name of the Cloud SQL instance. Changing this forces a new resource to be created.
	Instance pulumi.StringPtrInput
	// The private key associated with the client certificate.
	PrivateKey pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The CA cert of the server this client cert was generated from.
	ServerCaCert pulumi.StringPtrInput
	// The SHA1 Fingerprint of the certificate.
	Sha1Fingerprint pulumi.StringPtrInput
	SqlSslCertId    pulumi.StringPtrInput
	Timeouts        SqlSslCertTimeoutsPtrInput
}

func (SqlSslCertState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlSslCertState)(nil)).Elem()
}

type sqlSslCertArgs struct {
	// The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
	// a new resource to be created.
	CommonName string `pulumi:"commonName"`
	// The name of the Cloud SQL instance. Changing this forces a new resource to be created.
	Instance string `pulumi:"instance"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project      *string             `pulumi:"project"`
	SqlSslCertId *string             `pulumi:"sqlSslCertId"`
	Timeouts     *SqlSslCertTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SqlSslCert resource.
type SqlSslCertArgs struct {
	// The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
	// a new resource to be created.
	CommonName pulumi.StringInput
	// The name of the Cloud SQL instance. Changing this forces a new resource to be created.
	Instance pulumi.StringInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project      pulumi.StringPtrInput
	SqlSslCertId pulumi.StringPtrInput
	Timeouts     SqlSslCertTimeoutsPtrInput
}

func (SqlSslCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlSslCertArgs)(nil)).Elem()
}

type SqlSslCertInput interface {
	pulumi.Input

	ToSqlSslCertOutput() SqlSslCertOutput
	ToSqlSslCertOutputWithContext(ctx context.Context) SqlSslCertOutput
}

func (*SqlSslCert) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlSslCert)(nil)).Elem()
}

func (i *SqlSslCert) ToSqlSslCertOutput() SqlSslCertOutput {
	return i.ToSqlSslCertOutputWithContext(context.Background())
}

func (i *SqlSslCert) ToSqlSslCertOutputWithContext(ctx context.Context) SqlSslCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlSslCertOutput)
}

type SqlSslCertOutput struct{ *pulumi.OutputState }

func (SqlSslCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlSslCert)(nil)).Elem()
}

func (o SqlSslCertOutput) ToSqlSslCertOutput() SqlSslCertOutput {
	return o
}

func (o SqlSslCertOutput) ToSqlSslCertOutputWithContext(ctx context.Context) SqlSslCertOutput {
	return o
}

// The actual certificate data for this client certificate.
func (o SqlSslCertOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

// The serial number extracted from the certificate data.
func (o SqlSslCertOutput) CertSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.CertSerialNumber }).(pulumi.StringOutput)
}

// The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
// a new resource to be created.
func (o SqlSslCertOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

// The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
func (o SqlSslCertOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
func (o SqlSslCertOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// The name of the Cloud SQL instance. Changing this forces a new resource to be created.
func (o SqlSslCertOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The private key associated with the client certificate.
func (o SqlSslCertOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (o SqlSslCertOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The CA cert of the server this client cert was generated from.
func (o SqlSslCertOutput) ServerCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.ServerCaCert }).(pulumi.StringOutput)
}

// The SHA1 Fingerprint of the certificate.
func (o SqlSslCertOutput) Sha1Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.Sha1Fingerprint }).(pulumi.StringOutput)
}

func (o SqlSslCertOutput) SqlSslCertId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlSslCert) pulumi.StringOutput { return v.SqlSslCertId }).(pulumi.StringOutput)
}

func (o SqlSslCertOutput) Timeouts() SqlSslCertTimeoutsPtrOutput {
	return o.ApplyT(func(v *SqlSslCert) SqlSslCertTimeoutsPtrOutput { return v.Timeouts }).(SqlSslCertTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlSslCertInput)(nil)).Elem(), &SqlSslCert{})
	pulumi.RegisterOutputType(SqlSslCertOutput{})
}
