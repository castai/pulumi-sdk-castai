// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificateManagerTrustConfig struct {
	pulumi.CustomResourceState

	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as
	// long as the certificate is parseable, proof of private key possession is established, and constraints on the
	// certificate's SAN field are met.
	AllowlistedCertificates         CertificateManagerTrustConfigAllowlistedCertificateArrayOutput `pulumi:"allowlistedCertificates"`
	CertificateManagerTrustConfigId pulumi.StringOutput                                            `pulumi:"certificateManagerTrustConfigId"`
	// The creation timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a trust config.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Set of label tags associated with the trust config. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The trust config location.
	Location pulumi.StringOutput `pulumi:"location"`
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                         `pulumi:"terraformLabels"`
	Timeouts        CertificateManagerTrustConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load
	// Balancers, currently not supported for SPIFFE certificate validation.
	TrustStores CertificateManagerTrustConfigTrustStoreArrayOutput `pulumi:"trustStores"`
	// The last update timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateManagerTrustConfig registers a new resource with the given unique name, arguments, and options.
func NewCertificateManagerTrustConfig(ctx *pulumi.Context,
	name string, args *CertificateManagerTrustConfigArgs, opts ...pulumi.ResourceOption) (*CertificateManagerTrustConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CertificateManagerTrustConfig
	err = ctx.RegisterPackageResource("google:index/certificateManagerTrustConfig:CertificateManagerTrustConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateManagerTrustConfig gets an existing CertificateManagerTrustConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateManagerTrustConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateManagerTrustConfigState, opts ...pulumi.ResourceOption) (*CertificateManagerTrustConfig, error) {
	var resource CertificateManagerTrustConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/certificateManagerTrustConfig:CertificateManagerTrustConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateManagerTrustConfig resources.
type certificateManagerTrustConfigState struct {
	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as
	// long as the certificate is parseable, proof of private key possession is established, and constraints on the
	// certificate's SAN field are met.
	AllowlistedCertificates         []CertificateManagerTrustConfigAllowlistedCertificate `pulumi:"allowlistedCertificates"`
	CertificateManagerTrustConfigId *string                                               `pulumi:"certificateManagerTrustConfigId"`
	// The creation timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// One or more paragraphs of text description of a trust config.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Set of label tags associated with the trust config. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The trust config location.
	Location *string `pulumi:"location"`
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                      `pulumi:"terraformLabels"`
	Timeouts        *CertificateManagerTrustConfigTimeouts `pulumi:"timeouts"`
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load
	// Balancers, currently not supported for SPIFFE certificate validation.
	TrustStores []CertificateManagerTrustConfigTrustStore `pulumi:"trustStores"`
	// The last update timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type CertificateManagerTrustConfigState struct {
	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as
	// long as the certificate is parseable, proof of private key possession is established, and constraints on the
	// certificate's SAN field are met.
	AllowlistedCertificates         CertificateManagerTrustConfigAllowlistedCertificateArrayInput
	CertificateManagerTrustConfigId pulumi.StringPtrInput
	// The creation timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// One or more paragraphs of text description of a trust config.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Set of label tags associated with the trust config. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The trust config location.
	Location pulumi.StringPtrInput
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        CertificateManagerTrustConfigTimeoutsPtrInput
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load
	// Balancers, currently not supported for SPIFFE certificate validation.
	TrustStores CertificateManagerTrustConfigTrustStoreArrayInput
	// The last update timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (CertificateManagerTrustConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateManagerTrustConfigState)(nil)).Elem()
}

type certificateManagerTrustConfigArgs struct {
	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as
	// long as the certificate is parseable, proof of private key possession is established, and constraints on the
	// certificate's SAN field are met.
	AllowlistedCertificates         []CertificateManagerTrustConfigAllowlistedCertificate `pulumi:"allowlistedCertificates"`
	CertificateManagerTrustConfigId *string                                               `pulumi:"certificateManagerTrustConfigId"`
	// One or more paragraphs of text description of a trust config.
	Description *string `pulumi:"description"`
	// Set of label tags associated with the trust config. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The trust config location.
	Location string `pulumi:"location"`
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name     *string                                `pulumi:"name"`
	Project  *string                                `pulumi:"project"`
	Timeouts *CertificateManagerTrustConfigTimeouts `pulumi:"timeouts"`
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load
	// Balancers, currently not supported for SPIFFE certificate validation.
	TrustStores []CertificateManagerTrustConfigTrustStore `pulumi:"trustStores"`
}

// The set of arguments for constructing a CertificateManagerTrustConfig resource.
type CertificateManagerTrustConfigArgs struct {
	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as
	// long as the certificate is parseable, proof of private key possession is established, and constraints on the
	// certificate's SAN field are met.
	AllowlistedCertificates         CertificateManagerTrustConfigAllowlistedCertificateArrayInput
	CertificateManagerTrustConfigId pulumi.StringPtrInput
	// One or more paragraphs of text description of a trust config.
	Description pulumi.StringPtrInput
	// Set of label tags associated with the trust config. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The trust config location.
	Location pulumi.StringInput
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts CertificateManagerTrustConfigTimeoutsPtrInput
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load
	// Balancers, currently not supported for SPIFFE certificate validation.
	TrustStores CertificateManagerTrustConfigTrustStoreArrayInput
}

func (CertificateManagerTrustConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateManagerTrustConfigArgs)(nil)).Elem()
}

type CertificateManagerTrustConfigInput interface {
	pulumi.Input

	ToCertificateManagerTrustConfigOutput() CertificateManagerTrustConfigOutput
	ToCertificateManagerTrustConfigOutputWithContext(ctx context.Context) CertificateManagerTrustConfigOutput
}

func (*CertificateManagerTrustConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManagerTrustConfig)(nil)).Elem()
}

func (i *CertificateManagerTrustConfig) ToCertificateManagerTrustConfigOutput() CertificateManagerTrustConfigOutput {
	return i.ToCertificateManagerTrustConfigOutputWithContext(context.Background())
}

func (i *CertificateManagerTrustConfig) ToCertificateManagerTrustConfigOutputWithContext(ctx context.Context) CertificateManagerTrustConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagerTrustConfigOutput)
}

type CertificateManagerTrustConfigOutput struct{ *pulumi.OutputState }

func (CertificateManagerTrustConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManagerTrustConfig)(nil)).Elem()
}

func (o CertificateManagerTrustConfigOutput) ToCertificateManagerTrustConfigOutput() CertificateManagerTrustConfigOutput {
	return o
}

func (o CertificateManagerTrustConfigOutput) ToCertificateManagerTrustConfigOutputWithContext(ctx context.Context) CertificateManagerTrustConfigOutput {
	return o
}

// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as
// long as the certificate is parseable, proof of private key possession is established, and constraints on the
// certificate's SAN field are met.
func (o CertificateManagerTrustConfigOutput) AllowlistedCertificates() CertificateManagerTrustConfigAllowlistedCertificateArrayOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) CertificateManagerTrustConfigAllowlistedCertificateArrayOutput {
		return v.AllowlistedCertificates
	}).(CertificateManagerTrustConfigAllowlistedCertificateArrayOutput)
}

func (o CertificateManagerTrustConfigOutput) CertificateManagerTrustConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringOutput { return v.CertificateManagerTrustConfigId }).(pulumi.StringOutput)
}

// The creation timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateManagerTrustConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a trust config.
func (o CertificateManagerTrustConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CertificateManagerTrustConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Set of label tags associated with the trust config. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o CertificateManagerTrustConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The trust config location.
func (o CertificateManagerTrustConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A user-defined name of the trust config. Trust config names must be unique globally.
func (o CertificateManagerTrustConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateManagerTrustConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o CertificateManagerTrustConfigOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o CertificateManagerTrustConfigOutput) Timeouts() CertificateManagerTrustConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) CertificateManagerTrustConfigTimeoutsPtrOutput {
		return v.Timeouts
	}).(CertificateManagerTrustConfigTimeoutsPtrOutput)
}

// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load
// Balancers, currently not supported for SPIFFE certificate validation.
func (o CertificateManagerTrustConfigOutput) TrustStores() CertificateManagerTrustConfigTrustStoreArrayOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) CertificateManagerTrustConfigTrustStoreArrayOutput {
		return v.TrustStores
	}).(CertificateManagerTrustConfigTrustStoreArrayOutput)
}

// The last update timestamp of a TrustConfig. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
// to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateManagerTrustConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerTrustConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagerTrustConfigInput)(nil)).Elem(), &CertificateManagerTrustConfig{})
	pulumi.RegisterOutputType(CertificateManagerTrustConfigOutput{})
}
