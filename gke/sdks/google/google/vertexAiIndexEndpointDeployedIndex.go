// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiIndexEndpointDeployedIndex struct {
	pulumi.CustomResourceState

	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally
	// allows only a modest additional configuration.
	AutomaticResources VertexAiIndexEndpointDeployedIndexAutomaticResourcesPtrOutput `pulumi:"automaticResources"`
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual
	// configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail.
	// We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The
	// max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types
	// available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types
	// available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and
	// n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	DedicatedResources VertexAiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput `pulumi:"dedicatedResources"`
	// If set, the authentication is enabled for the private endpoint.
	DeployedIndexAuthConfig VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput `pulumi:"deployedIndexAuthConfig"`
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and
	// only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId pulumi.StringOutput `pulumi:"deployedIndexId"`
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default'
	// deployment group. Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network
	// has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration.
	// Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the
	// deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See
	// the official documentation
	// here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup pulumi.StringPtrOutput `pulumi:"deploymentGroup"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging pulumi.BoolPtrOutput `pulumi:"enableAccessLogging"`
	// The name of the Index this is the deployment of.
	Index pulumi.StringOutput `pulumi:"index"`
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint pulumi.StringOutput `pulumi:"indexEndpoint"`
	// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original
	// Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously
	// updated in the background to reflect these changes. If this timestamp's value is at least the
	// [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time)
	// of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older,
	// then to see which updates this DeployedIndex already contains (and which it does not), one must
	// [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations)
	// the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal
	// or before this sync time are contained in this DeployedIndex. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	IndexSyncTime pulumi.StringOutput `pulumi:"indexSyncTime"`
	// The name of the DeployedIndex resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services
	// access. This field is populated if
	// [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network)
	// is configured.
	PrivateEndpoints VertexAiIndexEndpointDeployedIndexPrivateEndpointArrayOutput `pulumi:"privateEndpoints"`
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the
	// index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC
	// network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses)
	// Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see
	// https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges                     pulumi.StringArrayOutput                            `pulumi:"reservedIpRanges"`
	Timeouts                             VertexAiIndexEndpointDeployedIndexTimeoutsPtrOutput `pulumi:"timeouts"`
	VertexAiIndexEndpointDeployedIndexId pulumi.StringOutput                                 `pulumi:"vertexAiIndexEndpointDeployedIndexId"`
}

// NewVertexAiIndexEndpointDeployedIndex registers a new resource with the given unique name, arguments, and options.
func NewVertexAiIndexEndpointDeployedIndex(ctx *pulumi.Context,
	name string, args *VertexAiIndexEndpointDeployedIndexArgs, opts ...pulumi.ResourceOption) (*VertexAiIndexEndpointDeployedIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeployedIndexId == nil {
		return nil, errors.New("invalid value for required argument 'DeployedIndexId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	if args.IndexEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'IndexEndpoint'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiIndexEndpointDeployedIndex
	err = ctx.RegisterPackageResource("google:index/vertexAiIndexEndpointDeployedIndex:VertexAiIndexEndpointDeployedIndex", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiIndexEndpointDeployedIndex gets an existing VertexAiIndexEndpointDeployedIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiIndexEndpointDeployedIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiIndexEndpointDeployedIndexState, opts ...pulumi.ResourceOption) (*VertexAiIndexEndpointDeployedIndex, error) {
	var resource VertexAiIndexEndpointDeployedIndex
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/vertexAiIndexEndpointDeployedIndex:VertexAiIndexEndpointDeployedIndex", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiIndexEndpointDeployedIndex resources.
type vertexAiIndexEndpointDeployedIndexState struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally
	// allows only a modest additional configuration.
	AutomaticResources *VertexAiIndexEndpointDeployedIndexAutomaticResources `pulumi:"automaticResources"`
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual
	// configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail.
	// We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The
	// max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types
	// available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types
	// available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and
	// n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	DedicatedResources *VertexAiIndexEndpointDeployedIndexDedicatedResources `pulumi:"dedicatedResources"`
	// If set, the authentication is enabled for the private endpoint.
	DeployedIndexAuthConfig *VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfig `pulumi:"deployedIndexAuthConfig"`
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and
	// only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId *string `pulumi:"deployedIndexId"`
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default'
	// deployment group. Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network
	// has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration.
	// Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the
	// deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See
	// the official documentation
	// here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup *string `pulumi:"deploymentGroup"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName *string `pulumi:"displayName"`
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging *bool `pulumi:"enableAccessLogging"`
	// The name of the Index this is the deployment of.
	Index *string `pulumi:"index"`
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint *string `pulumi:"indexEndpoint"`
	// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original
	// Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously
	// updated in the background to reflect these changes. If this timestamp's value is at least the
	// [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time)
	// of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older,
	// then to see which updates this DeployedIndex already contains (and which it does not), one must
	// [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations)
	// the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal
	// or before this sync time are contained in this DeployedIndex. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	IndexSyncTime *string `pulumi:"indexSyncTime"`
	// The name of the DeployedIndex resource.
	Name *string `pulumi:"name"`
	// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services
	// access. This field is populated if
	// [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network)
	// is configured.
	PrivateEndpoints []VertexAiIndexEndpointDeployedIndexPrivateEndpoint `pulumi:"privateEndpoints"`
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the
	// index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC
	// network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses)
	// Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see
	// https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges                     []string                                    `pulumi:"reservedIpRanges"`
	Timeouts                             *VertexAiIndexEndpointDeployedIndexTimeouts `pulumi:"timeouts"`
	VertexAiIndexEndpointDeployedIndexId *string                                     `pulumi:"vertexAiIndexEndpointDeployedIndexId"`
}

type VertexAiIndexEndpointDeployedIndexState struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally
	// allows only a modest additional configuration.
	AutomaticResources VertexAiIndexEndpointDeployedIndexAutomaticResourcesPtrInput
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	CreateTime pulumi.StringPtrInput
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual
	// configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail.
	// We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The
	// max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types
	// available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types
	// available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and
	// n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	DedicatedResources VertexAiIndexEndpointDeployedIndexDedicatedResourcesPtrInput
	// If set, the authentication is enabled for the private endpoint.
	DeployedIndexAuthConfig VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrInput
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and
	// only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId pulumi.StringPtrInput
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default'
	// deployment group. Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network
	// has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration.
	// Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the
	// deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See
	// the official documentation
	// here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrInput
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging pulumi.BoolPtrInput
	// The name of the Index this is the deployment of.
	Index pulumi.StringPtrInput
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint pulumi.StringPtrInput
	// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original
	// Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously
	// updated in the background to reflect these changes. If this timestamp's value is at least the
	// [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time)
	// of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older,
	// then to see which updates this DeployedIndex already contains (and which it does not), one must
	// [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations)
	// the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal
	// or before this sync time are contained in this DeployedIndex. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	IndexSyncTime pulumi.StringPtrInput
	// The name of the DeployedIndex resource.
	Name pulumi.StringPtrInput
	// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services
	// access. This field is populated if
	// [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network)
	// is configured.
	PrivateEndpoints VertexAiIndexEndpointDeployedIndexPrivateEndpointArrayInput
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the
	// index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC
	// network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses)
	// Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see
	// https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges                     pulumi.StringArrayInput
	Timeouts                             VertexAiIndexEndpointDeployedIndexTimeoutsPtrInput
	VertexAiIndexEndpointDeployedIndexId pulumi.StringPtrInput
}

func (VertexAiIndexEndpointDeployedIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiIndexEndpointDeployedIndexState)(nil)).Elem()
}

type vertexAiIndexEndpointDeployedIndexArgs struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally
	// allows only a modest additional configuration.
	AutomaticResources *VertexAiIndexEndpointDeployedIndexAutomaticResources `pulumi:"automaticResources"`
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual
	// configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail.
	// We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The
	// max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types
	// available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types
	// available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and
	// n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	DedicatedResources *VertexAiIndexEndpointDeployedIndexDedicatedResources `pulumi:"dedicatedResources"`
	// If set, the authentication is enabled for the private endpoint.
	DeployedIndexAuthConfig *VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfig `pulumi:"deployedIndexAuthConfig"`
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and
	// only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId string `pulumi:"deployedIndexId"`
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default'
	// deployment group. Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network
	// has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration.
	// Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the
	// deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See
	// the official documentation
	// here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup *string `pulumi:"deploymentGroup"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName *string `pulumi:"displayName"`
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging *bool `pulumi:"enableAccessLogging"`
	// The name of the Index this is the deployment of.
	Index string `pulumi:"index"`
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint string `pulumi:"indexEndpoint"`
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the
	// index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC
	// network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses)
	// Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see
	// https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges                     []string                                    `pulumi:"reservedIpRanges"`
	Timeouts                             *VertexAiIndexEndpointDeployedIndexTimeouts `pulumi:"timeouts"`
	VertexAiIndexEndpointDeployedIndexId *string                                     `pulumi:"vertexAiIndexEndpointDeployedIndexId"`
}

// The set of arguments for constructing a VertexAiIndexEndpointDeployedIndex resource.
type VertexAiIndexEndpointDeployedIndexArgs struct {
	// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally
	// allows only a modest additional configuration.
	AutomaticResources VertexAiIndexEndpointDeployedIndexAutomaticResourcesPtrInput
	// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual
	// configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail.
	// We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The
	// max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types
	// available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types
	// available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and
	// n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
	DedicatedResources VertexAiIndexEndpointDeployedIndexDedicatedResourcesPtrInput
	// If set, the authentication is enabled for the private endpoint.
	DeployedIndexAuthConfig VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrInput
	// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and
	// only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
	DeployedIndexId pulumi.StringInput
	// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default'
	// deployment group. Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network
	// has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration.
	// Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the
	// deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See
	// the official documentation
	// here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
	// Note: we only support up to 5 deployment groups (not including 'default').
	DeploymentGroup pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringPtrInput
	// If true, private endpoint's access logs are sent to Cloud Logging.
	EnableAccessLogging pulumi.BoolPtrInput
	// The name of the Index this is the deployment of.
	Index pulumi.StringInput
	// Identifies the index endpoint. Must be in the format
	// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
	IndexEndpoint pulumi.StringInput
	// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the
	// index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC
	// network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses)
	// Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see
	// https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
	ReservedIpRanges                     pulumi.StringArrayInput
	Timeouts                             VertexAiIndexEndpointDeployedIndexTimeoutsPtrInput
	VertexAiIndexEndpointDeployedIndexId pulumi.StringPtrInput
}

func (VertexAiIndexEndpointDeployedIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiIndexEndpointDeployedIndexArgs)(nil)).Elem()
}

type VertexAiIndexEndpointDeployedIndexInput interface {
	pulumi.Input

	ToVertexAiIndexEndpointDeployedIndexOutput() VertexAiIndexEndpointDeployedIndexOutput
	ToVertexAiIndexEndpointDeployedIndexOutputWithContext(ctx context.Context) VertexAiIndexEndpointDeployedIndexOutput
}

func (*VertexAiIndexEndpointDeployedIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (i *VertexAiIndexEndpointDeployedIndex) ToVertexAiIndexEndpointDeployedIndexOutput() VertexAiIndexEndpointDeployedIndexOutput {
	return i.ToVertexAiIndexEndpointDeployedIndexOutputWithContext(context.Background())
}

func (i *VertexAiIndexEndpointDeployedIndex) ToVertexAiIndexEndpointDeployedIndexOutputWithContext(ctx context.Context) VertexAiIndexEndpointDeployedIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiIndexEndpointDeployedIndexOutput)
}

type VertexAiIndexEndpointDeployedIndexOutput struct{ *pulumi.OutputState }

func (VertexAiIndexEndpointDeployedIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiIndexEndpointDeployedIndex)(nil)).Elem()
}

func (o VertexAiIndexEndpointDeployedIndexOutput) ToVertexAiIndexEndpointDeployedIndexOutput() VertexAiIndexEndpointDeployedIndexOutput {
	return o
}

func (o VertexAiIndexEndpointDeployedIndexOutput) ToVertexAiIndexEndpointDeployedIndexOutputWithContext(ctx context.Context) VertexAiIndexEndpointDeployedIndexOutput {
	return o
}

// A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally
// allows only a modest additional configuration.
func (o VertexAiIndexEndpointDeployedIndexOutput) AutomaticResources() VertexAiIndexEndpointDeployedIndexAutomaticResourcesPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) VertexAiIndexEndpointDeployedIndexAutomaticResourcesPtrOutput {
		return v.AutomaticResources
	}).(VertexAiIndexEndpointDeployedIndexAutomaticResourcesPtrOutput)
}

// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits.
func (o VertexAiIndexEndpointDeployedIndexOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual
// configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail.
// We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The
// max allowed replica count is 1000. Available machine types for SMALL shard: e2-standard-2 and all machine types
// available for MEDIUM and LARGE shard. Available machine types for MEDIUM shard: e2-standard-16 and all machine types
// available for LARGE shard. Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32. n1-standard-16 and
// n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
func (o VertexAiIndexEndpointDeployedIndexOutput) DedicatedResources() VertexAiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) VertexAiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput {
		return v.DedicatedResources
	}).(VertexAiIndexEndpointDeployedIndexDedicatedResourcesPtrOutput)
}

// If set, the authentication is enabled for the private endpoint.
func (o VertexAiIndexEndpointDeployedIndexOutput) DeployedIndexAuthConfig() VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput {
		return v.DeployedIndexAuthConfig
	}).(VertexAiIndexEndpointDeployedIndexDeployedIndexAuthConfigPtrOutput)
}

// The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and
// only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
func (o VertexAiIndexEndpointDeployedIndexOutput) DeployedIndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.DeployedIndexId }).(pulumi.StringOutput)
}

// The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default'
// deployment group. Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network
// has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration.
// Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the
// deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See
// the official documentation
// here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
// Note: we only support up to 5 deployment groups (not including 'default').
func (o VertexAiIndexEndpointDeployedIndexOutput) DeploymentGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringPtrOutput { return v.DeploymentGroup }).(pulumi.StringPtrOutput)
}

// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o VertexAiIndexEndpointDeployedIndexOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// If true, private endpoint's access logs are sent to Cloud Logging.
func (o VertexAiIndexEndpointDeployedIndexOutput) EnableAccessLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.BoolPtrOutput { return v.EnableAccessLogging }).(pulumi.BoolPtrOutput)
}

// The name of the Index this is the deployment of.
func (o VertexAiIndexEndpointDeployedIndexOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.Index }).(pulumi.StringOutput)
}

// Identifies the index endpoint. Must be in the format
// 'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'
func (o VertexAiIndexEndpointDeployedIndexOutput) IndexEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.IndexEndpoint }).(pulumi.StringOutput)
}

// The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original
// Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously
// updated in the background to reflect these changes. If this timestamp's value is at least the
// [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time)
// of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older,
// then to see which updates this DeployedIndex already contains (and which it does not), one must
// [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations)
// the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal
// or before this sync time are contained in this DeployedIndex. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o VertexAiIndexEndpointDeployedIndexOutput) IndexSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.IndexSyncTime }).(pulumi.StringOutput)
}

// The name of the DeployedIndex resource.
func (o VertexAiIndexEndpointDeployedIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provides paths for users to send requests directly to the deployed index services running on Cloud via private services
// access. This field is populated if
// [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network)
// is configured.
func (o VertexAiIndexEndpointDeployedIndexOutput) PrivateEndpoints() VertexAiIndexEndpointDeployedIndexPrivateEndpointArrayOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) VertexAiIndexEndpointDeployedIndexPrivateEndpointArrayOutput {
		return v.PrivateEndpoints
	}).(VertexAiIndexEndpointDeployedIndexPrivateEndpointArrayOutput)
}

// A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the
// index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC
// network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses)
// Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see
// https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
func (o VertexAiIndexEndpointDeployedIndexOutput) ReservedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringArrayOutput { return v.ReservedIpRanges }).(pulumi.StringArrayOutput)
}

func (o VertexAiIndexEndpointDeployedIndexOutput) Timeouts() VertexAiIndexEndpointDeployedIndexTimeoutsPtrOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) VertexAiIndexEndpointDeployedIndexTimeoutsPtrOutput {
		return v.Timeouts
	}).(VertexAiIndexEndpointDeployedIndexTimeoutsPtrOutput)
}

func (o VertexAiIndexEndpointDeployedIndexOutput) VertexAiIndexEndpointDeployedIndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndexEndpointDeployedIndex) pulumi.StringOutput {
		return v.VertexAiIndexEndpointDeployedIndexId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiIndexEndpointDeployedIndexInput)(nil)).Elem(), &VertexAiIndexEndpointDeployedIndex{})
	pulumi.RegisterOutputType(VertexAiIndexEndpointDeployedIndexOutput{})
}
