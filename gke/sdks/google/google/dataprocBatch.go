// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataprocBatch struct {
	pulumi.CustomResourceState

	// The ID to use for the batch, which will become the final component of the batch's resource name. This value must be 4-63
	// characters. Valid characters are /[a-z][0-9]-/.
	BatchId pulumi.StringPtrOutput `pulumi:"batchId"`
	// The time when the batch was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The email address of the user who created the batch.
	Creator         pulumi.StringOutput    `pulumi:"creator"`
	DataprocBatchId pulumi.StringOutput    `pulumi:"dataprocBatchId"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Environment configuration for the batch execution.
	EnvironmentConfig DataprocBatchEnvironmentConfigPtrOutput `pulumi:"environmentConfig"`
	// The labels to associate with this batch. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location in which the batch will be created in.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the batch.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource name of the operation associated with this batch.
	Operation pulumi.StringOutput `pulumi:"operation"`
	Project   pulumi.StringOutput `pulumi:"project"`
	// PySpark batch config.
	PysparkBatch DataprocBatchPysparkBatchPtrOutput `pulumi:"pysparkBatch"`
	// Runtime configuration for the batch execution.
	RuntimeConfig DataprocBatchRuntimeConfigPtrOutput `pulumi:"runtimeConfig"`
	// Runtime information about batch execution.
	RuntimeInfos DataprocBatchRuntimeInfoArrayOutput `pulumi:"runtimeInfos"`
	// Spark batch config.
	SparkBatch DataprocBatchSparkBatchPtrOutput `pulumi:"sparkBatch"`
	// SparkR batch config.
	SparkRBatch DataprocBatchSparkRBatchPtrOutput `pulumi:"sparkRBatch"`
	// Spark SQL batch config.
	SparkSqlBatch DataprocBatchSparkSqlBatchPtrOutput `pulumi:"sparkSqlBatch"`
	// The state of the batch. For possible values, see the [API
	// documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
	State pulumi.StringOutput `pulumi:"state"`
	// Historical state information for the batch.
	StateHistories DataprocBatchStateHistoryArrayOutput `pulumi:"stateHistories"`
	// Batch state details, such as a failure description if the state is FAILED.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// Batch state details, such as a failure description if the state is FAILED.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput         `pulumi:"terraformLabels"`
	Timeouts        DataprocBatchTimeoutsPtrOutput `pulumi:"timeouts"`
	// A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewDataprocBatch registers a new resource with the given unique name, arguments, and options.
func NewDataprocBatch(ctx *pulumi.Context,
	name string, args *DataprocBatchArgs, opts ...pulumi.ResourceOption) (*DataprocBatch, error) {
	if args == nil {
		args = &DataprocBatchArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataprocBatch
	err = ctx.RegisterPackageResource("google:index/dataprocBatch:DataprocBatch", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataprocBatch gets an existing DataprocBatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataprocBatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataprocBatchState, opts ...pulumi.ResourceOption) (*DataprocBatch, error) {
	var resource DataprocBatch
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/dataprocBatch:DataprocBatch", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataprocBatch resources.
type dataprocBatchState struct {
	// The ID to use for the batch, which will become the final component of the batch's resource name. This value must be 4-63
	// characters. Valid characters are /[a-z][0-9]-/.
	BatchId *string `pulumi:"batchId"`
	// The time when the batch was created.
	CreateTime *string `pulumi:"createTime"`
	// The email address of the user who created the batch.
	Creator         *string           `pulumi:"creator"`
	DataprocBatchId *string           `pulumi:"dataprocBatchId"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Environment configuration for the batch execution.
	EnvironmentConfig *DataprocBatchEnvironmentConfig `pulumi:"environmentConfig"`
	// The labels to associate with this batch. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location in which the batch will be created in.
	Location *string `pulumi:"location"`
	// The resource name of the batch.
	Name *string `pulumi:"name"`
	// The resource name of the operation associated with this batch.
	Operation *string `pulumi:"operation"`
	Project   *string `pulumi:"project"`
	// PySpark batch config.
	PysparkBatch *DataprocBatchPysparkBatch `pulumi:"pysparkBatch"`
	// Runtime configuration for the batch execution.
	RuntimeConfig *DataprocBatchRuntimeConfig `pulumi:"runtimeConfig"`
	// Runtime information about batch execution.
	RuntimeInfos []DataprocBatchRuntimeInfo `pulumi:"runtimeInfos"`
	// Spark batch config.
	SparkBatch *DataprocBatchSparkBatch `pulumi:"sparkBatch"`
	// SparkR batch config.
	SparkRBatch *DataprocBatchSparkRBatch `pulumi:"sparkRBatch"`
	// Spark SQL batch config.
	SparkSqlBatch *DataprocBatchSparkSqlBatch `pulumi:"sparkSqlBatch"`
	// The state of the batch. For possible values, see the [API
	// documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
	State *string `pulumi:"state"`
	// Historical state information for the batch.
	StateHistories []DataprocBatchStateHistory `pulumi:"stateHistories"`
	// Batch state details, such as a failure description if the state is FAILED.
	StateMessage *string `pulumi:"stateMessage"`
	// Batch state details, such as a failure description if the state is FAILED.
	StateTime *string `pulumi:"stateTime"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string      `pulumi:"terraformLabels"`
	Timeouts        *DataprocBatchTimeouts `pulumi:"timeouts"`
	// A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
	Uuid *string `pulumi:"uuid"`
}

type DataprocBatchState struct {
	// The ID to use for the batch, which will become the final component of the batch's resource name. This value must be 4-63
	// characters. Valid characters are /[a-z][0-9]-/.
	BatchId pulumi.StringPtrInput
	// The time when the batch was created.
	CreateTime pulumi.StringPtrInput
	// The email address of the user who created the batch.
	Creator         pulumi.StringPtrInput
	DataprocBatchId pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Environment configuration for the batch execution.
	EnvironmentConfig DataprocBatchEnvironmentConfigPtrInput
	// The labels to associate with this batch. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location in which the batch will be created in.
	Location pulumi.StringPtrInput
	// The resource name of the batch.
	Name pulumi.StringPtrInput
	// The resource name of the operation associated with this batch.
	Operation pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	// PySpark batch config.
	PysparkBatch DataprocBatchPysparkBatchPtrInput
	// Runtime configuration for the batch execution.
	RuntimeConfig DataprocBatchRuntimeConfigPtrInput
	// Runtime information about batch execution.
	RuntimeInfos DataprocBatchRuntimeInfoArrayInput
	// Spark batch config.
	SparkBatch DataprocBatchSparkBatchPtrInput
	// SparkR batch config.
	SparkRBatch DataprocBatchSparkRBatchPtrInput
	// Spark SQL batch config.
	SparkSqlBatch DataprocBatchSparkSqlBatchPtrInput
	// The state of the batch. For possible values, see the [API
	// documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
	State pulumi.StringPtrInput
	// Historical state information for the batch.
	StateHistories DataprocBatchStateHistoryArrayInput
	// Batch state details, such as a failure description if the state is FAILED.
	StateMessage pulumi.StringPtrInput
	// Batch state details, such as a failure description if the state is FAILED.
	StateTime pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DataprocBatchTimeoutsPtrInput
	// A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
	Uuid pulumi.StringPtrInput
}

func (DataprocBatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocBatchState)(nil)).Elem()
}

type dataprocBatchArgs struct {
	// The ID to use for the batch, which will become the final component of the batch's resource name. This value must be 4-63
	// characters. Valid characters are /[a-z][0-9]-/.
	BatchId         *string `pulumi:"batchId"`
	DataprocBatchId *string `pulumi:"dataprocBatchId"`
	// Environment configuration for the batch execution.
	EnvironmentConfig *DataprocBatchEnvironmentConfig `pulumi:"environmentConfig"`
	// The labels to associate with this batch. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location in which the batch will be created in.
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// PySpark batch config.
	PysparkBatch *DataprocBatchPysparkBatch `pulumi:"pysparkBatch"`
	// Runtime configuration for the batch execution.
	RuntimeConfig *DataprocBatchRuntimeConfig `pulumi:"runtimeConfig"`
	// Spark batch config.
	SparkBatch *DataprocBatchSparkBatch `pulumi:"sparkBatch"`
	// SparkR batch config.
	SparkRBatch *DataprocBatchSparkRBatch `pulumi:"sparkRBatch"`
	// Spark SQL batch config.
	SparkSqlBatch *DataprocBatchSparkSqlBatch `pulumi:"sparkSqlBatch"`
	Timeouts      *DataprocBatchTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a DataprocBatch resource.
type DataprocBatchArgs struct {
	// The ID to use for the batch, which will become the final component of the batch's resource name. This value must be 4-63
	// characters. Valid characters are /[a-z][0-9]-/.
	BatchId         pulumi.StringPtrInput
	DataprocBatchId pulumi.StringPtrInput
	// Environment configuration for the batch execution.
	EnvironmentConfig DataprocBatchEnvironmentConfigPtrInput
	// The labels to associate with this batch. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location in which the batch will be created in.
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// PySpark batch config.
	PysparkBatch DataprocBatchPysparkBatchPtrInput
	// Runtime configuration for the batch execution.
	RuntimeConfig DataprocBatchRuntimeConfigPtrInput
	// Spark batch config.
	SparkBatch DataprocBatchSparkBatchPtrInput
	// SparkR batch config.
	SparkRBatch DataprocBatchSparkRBatchPtrInput
	// Spark SQL batch config.
	SparkSqlBatch DataprocBatchSparkSqlBatchPtrInput
	Timeouts      DataprocBatchTimeoutsPtrInput
}

func (DataprocBatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocBatchArgs)(nil)).Elem()
}

type DataprocBatchInput interface {
	pulumi.Input

	ToDataprocBatchOutput() DataprocBatchOutput
	ToDataprocBatchOutputWithContext(ctx context.Context) DataprocBatchOutput
}

func (*DataprocBatch) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocBatch)(nil)).Elem()
}

func (i *DataprocBatch) ToDataprocBatchOutput() DataprocBatchOutput {
	return i.ToDataprocBatchOutputWithContext(context.Background())
}

func (i *DataprocBatch) ToDataprocBatchOutputWithContext(ctx context.Context) DataprocBatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocBatchOutput)
}

type DataprocBatchOutput struct{ *pulumi.OutputState }

func (DataprocBatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocBatch)(nil)).Elem()
}

func (o DataprocBatchOutput) ToDataprocBatchOutput() DataprocBatchOutput {
	return o
}

func (o DataprocBatchOutput) ToDataprocBatchOutputWithContext(ctx context.Context) DataprocBatchOutput {
	return o
}

// The ID to use for the batch, which will become the final component of the batch's resource name. This value must be 4-63
// characters. Valid characters are /[a-z][0-9]-/.
func (o DataprocBatchOutput) BatchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringPtrOutput { return v.BatchId }).(pulumi.StringPtrOutput)
}

// The time when the batch was created.
func (o DataprocBatchOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The email address of the user who created the batch.
func (o DataprocBatchOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

func (o DataprocBatchOutput) DataprocBatchId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.DataprocBatchId }).(pulumi.StringOutput)
}

func (o DataprocBatchOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Environment configuration for the batch execution.
func (o DataprocBatchOutput) EnvironmentConfig() DataprocBatchEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchEnvironmentConfigPtrOutput { return v.EnvironmentConfig }).(DataprocBatchEnvironmentConfigPtrOutput)
}

// The labels to associate with this batch. **Note**: This field is non-authoritative, and will only manage the labels
// present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o DataprocBatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location in which the batch will be created in.
func (o DataprocBatchOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the batch.
func (o DataprocBatchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource name of the operation associated with this batch.
func (o DataprocBatchOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.Operation }).(pulumi.StringOutput)
}

func (o DataprocBatchOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// PySpark batch config.
func (o DataprocBatchOutput) PysparkBatch() DataprocBatchPysparkBatchPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchPysparkBatchPtrOutput { return v.PysparkBatch }).(DataprocBatchPysparkBatchPtrOutput)
}

// Runtime configuration for the batch execution.
func (o DataprocBatchOutput) RuntimeConfig() DataprocBatchRuntimeConfigPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchRuntimeConfigPtrOutput { return v.RuntimeConfig }).(DataprocBatchRuntimeConfigPtrOutput)
}

// Runtime information about batch execution.
func (o DataprocBatchOutput) RuntimeInfos() DataprocBatchRuntimeInfoArrayOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchRuntimeInfoArrayOutput { return v.RuntimeInfos }).(DataprocBatchRuntimeInfoArrayOutput)
}

// Spark batch config.
func (o DataprocBatchOutput) SparkBatch() DataprocBatchSparkBatchPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchSparkBatchPtrOutput { return v.SparkBatch }).(DataprocBatchSparkBatchPtrOutput)
}

// SparkR batch config.
func (o DataprocBatchOutput) SparkRBatch() DataprocBatchSparkRBatchPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchSparkRBatchPtrOutput { return v.SparkRBatch }).(DataprocBatchSparkRBatchPtrOutput)
}

// Spark SQL batch config.
func (o DataprocBatchOutput) SparkSqlBatch() DataprocBatchSparkSqlBatchPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchSparkSqlBatchPtrOutput { return v.SparkSqlBatch }).(DataprocBatchSparkSqlBatchPtrOutput)
}

// The state of the batch. For possible values, see the [API
// documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.batches#State).
func (o DataprocBatchOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Historical state information for the batch.
func (o DataprocBatchOutput) StateHistories() DataprocBatchStateHistoryArrayOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchStateHistoryArrayOutput { return v.StateHistories }).(DataprocBatchStateHistoryArrayOutput)
}

// Batch state details, such as a failure description if the state is FAILED.
func (o DataprocBatchOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// Batch state details, such as a failure description if the state is FAILED.
func (o DataprocBatchOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.StateTime }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DataprocBatchOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DataprocBatchOutput) Timeouts() DataprocBatchTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataprocBatch) DataprocBatchTimeoutsPtrOutput { return v.Timeouts }).(DataprocBatchTimeoutsPtrOutput)
}

// A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
func (o DataprocBatchOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocBatch) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocBatchInput)(nil)).Elem(), &DataprocBatch{})
	pulumi.RegisterOutputType(DataprocBatchOutput{})
}
