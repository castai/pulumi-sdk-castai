// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkServicesEdgeCacheOrigin struct {
	pulumi.CustomResourceState

	// Enable AWS Signature Version 4 origin authentication.
	AwsV4Authentication NetworkServicesEdgeCacheOriginAwsV4AuthenticationPtrOutput `pulumi:"awsV4Authentication"`
	// A human-readable description of the resource.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The Origin resource to try when the current origin cannot be reached. After maxAttempts is reached, the configured
	// failoverOrigin will be used to fulfil the request. The value of timeout.maxAttemptsTimeout dictates the timeout across
	// all origins. A reference to a Topic resource.
	FailoverOrigin pulumi.StringPtrOutput `pulumi:"failoverOrigin"`
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one
	// of the retryConditions. Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is
	// specified. That failoverOrigin may specify its own maxAttempts, retryConditions and failoverOrigin to control its own
	// cache fill failures. The total number of allowed attempts to cache fill across this and failover origins is limited to
	// four. The total time allowed for cache fill attempts across this and failover origins can be controlled with
	// maxAttemptsTimeout. The last valid, non-retried response from all origins will be returned to the client. If no origin
	// returns a valid response, an HTTP 502 will be returned to the client. Defaults to 1. Must be a value greater than 0 and
	// less than 4.
	MaxAttempts pulumi.Float64PtrOutput `pulumi:"maxAttempts"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                             pulumi.StringOutput `pulumi:"name"`
	NetworkServicesEdgeCacheOriginId pulumi.StringOutput `pulumi:"networkServicesEdgeCacheOriginId"`
	// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud
	// Storage bucket. This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4:
	// 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname When providing an FQDN (hostname), it must be
	// publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable. It must not contain a
	// protocol (e.g., https://) and it must not contain any slashes. If a Cloud Storage bucket is provided, it must be in the
	// canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
	OriginAddress pulumi.StringOutput `pulumi:"originAddress"`
	// The override actions, including url rewrites and header additions, for requests that use this origin.
	OriginOverrideAction NetworkServicesEdgeCacheOriginOriginOverrideActionPtrOutput `pulumi:"originOverrideAction"`
	// Follow redirects from this origin.
	OriginRedirect NetworkServicesEdgeCacheOriginOriginRedirectPtrOutput `pulumi:"originRedirect"`
	// The port to connect to the origin on. Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
	Port    pulumi.Float64Output `pulumi:"port"`
	Project pulumi.StringOutput  `pulumi:"project"`
	// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users
	// use HTTP2 for both security & performance. When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed,
	// unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Specifies one or more retry conditions for the configured origin. If the failure mode during a connection attempt to the
	// origin matches the configured retryCondition(s), the origin request will be retried up to maxAttempts times. The
	// failoverOrigin, if configured, will then be used to satisfy the request. The default retryCondition is
	// "CONNECT_FAILURE". retryConditions apply to this origin, and not subsequent failoverOrigin(s), which may specify their
	// own retryConditions and maxAttempts. Valid values are: - CONNECT_FAILURE: Retry on failures connecting to origins, for
	// example due to connection timeouts. - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the
	// origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. -
	// GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504. - RETRIABLE_4XX: Retry for retriable
	// 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests) - NOT_FOUND: Retry if the origin
	// returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
	// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX",
	//   "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
	RetryConditions pulumi.StringArrayOutput `pulumi:"retryConditions"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput `pulumi:"terraformLabels"`
	// The connection and HTTP timeout configuration for this origin.
	Timeout  NetworkServicesEdgeCacheOriginTimeoutPtrOutput  `pulumi:"timeout"`
	Timeouts NetworkServicesEdgeCacheOriginTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetworkServicesEdgeCacheOrigin registers a new resource with the given unique name, arguments, and options.
func NewNetworkServicesEdgeCacheOrigin(ctx *pulumi.Context,
	name string, args *NetworkServicesEdgeCacheOriginArgs, opts ...pulumi.ResourceOption) (*NetworkServicesEdgeCacheOrigin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OriginAddress == nil {
		return nil, errors.New("invalid value for required argument 'OriginAddress'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetworkServicesEdgeCacheOrigin
	err = ctx.RegisterPackageResource("google:index/networkServicesEdgeCacheOrigin:NetworkServicesEdgeCacheOrigin", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkServicesEdgeCacheOrigin gets an existing NetworkServicesEdgeCacheOrigin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkServicesEdgeCacheOrigin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkServicesEdgeCacheOriginState, opts ...pulumi.ResourceOption) (*NetworkServicesEdgeCacheOrigin, error) {
	var resource NetworkServicesEdgeCacheOrigin
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/networkServicesEdgeCacheOrigin:NetworkServicesEdgeCacheOrigin", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkServicesEdgeCacheOrigin resources.
type networkServicesEdgeCacheOriginState struct {
	// Enable AWS Signature Version 4 origin authentication.
	AwsV4Authentication *NetworkServicesEdgeCacheOriginAwsV4Authentication `pulumi:"awsV4Authentication"`
	// A human-readable description of the resource.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The Origin resource to try when the current origin cannot be reached. After maxAttempts is reached, the configured
	// failoverOrigin will be used to fulfil the request. The value of timeout.maxAttemptsTimeout dictates the timeout across
	// all origins. A reference to a Topic resource.
	FailoverOrigin *string `pulumi:"failoverOrigin"`
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one
	// of the retryConditions. Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is
	// specified. That failoverOrigin may specify its own maxAttempts, retryConditions and failoverOrigin to control its own
	// cache fill failures. The total number of allowed attempts to cache fill across this and failover origins is limited to
	// four. The total time allowed for cache fill attempts across this and failover origins can be controlled with
	// maxAttemptsTimeout. The last valid, non-retried response from all origins will be returned to the client. If no origin
	// returns a valid response, an HTTP 502 will be returned to the client. Defaults to 1. Must be a value greater than 0 and
	// less than 4.
	MaxAttempts *float64 `pulumi:"maxAttempts"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                             *string `pulumi:"name"`
	NetworkServicesEdgeCacheOriginId *string `pulumi:"networkServicesEdgeCacheOriginId"`
	// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud
	// Storage bucket. This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4:
	// 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname When providing an FQDN (hostname), it must be
	// publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable. It must not contain a
	// protocol (e.g., https://) and it must not contain any slashes. If a Cloud Storage bucket is provided, it must be in the
	// canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
	OriginAddress *string `pulumi:"originAddress"`
	// The override actions, including url rewrites and header additions, for requests that use this origin.
	OriginOverrideAction *NetworkServicesEdgeCacheOriginOriginOverrideAction `pulumi:"originOverrideAction"`
	// Follow redirects from this origin.
	OriginRedirect *NetworkServicesEdgeCacheOriginOriginRedirect `pulumi:"originRedirect"`
	// The port to connect to the origin on. Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
	Port    *float64 `pulumi:"port"`
	Project *string  `pulumi:"project"`
	// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users
	// use HTTP2 for both security & performance. When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed,
	// unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
	Protocol *string `pulumi:"protocol"`
	// Specifies one or more retry conditions for the configured origin. If the failure mode during a connection attempt to the
	// origin matches the configured retryCondition(s), the origin request will be retried up to maxAttempts times. The
	// failoverOrigin, if configured, will then be used to satisfy the request. The default retryCondition is
	// "CONNECT_FAILURE". retryConditions apply to this origin, and not subsequent failoverOrigin(s), which may specify their
	// own retryConditions and maxAttempts. Valid values are: - CONNECT_FAILURE: Retry on failures connecting to origins, for
	// example due to connection timeouts. - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the
	// origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. -
	// GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504. - RETRIABLE_4XX: Retry for retriable
	// 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests) - NOT_FOUND: Retry if the origin
	// returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
	// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX",
	//   "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
	RetryConditions []string `pulumi:"retryConditions"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string `pulumi:"terraformLabels"`
	// The connection and HTTP timeout configuration for this origin.
	Timeout  *NetworkServicesEdgeCacheOriginTimeout  `pulumi:"timeout"`
	Timeouts *NetworkServicesEdgeCacheOriginTimeouts `pulumi:"timeouts"`
}

type NetworkServicesEdgeCacheOriginState struct {
	// Enable AWS Signature Version 4 origin authentication.
	AwsV4Authentication NetworkServicesEdgeCacheOriginAwsV4AuthenticationPtrInput
	// A human-readable description of the resource.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The Origin resource to try when the current origin cannot be reached. After maxAttempts is reached, the configured
	// failoverOrigin will be used to fulfil the request. The value of timeout.maxAttemptsTimeout dictates the timeout across
	// all origins. A reference to a Topic resource.
	FailoverOrigin pulumi.StringPtrInput
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one
	// of the retryConditions. Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is
	// specified. That failoverOrigin may specify its own maxAttempts, retryConditions and failoverOrigin to control its own
	// cache fill failures. The total number of allowed attempts to cache fill across this and failover origins is limited to
	// four. The total time allowed for cache fill attempts across this and failover origins can be controlled with
	// maxAttemptsTimeout. The last valid, non-retried response from all origins will be returned to the client. If no origin
	// returns a valid response, an HTTP 502 will be returned to the client. Defaults to 1. Must be a value greater than 0 and
	// less than 4.
	MaxAttempts pulumi.Float64PtrInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                             pulumi.StringPtrInput
	NetworkServicesEdgeCacheOriginId pulumi.StringPtrInput
	// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud
	// Storage bucket. This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4:
	// 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname When providing an FQDN (hostname), it must be
	// publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable. It must not contain a
	// protocol (e.g., https://) and it must not contain any slashes. If a Cloud Storage bucket is provided, it must be in the
	// canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
	OriginAddress pulumi.StringPtrInput
	// The override actions, including url rewrites and header additions, for requests that use this origin.
	OriginOverrideAction NetworkServicesEdgeCacheOriginOriginOverrideActionPtrInput
	// Follow redirects from this origin.
	OriginRedirect NetworkServicesEdgeCacheOriginOriginRedirectPtrInput
	// The port to connect to the origin on. Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
	Port    pulumi.Float64PtrInput
	Project pulumi.StringPtrInput
	// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users
	// use HTTP2 for both security & performance. When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed,
	// unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
	Protocol pulumi.StringPtrInput
	// Specifies one or more retry conditions for the configured origin. If the failure mode during a connection attempt to the
	// origin matches the configured retryCondition(s), the origin request will be retried up to maxAttempts times. The
	// failoverOrigin, if configured, will then be used to satisfy the request. The default retryCondition is
	// "CONNECT_FAILURE". retryConditions apply to this origin, and not subsequent failoverOrigin(s), which may specify their
	// own retryConditions and maxAttempts. Valid values are: - CONNECT_FAILURE: Retry on failures connecting to origins, for
	// example due to connection timeouts. - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the
	// origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. -
	// GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504. - RETRIABLE_4XX: Retry for retriable
	// 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests) - NOT_FOUND: Retry if the origin
	// returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
	// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX",
	//   "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
	RetryConditions pulumi.StringArrayInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	// The connection and HTTP timeout configuration for this origin.
	Timeout  NetworkServicesEdgeCacheOriginTimeoutPtrInput
	Timeouts NetworkServicesEdgeCacheOriginTimeoutsPtrInput
}

func (NetworkServicesEdgeCacheOriginState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServicesEdgeCacheOriginState)(nil)).Elem()
}

type networkServicesEdgeCacheOriginArgs struct {
	// Enable AWS Signature Version 4 origin authentication.
	AwsV4Authentication *NetworkServicesEdgeCacheOriginAwsV4Authentication `pulumi:"awsV4Authentication"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// The Origin resource to try when the current origin cannot be reached. After maxAttempts is reached, the configured
	// failoverOrigin will be used to fulfil the request. The value of timeout.maxAttemptsTimeout dictates the timeout across
	// all origins. A reference to a Topic resource.
	FailoverOrigin *string `pulumi:"failoverOrigin"`
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one
	// of the retryConditions. Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is
	// specified. That failoverOrigin may specify its own maxAttempts, retryConditions and failoverOrigin to control its own
	// cache fill failures. The total number of allowed attempts to cache fill across this and failover origins is limited to
	// four. The total time allowed for cache fill attempts across this and failover origins can be controlled with
	// maxAttemptsTimeout. The last valid, non-retried response from all origins will be returned to the client. If no origin
	// returns a valid response, an HTTP 502 will be returned to the client. Defaults to 1. Must be a value greater than 0 and
	// less than 4.
	MaxAttempts *float64 `pulumi:"maxAttempts"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                             *string `pulumi:"name"`
	NetworkServicesEdgeCacheOriginId *string `pulumi:"networkServicesEdgeCacheOriginId"`
	// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud
	// Storage bucket. This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4:
	// 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname When providing an FQDN (hostname), it must be
	// publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable. It must not contain a
	// protocol (e.g., https://) and it must not contain any slashes. If a Cloud Storage bucket is provided, it must be in the
	// canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
	OriginAddress string `pulumi:"originAddress"`
	// The override actions, including url rewrites and header additions, for requests that use this origin.
	OriginOverrideAction *NetworkServicesEdgeCacheOriginOriginOverrideAction `pulumi:"originOverrideAction"`
	// Follow redirects from this origin.
	OriginRedirect *NetworkServicesEdgeCacheOriginOriginRedirect `pulumi:"originRedirect"`
	// The port to connect to the origin on. Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
	Port    *float64 `pulumi:"port"`
	Project *string  `pulumi:"project"`
	// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users
	// use HTTP2 for both security & performance. When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed,
	// unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
	Protocol *string `pulumi:"protocol"`
	// Specifies one or more retry conditions for the configured origin. If the failure mode during a connection attempt to the
	// origin matches the configured retryCondition(s), the origin request will be retried up to maxAttempts times. The
	// failoverOrigin, if configured, will then be used to satisfy the request. The default retryCondition is
	// "CONNECT_FAILURE". retryConditions apply to this origin, and not subsequent failoverOrigin(s), which may specify their
	// own retryConditions and maxAttempts. Valid values are: - CONNECT_FAILURE: Retry on failures connecting to origins, for
	// example due to connection timeouts. - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the
	// origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. -
	// GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504. - RETRIABLE_4XX: Retry for retriable
	// 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests) - NOT_FOUND: Retry if the origin
	// returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
	// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX",
	//   "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
	RetryConditions []string `pulumi:"retryConditions"`
	// The connection and HTTP timeout configuration for this origin.
	Timeout  *NetworkServicesEdgeCacheOriginTimeout  `pulumi:"timeout"`
	Timeouts *NetworkServicesEdgeCacheOriginTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetworkServicesEdgeCacheOrigin resource.
type NetworkServicesEdgeCacheOriginArgs struct {
	// Enable AWS Signature Version 4 origin authentication.
	AwsV4Authentication NetworkServicesEdgeCacheOriginAwsV4AuthenticationPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// The Origin resource to try when the current origin cannot be reached. After maxAttempts is reached, the configured
	// failoverOrigin will be used to fulfil the request. The value of timeout.maxAttemptsTimeout dictates the timeout across
	// all origins. A reference to a Topic resource.
	FailoverOrigin pulumi.StringPtrInput
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one
	// of the retryConditions. Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is
	// specified. That failoverOrigin may specify its own maxAttempts, retryConditions and failoverOrigin to control its own
	// cache fill failures. The total number of allowed attempts to cache fill across this and failover origins is limited to
	// four. The total time allowed for cache fill attempts across this and failover origins can be controlled with
	// maxAttemptsTimeout. The last valid, non-retried response from all origins will be returned to the client. If no origin
	// returns a valid response, an HTTP 502 will be returned to the client. Defaults to 1. Must be a value greater than 0 and
	// less than 4.
	MaxAttempts pulumi.Float64PtrInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                             pulumi.StringPtrInput
	NetworkServicesEdgeCacheOriginId pulumi.StringPtrInput
	// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud
	// Storage bucket. This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4:
	// 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname When providing an FQDN (hostname), it must be
	// publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable. It must not contain a
	// protocol (e.g., https://) and it must not contain any slashes. If a Cloud Storage bucket is provided, it must be in the
	// canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
	OriginAddress pulumi.StringInput
	// The override actions, including url rewrites and header additions, for requests that use this origin.
	OriginOverrideAction NetworkServicesEdgeCacheOriginOriginOverrideActionPtrInput
	// Follow redirects from this origin.
	OriginRedirect NetworkServicesEdgeCacheOriginOriginRedirectPtrInput
	// The port to connect to the origin on. Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
	Port    pulumi.Float64PtrInput
	Project pulumi.StringPtrInput
	// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users
	// use HTTP2 for both security & performance. When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed,
	// unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
	Protocol pulumi.StringPtrInput
	// Specifies one or more retry conditions for the configured origin. If the failure mode during a connection attempt to the
	// origin matches the configured retryCondition(s), the origin request will be retried up to maxAttempts times. The
	// failoverOrigin, if configured, will then be used to satisfy the request. The default retryCondition is
	// "CONNECT_FAILURE". retryConditions apply to this origin, and not subsequent failoverOrigin(s), which may specify their
	// own retryConditions and maxAttempts. Valid values are: - CONNECT_FAILURE: Retry on failures connecting to origins, for
	// example due to connection timeouts. - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the
	// origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. -
	// GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504. - RETRIABLE_4XX: Retry for retriable
	// 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests) - NOT_FOUND: Retry if the origin
	// returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
	// - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX",
	//   "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
	RetryConditions pulumi.StringArrayInput
	// The connection and HTTP timeout configuration for this origin.
	Timeout  NetworkServicesEdgeCacheOriginTimeoutPtrInput
	Timeouts NetworkServicesEdgeCacheOriginTimeoutsPtrInput
}

func (NetworkServicesEdgeCacheOriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServicesEdgeCacheOriginArgs)(nil)).Elem()
}

type NetworkServicesEdgeCacheOriginInput interface {
	pulumi.Input

	ToNetworkServicesEdgeCacheOriginOutput() NetworkServicesEdgeCacheOriginOutput
	ToNetworkServicesEdgeCacheOriginOutputWithContext(ctx context.Context) NetworkServicesEdgeCacheOriginOutput
}

func (*NetworkServicesEdgeCacheOrigin) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkServicesEdgeCacheOrigin)(nil)).Elem()
}

func (i *NetworkServicesEdgeCacheOrigin) ToNetworkServicesEdgeCacheOriginOutput() NetworkServicesEdgeCacheOriginOutput {
	return i.ToNetworkServicesEdgeCacheOriginOutputWithContext(context.Background())
}

func (i *NetworkServicesEdgeCacheOrigin) ToNetworkServicesEdgeCacheOriginOutputWithContext(ctx context.Context) NetworkServicesEdgeCacheOriginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServicesEdgeCacheOriginOutput)
}

type NetworkServicesEdgeCacheOriginOutput struct{ *pulumi.OutputState }

func (NetworkServicesEdgeCacheOriginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkServicesEdgeCacheOrigin)(nil)).Elem()
}

func (o NetworkServicesEdgeCacheOriginOutput) ToNetworkServicesEdgeCacheOriginOutput() NetworkServicesEdgeCacheOriginOutput {
	return o
}

func (o NetworkServicesEdgeCacheOriginOutput) ToNetworkServicesEdgeCacheOriginOutputWithContext(ctx context.Context) NetworkServicesEdgeCacheOriginOutput {
	return o
}

// Enable AWS Signature Version 4 origin authentication.
func (o NetworkServicesEdgeCacheOriginOutput) AwsV4Authentication() NetworkServicesEdgeCacheOriginAwsV4AuthenticationPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) NetworkServicesEdgeCacheOriginAwsV4AuthenticationPtrOutput {
		return v.AwsV4Authentication
	}).(NetworkServicesEdgeCacheOriginAwsV4AuthenticationPtrOutput)
}

// A human-readable description of the resource.
func (o NetworkServicesEdgeCacheOriginOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworkServicesEdgeCacheOriginOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The Origin resource to try when the current origin cannot be reached. After maxAttempts is reached, the configured
// failoverOrigin will be used to fulfil the request. The value of timeout.maxAttemptsTimeout dictates the timeout across
// all origins. A reference to a Topic resource.
func (o NetworkServicesEdgeCacheOriginOutput) FailoverOrigin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringPtrOutput { return v.FailoverOrigin }).(pulumi.StringPtrOutput)
}

// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o NetworkServicesEdgeCacheOriginOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one
// of the retryConditions. Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is
// specified. That failoverOrigin may specify its own maxAttempts, retryConditions and failoverOrigin to control its own
// cache fill failures. The total number of allowed attempts to cache fill across this and failover origins is limited to
// four. The total time allowed for cache fill attempts across this and failover origins can be controlled with
// maxAttemptsTimeout. The last valid, non-retried response from all origins will be returned to the client. If no origin
// returns a valid response, an HTTP 502 will be returned to the client. Defaults to 1. Must be a value greater than 0 and
// less than 4.
func (o NetworkServicesEdgeCacheOriginOutput) MaxAttempts() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.Float64PtrOutput { return v.MaxAttempts }).(pulumi.Float64PtrOutput)
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
// characters must be a dash, underscore, letter or digit.
func (o NetworkServicesEdgeCacheOriginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkServicesEdgeCacheOriginOutput) NetworkServicesEdgeCacheOriginId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringOutput { return v.NetworkServicesEdgeCacheOriginId }).(pulumi.StringOutput)
}

// A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud
// Storage bucket. This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4:
// 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname When providing an FQDN (hostname), it must be
// publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable. It must not contain a
// protocol (e.g., https://) and it must not contain any slashes. If a Cloud Storage bucket is provided, it must be in the
// canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
func (o NetworkServicesEdgeCacheOriginOutput) OriginAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringOutput { return v.OriginAddress }).(pulumi.StringOutput)
}

// The override actions, including url rewrites and header additions, for requests that use this origin.
func (o NetworkServicesEdgeCacheOriginOutput) OriginOverrideAction() NetworkServicesEdgeCacheOriginOriginOverrideActionPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) NetworkServicesEdgeCacheOriginOriginOverrideActionPtrOutput {
		return v.OriginOverrideAction
	}).(NetworkServicesEdgeCacheOriginOriginOverrideActionPtrOutput)
}

// Follow redirects from this origin.
func (o NetworkServicesEdgeCacheOriginOutput) OriginRedirect() NetworkServicesEdgeCacheOriginOriginRedirectPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) NetworkServicesEdgeCacheOriginOriginRedirectPtrOutput {
		return v.OriginRedirect
	}).(NetworkServicesEdgeCacheOriginOriginRedirectPtrOutput)
}

// The port to connect to the origin on. Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
func (o NetworkServicesEdgeCacheOriginOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.Float64Output { return v.Port }).(pulumi.Float64Output)
}

func (o NetworkServicesEdgeCacheOriginOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users
// use HTTP2 for both security & performance. When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed,
// unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
func (o NetworkServicesEdgeCacheOriginOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Specifies one or more retry conditions for the configured origin. If the failure mode during a connection attempt to the
// origin matches the configured retryCondition(s), the origin request will be retried up to maxAttempts times. The
// failoverOrigin, if configured, will then be used to satisfy the request. The default retryCondition is
// "CONNECT_FAILURE". retryConditions apply to this origin, and not subsequent failoverOrigin(s), which may specify their
// own retryConditions and maxAttempts. Valid values are: - CONNECT_FAILURE: Retry on failures connecting to origins, for
// example due to connection timeouts. - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the
// origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. -
// GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504. - RETRIABLE_4XX: Retry for retriable
// 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests) - NOT_FOUND: Retry if the origin
// returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
//   - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX",
//     "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
func (o NetworkServicesEdgeCacheOriginOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringArrayOutput { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetworkServicesEdgeCacheOriginOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

// The connection and HTTP timeout configuration for this origin.
func (o NetworkServicesEdgeCacheOriginOutput) Timeout() NetworkServicesEdgeCacheOriginTimeoutPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) NetworkServicesEdgeCacheOriginTimeoutPtrOutput {
		return v.Timeout
	}).(NetworkServicesEdgeCacheOriginTimeoutPtrOutput)
}

func (o NetworkServicesEdgeCacheOriginOutput) Timeouts() NetworkServicesEdgeCacheOriginTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheOrigin) NetworkServicesEdgeCacheOriginTimeoutsPtrOutput {
		return v.Timeouts
	}).(NetworkServicesEdgeCacheOriginTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServicesEdgeCacheOriginInput)(nil)).Elem(), &NetworkServicesEdgeCacheOrigin{})
	pulumi.RegisterOutputType(NetworkServicesEdgeCacheOriginOutput{})
}
