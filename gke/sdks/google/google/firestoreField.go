// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirestoreField struct {
	pulumi.CustomResourceState

	// The id of the collection group to configure.
	Collection pulumi.StringOutput `pulumi:"collection"`
	// The Firestore database id. Defaults to '"(default)"'.
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// The id of the field to configure.
	Field            pulumi.StringOutput `pulumi:"field"`
	FirestoreFieldId pulumi.StringOutput `pulumi:"firestoreFieldId"`
	// The single field index configuration for this field. Creating an index configuration for this field will override any
	// inherited configuration with the indexes specified. Configuring the index configuration with an empty block disables all
	// indexes on the field.
	IndexConfig FirestoreFieldIndexConfigPtrOutput `pulumi:"indexConfig"`
	// The name of this field. Format:
	// 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}'
	Name     pulumi.StringOutput             `pulumi:"name"`
	Project  pulumi.StringOutput             `pulumi:"project"`
	Timeouts FirestoreFieldTimeoutsPtrOutput `pulumi:"timeouts"`
	// The TTL configuration for this Field. If set to an empty block (i.e. 'ttl_config {}'), a TTL policy is configured based
	// on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
	TtlConfig FirestoreFieldTtlConfigPtrOutput `pulumi:"ttlConfig"`
}

// NewFirestoreField registers a new resource with the given unique name, arguments, and options.
func NewFirestoreField(ctx *pulumi.Context,
	name string, args *FirestoreFieldArgs, opts ...pulumi.ResourceOption) (*FirestoreField, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Collection == nil {
		return nil, errors.New("invalid value for required argument 'Collection'")
	}
	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirestoreField
	err = ctx.RegisterPackageResource("google:index/firestoreField:FirestoreField", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirestoreField gets an existing FirestoreField resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirestoreField(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirestoreFieldState, opts ...pulumi.ResourceOption) (*FirestoreField, error) {
	var resource FirestoreField
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/firestoreField:FirestoreField", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirestoreField resources.
type firestoreFieldState struct {
	// The id of the collection group to configure.
	Collection *string `pulumi:"collection"`
	// The Firestore database id. Defaults to '"(default)"'.
	Database *string `pulumi:"database"`
	// The id of the field to configure.
	Field            *string `pulumi:"field"`
	FirestoreFieldId *string `pulumi:"firestoreFieldId"`
	// The single field index configuration for this field. Creating an index configuration for this field will override any
	// inherited configuration with the indexes specified. Configuring the index configuration with an empty block disables all
	// indexes on the field.
	IndexConfig *FirestoreFieldIndexConfig `pulumi:"indexConfig"`
	// The name of this field. Format:
	// 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}'
	Name     *string                 `pulumi:"name"`
	Project  *string                 `pulumi:"project"`
	Timeouts *FirestoreFieldTimeouts `pulumi:"timeouts"`
	// The TTL configuration for this Field. If set to an empty block (i.e. 'ttl_config {}'), a TTL policy is configured based
	// on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
	TtlConfig *FirestoreFieldTtlConfig `pulumi:"ttlConfig"`
}

type FirestoreFieldState struct {
	// The id of the collection group to configure.
	Collection pulumi.StringPtrInput
	// The Firestore database id. Defaults to '"(default)"'.
	Database pulumi.StringPtrInput
	// The id of the field to configure.
	Field            pulumi.StringPtrInput
	FirestoreFieldId pulumi.StringPtrInput
	// The single field index configuration for this field. Creating an index configuration for this field will override any
	// inherited configuration with the indexes specified. Configuring the index configuration with an empty block disables all
	// indexes on the field.
	IndexConfig FirestoreFieldIndexConfigPtrInput
	// The name of this field. Format:
	// 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}'
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts FirestoreFieldTimeoutsPtrInput
	// The TTL configuration for this Field. If set to an empty block (i.e. 'ttl_config {}'), a TTL policy is configured based
	// on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
	TtlConfig FirestoreFieldTtlConfigPtrInput
}

func (FirestoreFieldState) ElementType() reflect.Type {
	return reflect.TypeOf((*firestoreFieldState)(nil)).Elem()
}

type firestoreFieldArgs struct {
	// The id of the collection group to configure.
	Collection string `pulumi:"collection"`
	// The Firestore database id. Defaults to '"(default)"'.
	Database *string `pulumi:"database"`
	// The id of the field to configure.
	Field            string  `pulumi:"field"`
	FirestoreFieldId *string `pulumi:"firestoreFieldId"`
	// The single field index configuration for this field. Creating an index configuration for this field will override any
	// inherited configuration with the indexes specified. Configuring the index configuration with an empty block disables all
	// indexes on the field.
	IndexConfig *FirestoreFieldIndexConfig `pulumi:"indexConfig"`
	Project     *string                    `pulumi:"project"`
	Timeouts    *FirestoreFieldTimeouts    `pulumi:"timeouts"`
	// The TTL configuration for this Field. If set to an empty block (i.e. 'ttl_config {}'), a TTL policy is configured based
	// on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
	TtlConfig *FirestoreFieldTtlConfig `pulumi:"ttlConfig"`
}

// The set of arguments for constructing a FirestoreField resource.
type FirestoreFieldArgs struct {
	// The id of the collection group to configure.
	Collection pulumi.StringInput
	// The Firestore database id. Defaults to '"(default)"'.
	Database pulumi.StringPtrInput
	// The id of the field to configure.
	Field            pulumi.StringInput
	FirestoreFieldId pulumi.StringPtrInput
	// The single field index configuration for this field. Creating an index configuration for this field will override any
	// inherited configuration with the indexes specified. Configuring the index configuration with an empty block disables all
	// indexes on the field.
	IndexConfig FirestoreFieldIndexConfigPtrInput
	Project     pulumi.StringPtrInput
	Timeouts    FirestoreFieldTimeoutsPtrInput
	// The TTL configuration for this Field. If set to an empty block (i.e. 'ttl_config {}'), a TTL policy is configured based
	// on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
	TtlConfig FirestoreFieldTtlConfigPtrInput
}

func (FirestoreFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firestoreFieldArgs)(nil)).Elem()
}

type FirestoreFieldInput interface {
	pulumi.Input

	ToFirestoreFieldOutput() FirestoreFieldOutput
	ToFirestoreFieldOutputWithContext(ctx context.Context) FirestoreFieldOutput
}

func (*FirestoreField) ElementType() reflect.Type {
	return reflect.TypeOf((**FirestoreField)(nil)).Elem()
}

func (i *FirestoreField) ToFirestoreFieldOutput() FirestoreFieldOutput {
	return i.ToFirestoreFieldOutputWithContext(context.Background())
}

func (i *FirestoreField) ToFirestoreFieldOutputWithContext(ctx context.Context) FirestoreFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirestoreFieldOutput)
}

type FirestoreFieldOutput struct{ *pulumi.OutputState }

func (FirestoreFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirestoreField)(nil)).Elem()
}

func (o FirestoreFieldOutput) ToFirestoreFieldOutput() FirestoreFieldOutput {
	return o
}

func (o FirestoreFieldOutput) ToFirestoreFieldOutputWithContext(ctx context.Context) FirestoreFieldOutput {
	return o
}

// The id of the collection group to configure.
func (o FirestoreFieldOutput) Collection() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreField) pulumi.StringOutput { return v.Collection }).(pulumi.StringOutput)
}

// The Firestore database id. Defaults to '"(default)"'.
func (o FirestoreFieldOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirestoreField) pulumi.StringPtrOutput { return v.Database }).(pulumi.StringPtrOutput)
}

// The id of the field to configure.
func (o FirestoreFieldOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreField) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

func (o FirestoreFieldOutput) FirestoreFieldId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreField) pulumi.StringOutput { return v.FirestoreFieldId }).(pulumi.StringOutput)
}

// The single field index configuration for this field. Creating an index configuration for this field will override any
// inherited configuration with the indexes specified. Configuring the index configuration with an empty block disables all
// indexes on the field.
func (o FirestoreFieldOutput) IndexConfig() FirestoreFieldIndexConfigPtrOutput {
	return o.ApplyT(func(v *FirestoreField) FirestoreFieldIndexConfigPtrOutput { return v.IndexConfig }).(FirestoreFieldIndexConfigPtrOutput)
}

// The name of this field. Format:
// 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}'
func (o FirestoreFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreField) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirestoreFieldOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreField) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o FirestoreFieldOutput) Timeouts() FirestoreFieldTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirestoreField) FirestoreFieldTimeoutsPtrOutput { return v.Timeouts }).(FirestoreFieldTimeoutsPtrOutput)
}

// The TTL configuration for this Field. If set to an empty block (i.e. 'ttl_config {}'), a TTL policy is configured based
// on the field. If unset, a TTL policy is not configured (or will be disabled upon updating the resource).
func (o FirestoreFieldOutput) TtlConfig() FirestoreFieldTtlConfigPtrOutput {
	return o.ApplyT(func(v *FirestoreField) FirestoreFieldTtlConfigPtrOutput { return v.TtlConfig }).(FirestoreFieldTtlConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirestoreFieldInput)(nil)).Elem(), &FirestoreField{})
	pulumi.RegisterOutputType(FirestoreFieldOutput{})
}
