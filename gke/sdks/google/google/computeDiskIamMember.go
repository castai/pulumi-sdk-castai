// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeDiskIamMember struct {
	pulumi.CustomResourceState

	ComputeDiskIamMemberId pulumi.StringOutput                    `pulumi:"computeDiskIamMemberId"`
	Condition              ComputeDiskIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                   pulumi.StringOutput                    `pulumi:"etag"`
	Member                 pulumi.StringOutput                    `pulumi:"member"`
	Name                   pulumi.StringOutput                    `pulumi:"name"`
	Project                pulumi.StringOutput                    `pulumi:"project"`
	Role                   pulumi.StringOutput                    `pulumi:"role"`
	Zone                   pulumi.StringOutput                    `pulumi:"zone"`
}

// NewComputeDiskIamMember registers a new resource with the given unique name, arguments, and options.
func NewComputeDiskIamMember(ctx *pulumi.Context,
	name string, args *ComputeDiskIamMemberArgs, opts ...pulumi.ResourceOption) (*ComputeDiskIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeDiskIamMember
	err = ctx.RegisterPackageResource("google:index/computeDiskIamMember:ComputeDiskIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeDiskIamMember gets an existing ComputeDiskIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeDiskIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeDiskIamMemberState, opts ...pulumi.ResourceOption) (*ComputeDiskIamMember, error) {
	var resource ComputeDiskIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeDiskIamMember:ComputeDiskIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeDiskIamMember resources.
type computeDiskIamMemberState struct {
	ComputeDiskIamMemberId *string                        `pulumi:"computeDiskIamMemberId"`
	Condition              *ComputeDiskIamMemberCondition `pulumi:"condition"`
	Etag                   *string                        `pulumi:"etag"`
	Member                 *string                        `pulumi:"member"`
	Name                   *string                        `pulumi:"name"`
	Project                *string                        `pulumi:"project"`
	Role                   *string                        `pulumi:"role"`
	Zone                   *string                        `pulumi:"zone"`
}

type ComputeDiskIamMemberState struct {
	ComputeDiskIamMemberId pulumi.StringPtrInput
	Condition              ComputeDiskIamMemberConditionPtrInput
	Etag                   pulumi.StringPtrInput
	Member                 pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	Role                   pulumi.StringPtrInput
	Zone                   pulumi.StringPtrInput
}

func (ComputeDiskIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskIamMemberState)(nil)).Elem()
}

type computeDiskIamMemberArgs struct {
	ComputeDiskIamMemberId *string                        `pulumi:"computeDiskIamMemberId"`
	Condition              *ComputeDiskIamMemberCondition `pulumi:"condition"`
	Member                 string                         `pulumi:"member"`
	Name                   *string                        `pulumi:"name"`
	Project                *string                        `pulumi:"project"`
	Role                   string                         `pulumi:"role"`
	Zone                   *string                        `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeDiskIamMember resource.
type ComputeDiskIamMemberArgs struct {
	ComputeDiskIamMemberId pulumi.StringPtrInput
	Condition              ComputeDiskIamMemberConditionPtrInput
	Member                 pulumi.StringInput
	Name                   pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	Role                   pulumi.StringInput
	Zone                   pulumi.StringPtrInput
}

func (ComputeDiskIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskIamMemberArgs)(nil)).Elem()
}

type ComputeDiskIamMemberInput interface {
	pulumi.Input

	ToComputeDiskIamMemberOutput() ComputeDiskIamMemberOutput
	ToComputeDiskIamMemberOutputWithContext(ctx context.Context) ComputeDiskIamMemberOutput
}

func (*ComputeDiskIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskIamMember)(nil)).Elem()
}

func (i *ComputeDiskIamMember) ToComputeDiskIamMemberOutput() ComputeDiskIamMemberOutput {
	return i.ToComputeDiskIamMemberOutputWithContext(context.Background())
}

func (i *ComputeDiskIamMember) ToComputeDiskIamMemberOutputWithContext(ctx context.Context) ComputeDiskIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskIamMemberOutput)
}

type ComputeDiskIamMemberOutput struct{ *pulumi.OutputState }

func (ComputeDiskIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskIamMember)(nil)).Elem()
}

func (o ComputeDiskIamMemberOutput) ToComputeDiskIamMemberOutput() ComputeDiskIamMemberOutput {
	return o
}

func (o ComputeDiskIamMemberOutput) ToComputeDiskIamMemberOutputWithContext(ctx context.Context) ComputeDiskIamMemberOutput {
	return o
}

func (o ComputeDiskIamMemberOutput) ComputeDiskIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.ComputeDiskIamMemberId }).(pulumi.StringOutput)
}

func (o ComputeDiskIamMemberOutput) Condition() ComputeDiskIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) ComputeDiskIamMemberConditionPtrOutput { return v.Condition }).(ComputeDiskIamMemberConditionPtrOutput)
}

func (o ComputeDiskIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeDiskIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ComputeDiskIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeDiskIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeDiskIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o ComputeDiskIamMemberOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamMember) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskIamMemberInput)(nil)).Elem(), &ComputeDiskIamMember{})
	pulumi.RegisterOutputType(ComputeDiskIamMemberOutput{})
}
