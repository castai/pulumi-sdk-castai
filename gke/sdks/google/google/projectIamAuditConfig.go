// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectIamAuditConfig struct {
	pulumi.CustomResourceState

	// The configuration for logging of each type of permission. This can be specified multiple times.
	AuditLogConfigs ProjectIamAuditConfigAuditLogConfigArrayOutput `pulumi:"auditLogConfigs"`
	// The etag of iam policy
	Etag                    pulumi.StringOutput `pulumi:"etag"`
	Project                 pulumi.StringOutput `pulumi:"project"`
	ProjectIamAuditConfigId pulumi.StringOutput `pulumi:"projectIamAuditConfigId"`
	// Service which will be enabled for audit logging. The special value allServices covers all services.
	Service pulumi.StringOutput `pulumi:"service"`
}

// NewProjectIamAuditConfig registers a new resource with the given unique name, arguments, and options.
func NewProjectIamAuditConfig(ctx *pulumi.Context,
	name string, args *ProjectIamAuditConfigArgs, opts ...pulumi.ResourceOption) (*ProjectIamAuditConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuditLogConfigs == nil {
		return nil, errors.New("invalid value for required argument 'AuditLogConfigs'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectIamAuditConfig
	err = ctx.RegisterPackageResource("google:index/projectIamAuditConfig:ProjectIamAuditConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIamAuditConfig gets an existing ProjectIamAuditConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIamAuditConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIamAuditConfigState, opts ...pulumi.ResourceOption) (*ProjectIamAuditConfig, error) {
	var resource ProjectIamAuditConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/projectIamAuditConfig:ProjectIamAuditConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIamAuditConfig resources.
type projectIamAuditConfigState struct {
	// The configuration for logging of each type of permission. This can be specified multiple times.
	AuditLogConfigs []ProjectIamAuditConfigAuditLogConfig `pulumi:"auditLogConfigs"`
	// The etag of iam policy
	Etag                    *string `pulumi:"etag"`
	Project                 *string `pulumi:"project"`
	ProjectIamAuditConfigId *string `pulumi:"projectIamAuditConfigId"`
	// Service which will be enabled for audit logging. The special value allServices covers all services.
	Service *string `pulumi:"service"`
}

type ProjectIamAuditConfigState struct {
	// The configuration for logging of each type of permission. This can be specified multiple times.
	AuditLogConfigs ProjectIamAuditConfigAuditLogConfigArrayInput
	// The etag of iam policy
	Etag                    pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	ProjectIamAuditConfigId pulumi.StringPtrInput
	// Service which will be enabled for audit logging. The special value allServices covers all services.
	Service pulumi.StringPtrInput
}

func (ProjectIamAuditConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamAuditConfigState)(nil)).Elem()
}

type projectIamAuditConfigArgs struct {
	// The configuration for logging of each type of permission. This can be specified multiple times.
	AuditLogConfigs         []ProjectIamAuditConfigAuditLogConfig `pulumi:"auditLogConfigs"`
	Project                 string                                `pulumi:"project"`
	ProjectIamAuditConfigId *string                               `pulumi:"projectIamAuditConfigId"`
	// Service which will be enabled for audit logging. The special value allServices covers all services.
	Service string `pulumi:"service"`
}

// The set of arguments for constructing a ProjectIamAuditConfig resource.
type ProjectIamAuditConfigArgs struct {
	// The configuration for logging of each type of permission. This can be specified multiple times.
	AuditLogConfigs         ProjectIamAuditConfigAuditLogConfigArrayInput
	Project                 pulumi.StringInput
	ProjectIamAuditConfigId pulumi.StringPtrInput
	// Service which will be enabled for audit logging. The special value allServices covers all services.
	Service pulumi.StringInput
}

func (ProjectIamAuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamAuditConfigArgs)(nil)).Elem()
}

type ProjectIamAuditConfigInput interface {
	pulumi.Input

	ToProjectIamAuditConfigOutput() ProjectIamAuditConfigOutput
	ToProjectIamAuditConfigOutputWithContext(ctx context.Context) ProjectIamAuditConfigOutput
}

func (*ProjectIamAuditConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamAuditConfig)(nil)).Elem()
}

func (i *ProjectIamAuditConfig) ToProjectIamAuditConfigOutput() ProjectIamAuditConfigOutput {
	return i.ToProjectIamAuditConfigOutputWithContext(context.Background())
}

func (i *ProjectIamAuditConfig) ToProjectIamAuditConfigOutputWithContext(ctx context.Context) ProjectIamAuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIamAuditConfigOutput)
}

type ProjectIamAuditConfigOutput struct{ *pulumi.OutputState }

func (ProjectIamAuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamAuditConfig)(nil)).Elem()
}

func (o ProjectIamAuditConfigOutput) ToProjectIamAuditConfigOutput() ProjectIamAuditConfigOutput {
	return o
}

func (o ProjectIamAuditConfigOutput) ToProjectIamAuditConfigOutputWithContext(ctx context.Context) ProjectIamAuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission. This can be specified multiple times.
func (o ProjectIamAuditConfigOutput) AuditLogConfigs() ProjectIamAuditConfigAuditLogConfigArrayOutput {
	return o.ApplyT(func(v *ProjectIamAuditConfig) ProjectIamAuditConfigAuditLogConfigArrayOutput {
		return v.AuditLogConfigs
	}).(ProjectIamAuditConfigAuditLogConfigArrayOutput)
}

// The etag of iam policy
func (o ProjectIamAuditConfigOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamAuditConfig) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ProjectIamAuditConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamAuditConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectIamAuditConfigOutput) ProjectIamAuditConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamAuditConfig) pulumi.StringOutput { return v.ProjectIamAuditConfigId }).(pulumi.StringOutput)
}

// Service which will be enabled for audit logging. The special value allServices covers all services.
func (o ProjectIamAuditConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamAuditConfig) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIamAuditConfigInput)(nil)).Elem(), &ProjectIamAuditConfig{})
	pulumi.RegisterOutputType(ProjectIamAuditConfigOutput{})
}
