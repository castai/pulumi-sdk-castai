// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ColabRuntime struct {
	pulumi.CustomResourceState

	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade    pulumi.BoolPtrOutput `pulumi:"autoUpgrade"`
	ColabRuntimeId pulumi.StringOutput  `pulumi:"colabRuntimeId"`
	// The description of the Runtime.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired state of the Colab Runtime. Set this field to 'RUNNING' to start the runtime, and 'STOPPED' to stop it.
	DesiredState pulumi.StringPtrOutput `pulumi:"desiredState"`
	// Required. The display name of the Runtime.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Output only. Timestamp when this NotebookRuntime will be expired.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// Output only. Checks if the NotebookRuntime is upgradable.
	IsUpgradable pulumi.BoolOutput `pulumi:"isUpgradable"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the Runtime
	Name pulumi.StringOutput `pulumi:"name"`
	// 'Runtime specific information used for NotebookRuntime creation.'
	NotebookRuntimeTemplateRef ColabRuntimeNotebookRuntimeTemplateRefPtrOutput `pulumi:"notebookRuntimeTemplateRef"`
	// Output only. The type of the notebook runtime.
	NotebookRuntimeType pulumi.StringOutput `pulumi:"notebookRuntimeType"`
	Project             pulumi.StringOutput `pulumi:"project"`
	// The user email of the NotebookRuntime.
	RuntimeUser pulumi.StringOutput `pulumi:"runtimeUser"`
	// Output only. The state of the runtime.
	State    pulumi.StringOutput           `pulumi:"state"`
	Timeouts ColabRuntimeTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewColabRuntime registers a new resource with the given unique name, arguments, and options.
func NewColabRuntime(ctx *pulumi.Context,
	name string, args *ColabRuntimeArgs, opts ...pulumi.ResourceOption) (*ColabRuntime, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RuntimeUser == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeUser'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ColabRuntime
	err = ctx.RegisterPackageResource("google:index/colabRuntime:ColabRuntime", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetColabRuntime gets an existing ColabRuntime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetColabRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ColabRuntimeState, opts ...pulumi.ResourceOption) (*ColabRuntime, error) {
	var resource ColabRuntime
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/colabRuntime:ColabRuntime", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ColabRuntime resources.
type colabRuntimeState struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade    *bool   `pulumi:"autoUpgrade"`
	ColabRuntimeId *string `pulumi:"colabRuntimeId"`
	// The description of the Runtime.
	Description *string `pulumi:"description"`
	// Desired state of the Colab Runtime. Set this field to 'RUNNING' to start the runtime, and 'STOPPED' to stop it.
	DesiredState *string `pulumi:"desiredState"`
	// Required. The display name of the Runtime.
	DisplayName *string `pulumi:"displayName"`
	// Output only. Timestamp when this NotebookRuntime will be expired.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Output only. Checks if the NotebookRuntime is upgradable.
	IsUpgradable *bool `pulumi:"isUpgradable"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location *string `pulumi:"location"`
	// The resource name of the Runtime
	Name *string `pulumi:"name"`
	// 'Runtime specific information used for NotebookRuntime creation.'
	NotebookRuntimeTemplateRef *ColabRuntimeNotebookRuntimeTemplateRef `pulumi:"notebookRuntimeTemplateRef"`
	// Output only. The type of the notebook runtime.
	NotebookRuntimeType *string `pulumi:"notebookRuntimeType"`
	Project             *string `pulumi:"project"`
	// The user email of the NotebookRuntime.
	RuntimeUser *string `pulumi:"runtimeUser"`
	// Output only. The state of the runtime.
	State    *string               `pulumi:"state"`
	Timeouts *ColabRuntimeTimeouts `pulumi:"timeouts"`
}

type ColabRuntimeState struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade    pulumi.BoolPtrInput
	ColabRuntimeId pulumi.StringPtrInput
	// The description of the Runtime.
	Description pulumi.StringPtrInput
	// Desired state of the Colab Runtime. Set this field to 'RUNNING' to start the runtime, and 'STOPPED' to stop it.
	DesiredState pulumi.StringPtrInput
	// Required. The display name of the Runtime.
	DisplayName pulumi.StringPtrInput
	// Output only. Timestamp when this NotebookRuntime will be expired.
	ExpirationTime pulumi.StringPtrInput
	// Output only. Checks if the NotebookRuntime is upgradable.
	IsUpgradable pulumi.BoolPtrInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringPtrInput
	// The resource name of the Runtime
	Name pulumi.StringPtrInput
	// 'Runtime specific information used for NotebookRuntime creation.'
	NotebookRuntimeTemplateRef ColabRuntimeNotebookRuntimeTemplateRefPtrInput
	// Output only. The type of the notebook runtime.
	NotebookRuntimeType pulumi.StringPtrInput
	Project             pulumi.StringPtrInput
	// The user email of the NotebookRuntime.
	RuntimeUser pulumi.StringPtrInput
	// Output only. The state of the runtime.
	State    pulumi.StringPtrInput
	Timeouts ColabRuntimeTimeoutsPtrInput
}

func (ColabRuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*colabRuntimeState)(nil)).Elem()
}

type colabRuntimeArgs struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade    *bool   `pulumi:"autoUpgrade"`
	ColabRuntimeId *string `pulumi:"colabRuntimeId"`
	// The description of the Runtime.
	Description *string `pulumi:"description"`
	// Desired state of the Colab Runtime. Set this field to 'RUNNING' to start the runtime, and 'STOPPED' to stop it.
	DesiredState *string `pulumi:"desiredState"`
	// Required. The display name of the Runtime.
	DisplayName string `pulumi:"displayName"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location string `pulumi:"location"`
	// The resource name of the Runtime
	Name *string `pulumi:"name"`
	// 'Runtime specific information used for NotebookRuntime creation.'
	NotebookRuntimeTemplateRef *ColabRuntimeNotebookRuntimeTemplateRef `pulumi:"notebookRuntimeTemplateRef"`
	Project                    *string                                 `pulumi:"project"`
	// The user email of the NotebookRuntime.
	RuntimeUser string                `pulumi:"runtimeUser"`
	Timeouts    *ColabRuntimeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ColabRuntime resource.
type ColabRuntimeArgs struct {
	// Triggers an upgrade anytime the runtime is started if it is upgradable.
	AutoUpgrade    pulumi.BoolPtrInput
	ColabRuntimeId pulumi.StringPtrInput
	// The description of the Runtime.
	Description pulumi.StringPtrInput
	// Desired state of the Colab Runtime. Set this field to 'RUNNING' to start the runtime, and 'STOPPED' to stop it.
	DesiredState pulumi.StringPtrInput
	// Required. The display name of the Runtime.
	DisplayName pulumi.StringInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringInput
	// The resource name of the Runtime
	Name pulumi.StringPtrInput
	// 'Runtime specific information used for NotebookRuntime creation.'
	NotebookRuntimeTemplateRef ColabRuntimeNotebookRuntimeTemplateRefPtrInput
	Project                    pulumi.StringPtrInput
	// The user email of the NotebookRuntime.
	RuntimeUser pulumi.StringInput
	Timeouts    ColabRuntimeTimeoutsPtrInput
}

func (ColabRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*colabRuntimeArgs)(nil)).Elem()
}

type ColabRuntimeInput interface {
	pulumi.Input

	ToColabRuntimeOutput() ColabRuntimeOutput
	ToColabRuntimeOutputWithContext(ctx context.Context) ColabRuntimeOutput
}

func (*ColabRuntime) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabRuntime)(nil)).Elem()
}

func (i *ColabRuntime) ToColabRuntimeOutput() ColabRuntimeOutput {
	return i.ToColabRuntimeOutputWithContext(context.Background())
}

func (i *ColabRuntime) ToColabRuntimeOutputWithContext(ctx context.Context) ColabRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColabRuntimeOutput)
}

type ColabRuntimeOutput struct{ *pulumi.OutputState }

func (ColabRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabRuntime)(nil)).Elem()
}

func (o ColabRuntimeOutput) ToColabRuntimeOutput() ColabRuntimeOutput {
	return o
}

func (o ColabRuntimeOutput) ToColabRuntimeOutputWithContext(ctx context.Context) ColabRuntimeOutput {
	return o
}

// Triggers an upgrade anytime the runtime is started if it is upgradable.
func (o ColabRuntimeOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.BoolPtrOutput { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

func (o ColabRuntimeOutput) ColabRuntimeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.ColabRuntimeId }).(pulumi.StringOutput)
}

// The description of the Runtime.
func (o ColabRuntimeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Desired state of the Colab Runtime. Set this field to 'RUNNING' to start the runtime, and 'STOPPED' to stop it.
func (o ColabRuntimeOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringPtrOutput { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Required. The display name of the Runtime.
func (o ColabRuntimeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Output only. Timestamp when this NotebookRuntime will be expired.
func (o ColabRuntimeOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Output only. Checks if the NotebookRuntime is upgradable.
func (o ColabRuntimeOutput) IsUpgradable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.BoolOutput { return v.IsUpgradable }).(pulumi.BoolOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
func (o ColabRuntimeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Runtime
func (o ColabRuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 'Runtime specific information used for NotebookRuntime creation.'
func (o ColabRuntimeOutput) NotebookRuntimeTemplateRef() ColabRuntimeNotebookRuntimeTemplateRefPtrOutput {
	return o.ApplyT(func(v *ColabRuntime) ColabRuntimeNotebookRuntimeTemplateRefPtrOutput {
		return v.NotebookRuntimeTemplateRef
	}).(ColabRuntimeNotebookRuntimeTemplateRefPtrOutput)
}

// Output only. The type of the notebook runtime.
func (o ColabRuntimeOutput) NotebookRuntimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.NotebookRuntimeType }).(pulumi.StringOutput)
}

func (o ColabRuntimeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The user email of the NotebookRuntime.
func (o ColabRuntimeOutput) RuntimeUser() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.RuntimeUser }).(pulumi.StringOutput)
}

// Output only. The state of the runtime.
func (o ColabRuntimeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntime) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ColabRuntimeOutput) Timeouts() ColabRuntimeTimeoutsPtrOutput {
	return o.ApplyT(func(v *ColabRuntime) ColabRuntimeTimeoutsPtrOutput { return v.Timeouts }).(ColabRuntimeTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ColabRuntimeInput)(nil)).Elem(), &ColabRuntime{})
	pulumi.RegisterOutputType(ColabRuntimeOutput{})
}
