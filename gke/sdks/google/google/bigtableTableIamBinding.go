// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigtableTableIamBinding struct {
	pulumi.CustomResourceState

	BigtableTableIamBindingId pulumi.StringOutput                       `pulumi:"bigtableTableIamBindingId"`
	Condition                 BigtableTableIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                      pulumi.StringOutput                       `pulumi:"etag"`
	Instance                  pulumi.StringOutput                       `pulumi:"instance"`
	Members                   pulumi.StringArrayOutput                  `pulumi:"members"`
	Project                   pulumi.StringOutput                       `pulumi:"project"`
	Role                      pulumi.StringOutput                       `pulumi:"role"`
	Table                     pulumi.StringOutput                       `pulumi:"table"`
}

// NewBigtableTableIamBinding registers a new resource with the given unique name, arguments, and options.
func NewBigtableTableIamBinding(ctx *pulumi.Context,
	name string, args *BigtableTableIamBindingArgs, opts ...pulumi.ResourceOption) (*BigtableTableIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigtableTableIamBinding
	err = ctx.RegisterPackageResource("google:index/bigtableTableIamBinding:BigtableTableIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigtableTableIamBinding gets an existing BigtableTableIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigtableTableIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigtableTableIamBindingState, opts ...pulumi.ResourceOption) (*BigtableTableIamBinding, error) {
	var resource BigtableTableIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/bigtableTableIamBinding:BigtableTableIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigtableTableIamBinding resources.
type bigtableTableIamBindingState struct {
	BigtableTableIamBindingId *string                           `pulumi:"bigtableTableIamBindingId"`
	Condition                 *BigtableTableIamBindingCondition `pulumi:"condition"`
	Etag                      *string                           `pulumi:"etag"`
	Instance                  *string                           `pulumi:"instance"`
	Members                   []string                          `pulumi:"members"`
	Project                   *string                           `pulumi:"project"`
	Role                      *string                           `pulumi:"role"`
	Table                     *string                           `pulumi:"table"`
}

type BigtableTableIamBindingState struct {
	BigtableTableIamBindingId pulumi.StringPtrInput
	Condition                 BigtableTableIamBindingConditionPtrInput
	Etag                      pulumi.StringPtrInput
	Instance                  pulumi.StringPtrInput
	Members                   pulumi.StringArrayInput
	Project                   pulumi.StringPtrInput
	Role                      pulumi.StringPtrInput
	Table                     pulumi.StringPtrInput
}

func (BigtableTableIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableTableIamBindingState)(nil)).Elem()
}

type bigtableTableIamBindingArgs struct {
	BigtableTableIamBindingId *string                           `pulumi:"bigtableTableIamBindingId"`
	Condition                 *BigtableTableIamBindingCondition `pulumi:"condition"`
	Instance                  string                            `pulumi:"instance"`
	Members                   []string                          `pulumi:"members"`
	Project                   *string                           `pulumi:"project"`
	Role                      string                            `pulumi:"role"`
	Table                     string                            `pulumi:"table"`
}

// The set of arguments for constructing a BigtableTableIamBinding resource.
type BigtableTableIamBindingArgs struct {
	BigtableTableIamBindingId pulumi.StringPtrInput
	Condition                 BigtableTableIamBindingConditionPtrInput
	Instance                  pulumi.StringInput
	Members                   pulumi.StringArrayInput
	Project                   pulumi.StringPtrInput
	Role                      pulumi.StringInput
	Table                     pulumi.StringInput
}

func (BigtableTableIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableTableIamBindingArgs)(nil)).Elem()
}

type BigtableTableIamBindingInput interface {
	pulumi.Input

	ToBigtableTableIamBindingOutput() BigtableTableIamBindingOutput
	ToBigtableTableIamBindingOutputWithContext(ctx context.Context) BigtableTableIamBindingOutput
}

func (*BigtableTableIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableTableIamBinding)(nil)).Elem()
}

func (i *BigtableTableIamBinding) ToBigtableTableIamBindingOutput() BigtableTableIamBindingOutput {
	return i.ToBigtableTableIamBindingOutputWithContext(context.Background())
}

func (i *BigtableTableIamBinding) ToBigtableTableIamBindingOutputWithContext(ctx context.Context) BigtableTableIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableTableIamBindingOutput)
}

type BigtableTableIamBindingOutput struct{ *pulumi.OutputState }

func (BigtableTableIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableTableIamBinding)(nil)).Elem()
}

func (o BigtableTableIamBindingOutput) ToBigtableTableIamBindingOutput() BigtableTableIamBindingOutput {
	return o
}

func (o BigtableTableIamBindingOutput) ToBigtableTableIamBindingOutputWithContext(ctx context.Context) BigtableTableIamBindingOutput {
	return o
}

func (o BigtableTableIamBindingOutput) BigtableTableIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringOutput { return v.BigtableTableIamBindingId }).(pulumi.StringOutput)
}

func (o BigtableTableIamBindingOutput) Condition() BigtableTableIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) BigtableTableIamBindingConditionPtrOutput { return v.Condition }).(BigtableTableIamBindingConditionPtrOutput)
}

func (o BigtableTableIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigtableTableIamBindingOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o BigtableTableIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o BigtableTableIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o BigtableTableIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o BigtableTableIamBindingOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableTableIamBinding) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableTableIamBindingInput)(nil)).Elem(), &BigtableTableIamBinding{})
	pulumi.RegisterOutputType(BigtableTableIamBindingOutput{})
}
