// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetComputeMachineTypes(ctx *pulumi.Context, args *GetComputeMachineTypesArgs, opts ...pulumi.InvokeOption) (*GetComputeMachineTypesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv GetComputeMachineTypesResult
	err = ctx.InvokePackage("google:index/getComputeMachineTypes:getComputeMachineTypes", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeMachineTypes.
type GetComputeMachineTypesArgs struct {
	Filter  *string `pulumi:"filter"`
	Id      *string `pulumi:"id"`
	Project *string `pulumi:"project"`
	Zone    *string `pulumi:"zone"`
}

// A collection of values returned by getComputeMachineTypes.
type GetComputeMachineTypesResult struct {
	Filter       *string                             `pulumi:"filter"`
	Id           string                              `pulumi:"id"`
	MachineTypes []GetComputeMachineTypesMachineType `pulumi:"machineTypes"`
	Project      string                              `pulumi:"project"`
	Zone         string                              `pulumi:"zone"`
}

func GetComputeMachineTypesOutput(ctx *pulumi.Context, args GetComputeMachineTypesOutputArgs, opts ...pulumi.InvokeOption) GetComputeMachineTypesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetComputeMachineTypesResultOutput, error) {
			args := v.(GetComputeMachineTypesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return GetComputeMachineTypesResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google:index/getComputeMachineTypes:getComputeMachineTypes", args, GetComputeMachineTypesResultOutput{}, options).(GetComputeMachineTypesResultOutput), nil
		}).(GetComputeMachineTypesResultOutput)
}

// A collection of arguments for invoking getComputeMachineTypes.
type GetComputeMachineTypesOutputArgs struct {
	Filter  pulumi.StringPtrInput `pulumi:"filter"`
	Id      pulumi.StringPtrInput `pulumi:"id"`
	Project pulumi.StringPtrInput `pulumi:"project"`
	Zone    pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetComputeMachineTypesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputeMachineTypesArgs)(nil)).Elem()
}

// A collection of values returned by getComputeMachineTypes.
type GetComputeMachineTypesResultOutput struct{ *pulumi.OutputState }

func (GetComputeMachineTypesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputeMachineTypesResult)(nil)).Elem()
}

func (o GetComputeMachineTypesResultOutput) ToGetComputeMachineTypesResultOutput() GetComputeMachineTypesResultOutput {
	return o
}

func (o GetComputeMachineTypesResultOutput) ToGetComputeMachineTypesResultOutputWithContext(ctx context.Context) GetComputeMachineTypesResultOutput {
	return o
}

func (o GetComputeMachineTypesResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputeMachineTypesResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

func (o GetComputeMachineTypesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeMachineTypesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetComputeMachineTypesResultOutput) MachineTypes() GetComputeMachineTypesMachineTypeArrayOutput {
	return o.ApplyT(func(v GetComputeMachineTypesResult) []GetComputeMachineTypesMachineType { return v.MachineTypes }).(GetComputeMachineTypesMachineTypeArrayOutput)
}

func (o GetComputeMachineTypesResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeMachineTypesResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetComputeMachineTypesResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeMachineTypesResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetComputeMachineTypesResultOutput{})
}
