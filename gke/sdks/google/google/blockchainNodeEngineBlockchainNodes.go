// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BlockchainNodeEngineBlockchainNodes struct {
	pulumi.CustomResourceState

	BlockchainNodeEngineBlockchainNodesId pulumi.StringOutput `pulumi:"blockchainNodeEngineBlockchainNodesId"`
	// ID of the requesting object.
	BlockchainNodeId pulumi.StringOutput `pulumi:"blockchainNodeId"`
	// User-provided key-value pairs Possible values: ["ETHEREUM"]
	BlockchainType pulumi.StringPtrOutput `pulumi:"blockchainType"`
	// The connection information through which to interact with a blockchain node.
	ConnectionInfos BlockchainNodeEngineBlockchainNodesConnectionInfoArrayOutput `pulumi:"connectionInfos"`
	// The timestamp at which the blockchain node was first created.
	CreateTime      pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// User-provided key-value pairs
	EthereumDetails BlockchainNodeEngineBlockchainNodesEthereumDetailsPtrOutput `pulumi:"ethereumDetails"`
	// User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location of Blockchain Node being created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                               `pulumi:"terraformLabels"`
	Timeouts        BlockchainNodeEngineBlockchainNodesTimeoutsPtrOutput `pulumi:"timeouts"`
	// The timestamp at which the blockchain node was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBlockchainNodeEngineBlockchainNodes registers a new resource with the given unique name, arguments, and options.
func NewBlockchainNodeEngineBlockchainNodes(ctx *pulumi.Context,
	name string, args *BlockchainNodeEngineBlockchainNodesArgs, opts ...pulumi.ResourceOption) (*BlockchainNodeEngineBlockchainNodes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlockchainNodeId == nil {
		return nil, errors.New("invalid value for required argument 'BlockchainNodeId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BlockchainNodeEngineBlockchainNodes
	err = ctx.RegisterPackageResource("google:index/blockchainNodeEngineBlockchainNodes:BlockchainNodeEngineBlockchainNodes", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockchainNodeEngineBlockchainNodes gets an existing BlockchainNodeEngineBlockchainNodes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockchainNodeEngineBlockchainNodes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockchainNodeEngineBlockchainNodesState, opts ...pulumi.ResourceOption) (*BlockchainNodeEngineBlockchainNodes, error) {
	var resource BlockchainNodeEngineBlockchainNodes
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/blockchainNodeEngineBlockchainNodes:BlockchainNodeEngineBlockchainNodes", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockchainNodeEngineBlockchainNodes resources.
type blockchainNodeEngineBlockchainNodesState struct {
	BlockchainNodeEngineBlockchainNodesId *string `pulumi:"blockchainNodeEngineBlockchainNodesId"`
	// ID of the requesting object.
	BlockchainNodeId *string `pulumi:"blockchainNodeId"`
	// User-provided key-value pairs Possible values: ["ETHEREUM"]
	BlockchainType *string `pulumi:"blockchainType"`
	// The connection information through which to interact with a blockchain node.
	ConnectionInfos []BlockchainNodeEngineBlockchainNodesConnectionInfo `pulumi:"connectionInfos"`
	// The timestamp at which the blockchain node was first created.
	CreateTime      *string           `pulumi:"createTime"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// User-provided key-value pairs
	EthereumDetails *BlockchainNodeEngineBlockchainNodesEthereumDetails `pulumi:"ethereumDetails"`
	// User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of Blockchain Node being created.
	Location *string `pulumi:"location"`
	// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                            `pulumi:"terraformLabels"`
	Timeouts        *BlockchainNodeEngineBlockchainNodesTimeouts `pulumi:"timeouts"`
	// The timestamp at which the blockchain node was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type BlockchainNodeEngineBlockchainNodesState struct {
	BlockchainNodeEngineBlockchainNodesId pulumi.StringPtrInput
	// ID of the requesting object.
	BlockchainNodeId pulumi.StringPtrInput
	// User-provided key-value pairs Possible values: ["ETHEREUM"]
	BlockchainType pulumi.StringPtrInput
	// The connection information through which to interact with a blockchain node.
	ConnectionInfos BlockchainNodeEngineBlockchainNodesConnectionInfoArrayInput
	// The timestamp at which the blockchain node was first created.
	CreateTime      pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// User-provided key-value pairs
	EthereumDetails BlockchainNodeEngineBlockchainNodesEthereumDetailsPtrInput
	// User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of Blockchain Node being created.
	Location pulumi.StringPtrInput
	// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        BlockchainNodeEngineBlockchainNodesTimeoutsPtrInput
	// The timestamp at which the blockchain node was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (BlockchainNodeEngineBlockchainNodesState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainNodeEngineBlockchainNodesState)(nil)).Elem()
}

type blockchainNodeEngineBlockchainNodesArgs struct {
	BlockchainNodeEngineBlockchainNodesId *string `pulumi:"blockchainNodeEngineBlockchainNodesId"`
	// ID of the requesting object.
	BlockchainNodeId string `pulumi:"blockchainNodeId"`
	// User-provided key-value pairs Possible values: ["ETHEREUM"]
	BlockchainType *string `pulumi:"blockchainType"`
	// User-provided key-value pairs
	EthereumDetails *BlockchainNodeEngineBlockchainNodesEthereumDetails `pulumi:"ethereumDetails"`
	// User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of Blockchain Node being created.
	Location string                                       `pulumi:"location"`
	Project  *string                                      `pulumi:"project"`
	Timeouts *BlockchainNodeEngineBlockchainNodesTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a BlockchainNodeEngineBlockchainNodes resource.
type BlockchainNodeEngineBlockchainNodesArgs struct {
	BlockchainNodeEngineBlockchainNodesId pulumi.StringPtrInput
	// ID of the requesting object.
	BlockchainNodeId pulumi.StringInput
	// User-provided key-value pairs Possible values: ["ETHEREUM"]
	BlockchainType pulumi.StringPtrInput
	// User-provided key-value pairs
	EthereumDetails BlockchainNodeEngineBlockchainNodesEthereumDetailsPtrInput
	// User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of Blockchain Node being created.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	Timeouts BlockchainNodeEngineBlockchainNodesTimeoutsPtrInput
}

func (BlockchainNodeEngineBlockchainNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainNodeEngineBlockchainNodesArgs)(nil)).Elem()
}

type BlockchainNodeEngineBlockchainNodesInput interface {
	pulumi.Input

	ToBlockchainNodeEngineBlockchainNodesOutput() BlockchainNodeEngineBlockchainNodesOutput
	ToBlockchainNodeEngineBlockchainNodesOutputWithContext(ctx context.Context) BlockchainNodeEngineBlockchainNodesOutput
}

func (*BlockchainNodeEngineBlockchainNodes) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainNodeEngineBlockchainNodes)(nil)).Elem()
}

func (i *BlockchainNodeEngineBlockchainNodes) ToBlockchainNodeEngineBlockchainNodesOutput() BlockchainNodeEngineBlockchainNodesOutput {
	return i.ToBlockchainNodeEngineBlockchainNodesOutputWithContext(context.Background())
}

func (i *BlockchainNodeEngineBlockchainNodes) ToBlockchainNodeEngineBlockchainNodesOutputWithContext(ctx context.Context) BlockchainNodeEngineBlockchainNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainNodeEngineBlockchainNodesOutput)
}

type BlockchainNodeEngineBlockchainNodesOutput struct{ *pulumi.OutputState }

func (BlockchainNodeEngineBlockchainNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainNodeEngineBlockchainNodes)(nil)).Elem()
}

func (o BlockchainNodeEngineBlockchainNodesOutput) ToBlockchainNodeEngineBlockchainNodesOutput() BlockchainNodeEngineBlockchainNodesOutput {
	return o
}

func (o BlockchainNodeEngineBlockchainNodesOutput) ToBlockchainNodeEngineBlockchainNodesOutputWithContext(ctx context.Context) BlockchainNodeEngineBlockchainNodesOutput {
	return o
}

func (o BlockchainNodeEngineBlockchainNodesOutput) BlockchainNodeEngineBlockchainNodesId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput {
		return v.BlockchainNodeEngineBlockchainNodesId
	}).(pulumi.StringOutput)
}

// ID of the requesting object.
func (o BlockchainNodeEngineBlockchainNodesOutput) BlockchainNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput { return v.BlockchainNodeId }).(pulumi.StringOutput)
}

// User-provided key-value pairs Possible values: ["ETHEREUM"]
func (o BlockchainNodeEngineBlockchainNodesOutput) BlockchainType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringPtrOutput { return v.BlockchainType }).(pulumi.StringPtrOutput)
}

// The connection information through which to interact with a blockchain node.
func (o BlockchainNodeEngineBlockchainNodesOutput) ConnectionInfos() BlockchainNodeEngineBlockchainNodesConnectionInfoArrayOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) BlockchainNodeEngineBlockchainNodesConnectionInfoArrayOutput {
		return v.ConnectionInfos
	}).(BlockchainNodeEngineBlockchainNodesConnectionInfoArrayOutput)
}

// The timestamp at which the blockchain node was first created.
func (o BlockchainNodeEngineBlockchainNodesOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o BlockchainNodeEngineBlockchainNodesOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// User-provided key-value pairs
func (o BlockchainNodeEngineBlockchainNodesOutput) EthereumDetails() BlockchainNodeEngineBlockchainNodesEthereumDetailsPtrOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) BlockchainNodeEngineBlockchainNodesEthereumDetailsPtrOutput {
		return v.EthereumDetails
	}).(BlockchainNodeEngineBlockchainNodesEthereumDetailsPtrOutput)
}

// User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o BlockchainNodeEngineBlockchainNodesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location of Blockchain Node being created.
func (o BlockchainNodeEngineBlockchainNodesOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
func (o BlockchainNodeEngineBlockchainNodesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BlockchainNodeEngineBlockchainNodesOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o BlockchainNodeEngineBlockchainNodesOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o BlockchainNodeEngineBlockchainNodesOutput) Timeouts() BlockchainNodeEngineBlockchainNodesTimeoutsPtrOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) BlockchainNodeEngineBlockchainNodesTimeoutsPtrOutput {
		return v.Timeouts
	}).(BlockchainNodeEngineBlockchainNodesTimeoutsPtrOutput)
}

// The timestamp at which the blockchain node was last updated.
func (o BlockchainNodeEngineBlockchainNodesOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNodeEngineBlockchainNodes) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainNodeEngineBlockchainNodesInput)(nil)).Elem(), &BlockchainNodeEngineBlockchainNodes{})
	pulumi.RegisterOutputType(BlockchainNodeEngineBlockchainNodesOutput{})
}
