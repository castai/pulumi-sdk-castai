// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkServicesEdgeCacheService struct {
	pulumi.CustomResourceState

	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
	// and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
	// have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
	// being advertised and negotiated.
	DisableHttp2 pulumi.BoolPtrOutput `pulumi:"disableHttp2"`
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic pulumi.BoolOutput `pulumi:"disableQuic"`
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
	// EdgeCacheService.
	EdgeSecurityPolicy pulumi.StringPtrOutput `pulumi:"edgeSecurityPolicy"`
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
	// that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates pulumi.StringArrayOutput `pulumi:"edgeSslCertificates"`
	EffectiveLabels     pulumi.StringMapOutput   `pulumi:"effectiveLabels"`
	// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv4Addresses pulumi.StringArrayOutput `pulumi:"ipv4Addresses"`
	// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv6Addresses pulumi.StringArrayOutput `pulumi:"ipv6Addresses"`
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
	// Cloud Logging.
	LogConfig NetworkServicesEdgeCacheServiceLogConfigPtrOutput `pulumi:"logConfig"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                              pulumi.StringOutput `pulumi:"name"`
	NetworkServicesEdgeCacheServiceId pulumi.StringOutput `pulumi:"networkServicesEdgeCacheServiceId"`
	Project                           pulumi.StringOutput `pulumi:"project"`
	// Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
	// HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
	// this.
	RequireTls pulumi.BoolOutput `pulumi:"requireTls"`
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	Routing NetworkServicesEdgeCacheServiceRoutingOutput `pulumi:"routing"`
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
	// SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy pulumi.StringPtrOutput `pulumi:"sslPolicy"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                           `pulumi:"terraformLabels"`
	Timeouts        NetworkServicesEdgeCacheServiceTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetworkServicesEdgeCacheService registers a new resource with the given unique name, arguments, and options.
func NewNetworkServicesEdgeCacheService(ctx *pulumi.Context,
	name string, args *NetworkServicesEdgeCacheServiceArgs, opts ...pulumi.ResourceOption) (*NetworkServicesEdgeCacheService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Routing == nil {
		return nil, errors.New("invalid value for required argument 'Routing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetworkServicesEdgeCacheService
	err = ctx.RegisterPackageResource("google:index/networkServicesEdgeCacheService:NetworkServicesEdgeCacheService", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkServicesEdgeCacheService gets an existing NetworkServicesEdgeCacheService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkServicesEdgeCacheService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkServicesEdgeCacheServiceState, opts ...pulumi.ResourceOption) (*NetworkServicesEdgeCacheService, error) {
	var resource NetworkServicesEdgeCacheService
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/networkServicesEdgeCacheService:NetworkServicesEdgeCacheService", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkServicesEdgeCacheService resources.
type networkServicesEdgeCacheServiceState struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
	// and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
	// have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
	// being advertised and negotiated.
	DisableHttp2 *bool `pulumi:"disableHttp2"`
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic *bool `pulumi:"disableQuic"`
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
	// EdgeCacheService.
	EdgeSecurityPolicy *string `pulumi:"edgeSecurityPolicy"`
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
	// that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates []string          `pulumi:"edgeSslCertificates"`
	EffectiveLabels     map[string]string `pulumi:"effectiveLabels"`
	// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
	// Cloud Logging.
	LogConfig *NetworkServicesEdgeCacheServiceLogConfig `pulumi:"logConfig"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                              *string `pulumi:"name"`
	NetworkServicesEdgeCacheServiceId *string `pulumi:"networkServicesEdgeCacheServiceId"`
	Project                           *string `pulumi:"project"`
	// Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
	// HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
	// this.
	RequireTls *bool `pulumi:"requireTls"`
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	Routing *NetworkServicesEdgeCacheServiceRouting `pulumi:"routing"`
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
	// SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy *string `pulumi:"sslPolicy"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                        `pulumi:"terraformLabels"`
	Timeouts        *NetworkServicesEdgeCacheServiceTimeouts `pulumi:"timeouts"`
}

type NetworkServicesEdgeCacheServiceState struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
	// and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
	// have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
	// being advertised and negotiated.
	DisableHttp2 pulumi.BoolPtrInput
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic pulumi.BoolPtrInput
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
	// EdgeCacheService.
	EdgeSecurityPolicy pulumi.StringPtrInput
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
	// that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates pulumi.StringArrayInput
	EffectiveLabels     pulumi.StringMapInput
	// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv4Addresses pulumi.StringArrayInput
	// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
	Ipv6Addresses pulumi.StringArrayInput
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
	// Cloud Logging.
	LogConfig NetworkServicesEdgeCacheServiceLogConfigPtrInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                              pulumi.StringPtrInput
	NetworkServicesEdgeCacheServiceId pulumi.StringPtrInput
	Project                           pulumi.StringPtrInput
	// Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
	// HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
	// this.
	RequireTls pulumi.BoolPtrInput
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	Routing NetworkServicesEdgeCacheServiceRoutingPtrInput
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
	// SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetworkServicesEdgeCacheServiceTimeoutsPtrInput
}

func (NetworkServicesEdgeCacheServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServicesEdgeCacheServiceState)(nil)).Elem()
}

type networkServicesEdgeCacheServiceArgs struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
	// and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
	// have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
	// being advertised and negotiated.
	DisableHttp2 *bool `pulumi:"disableHttp2"`
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic *bool `pulumi:"disableQuic"`
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
	// EdgeCacheService.
	EdgeSecurityPolicy *string `pulumi:"edgeSecurityPolicy"`
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
	// that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates []string `pulumi:"edgeSslCertificates"`
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
	// Cloud Logging.
	LogConfig *NetworkServicesEdgeCacheServiceLogConfig `pulumi:"logConfig"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                              *string `pulumi:"name"`
	NetworkServicesEdgeCacheServiceId *string `pulumi:"networkServicesEdgeCacheServiceId"`
	Project                           *string `pulumi:"project"`
	// Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
	// HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
	// this.
	RequireTls *bool `pulumi:"requireTls"`
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	Routing NetworkServicesEdgeCacheServiceRouting `pulumi:"routing"`
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
	// SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy *string                                  `pulumi:"sslPolicy"`
	Timeouts  *NetworkServicesEdgeCacheServiceTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetworkServicesEdgeCacheService resource.
type NetworkServicesEdgeCacheServiceArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
	// and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
	// have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
	// being advertised and negotiated.
	DisableHttp2 pulumi.BoolPtrInput
	// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic pulumi.BoolPtrInput
	// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
	// EdgeCacheService.
	EdgeSecurityPolicy pulumi.StringPtrInput
	// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
	// that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
	EdgeSslCertificates pulumi.StringArrayInput
	// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
	// Cloud Logging.
	LogConfig NetworkServicesEdgeCacheServiceLogConfigPtrInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name                              pulumi.StringPtrInput
	NetworkServicesEdgeCacheServiceId pulumi.StringPtrInput
	Project                           pulumi.StringPtrInput
	// Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
	// HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
	// this.
	RequireTls pulumi.BoolPtrInput
	// Defines how requests are routed, modified, cached and/or which origin content is filled from.
	Routing NetworkServicesEdgeCacheServiceRoutingInput
	// URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
	// SSL policy configured, and will default to the "COMPATIBLE" policy.
	SslPolicy pulumi.StringPtrInput
	Timeouts  NetworkServicesEdgeCacheServiceTimeoutsPtrInput
}

func (NetworkServicesEdgeCacheServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServicesEdgeCacheServiceArgs)(nil)).Elem()
}

type NetworkServicesEdgeCacheServiceInput interface {
	pulumi.Input

	ToNetworkServicesEdgeCacheServiceOutput() NetworkServicesEdgeCacheServiceOutput
	ToNetworkServicesEdgeCacheServiceOutputWithContext(ctx context.Context) NetworkServicesEdgeCacheServiceOutput
}

func (*NetworkServicesEdgeCacheService) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkServicesEdgeCacheService)(nil)).Elem()
}

func (i *NetworkServicesEdgeCacheService) ToNetworkServicesEdgeCacheServiceOutput() NetworkServicesEdgeCacheServiceOutput {
	return i.ToNetworkServicesEdgeCacheServiceOutputWithContext(context.Background())
}

func (i *NetworkServicesEdgeCacheService) ToNetworkServicesEdgeCacheServiceOutputWithContext(ctx context.Context) NetworkServicesEdgeCacheServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServicesEdgeCacheServiceOutput)
}

type NetworkServicesEdgeCacheServiceOutput struct{ *pulumi.OutputState }

func (NetworkServicesEdgeCacheServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkServicesEdgeCacheService)(nil)).Elem()
}

func (o NetworkServicesEdgeCacheServiceOutput) ToNetworkServicesEdgeCacheServiceOutput() NetworkServicesEdgeCacheServiceOutput {
	return o
}

func (o NetworkServicesEdgeCacheServiceOutput) ToNetworkServicesEdgeCacheServiceOutputWithContext(ctx context.Context) NetworkServicesEdgeCacheServiceOutput {
	return o
}

// A human-readable description of the resource.
func (o NetworkServicesEdgeCacheServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
// and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
// have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
// being advertised and negotiated.
func (o NetworkServicesEdgeCacheServiceOutput) DisableHttp2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.BoolPtrOutput { return v.DisableHttp2 }).(pulumi.BoolPtrOutput)
}

// HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
func (o NetworkServicesEdgeCacheServiceOutput) DisableQuic() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.BoolOutput { return v.DisableQuic }).(pulumi.BoolOutput)
}

// Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
// EdgeCacheService.
func (o NetworkServicesEdgeCacheServiceOutput) EdgeSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringPtrOutput { return v.EdgeSecurityPolicy }).(pulumi.StringPtrOutput)
}

// URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
// that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
func (o NetworkServicesEdgeCacheServiceOutput) EdgeSslCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringArrayOutput { return v.EdgeSslCertificates }).(pulumi.StringArrayOutput)
}

func (o NetworkServicesEdgeCacheServiceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
func (o NetworkServicesEdgeCacheServiceOutput) Ipv4Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringArrayOutput { return v.Ipv4Addresses }).(pulumi.StringArrayOutput)
}

// The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
func (o NetworkServicesEdgeCacheServiceOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringArrayOutput { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o NetworkServicesEdgeCacheServiceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
// Cloud Logging.
func (o NetworkServicesEdgeCacheServiceOutput) LogConfig() NetworkServicesEdgeCacheServiceLogConfigPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) NetworkServicesEdgeCacheServiceLogConfigPtrOutput {
		return v.LogConfig
	}).(NetworkServicesEdgeCacheServiceLogConfigPtrOutput)
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
// characters must be a dash, underscore, letter or digit.
func (o NetworkServicesEdgeCacheServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkServicesEdgeCacheServiceOutput) NetworkServicesEdgeCacheServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringOutput {
		return v.NetworkServicesEdgeCacheServiceId
	}).(pulumi.StringOutput)
}

func (o NetworkServicesEdgeCacheServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
// HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
// this.
func (o NetworkServicesEdgeCacheServiceOutput) RequireTls() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.BoolOutput { return v.RequireTls }).(pulumi.BoolOutput)
}

// Defines how requests are routed, modified, cached and/or which origin content is filled from.
func (o NetworkServicesEdgeCacheServiceOutput) Routing() NetworkServicesEdgeCacheServiceRoutingOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) NetworkServicesEdgeCacheServiceRoutingOutput {
		return v.Routing
	}).(NetworkServicesEdgeCacheServiceRoutingOutput)
}

// URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
// SSL policy configured, and will default to the "COMPATIBLE" policy.
func (o NetworkServicesEdgeCacheServiceOutput) SslPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringPtrOutput { return v.SslPolicy }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetworkServicesEdgeCacheServiceOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetworkServicesEdgeCacheServiceOutput) Timeouts() NetworkServicesEdgeCacheServiceTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetworkServicesEdgeCacheService) NetworkServicesEdgeCacheServiceTimeoutsPtrOutput {
		return v.Timeouts
	}).(NetworkServicesEdgeCacheServiceTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServicesEdgeCacheServiceInput)(nil)).Elem(), &NetworkServicesEdgeCacheService{})
	pulumi.RegisterOutputType(NetworkServicesEdgeCacheServiceOutput{})
}
