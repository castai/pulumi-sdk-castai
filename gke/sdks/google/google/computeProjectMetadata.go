// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeProjectMetadata struct {
	pulumi.CustomResourceState

	ComputeProjectMetadataId pulumi.StringOutput `pulumi:"computeProjectMetadataId"`
	// A series of key value pairs.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project  pulumi.StringOutput                     `pulumi:"project"`
	Timeouts ComputeProjectMetadataTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewComputeProjectMetadata registers a new resource with the given unique name, arguments, and options.
func NewComputeProjectMetadata(ctx *pulumi.Context,
	name string, args *ComputeProjectMetadataArgs, opts ...pulumi.ResourceOption) (*ComputeProjectMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeProjectMetadata
	err = ctx.RegisterPackageResource("google:index/computeProjectMetadata:ComputeProjectMetadata", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeProjectMetadata gets an existing ComputeProjectMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeProjectMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeProjectMetadataState, opts ...pulumi.ResourceOption) (*ComputeProjectMetadata, error) {
	var resource ComputeProjectMetadata
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeProjectMetadata:ComputeProjectMetadata", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeProjectMetadata resources.
type computeProjectMetadataState struct {
	ComputeProjectMetadataId *string `pulumi:"computeProjectMetadataId"`
	// A series of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project  *string                         `pulumi:"project"`
	Timeouts *ComputeProjectMetadataTimeouts `pulumi:"timeouts"`
}

type ComputeProjectMetadataState struct {
	ComputeProjectMetadataId pulumi.StringPtrInput
	// A series of key value pairs.
	Metadata pulumi.StringMapInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project  pulumi.StringPtrInput
	Timeouts ComputeProjectMetadataTimeoutsPtrInput
}

func (ComputeProjectMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeProjectMetadataState)(nil)).Elem()
}

type computeProjectMetadataArgs struct {
	ComputeProjectMetadataId *string `pulumi:"computeProjectMetadataId"`
	// A series of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project  *string                         `pulumi:"project"`
	Timeouts *ComputeProjectMetadataTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeProjectMetadata resource.
type ComputeProjectMetadataArgs struct {
	ComputeProjectMetadataId pulumi.StringPtrInput
	// A series of key value pairs.
	Metadata pulumi.StringMapInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project  pulumi.StringPtrInput
	Timeouts ComputeProjectMetadataTimeoutsPtrInput
}

func (ComputeProjectMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeProjectMetadataArgs)(nil)).Elem()
}

type ComputeProjectMetadataInput interface {
	pulumi.Input

	ToComputeProjectMetadataOutput() ComputeProjectMetadataOutput
	ToComputeProjectMetadataOutputWithContext(ctx context.Context) ComputeProjectMetadataOutput
}

func (*ComputeProjectMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeProjectMetadata)(nil)).Elem()
}

func (i *ComputeProjectMetadata) ToComputeProjectMetadataOutput() ComputeProjectMetadataOutput {
	return i.ToComputeProjectMetadataOutputWithContext(context.Background())
}

func (i *ComputeProjectMetadata) ToComputeProjectMetadataOutputWithContext(ctx context.Context) ComputeProjectMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeProjectMetadataOutput)
}

type ComputeProjectMetadataOutput struct{ *pulumi.OutputState }

func (ComputeProjectMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeProjectMetadata)(nil)).Elem()
}

func (o ComputeProjectMetadataOutput) ToComputeProjectMetadataOutput() ComputeProjectMetadataOutput {
	return o
}

func (o ComputeProjectMetadataOutput) ToComputeProjectMetadataOutputWithContext(ctx context.Context) ComputeProjectMetadataOutput {
	return o
}

func (o ComputeProjectMetadataOutput) ComputeProjectMetadataId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeProjectMetadata) pulumi.StringOutput { return v.ComputeProjectMetadataId }).(pulumi.StringOutput)
}

// A series of key value pairs.
func (o ComputeProjectMetadataOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeProjectMetadata) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (o ComputeProjectMetadataOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeProjectMetadata) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeProjectMetadataOutput) Timeouts() ComputeProjectMetadataTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeProjectMetadata) ComputeProjectMetadataTimeoutsPtrOutput { return v.Timeouts }).(ComputeProjectMetadataTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeProjectMetadataInput)(nil)).Elem(), &ComputeProjectMetadata{})
	pulumi.RegisterOutputType(ComputeProjectMetadataOutput{})
}
