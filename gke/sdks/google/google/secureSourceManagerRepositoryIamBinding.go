// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecureSourceManagerRepositoryIamBinding struct {
	pulumi.CustomResourceState

	Condition                                 SecureSourceManagerRepositoryIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                                      pulumi.StringOutput                                       `pulumi:"etag"`
	Location                                  pulumi.StringOutput                                       `pulumi:"location"`
	Members                                   pulumi.StringArrayOutput                                  `pulumi:"members"`
	Project                                   pulumi.StringOutput                                       `pulumi:"project"`
	RepositoryId                              pulumi.StringOutput                                       `pulumi:"repositoryId"`
	Role                                      pulumi.StringOutput                                       `pulumi:"role"`
	SecureSourceManagerRepositoryIamBindingId pulumi.StringOutput                                       `pulumi:"secureSourceManagerRepositoryIamBindingId"`
}

// NewSecureSourceManagerRepositoryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSecureSourceManagerRepositoryIamBinding(ctx *pulumi.Context,
	name string, args *SecureSourceManagerRepositoryIamBindingArgs, opts ...pulumi.ResourceOption) (*SecureSourceManagerRepositoryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SecureSourceManagerRepositoryIamBinding
	err = ctx.RegisterPackageResource("google:index/secureSourceManagerRepositoryIamBinding:SecureSourceManagerRepositoryIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecureSourceManagerRepositoryIamBinding gets an existing SecureSourceManagerRepositoryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecureSourceManagerRepositoryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecureSourceManagerRepositoryIamBindingState, opts ...pulumi.ResourceOption) (*SecureSourceManagerRepositoryIamBinding, error) {
	var resource SecureSourceManagerRepositoryIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/secureSourceManagerRepositoryIamBinding:SecureSourceManagerRepositoryIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecureSourceManagerRepositoryIamBinding resources.
type secureSourceManagerRepositoryIamBindingState struct {
	Condition                                 *SecureSourceManagerRepositoryIamBindingCondition `pulumi:"condition"`
	Etag                                      *string                                           `pulumi:"etag"`
	Location                                  *string                                           `pulumi:"location"`
	Members                                   []string                                          `pulumi:"members"`
	Project                                   *string                                           `pulumi:"project"`
	RepositoryId                              *string                                           `pulumi:"repositoryId"`
	Role                                      *string                                           `pulumi:"role"`
	SecureSourceManagerRepositoryIamBindingId *string                                           `pulumi:"secureSourceManagerRepositoryIamBindingId"`
}

type SecureSourceManagerRepositoryIamBindingState struct {
	Condition                                 SecureSourceManagerRepositoryIamBindingConditionPtrInput
	Etag                                      pulumi.StringPtrInput
	Location                                  pulumi.StringPtrInput
	Members                                   pulumi.StringArrayInput
	Project                                   pulumi.StringPtrInput
	RepositoryId                              pulumi.StringPtrInput
	Role                                      pulumi.StringPtrInput
	SecureSourceManagerRepositoryIamBindingId pulumi.StringPtrInput
}

func (SecureSourceManagerRepositoryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*secureSourceManagerRepositoryIamBindingState)(nil)).Elem()
}

type secureSourceManagerRepositoryIamBindingArgs struct {
	Condition                                 *SecureSourceManagerRepositoryIamBindingCondition `pulumi:"condition"`
	Location                                  *string                                           `pulumi:"location"`
	Members                                   []string                                          `pulumi:"members"`
	Project                                   *string                                           `pulumi:"project"`
	RepositoryId                              string                                            `pulumi:"repositoryId"`
	Role                                      string                                            `pulumi:"role"`
	SecureSourceManagerRepositoryIamBindingId *string                                           `pulumi:"secureSourceManagerRepositoryIamBindingId"`
}

// The set of arguments for constructing a SecureSourceManagerRepositoryIamBinding resource.
type SecureSourceManagerRepositoryIamBindingArgs struct {
	Condition                                 SecureSourceManagerRepositoryIamBindingConditionPtrInput
	Location                                  pulumi.StringPtrInput
	Members                                   pulumi.StringArrayInput
	Project                                   pulumi.StringPtrInput
	RepositoryId                              pulumi.StringInput
	Role                                      pulumi.StringInput
	SecureSourceManagerRepositoryIamBindingId pulumi.StringPtrInput
}

func (SecureSourceManagerRepositoryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secureSourceManagerRepositoryIamBindingArgs)(nil)).Elem()
}

type SecureSourceManagerRepositoryIamBindingInput interface {
	pulumi.Input

	ToSecureSourceManagerRepositoryIamBindingOutput() SecureSourceManagerRepositoryIamBindingOutput
	ToSecureSourceManagerRepositoryIamBindingOutputWithContext(ctx context.Context) SecureSourceManagerRepositoryIamBindingOutput
}

func (*SecureSourceManagerRepositoryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureSourceManagerRepositoryIamBinding)(nil)).Elem()
}

func (i *SecureSourceManagerRepositoryIamBinding) ToSecureSourceManagerRepositoryIamBindingOutput() SecureSourceManagerRepositoryIamBindingOutput {
	return i.ToSecureSourceManagerRepositoryIamBindingOutputWithContext(context.Background())
}

func (i *SecureSourceManagerRepositoryIamBinding) ToSecureSourceManagerRepositoryIamBindingOutputWithContext(ctx context.Context) SecureSourceManagerRepositoryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureSourceManagerRepositoryIamBindingOutput)
}

type SecureSourceManagerRepositoryIamBindingOutput struct{ *pulumi.OutputState }

func (SecureSourceManagerRepositoryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureSourceManagerRepositoryIamBinding)(nil)).Elem()
}

func (o SecureSourceManagerRepositoryIamBindingOutput) ToSecureSourceManagerRepositoryIamBindingOutput() SecureSourceManagerRepositoryIamBindingOutput {
	return o
}

func (o SecureSourceManagerRepositoryIamBindingOutput) ToSecureSourceManagerRepositoryIamBindingOutputWithContext(ctx context.Context) SecureSourceManagerRepositoryIamBindingOutput {
	return o
}

func (o SecureSourceManagerRepositoryIamBindingOutput) Condition() SecureSourceManagerRepositoryIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) SecureSourceManagerRepositoryIamBindingConditionPtrOutput {
		return v.Condition
	}).(SecureSourceManagerRepositoryIamBindingConditionPtrOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamBindingOutput) SecureSourceManagerRepositoryIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamBinding) pulumi.StringOutput {
		return v.SecureSourceManagerRepositoryIamBindingId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecureSourceManagerRepositoryIamBindingInput)(nil)).Elem(), &SecureSourceManagerRepositoryIamBinding{})
	pulumi.RegisterOutputType(SecureSourceManagerRepositoryIamBindingOutput{})
}
