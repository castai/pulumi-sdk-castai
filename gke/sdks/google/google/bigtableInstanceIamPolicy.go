// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigtableInstanceIamPolicy struct {
	pulumi.CustomResourceState

	BigtableInstanceIamPolicyId pulumi.StringOutput `pulumi:"bigtableInstanceIamPolicyId"`
	Etag                        pulumi.StringOutput `pulumi:"etag"`
	Instance                    pulumi.StringOutput `pulumi:"instance"`
	PolicyData                  pulumi.StringOutput `pulumi:"policyData"`
	Project                     pulumi.StringOutput `pulumi:"project"`
}

// NewBigtableInstanceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewBigtableInstanceIamPolicy(ctx *pulumi.Context,
	name string, args *BigtableInstanceIamPolicyArgs, opts ...pulumi.ResourceOption) (*BigtableInstanceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigtableInstanceIamPolicy
	err = ctx.RegisterPackageResource("google:index/bigtableInstanceIamPolicy:BigtableInstanceIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigtableInstanceIamPolicy gets an existing BigtableInstanceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigtableInstanceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigtableInstanceIamPolicyState, opts ...pulumi.ResourceOption) (*BigtableInstanceIamPolicy, error) {
	var resource BigtableInstanceIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/bigtableInstanceIamPolicy:BigtableInstanceIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigtableInstanceIamPolicy resources.
type bigtableInstanceIamPolicyState struct {
	BigtableInstanceIamPolicyId *string `pulumi:"bigtableInstanceIamPolicyId"`
	Etag                        *string `pulumi:"etag"`
	Instance                    *string `pulumi:"instance"`
	PolicyData                  *string `pulumi:"policyData"`
	Project                     *string `pulumi:"project"`
}

type BigtableInstanceIamPolicyState struct {
	BigtableInstanceIamPolicyId pulumi.StringPtrInput
	Etag                        pulumi.StringPtrInput
	Instance                    pulumi.StringPtrInput
	PolicyData                  pulumi.StringPtrInput
	Project                     pulumi.StringPtrInput
}

func (BigtableInstanceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableInstanceIamPolicyState)(nil)).Elem()
}

type bigtableInstanceIamPolicyArgs struct {
	BigtableInstanceIamPolicyId *string `pulumi:"bigtableInstanceIamPolicyId"`
	Instance                    string  `pulumi:"instance"`
	PolicyData                  string  `pulumi:"policyData"`
	Project                     *string `pulumi:"project"`
}

// The set of arguments for constructing a BigtableInstanceIamPolicy resource.
type BigtableInstanceIamPolicyArgs struct {
	BigtableInstanceIamPolicyId pulumi.StringPtrInput
	Instance                    pulumi.StringInput
	PolicyData                  pulumi.StringInput
	Project                     pulumi.StringPtrInput
}

func (BigtableInstanceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableInstanceIamPolicyArgs)(nil)).Elem()
}

type BigtableInstanceIamPolicyInput interface {
	pulumi.Input

	ToBigtableInstanceIamPolicyOutput() BigtableInstanceIamPolicyOutput
	ToBigtableInstanceIamPolicyOutputWithContext(ctx context.Context) BigtableInstanceIamPolicyOutput
}

func (*BigtableInstanceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableInstanceIamPolicy)(nil)).Elem()
}

func (i *BigtableInstanceIamPolicy) ToBigtableInstanceIamPolicyOutput() BigtableInstanceIamPolicyOutput {
	return i.ToBigtableInstanceIamPolicyOutputWithContext(context.Background())
}

func (i *BigtableInstanceIamPolicy) ToBigtableInstanceIamPolicyOutputWithContext(ctx context.Context) BigtableInstanceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableInstanceIamPolicyOutput)
}

type BigtableInstanceIamPolicyOutput struct{ *pulumi.OutputState }

func (BigtableInstanceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableInstanceIamPolicy)(nil)).Elem()
}

func (o BigtableInstanceIamPolicyOutput) ToBigtableInstanceIamPolicyOutput() BigtableInstanceIamPolicyOutput {
	return o
}

func (o BigtableInstanceIamPolicyOutput) ToBigtableInstanceIamPolicyOutputWithContext(ctx context.Context) BigtableInstanceIamPolicyOutput {
	return o
}

func (o BigtableInstanceIamPolicyOutput) BigtableInstanceIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamPolicy) pulumi.StringOutput { return v.BigtableInstanceIamPolicyId }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamPolicyOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamPolicy) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableInstanceIamPolicyInput)(nil)).Elem(), &BigtableInstanceIamPolicy{})
	pulumi.RegisterOutputType(BigtableInstanceIamPolicyOutput{})
}
