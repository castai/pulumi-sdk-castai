// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeminiRepositoryGroupIamPolicy struct {
	pulumi.CustomResourceState

	CodeRepositoryIndex              pulumi.StringOutput `pulumi:"codeRepositoryIndex"`
	Etag                             pulumi.StringOutput `pulumi:"etag"`
	GeminiRepositoryGroupIamPolicyId pulumi.StringOutput `pulumi:"geminiRepositoryGroupIamPolicyId"`
	Location                         pulumi.StringOutput `pulumi:"location"`
	PolicyData                       pulumi.StringOutput `pulumi:"policyData"`
	Project                          pulumi.StringOutput `pulumi:"project"`
	RepositoryGroupId                pulumi.StringOutput `pulumi:"repositoryGroupId"`
}

// NewGeminiRepositoryGroupIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewGeminiRepositoryGroupIamPolicy(ctx *pulumi.Context,
	name string, args *GeminiRepositoryGroupIamPolicyArgs, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroupIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndex == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndex'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.RepositoryGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GeminiRepositoryGroupIamPolicy
	err = ctx.RegisterPackageResource("google:index/geminiRepositoryGroupIamPolicy:GeminiRepositoryGroupIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeminiRepositoryGroupIamPolicy gets an existing GeminiRepositoryGroupIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeminiRepositoryGroupIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeminiRepositoryGroupIamPolicyState, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroupIamPolicy, error) {
	var resource GeminiRepositoryGroupIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/geminiRepositoryGroupIamPolicy:GeminiRepositoryGroupIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeminiRepositoryGroupIamPolicy resources.
type geminiRepositoryGroupIamPolicyState struct {
	CodeRepositoryIndex              *string `pulumi:"codeRepositoryIndex"`
	Etag                             *string `pulumi:"etag"`
	GeminiRepositoryGroupIamPolicyId *string `pulumi:"geminiRepositoryGroupIamPolicyId"`
	Location                         *string `pulumi:"location"`
	PolicyData                       *string `pulumi:"policyData"`
	Project                          *string `pulumi:"project"`
	RepositoryGroupId                *string `pulumi:"repositoryGroupId"`
}

type GeminiRepositoryGroupIamPolicyState struct {
	CodeRepositoryIndex              pulumi.StringPtrInput
	Etag                             pulumi.StringPtrInput
	GeminiRepositoryGroupIamPolicyId pulumi.StringPtrInput
	Location                         pulumi.StringPtrInput
	PolicyData                       pulumi.StringPtrInput
	Project                          pulumi.StringPtrInput
	RepositoryGroupId                pulumi.StringPtrInput
}

func (GeminiRepositoryGroupIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupIamPolicyState)(nil)).Elem()
}

type geminiRepositoryGroupIamPolicyArgs struct {
	CodeRepositoryIndex              string  `pulumi:"codeRepositoryIndex"`
	GeminiRepositoryGroupIamPolicyId *string `pulumi:"geminiRepositoryGroupIamPolicyId"`
	Location                         *string `pulumi:"location"`
	PolicyData                       string  `pulumi:"policyData"`
	Project                          *string `pulumi:"project"`
	RepositoryGroupId                string  `pulumi:"repositoryGroupId"`
}

// The set of arguments for constructing a GeminiRepositoryGroupIamPolicy resource.
type GeminiRepositoryGroupIamPolicyArgs struct {
	CodeRepositoryIndex              pulumi.StringInput
	GeminiRepositoryGroupIamPolicyId pulumi.StringPtrInput
	Location                         pulumi.StringPtrInput
	PolicyData                       pulumi.StringInput
	Project                          pulumi.StringPtrInput
	RepositoryGroupId                pulumi.StringInput
}

func (GeminiRepositoryGroupIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupIamPolicyArgs)(nil)).Elem()
}

type GeminiRepositoryGroupIamPolicyInput interface {
	pulumi.Input

	ToGeminiRepositoryGroupIamPolicyOutput() GeminiRepositoryGroupIamPolicyOutput
	ToGeminiRepositoryGroupIamPolicyOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamPolicyOutput
}

func (*GeminiRepositoryGroupIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroupIamPolicy)(nil)).Elem()
}

func (i *GeminiRepositoryGroupIamPolicy) ToGeminiRepositoryGroupIamPolicyOutput() GeminiRepositoryGroupIamPolicyOutput {
	return i.ToGeminiRepositoryGroupIamPolicyOutputWithContext(context.Background())
}

func (i *GeminiRepositoryGroupIamPolicy) ToGeminiRepositoryGroupIamPolicyOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiRepositoryGroupIamPolicyOutput)
}

type GeminiRepositoryGroupIamPolicyOutput struct{ *pulumi.OutputState }

func (GeminiRepositoryGroupIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroupIamPolicy)(nil)).Elem()
}

func (o GeminiRepositoryGroupIamPolicyOutput) ToGeminiRepositoryGroupIamPolicyOutput() GeminiRepositoryGroupIamPolicyOutput {
	return o
}

func (o GeminiRepositoryGroupIamPolicyOutput) ToGeminiRepositoryGroupIamPolicyOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamPolicyOutput {
	return o
}

func (o GeminiRepositoryGroupIamPolicyOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamPolicyOutput) GeminiRepositoryGroupIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.GeminiRepositoryGroupIamPolicyId }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamPolicyOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamPolicy) pulumi.StringOutput { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiRepositoryGroupIamPolicyInput)(nil)).Elem(), &GeminiRepositoryGroupIamPolicy{})
	pulumi.RegisterOutputType(GeminiRepositoryGroupIamPolicyOutput{})
}
