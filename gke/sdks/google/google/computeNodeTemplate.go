// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeNodeTemplate struct {
	pulumi.CustomResourceState

	// List of the type and count of accelerator cards attached to the node template
	Accelerators          ComputeNodeTemplateAcceleratorArrayOutput `pulumi:"accelerators"`
	ComputeNodeTemplateId pulumi.StringOutput                       `pulumi:"computeNodeTemplateId"`
	// CPU overcommit. Default value: "NONE" Possible values: ["ENABLED", "NONE"]
	CpuOvercommitType pulumi.StringPtrOutput `pulumi:"cpuOvercommitType"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional textual description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of the type, size and count of disks attached to the node template
	Disks ComputeNodeTemplateDiskArrayOutput `pulumi:"disks"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels pulumi.StringMapOutput `pulumi:"nodeAffinityLabels"`
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType pulumi.StringPtrOutput `pulumi:"nodeType"`
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility ComputeNodeTemplateNodeTypeFlexibilityPtrOutput `pulumi:"nodeTypeFlexibility"`
	Project             pulumi.StringOutput                             `pulumi:"project"`
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region   pulumi.StringOutput `pulumi:"region"`
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding ComputeNodeTemplateServerBindingPtrOutput `pulumi:"serverBinding"`
	Timeouts      ComputeNodeTemplateTimeoutsPtrOutput      `pulumi:"timeouts"`
}

// NewComputeNodeTemplate registers a new resource with the given unique name, arguments, and options.
func NewComputeNodeTemplate(ctx *pulumi.Context,
	name string, args *ComputeNodeTemplateArgs, opts ...pulumi.ResourceOption) (*ComputeNodeTemplate, error) {
	if args == nil {
		args = &ComputeNodeTemplateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeNodeTemplate
	err = ctx.RegisterPackageResource("google:index/computeNodeTemplate:ComputeNodeTemplate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeNodeTemplate gets an existing ComputeNodeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeNodeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeNodeTemplateState, opts ...pulumi.ResourceOption) (*ComputeNodeTemplate, error) {
	var resource ComputeNodeTemplate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeNodeTemplate:ComputeNodeTemplate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeNodeTemplate resources.
type computeNodeTemplateState struct {
	// List of the type and count of accelerator cards attached to the node template
	Accelerators          []ComputeNodeTemplateAccelerator `pulumi:"accelerators"`
	ComputeNodeTemplateId *string                          `pulumi:"computeNodeTemplateId"`
	// CPU overcommit. Default value: "NONE" Possible values: ["ENABLED", "NONE"]
	CpuOvercommitType *string `pulumi:"cpuOvercommitType"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional textual description of the resource.
	Description *string `pulumi:"description"`
	// List of the type, size and count of disks attached to the node template
	Disks []ComputeNodeTemplateDisk `pulumi:"disks"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels map[string]string `pulumi:"nodeAffinityLabels"`
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType *string `pulumi:"nodeType"`
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility *ComputeNodeTemplateNodeTypeFlexibility `pulumi:"nodeTypeFlexibility"`
	Project             *string                                 `pulumi:"project"`
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region   *string `pulumi:"region"`
	SelfLink *string `pulumi:"selfLink"`
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding *ComputeNodeTemplateServerBinding `pulumi:"serverBinding"`
	Timeouts      *ComputeNodeTemplateTimeouts      `pulumi:"timeouts"`
}

type ComputeNodeTemplateState struct {
	// List of the type and count of accelerator cards attached to the node template
	Accelerators          ComputeNodeTemplateAcceleratorArrayInput
	ComputeNodeTemplateId pulumi.StringPtrInput
	// CPU overcommit. Default value: "NONE" Possible values: ["ENABLED", "NONE"]
	CpuOvercommitType pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional textual description of the resource.
	Description pulumi.StringPtrInput
	// List of the type, size and count of disks attached to the node template
	Disks ComputeNodeTemplateDiskArrayInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels pulumi.StringMapInput
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType pulumi.StringPtrInput
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility ComputeNodeTemplateNodeTypeFlexibilityPtrInput
	Project             pulumi.StringPtrInput
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region   pulumi.StringPtrInput
	SelfLink pulumi.StringPtrInput
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding ComputeNodeTemplateServerBindingPtrInput
	Timeouts      ComputeNodeTemplateTimeoutsPtrInput
}

func (ComputeNodeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNodeTemplateState)(nil)).Elem()
}

type computeNodeTemplateArgs struct {
	// List of the type and count of accelerator cards attached to the node template
	Accelerators          []ComputeNodeTemplateAccelerator `pulumi:"accelerators"`
	ComputeNodeTemplateId *string                          `pulumi:"computeNodeTemplateId"`
	// CPU overcommit. Default value: "NONE" Possible values: ["ENABLED", "NONE"]
	CpuOvercommitType *string `pulumi:"cpuOvercommitType"`
	// An optional textual description of the resource.
	Description *string `pulumi:"description"`
	// List of the type, size and count of disks attached to the node template
	Disks []ComputeNodeTemplateDisk `pulumi:"disks"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels map[string]string `pulumi:"nodeAffinityLabels"`
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType *string `pulumi:"nodeType"`
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility *ComputeNodeTemplateNodeTypeFlexibility `pulumi:"nodeTypeFlexibility"`
	Project             *string                                 `pulumi:"project"`
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding *ComputeNodeTemplateServerBinding `pulumi:"serverBinding"`
	Timeouts      *ComputeNodeTemplateTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeNodeTemplate resource.
type ComputeNodeTemplateArgs struct {
	// List of the type and count of accelerator cards attached to the node template
	Accelerators          ComputeNodeTemplateAcceleratorArrayInput
	ComputeNodeTemplateId pulumi.StringPtrInput
	// CPU overcommit. Default value: "NONE" Possible values: ["ENABLED", "NONE"]
	CpuOvercommitType pulumi.StringPtrInput
	// An optional textual description of the resource.
	Description pulumi.StringPtrInput
	// List of the type, size and count of disks attached to the node template
	Disks ComputeNodeTemplateDiskArrayInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels pulumi.StringMapInput
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType pulumi.StringPtrInput
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility ComputeNodeTemplateNodeTypeFlexibilityPtrInput
	Project             pulumi.StringPtrInput
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding ComputeNodeTemplateServerBindingPtrInput
	Timeouts      ComputeNodeTemplateTimeoutsPtrInput
}

func (ComputeNodeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNodeTemplateArgs)(nil)).Elem()
}

type ComputeNodeTemplateInput interface {
	pulumi.Input

	ToComputeNodeTemplateOutput() ComputeNodeTemplateOutput
	ToComputeNodeTemplateOutputWithContext(ctx context.Context) ComputeNodeTemplateOutput
}

func (*ComputeNodeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNodeTemplate)(nil)).Elem()
}

func (i *ComputeNodeTemplate) ToComputeNodeTemplateOutput() ComputeNodeTemplateOutput {
	return i.ToComputeNodeTemplateOutputWithContext(context.Background())
}

func (i *ComputeNodeTemplate) ToComputeNodeTemplateOutputWithContext(ctx context.Context) ComputeNodeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeNodeTemplateOutput)
}

type ComputeNodeTemplateOutput struct{ *pulumi.OutputState }

func (ComputeNodeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNodeTemplate)(nil)).Elem()
}

func (o ComputeNodeTemplateOutput) ToComputeNodeTemplateOutput() ComputeNodeTemplateOutput {
	return o
}

func (o ComputeNodeTemplateOutput) ToComputeNodeTemplateOutputWithContext(ctx context.Context) ComputeNodeTemplateOutput {
	return o
}

// List of the type and count of accelerator cards attached to the node template
func (o ComputeNodeTemplateOutput) Accelerators() ComputeNodeTemplateAcceleratorArrayOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) ComputeNodeTemplateAcceleratorArrayOutput { return v.Accelerators }).(ComputeNodeTemplateAcceleratorArrayOutput)
}

func (o ComputeNodeTemplateOutput) ComputeNodeTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringOutput { return v.ComputeNodeTemplateId }).(pulumi.StringOutput)
}

// CPU overcommit. Default value: "NONE" Possible values: ["ENABLED", "NONE"]
func (o ComputeNodeTemplateOutput) CpuOvercommitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringPtrOutput { return v.CpuOvercommitType }).(pulumi.StringPtrOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeNodeTemplateOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional textual description of the resource.
func (o ComputeNodeTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of the type, size and count of disks attached to the node template
func (o ComputeNodeTemplateOutput) Disks() ComputeNodeTemplateDiskArrayOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) ComputeNodeTemplateDiskArrayOutput { return v.Disks }).(ComputeNodeTemplateDiskArrayOutput)
}

// Name of the resource.
func (o ComputeNodeTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Labels to use for node affinity, which will be used in instance scheduling.
func (o ComputeNodeTemplateOutput) NodeAffinityLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringMapOutput { return v.NodeAffinityLabels }).(pulumi.StringMapOutput)
}

// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
// be specified.
func (o ComputeNodeTemplateOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringPtrOutput { return v.NodeType }).(pulumi.StringPtrOutput)
}

// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
func (o ComputeNodeTemplateOutput) NodeTypeFlexibility() ComputeNodeTemplateNodeTypeFlexibilityPtrOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) ComputeNodeTemplateNodeTypeFlexibilityPtrOutput {
		return v.NodeTypeFlexibility
	}).(ComputeNodeTemplateNodeTypeFlexibilityPtrOutput)
}

func (o ComputeNodeTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
func (o ComputeNodeTemplateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ComputeNodeTemplateOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The server binding policy for nodes using this template. Determines where the nodes should restart following a
// maintenance event.
func (o ComputeNodeTemplateOutput) ServerBinding() ComputeNodeTemplateServerBindingPtrOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) ComputeNodeTemplateServerBindingPtrOutput { return v.ServerBinding }).(ComputeNodeTemplateServerBindingPtrOutput)
}

func (o ComputeNodeTemplateOutput) Timeouts() ComputeNodeTemplateTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeNodeTemplate) ComputeNodeTemplateTimeoutsPtrOutput { return v.Timeouts }).(ComputeNodeTemplateTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeNodeTemplateInput)(nil)).Elem(), &ComputeNodeTemplate{})
	pulumi.RegisterOutputType(ComputeNodeTemplateOutput{})
}
