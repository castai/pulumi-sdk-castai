// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetappVolumeReplication struct {
	pulumi.CustomResourceState

	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime              pulumi.StringOutput  `pulumi:"createTime"`
	DeleteDestinationVolume pulumi.BoolPtrOutput `pulumi:"deleteDestinationVolume"`
	// An description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Full resource name of destination volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
	DestinationVolume pulumi.StringOutput `pulumi:"destinationVolume"`
	// Destination volume parameters.
	DestinationVolumeParameters NetappVolumeReplicationDestinationVolumeParametersPtrOutput `pulumi:"destinationVolumeParameters"`
	EffectiveLabels             pulumi.StringMapOutput                                      `pulumi:"effectiveLabels"`
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING currently
	// receives an update and stopping the update might be undesirable. Set this parameter to true to stop anyway. All data
	// transferred to the destination will be discarded and content of destination volume will remain at the state of the last
	// successful update. Default is false.
	ForceStopping pulumi.BoolPtrOutput `pulumi:"forceStopping"`
	// Condition of the relationship. Can be one of the following: - true: The replication relationship is healthy. It has not
	// missed the most recent scheduled transfer. - false: The replication relationship is not healthy. It has missed the most
	// recent scheduled transfer.
	Healthy pulumi.BoolOutput `pulumi:"healthy"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }' **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location pulumi.StringOutput `pulumi:"location"`
	// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data in your source
	// volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline transfer ended and
	// destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume currently receives an update.
	// Updated every 5 minutes.
	MirrorState pulumi.StringOutput `pulumi:"mirrorState"`
	// The name of the replication. Needs to be unique per location.
	Name                      pulumi.StringOutput `pulumi:"name"`
	NetappVolumeReplicationId pulumi.StringOutput `pulumi:"netappVolumeReplicationId"`
	Project                   pulumi.StringOutput `pulumi:"project"`
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write and act independently
	// from the source volume. Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes done
	// to the destination volume with the content of the source volume.
	ReplicationEnabled pulumi.BoolPtrOutput `pulumi:"replicationEnabled"`
	// Specifies the replication interval. Possible values: ["EVERY_10_MINUTES", "HOURLY", "DAILY"]
	ReplicationSchedule pulumi.StringOutput `pulumi:"replicationSchedule"`
	// Reverting a replication can swap source and destination volume roles. This field indicates if the 'location' hosts the
	// source or destination volume. For resume and revert and resume operations it is critical to understand which volume is
	// the source volume, since it will overwrite changes done to the destination volume.
	Role pulumi.StringOutput `pulumi:"role"`
	// Full resource name of source volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
	SourceVolume pulumi.StringOutput `pulumi:"sourceVolume"`
	// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
	State pulumi.StringOutput `pulumi:"state"`
	// State details of the replication resource.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                   `pulumi:"terraformLabels"`
	Timeouts        NetappVolumeReplicationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Replication transfer statistics. All statistics are updated every 5 minutes.
	TransferStats NetappVolumeReplicationTransferStatArrayOutput `pulumi:"transferStats"`
	// The name of the existing source volume.
	VolumeName    pulumi.StringOutput  `pulumi:"volumeName"`
	WaitForMirror pulumi.BoolPtrOutput `pulumi:"waitForMirror"`
}

// NewNetappVolumeReplication registers a new resource with the given unique name, arguments, and options.
func NewNetappVolumeReplication(ctx *pulumi.Context,
	name string, args *NetappVolumeReplicationArgs, opts ...pulumi.ResourceOption) (*NetappVolumeReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ReplicationSchedule == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationSchedule'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetappVolumeReplication
	err = ctx.RegisterPackageResource("google:index/netappVolumeReplication:NetappVolumeReplication", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappVolumeReplication gets an existing NetappVolumeReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappVolumeReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappVolumeReplicationState, opts ...pulumi.ResourceOption) (*NetappVolumeReplication, error) {
	var resource NetappVolumeReplication
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/netappVolumeReplication:NetappVolumeReplication", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappVolumeReplication resources.
type netappVolumeReplicationState struct {
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime              *string `pulumi:"createTime"`
	DeleteDestinationVolume *bool   `pulumi:"deleteDestinationVolume"`
	// An description of this resource.
	Description *string `pulumi:"description"`
	// Full resource name of destination volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
	DestinationVolume *string `pulumi:"destinationVolume"`
	// Destination volume parameters.
	DestinationVolumeParameters *NetappVolumeReplicationDestinationVolumeParameters `pulumi:"destinationVolumeParameters"`
	EffectiveLabels             map[string]string                                   `pulumi:"effectiveLabels"`
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING currently
	// receives an update and stopping the update might be undesirable. Set this parameter to true to stop anyway. All data
	// transferred to the destination will be discarded and content of destination volume will remain at the state of the last
	// successful update. Default is false.
	ForceStopping *bool `pulumi:"forceStopping"`
	// Condition of the relationship. Can be one of the following: - true: The replication relationship is healthy. It has not
	// missed the most recent scheduled transfer. - false: The replication relationship is not healthy. It has missed the most
	// recent scheduled transfer.
	Healthy *bool `pulumi:"healthy"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }' **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location *string `pulumi:"location"`
	// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data in your source
	// volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline transfer ended and
	// destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume currently receives an update.
	// Updated every 5 minutes.
	MirrorState *string `pulumi:"mirrorState"`
	// The name of the replication. Needs to be unique per location.
	Name                      *string `pulumi:"name"`
	NetappVolumeReplicationId *string `pulumi:"netappVolumeReplicationId"`
	Project                   *string `pulumi:"project"`
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write and act independently
	// from the source volume. Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes done
	// to the destination volume with the content of the source volume.
	ReplicationEnabled *bool `pulumi:"replicationEnabled"`
	// Specifies the replication interval. Possible values: ["EVERY_10_MINUTES", "HOURLY", "DAILY"]
	ReplicationSchedule *string `pulumi:"replicationSchedule"`
	// Reverting a replication can swap source and destination volume roles. This field indicates if the 'location' hosts the
	// source or destination volume. For resume and revert and resume operations it is critical to understand which volume is
	// the source volume, since it will overwrite changes done to the destination volume.
	Role *string `pulumi:"role"`
	// Full resource name of source volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
	SourceVolume *string `pulumi:"sourceVolume"`
	// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
	State *string `pulumi:"state"`
	// State details of the replication resource.
	StateDetails *string `pulumi:"stateDetails"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                `pulumi:"terraformLabels"`
	Timeouts        *NetappVolumeReplicationTimeouts `pulumi:"timeouts"`
	// Replication transfer statistics. All statistics are updated every 5 minutes.
	TransferStats []NetappVolumeReplicationTransferStat `pulumi:"transferStats"`
	// The name of the existing source volume.
	VolumeName    *string `pulumi:"volumeName"`
	WaitForMirror *bool   `pulumi:"waitForMirror"`
}

type NetappVolumeReplicationState struct {
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime              pulumi.StringPtrInput
	DeleteDestinationVolume pulumi.BoolPtrInput
	// An description of this resource.
	Description pulumi.StringPtrInput
	// Full resource name of destination volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
	DestinationVolume pulumi.StringPtrInput
	// Destination volume parameters.
	DestinationVolumeParameters NetappVolumeReplicationDestinationVolumeParametersPtrInput
	EffectiveLabels             pulumi.StringMapInput
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING currently
	// receives an update and stopping the update might be undesirable. Set this parameter to true to stop anyway. All data
	// transferred to the destination will be discarded and content of destination volume will remain at the state of the last
	// successful update. Default is false.
	ForceStopping pulumi.BoolPtrInput
	// Condition of the relationship. Can be one of the following: - true: The replication relationship is healthy. It has not
	// missed the most recent scheduled transfer. - false: The replication relationship is not healthy. It has missed the most
	// recent scheduled transfer.
	Healthy pulumi.BoolPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }' **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location pulumi.StringPtrInput
	// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data in your source
	// volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline transfer ended and
	// destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume currently receives an update.
	// Updated every 5 minutes.
	MirrorState pulumi.StringPtrInput
	// The name of the replication. Needs to be unique per location.
	Name                      pulumi.StringPtrInput
	NetappVolumeReplicationId pulumi.StringPtrInput
	Project                   pulumi.StringPtrInput
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write and act independently
	// from the source volume. Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes done
	// to the destination volume with the content of the source volume.
	ReplicationEnabled pulumi.BoolPtrInput
	// Specifies the replication interval. Possible values: ["EVERY_10_MINUTES", "HOURLY", "DAILY"]
	ReplicationSchedule pulumi.StringPtrInput
	// Reverting a replication can swap source and destination volume roles. This field indicates if the 'location' hosts the
	// source or destination volume. For resume and revert and resume operations it is critical to understand which volume is
	// the source volume, since it will overwrite changes done to the destination volume.
	Role pulumi.StringPtrInput
	// Full resource name of source volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
	SourceVolume pulumi.StringPtrInput
	// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
	State pulumi.StringPtrInput
	// State details of the replication resource.
	StateDetails pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetappVolumeReplicationTimeoutsPtrInput
	// Replication transfer statistics. All statistics are updated every 5 minutes.
	TransferStats NetappVolumeReplicationTransferStatArrayInput
	// The name of the existing source volume.
	VolumeName    pulumi.StringPtrInput
	WaitForMirror pulumi.BoolPtrInput
}

func (NetappVolumeReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeReplicationState)(nil)).Elem()
}

type netappVolumeReplicationArgs struct {
	DeleteDestinationVolume *bool `pulumi:"deleteDestinationVolume"`
	// An description of this resource.
	Description *string `pulumi:"description"`
	// Destination volume parameters.
	DestinationVolumeParameters *NetappVolumeReplicationDestinationVolumeParameters `pulumi:"destinationVolumeParameters"`
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING currently
	// receives an update and stopping the update might be undesirable. Set this parameter to true to stop anyway. All data
	// transferred to the destination will be discarded and content of destination volume will remain at the state of the last
	// successful update. Default is false.
	ForceStopping *bool `pulumi:"forceStopping"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }' **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location string `pulumi:"location"`
	// The name of the replication. Needs to be unique per location.
	Name                      *string `pulumi:"name"`
	NetappVolumeReplicationId *string `pulumi:"netappVolumeReplicationId"`
	Project                   *string `pulumi:"project"`
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write and act independently
	// from the source volume. Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes done
	// to the destination volume with the content of the source volume.
	ReplicationEnabled *bool `pulumi:"replicationEnabled"`
	// Specifies the replication interval. Possible values: ["EVERY_10_MINUTES", "HOURLY", "DAILY"]
	ReplicationSchedule string                           `pulumi:"replicationSchedule"`
	Timeouts            *NetappVolumeReplicationTimeouts `pulumi:"timeouts"`
	// The name of the existing source volume.
	VolumeName    string `pulumi:"volumeName"`
	WaitForMirror *bool  `pulumi:"waitForMirror"`
}

// The set of arguments for constructing a NetappVolumeReplication resource.
type NetappVolumeReplicationArgs struct {
	DeleteDestinationVolume pulumi.BoolPtrInput
	// An description of this resource.
	Description pulumi.StringPtrInput
	// Destination volume parameters.
	DestinationVolumeParameters NetappVolumeReplicationDestinationVolumeParametersPtrInput
	// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING currently
	// receives an update and stopping the update might be undesirable. Set this parameter to true to stop anyway. All data
	// transferred to the destination will be discarded and content of destination volume will remain at the state of the last
	// successful update. Default is false.
	ForceStopping pulumi.BoolPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }' **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of region for this resource. The resource needs to be created in the region of the destination volume.
	Location pulumi.StringInput
	// The name of the replication. Needs to be unique per location.
	Name                      pulumi.StringPtrInput
	NetappVolumeReplicationId pulumi.StringPtrInput
	Project                   pulumi.StringPtrInput
	// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write and act independently
	// from the source volume. Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes done
	// to the destination volume with the content of the source volume.
	ReplicationEnabled pulumi.BoolPtrInput
	// Specifies the replication interval. Possible values: ["EVERY_10_MINUTES", "HOURLY", "DAILY"]
	ReplicationSchedule pulumi.StringInput
	Timeouts            NetappVolumeReplicationTimeoutsPtrInput
	// The name of the existing source volume.
	VolumeName    pulumi.StringInput
	WaitForMirror pulumi.BoolPtrInput
}

func (NetappVolumeReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeReplicationArgs)(nil)).Elem()
}

type NetappVolumeReplicationInput interface {
	pulumi.Input

	ToNetappVolumeReplicationOutput() NetappVolumeReplicationOutput
	ToNetappVolumeReplicationOutputWithContext(ctx context.Context) NetappVolumeReplicationOutput
}

func (*NetappVolumeReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolumeReplication)(nil)).Elem()
}

func (i *NetappVolumeReplication) ToNetappVolumeReplicationOutput() NetappVolumeReplicationOutput {
	return i.ToNetappVolumeReplicationOutputWithContext(context.Background())
}

func (i *NetappVolumeReplication) ToNetappVolumeReplicationOutputWithContext(ctx context.Context) NetappVolumeReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappVolumeReplicationOutput)
}

type NetappVolumeReplicationOutput struct{ *pulumi.OutputState }

func (NetappVolumeReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolumeReplication)(nil)).Elem()
}

func (o NetappVolumeReplicationOutput) ToNetappVolumeReplicationOutput() NetappVolumeReplicationOutput {
	return o
}

func (o NetappVolumeReplicationOutput) ToNetappVolumeReplicationOutputWithContext(ctx context.Context) NetappVolumeReplicationOutput {
	return o
}

// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o NetappVolumeReplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o NetappVolumeReplicationOutput) DeleteDestinationVolume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.BoolPtrOutput { return v.DeleteDestinationVolume }).(pulumi.BoolPtrOutput)
}

// An description of this resource.
func (o NetappVolumeReplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Full resource name of destination volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
func (o NetappVolumeReplicationOutput) DestinationVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.DestinationVolume }).(pulumi.StringOutput)
}

// Destination volume parameters.
func (o NetappVolumeReplicationOutput) DestinationVolumeParameters() NetappVolumeReplicationDestinationVolumeParametersPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) NetappVolumeReplicationDestinationVolumeParametersPtrOutput {
		return v.DestinationVolumeParameters
	}).(NetappVolumeReplicationDestinationVolumeParametersPtrOutput)
}

func (o NetappVolumeReplicationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING currently
// receives an update and stopping the update might be undesirable. Set this parameter to true to stop anyway. All data
// transferred to the destination will be discarded and content of destination volume will remain at the state of the last
// successful update. Default is false.
func (o NetappVolumeReplicationOutput) ForceStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.BoolPtrOutput { return v.ForceStopping }).(pulumi.BoolPtrOutput)
}

// Condition of the relationship. Can be one of the following: - true: The replication relationship is healthy. It has not
// missed the most recent scheduled transfer. - false: The replication relationship is not healthy. It has missed the most
// recent scheduled transfer.
func (o NetappVolumeReplicationOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.BoolOutput { return v.Healthy }).(pulumi.BoolOutput)
}

// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }' **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o NetappVolumeReplicationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of region for this resource. The resource needs to be created in the region of the destination volume.
func (o NetappVolumeReplicationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Indicates the state of the mirror between source and destination volumes. Depending on the amount of data in your source
// volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline transfer ended and
// destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume currently receives an update.
// Updated every 5 minutes.
func (o NetappVolumeReplicationOutput) MirrorState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.MirrorState }).(pulumi.StringOutput)
}

// The name of the replication. Needs to be unique per location.
func (o NetappVolumeReplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetappVolumeReplicationOutput) NetappVolumeReplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.NetappVolumeReplicationId }).(pulumi.StringOutput)
}

func (o NetappVolumeReplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write and act independently
// from the source volume. Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes done
// to the destination volume with the content of the source volume.
func (o NetappVolumeReplicationOutput) ReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.BoolPtrOutput { return v.ReplicationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the replication interval. Possible values: ["EVERY_10_MINUTES", "HOURLY", "DAILY"]
func (o NetappVolumeReplicationOutput) ReplicationSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.ReplicationSchedule }).(pulumi.StringOutput)
}

// Reverting a replication can swap source and destination volume roles. This field indicates if the 'location' hosts the
// source or destination volume. For resume and revert and resume operations it is critical to understand which volume is
// the source volume, since it will overwrite changes done to the destination volume.
func (o NetappVolumeReplicationOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Full resource name of source volume with format: 'projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}'
func (o NetappVolumeReplicationOutput) SourceVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.SourceVolume }).(pulumi.StringOutput)
}

// Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
func (o NetappVolumeReplicationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// State details of the replication resource.
func (o NetappVolumeReplicationOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetappVolumeReplicationOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetappVolumeReplicationOutput) Timeouts() NetappVolumeReplicationTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) NetappVolumeReplicationTimeoutsPtrOutput { return v.Timeouts }).(NetappVolumeReplicationTimeoutsPtrOutput)
}

// Replication transfer statistics. All statistics are updated every 5 minutes.
func (o NetappVolumeReplicationOutput) TransferStats() NetappVolumeReplicationTransferStatArrayOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) NetappVolumeReplicationTransferStatArrayOutput {
		return v.TransferStats
	}).(NetappVolumeReplicationTransferStatArrayOutput)
}

// The name of the existing source volume.
func (o NetappVolumeReplicationOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

func (o NetappVolumeReplicationOutput) WaitForMirror() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolumeReplication) pulumi.BoolPtrOutput { return v.WaitForMirror }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappVolumeReplicationInput)(nil)).Elem(), &NetappVolumeReplication{})
	pulumi.RegisterOutputType(NetappVolumeReplicationOutput{})
}
