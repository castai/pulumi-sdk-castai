// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EdgecontainerVpnConnection struct {
	pulumi.CustomResourceState

	// The canonical Cluster name to connect to. It is in the form of
	// projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// The time when the VPN connection was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A nested object resource.
	Details                      EdgecontainerVpnConnectionDetailArrayOutput `pulumi:"details"`
	EdgecontainerVpnConnectionId pulumi.StringOutput                         `pulumi:"edgecontainerVpnConnectionId"`
	EffectiveLabels              pulumi.StringMapOutput                      `pulumi:"effectiveLabels"`
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
	// use 2 ANG floating IPs.
	EnableHighAvailability pulumi.BoolOutput `pulumi:"enableHighAvailability"`
	// Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Google Cloud Platform location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of VPN connection
	Name pulumi.StringOutput `pulumi:"name"`
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
	// only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
	NatGatewayIp pulumi.StringPtrOutput `pulumi:"natGatewayIp"`
	Project      pulumi.StringOutput    `pulumi:"project"`
	// The VPN connection Cloud Router name.
	Router pulumi.StringPtrOutput `pulumi:"router"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                      `pulumi:"terraformLabels"`
	Timeouts        EdgecontainerVpnConnectionTimeoutsPtrOutput `pulumi:"timeouts"`
	// The time when the VPN connection was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The network ID of VPC to connect to.
	Vpc pulumi.StringPtrOutput `pulumi:"vpc"`
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	VpcProject EdgecontainerVpnConnectionVpcProjectPtrOutput `pulumi:"vpcProject"`
}

// NewEdgecontainerVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewEdgecontainerVpnConnection(ctx *pulumi.Context,
	name string, args *EdgecontainerVpnConnectionArgs, opts ...pulumi.ResourceOption) (*EdgecontainerVpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EdgecontainerVpnConnection
	err = ctx.RegisterPackageResource("google:index/edgecontainerVpnConnection:EdgecontainerVpnConnection", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgecontainerVpnConnection gets an existing EdgecontainerVpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgecontainerVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgecontainerVpnConnectionState, opts ...pulumi.ResourceOption) (*EdgecontainerVpnConnection, error) {
	var resource EdgecontainerVpnConnection
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/edgecontainerVpnConnection:EdgecontainerVpnConnection", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgecontainerVpnConnection resources.
type edgecontainerVpnConnectionState struct {
	// The canonical Cluster name to connect to. It is in the form of
	// projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster *string `pulumi:"cluster"`
	// The time when the VPN connection was created.
	CreateTime *string `pulumi:"createTime"`
	// A nested object resource.
	Details                      []EdgecontainerVpnConnectionDetail `pulumi:"details"`
	EdgecontainerVpnConnectionId *string                            `pulumi:"edgecontainerVpnConnectionId"`
	EffectiveLabels              map[string]string                  `pulumi:"effectiveLabels"`
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
	// use 2 ANG floating IPs.
	EnableHighAvailability *bool `pulumi:"enableHighAvailability"`
	// Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Google Cloud Platform location.
	Location *string `pulumi:"location"`
	// The resource name of VPN connection
	Name *string `pulumi:"name"`
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
	// only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
	NatGatewayIp *string `pulumi:"natGatewayIp"`
	Project      *string `pulumi:"project"`
	// The VPN connection Cloud Router name.
	Router *string `pulumi:"router"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                   `pulumi:"terraformLabels"`
	Timeouts        *EdgecontainerVpnConnectionTimeouts `pulumi:"timeouts"`
	// The time when the VPN connection was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// The network ID of VPC to connect to.
	Vpc *string `pulumi:"vpc"`
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	VpcProject *EdgecontainerVpnConnectionVpcProject `pulumi:"vpcProject"`
}

type EdgecontainerVpnConnectionState struct {
	// The canonical Cluster name to connect to. It is in the form of
	// projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster pulumi.StringPtrInput
	// The time when the VPN connection was created.
	CreateTime pulumi.StringPtrInput
	// A nested object resource.
	Details                      EdgecontainerVpnConnectionDetailArrayInput
	EdgecontainerVpnConnectionId pulumi.StringPtrInput
	EffectiveLabels              pulumi.StringMapInput
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
	// use 2 ANG floating IPs.
	EnableHighAvailability pulumi.BoolPtrInput
	// Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Google Cloud Platform location.
	Location pulumi.StringPtrInput
	// The resource name of VPN connection
	Name pulumi.StringPtrInput
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
	// only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
	NatGatewayIp pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
	// The VPN connection Cloud Router name.
	Router pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        EdgecontainerVpnConnectionTimeoutsPtrInput
	// The time when the VPN connection was last updated.
	UpdateTime pulumi.StringPtrInput
	// The network ID of VPC to connect to.
	Vpc pulumi.StringPtrInput
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	VpcProject EdgecontainerVpnConnectionVpcProjectPtrInput
}

func (EdgecontainerVpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgecontainerVpnConnectionState)(nil)).Elem()
}

type edgecontainerVpnConnectionArgs struct {
	// The canonical Cluster name to connect to. It is in the form of
	// projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster                      string  `pulumi:"cluster"`
	EdgecontainerVpnConnectionId *string `pulumi:"edgecontainerVpnConnectionId"`
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
	// use 2 ANG floating IPs.
	EnableHighAvailability *bool `pulumi:"enableHighAvailability"`
	// Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Google Cloud Platform location.
	Location string `pulumi:"location"`
	// The resource name of VPN connection
	Name *string `pulumi:"name"`
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
	// only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
	NatGatewayIp *string `pulumi:"natGatewayIp"`
	Project      *string `pulumi:"project"`
	// The VPN connection Cloud Router name.
	Router   *string                             `pulumi:"router"`
	Timeouts *EdgecontainerVpnConnectionTimeouts `pulumi:"timeouts"`
	// The network ID of VPC to connect to.
	Vpc *string `pulumi:"vpc"`
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	VpcProject *EdgecontainerVpnConnectionVpcProject `pulumi:"vpcProject"`
}

// The set of arguments for constructing a EdgecontainerVpnConnection resource.
type EdgecontainerVpnConnectionArgs struct {
	// The canonical Cluster name to connect to. It is in the form of
	// projects/{project}/locations/{location}/clusters/{cluster}.
	Cluster                      pulumi.StringInput
	EdgecontainerVpnConnectionId pulumi.StringPtrInput
	// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
	// use 2 ANG floating IPs.
	EnableHighAvailability pulumi.BoolPtrInput
	// Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Google Cloud Platform location.
	Location pulumi.StringInput
	// The resource name of VPN connection
	Name pulumi.StringPtrInput
	// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
	// only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
	NatGatewayIp pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
	// The VPN connection Cloud Router name.
	Router   pulumi.StringPtrInput
	Timeouts EdgecontainerVpnConnectionTimeoutsPtrInput
	// The network ID of VPC to connect to.
	Vpc pulumi.StringPtrInput
	// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
	VpcProject EdgecontainerVpnConnectionVpcProjectPtrInput
}

func (EdgecontainerVpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgecontainerVpnConnectionArgs)(nil)).Elem()
}

type EdgecontainerVpnConnectionInput interface {
	pulumi.Input

	ToEdgecontainerVpnConnectionOutput() EdgecontainerVpnConnectionOutput
	ToEdgecontainerVpnConnectionOutputWithContext(ctx context.Context) EdgecontainerVpnConnectionOutput
}

func (*EdgecontainerVpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgecontainerVpnConnection)(nil)).Elem()
}

func (i *EdgecontainerVpnConnection) ToEdgecontainerVpnConnectionOutput() EdgecontainerVpnConnectionOutput {
	return i.ToEdgecontainerVpnConnectionOutputWithContext(context.Background())
}

func (i *EdgecontainerVpnConnection) ToEdgecontainerVpnConnectionOutputWithContext(ctx context.Context) EdgecontainerVpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgecontainerVpnConnectionOutput)
}

type EdgecontainerVpnConnectionOutput struct{ *pulumi.OutputState }

func (EdgecontainerVpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgecontainerVpnConnection)(nil)).Elem()
}

func (o EdgecontainerVpnConnectionOutput) ToEdgecontainerVpnConnectionOutput() EdgecontainerVpnConnectionOutput {
	return o
}

func (o EdgecontainerVpnConnectionOutput) ToEdgecontainerVpnConnectionOutputWithContext(ctx context.Context) EdgecontainerVpnConnectionOutput {
	return o
}

// The canonical Cluster name to connect to. It is in the form of
// projects/{project}/locations/{location}/clusters/{cluster}.
func (o EdgecontainerVpnConnectionOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// The time when the VPN connection was created.
func (o EdgecontainerVpnConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A nested object resource.
func (o EdgecontainerVpnConnectionOutput) Details() EdgecontainerVpnConnectionDetailArrayOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) EdgecontainerVpnConnectionDetailArrayOutput { return v.Details }).(EdgecontainerVpnConnectionDetailArrayOutput)
}

func (o EdgecontainerVpnConnectionOutput) EdgecontainerVpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.EdgecontainerVpnConnectionId }).(pulumi.StringOutput)
}

func (o EdgecontainerVpnConnectionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
// use 2 ANG floating IPs.
func (o EdgecontainerVpnConnectionOutput) EnableHighAvailability() pulumi.BoolOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.BoolOutput { return v.EnableHighAvailability }).(pulumi.BoolOutput)
}

// Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o EdgecontainerVpnConnectionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Google Cloud Platform location.
func (o EdgecontainerVpnConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of VPN connection
func (o EdgecontainerVpnConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
// only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
func (o EdgecontainerVpnConnectionOutput) NatGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringPtrOutput { return v.NatGatewayIp }).(pulumi.StringPtrOutput)
}

func (o EdgecontainerVpnConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The VPN connection Cloud Router name.
func (o EdgecontainerVpnConnectionOutput) Router() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringPtrOutput { return v.Router }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o EdgecontainerVpnConnectionOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o EdgecontainerVpnConnectionOutput) Timeouts() EdgecontainerVpnConnectionTimeoutsPtrOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) EdgecontainerVpnConnectionTimeoutsPtrOutput { return v.Timeouts }).(EdgecontainerVpnConnectionTimeoutsPtrOutput)
}

// The time when the VPN connection was last updated.
func (o EdgecontainerVpnConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The network ID of VPC to connect to.
func (o EdgecontainerVpnConnectionOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) pulumi.StringPtrOutput { return v.Vpc }).(pulumi.StringPtrOutput)
}

// Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
func (o EdgecontainerVpnConnectionOutput) VpcProject() EdgecontainerVpnConnectionVpcProjectPtrOutput {
	return o.ApplyT(func(v *EdgecontainerVpnConnection) EdgecontainerVpnConnectionVpcProjectPtrOutput { return v.VpcProject }).(EdgecontainerVpnConnectionVpcProjectPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgecontainerVpnConnectionInput)(nil)).Elem(), &EdgecontainerVpnConnection{})
	pulumi.RegisterOutputType(EdgecontainerVpnConnectionOutput{})
}
