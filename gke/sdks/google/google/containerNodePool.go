// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerNodePool struct {
	pulumi.CustomResourceState

	// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
	Autoscaling ContainerNodePoolAutoscalingPtrOutput `pulumi:"autoscaling"`
	// The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
	Cluster             pulumi.StringOutput `pulumi:"cluster"`
	ContainerNodePoolId pulumi.StringOutput `pulumi:"containerNodePoolId"`
	// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
	// Changing this will force recreation of the resource.
	InitialNodeCount pulumi.Float64Output `pulumi:"initialNodeCount"`
	// The resource URLs of the managed instance groups associated with this node pool.
	InstanceGroupUrls pulumi.StringArrayOutput `pulumi:"instanceGroupUrls"`
	// The location (region or zone) of the cluster.
	Location pulumi.StringOutput `pulumi:"location"`
	// List of instance group URLs which have been assigned to this node pool.
	ManagedInstanceGroupUrls pulumi.StringArrayOutput `pulumi:"managedInstanceGroupUrls"`
	// Node management configuration, wherein auto-repair and auto-upgrade is configured.
	Management ContainerNodePoolManagementPtrOutput `pulumi:"management"`
	// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
	// "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
	MaxPodsPerNode pulumi.Float64Output `pulumi:"maxPodsPerNode"`
	Name           pulumi.StringOutput  `pulumi:"name"`
	// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig ContainerNodePoolNetworkConfigPtrOutput `pulumi:"networkConfig"`
	// The configuration of the nodepool
	NodeConfig ContainerNodePoolNodeConfigPtrOutput `pulumi:"nodeConfig"`
	// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
	// should not be used alongside autoscaling.
	NodeCount pulumi.Float64Output `pulumi:"nodeCount"`
	// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
	// cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
	// node_locations will be used.
	NodeLocations pulumi.StringArrayOutput `pulumi:"nodeLocations"`
	Operation     pulumi.StringOutput      `pulumi:"operation"`
	// Specifies the node placement policy
	PlacementPolicy ContainerNodePoolPlacementPolicyPtrOutput `pulumi:"placementPolicy"`
	// The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the configuration of queued provisioning
	QueuedProvisioning ContainerNodePoolQueuedProvisioningPtrOutput `pulumi:"queuedProvisioning"`
	Timeouts           ContainerNodePoolTimeoutsPtrOutput           `pulumi:"timeouts"`
	// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
	// simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
	// limited to 20.
	UpgradeSettings ContainerNodePoolUpgradeSettingsPtrOutput `pulumi:"upgradeSettings"`
	Version         pulumi.StringOutput                       `pulumi:"version"`
}

// NewContainerNodePool registers a new resource with the given unique name, arguments, and options.
func NewContainerNodePool(ctx *pulumi.Context,
	name string, args *ContainerNodePoolArgs, opts ...pulumi.ResourceOption) (*ContainerNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ContainerNodePool
	err = ctx.RegisterPackageResource("google:index/containerNodePool:ContainerNodePool", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerNodePool gets an existing ContainerNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerNodePoolState, opts ...pulumi.ResourceOption) (*ContainerNodePool, error) {
	var resource ContainerNodePool
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/containerNodePool:ContainerNodePool", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerNodePool resources.
type containerNodePoolState struct {
	// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
	Autoscaling *ContainerNodePoolAutoscaling `pulumi:"autoscaling"`
	// The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
	Cluster             *string `pulumi:"cluster"`
	ContainerNodePoolId *string `pulumi:"containerNodePoolId"`
	// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
	// Changing this will force recreation of the resource.
	InitialNodeCount *float64 `pulumi:"initialNodeCount"`
	// The resource URLs of the managed instance groups associated with this node pool.
	InstanceGroupUrls []string `pulumi:"instanceGroupUrls"`
	// The location (region or zone) of the cluster.
	Location *string `pulumi:"location"`
	// List of instance group URLs which have been assigned to this node pool.
	ManagedInstanceGroupUrls []string `pulumi:"managedInstanceGroupUrls"`
	// Node management configuration, wherein auto-repair and auto-upgrade is configured.
	Management *ContainerNodePoolManagement `pulumi:"management"`
	// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
	// "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
	MaxPodsPerNode *float64 `pulumi:"maxPodsPerNode"`
	Name           *string  `pulumi:"name"`
	// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
	NamePrefix *string `pulumi:"namePrefix"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig *ContainerNodePoolNetworkConfig `pulumi:"networkConfig"`
	// The configuration of the nodepool
	NodeConfig *ContainerNodePoolNodeConfig `pulumi:"nodeConfig"`
	// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
	// should not be used alongside autoscaling.
	NodeCount *float64 `pulumi:"nodeCount"`
	// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
	// cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
	// node_locations will be used.
	NodeLocations []string `pulumi:"nodeLocations"`
	Operation     *string  `pulumi:"operation"`
	// Specifies the node placement policy
	PlacementPolicy *ContainerNodePoolPlacementPolicy `pulumi:"placementPolicy"`
	// The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
	Project *string `pulumi:"project"`
	// Specifies the configuration of queued provisioning
	QueuedProvisioning *ContainerNodePoolQueuedProvisioning `pulumi:"queuedProvisioning"`
	Timeouts           *ContainerNodePoolTimeouts           `pulumi:"timeouts"`
	// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
	// simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
	// limited to 20.
	UpgradeSettings *ContainerNodePoolUpgradeSettings `pulumi:"upgradeSettings"`
	Version         *string                           `pulumi:"version"`
}

type ContainerNodePoolState struct {
	// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
	Autoscaling ContainerNodePoolAutoscalingPtrInput
	// The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
	Cluster             pulumi.StringPtrInput
	ContainerNodePoolId pulumi.StringPtrInput
	// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
	// Changing this will force recreation of the resource.
	InitialNodeCount pulumi.Float64PtrInput
	// The resource URLs of the managed instance groups associated with this node pool.
	InstanceGroupUrls pulumi.StringArrayInput
	// The location (region or zone) of the cluster.
	Location pulumi.StringPtrInput
	// List of instance group URLs which have been assigned to this node pool.
	ManagedInstanceGroupUrls pulumi.StringArrayInput
	// Node management configuration, wherein auto-repair and auto-upgrade is configured.
	Management ContainerNodePoolManagementPtrInput
	// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
	// "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
	MaxPodsPerNode pulumi.Float64PtrInput
	Name           pulumi.StringPtrInput
	// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
	NamePrefix pulumi.StringPtrInput
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig ContainerNodePoolNetworkConfigPtrInput
	// The configuration of the nodepool
	NodeConfig ContainerNodePoolNodeConfigPtrInput
	// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
	// should not be used alongside autoscaling.
	NodeCount pulumi.Float64PtrInput
	// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
	// cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
	// node_locations will be used.
	NodeLocations pulumi.StringArrayInput
	Operation     pulumi.StringPtrInput
	// Specifies the node placement policy
	PlacementPolicy ContainerNodePoolPlacementPolicyPtrInput
	// The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
	Project pulumi.StringPtrInput
	// Specifies the configuration of queued provisioning
	QueuedProvisioning ContainerNodePoolQueuedProvisioningPtrInput
	Timeouts           ContainerNodePoolTimeoutsPtrInput
	// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
	// simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
	// limited to 20.
	UpgradeSettings ContainerNodePoolUpgradeSettingsPtrInput
	Version         pulumi.StringPtrInput
}

func (ContainerNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerNodePoolState)(nil)).Elem()
}

type containerNodePoolArgs struct {
	// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
	Autoscaling *ContainerNodePoolAutoscaling `pulumi:"autoscaling"`
	// The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
	Cluster             string  `pulumi:"cluster"`
	ContainerNodePoolId *string `pulumi:"containerNodePoolId"`
	// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
	// Changing this will force recreation of the resource.
	InitialNodeCount *float64 `pulumi:"initialNodeCount"`
	// The location (region or zone) of the cluster.
	Location *string `pulumi:"location"`
	// Node management configuration, wherein auto-repair and auto-upgrade is configured.
	Management *ContainerNodePoolManagement `pulumi:"management"`
	// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
	// "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
	MaxPodsPerNode *float64 `pulumi:"maxPodsPerNode"`
	Name           *string  `pulumi:"name"`
	// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
	NamePrefix *string `pulumi:"namePrefix"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig *ContainerNodePoolNetworkConfig `pulumi:"networkConfig"`
	// The configuration of the nodepool
	NodeConfig *ContainerNodePoolNodeConfig `pulumi:"nodeConfig"`
	// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
	// should not be used alongside autoscaling.
	NodeCount *float64 `pulumi:"nodeCount"`
	// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
	// cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
	// node_locations will be used.
	NodeLocations []string `pulumi:"nodeLocations"`
	// Specifies the node placement policy
	PlacementPolicy *ContainerNodePoolPlacementPolicy `pulumi:"placementPolicy"`
	// The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
	Project *string `pulumi:"project"`
	// Specifies the configuration of queued provisioning
	QueuedProvisioning *ContainerNodePoolQueuedProvisioning `pulumi:"queuedProvisioning"`
	Timeouts           *ContainerNodePoolTimeouts           `pulumi:"timeouts"`
	// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
	// simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
	// limited to 20.
	UpgradeSettings *ContainerNodePoolUpgradeSettings `pulumi:"upgradeSettings"`
	Version         *string                           `pulumi:"version"`
}

// The set of arguments for constructing a ContainerNodePool resource.
type ContainerNodePoolArgs struct {
	// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
	Autoscaling ContainerNodePoolAutoscalingPtrInput
	// The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
	Cluster             pulumi.StringInput
	ContainerNodePoolId pulumi.StringPtrInput
	// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
	// Changing this will force recreation of the resource.
	InitialNodeCount pulumi.Float64PtrInput
	// The location (region or zone) of the cluster.
	Location pulumi.StringPtrInput
	// Node management configuration, wherein auto-repair and auto-upgrade is configured.
	Management ContainerNodePoolManagementPtrInput
	// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
	// "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
	MaxPodsPerNode pulumi.Float64PtrInput
	Name           pulumi.StringPtrInput
	// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
	NamePrefix pulumi.StringPtrInput
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig ContainerNodePoolNetworkConfigPtrInput
	// The configuration of the nodepool
	NodeConfig ContainerNodePoolNodeConfigPtrInput
	// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
	// should not be used alongside autoscaling.
	NodeCount pulumi.Float64PtrInput
	// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
	// cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
	// node_locations will be used.
	NodeLocations pulumi.StringArrayInput
	// Specifies the node placement policy
	PlacementPolicy ContainerNodePoolPlacementPolicyPtrInput
	// The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
	Project pulumi.StringPtrInput
	// Specifies the configuration of queued provisioning
	QueuedProvisioning ContainerNodePoolQueuedProvisioningPtrInput
	Timeouts           ContainerNodePoolTimeoutsPtrInput
	// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
	// simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
	// limited to 20.
	UpgradeSettings ContainerNodePoolUpgradeSettingsPtrInput
	Version         pulumi.StringPtrInput
}

func (ContainerNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerNodePoolArgs)(nil)).Elem()
}

type ContainerNodePoolInput interface {
	pulumi.Input

	ToContainerNodePoolOutput() ContainerNodePoolOutput
	ToContainerNodePoolOutputWithContext(ctx context.Context) ContainerNodePoolOutput
}

func (*ContainerNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerNodePool)(nil)).Elem()
}

func (i *ContainerNodePool) ToContainerNodePoolOutput() ContainerNodePoolOutput {
	return i.ToContainerNodePoolOutputWithContext(context.Background())
}

func (i *ContainerNodePool) ToContainerNodePoolOutputWithContext(ctx context.Context) ContainerNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNodePoolOutput)
}

type ContainerNodePoolOutput struct{ *pulumi.OutputState }

func (ContainerNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerNodePool)(nil)).Elem()
}

func (o ContainerNodePoolOutput) ToContainerNodePoolOutput() ContainerNodePoolOutput {
	return o
}

func (o ContainerNodePoolOutput) ToContainerNodePoolOutputWithContext(ctx context.Context) ContainerNodePoolOutput {
	return o
}

// Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
func (o ContainerNodePoolOutput) Autoscaling() ContainerNodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolAutoscalingPtrOutput { return v.Autoscaling }).(ContainerNodePoolAutoscalingPtrOutput)
}

// The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
func (o ContainerNodePoolOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

func (o ContainerNodePoolOutput) ContainerNodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.ContainerNodePoolId }).(pulumi.StringOutput)
}

// The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
// Changing this will force recreation of the resource.
func (o ContainerNodePoolOutput) InitialNodeCount() pulumi.Float64Output {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.Float64Output { return v.InitialNodeCount }).(pulumi.Float64Output)
}

// The resource URLs of the managed instance groups associated with this node pool.
func (o ContainerNodePoolOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringArrayOutput { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// The location (region or zone) of the cluster.
func (o ContainerNodePoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// List of instance group URLs which have been assigned to this node pool.
func (o ContainerNodePoolOutput) ManagedInstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringArrayOutput { return v.ManagedInstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// Node management configuration, wherein auto-repair and auto-upgrade is configured.
func (o ContainerNodePoolOutput) Management() ContainerNodePoolManagementPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolManagementPtrOutput { return v.Management }).(ContainerNodePoolManagementPtrOutput)
}

// The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
// "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
func (o ContainerNodePoolOutput) MaxPodsPerNode() pulumi.Float64Output {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.Float64Output { return v.MaxPodsPerNode }).(pulumi.Float64Output)
}

func (o ContainerNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
func (o ContainerNodePoolOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
func (o ContainerNodePoolOutput) NetworkConfig() ContainerNodePoolNetworkConfigPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolNetworkConfigPtrOutput { return v.NetworkConfig }).(ContainerNodePoolNetworkConfigPtrOutput)
}

// The configuration of the nodepool
func (o ContainerNodePoolOutput) NodeConfig() ContainerNodePoolNodeConfigPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolNodeConfigPtrOutput { return v.NodeConfig }).(ContainerNodePoolNodeConfigPtrOutput)
}

// The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
// should not be used alongside autoscaling.
func (o ContainerNodePoolOutput) NodeCount() pulumi.Float64Output {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.Float64Output { return v.NodeCount }).(pulumi.Float64Output)
}

// The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
// cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
// node_locations will be used.
func (o ContainerNodePoolOutput) NodeLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringArrayOutput { return v.NodeLocations }).(pulumi.StringArrayOutput)
}

func (o ContainerNodePoolOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.Operation }).(pulumi.StringOutput)
}

// Specifies the node placement policy
func (o ContainerNodePoolOutput) PlacementPolicy() ContainerNodePoolPlacementPolicyPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolPlacementPolicyPtrOutput { return v.PlacementPolicy }).(ContainerNodePoolPlacementPolicyPtrOutput)
}

// The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
func (o ContainerNodePoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the configuration of queued provisioning
func (o ContainerNodePoolOutput) QueuedProvisioning() ContainerNodePoolQueuedProvisioningPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolQueuedProvisioningPtrOutput { return v.QueuedProvisioning }).(ContainerNodePoolQueuedProvisioningPtrOutput)
}

func (o ContainerNodePoolOutput) Timeouts() ContainerNodePoolTimeoutsPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolTimeoutsPtrOutput { return v.Timeouts }).(ContainerNodePoolTimeoutsPtrOutput)
}

// Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
// simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
// limited to 20.
func (o ContainerNodePoolOutput) UpgradeSettings() ContainerNodePoolUpgradeSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerNodePool) ContainerNodePoolUpgradeSettingsPtrOutput { return v.UpgradeSettings }).(ContainerNodePoolUpgradeSettingsPtrOutput)
}

func (o ContainerNodePoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNodePool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNodePoolInput)(nil)).Elem(), &ContainerNodePool{})
	pulumi.RegisterOutputType(ContainerNodePoolOutput{})
}
