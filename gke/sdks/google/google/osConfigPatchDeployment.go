// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OsConfigPatchDeployment struct {
	pulumi.CustomResourceState

	// Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
	// digits, terminated by 's'. Example: "3.5s"
	Duration pulumi.StringPtrOutput `pulumi:"duration"`
	// VM instances to patch.
	InstanceFilter OsConfigPatchDeploymentInstanceFilterOutput `pulumi:"instanceFilter"`
	// The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format. A timestamp in RFC3339
	// UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	LastExecuteTime pulumi.StringOutput `pulumi:"lastExecuteTime"`
	// Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
	// projects/{project_id}/patchDeployments/{patchDeploymentId}.
	Name pulumi.StringOutput `pulumi:"name"`
	// Schedule a one-time execution.
	OneTimeSchedule           OsConfigPatchDeploymentOneTimeSchedulePtrOutput `pulumi:"oneTimeSchedule"`
	OsConfigPatchDeploymentId pulumi.StringOutput                             `pulumi:"osConfigPatchDeploymentId"`
	// Patch configuration that is applied.
	PatchConfig OsConfigPatchDeploymentPatchConfigPtrOutput `pulumi:"patchConfig"`
	// A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
	// lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
	// a number or a letter. * Must be unique within the project.
	PatchDeploymentId pulumi.StringOutput `pulumi:"patchDeploymentId"`
	Project           pulumi.StringOutput `pulumi:"project"`
	// Schedule recurring executions.
	RecurringSchedule OsConfigPatchDeploymentRecurringSchedulePtrOutput `pulumi:"recurringSchedule"`
	// Rollout strategy of the patch job.
	Rollout  OsConfigPatchDeploymentRolloutPtrOutput  `pulumi:"rollout"`
	Timeouts OsConfigPatchDeploymentTimeoutsPtrOutput `pulumi:"timeouts"`
	// Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
	// format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewOsConfigPatchDeployment registers a new resource with the given unique name, arguments, and options.
func NewOsConfigPatchDeployment(ctx *pulumi.Context,
	name string, args *OsConfigPatchDeploymentArgs, opts ...pulumi.ResourceOption) (*OsConfigPatchDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceFilter == nil {
		return nil, errors.New("invalid value for required argument 'InstanceFilter'")
	}
	if args.PatchDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'PatchDeploymentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource OsConfigPatchDeployment
	err = ctx.RegisterPackageResource("google:index/osConfigPatchDeployment:OsConfigPatchDeployment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOsConfigPatchDeployment gets an existing OsConfigPatchDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOsConfigPatchDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OsConfigPatchDeploymentState, opts ...pulumi.ResourceOption) (*OsConfigPatchDeployment, error) {
	var resource OsConfigPatchDeployment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/osConfigPatchDeployment:OsConfigPatchDeployment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OsConfigPatchDeployment resources.
type osConfigPatchDeploymentState struct {
	// Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
	// digits, terminated by 's'. Example: "3.5s"
	Duration *string `pulumi:"duration"`
	// VM instances to patch.
	InstanceFilter *OsConfigPatchDeploymentInstanceFilter `pulumi:"instanceFilter"`
	// The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format. A timestamp in RFC3339
	// UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	LastExecuteTime *string `pulumi:"lastExecuteTime"`
	// Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
	// projects/{project_id}/patchDeployments/{patchDeploymentId}.
	Name *string `pulumi:"name"`
	// Schedule a one-time execution.
	OneTimeSchedule           *OsConfigPatchDeploymentOneTimeSchedule `pulumi:"oneTimeSchedule"`
	OsConfigPatchDeploymentId *string                                 `pulumi:"osConfigPatchDeploymentId"`
	// Patch configuration that is applied.
	PatchConfig *OsConfigPatchDeploymentPatchConfig `pulumi:"patchConfig"`
	// A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
	// lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
	// a number or a letter. * Must be unique within the project.
	PatchDeploymentId *string `pulumi:"patchDeploymentId"`
	Project           *string `pulumi:"project"`
	// Schedule recurring executions.
	RecurringSchedule *OsConfigPatchDeploymentRecurringSchedule `pulumi:"recurringSchedule"`
	// Rollout strategy of the patch job.
	Rollout  *OsConfigPatchDeploymentRollout  `pulumi:"rollout"`
	Timeouts *OsConfigPatchDeploymentTimeouts `pulumi:"timeouts"`
	// Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
	// format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type OsConfigPatchDeploymentState struct {
	// Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
	// digits, terminated by 's'. Example: "3.5s"
	Duration pulumi.StringPtrInput
	// VM instances to patch.
	InstanceFilter OsConfigPatchDeploymentInstanceFilterPtrInput
	// The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format. A timestamp in RFC3339
	// UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	LastExecuteTime pulumi.StringPtrInput
	// Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
	// projects/{project_id}/patchDeployments/{patchDeploymentId}.
	Name pulumi.StringPtrInput
	// Schedule a one-time execution.
	OneTimeSchedule           OsConfigPatchDeploymentOneTimeSchedulePtrInput
	OsConfigPatchDeploymentId pulumi.StringPtrInput
	// Patch configuration that is applied.
	PatchConfig OsConfigPatchDeploymentPatchConfigPtrInput
	// A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
	// lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
	// a number or a letter. * Must be unique within the project.
	PatchDeploymentId pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	// Schedule recurring executions.
	RecurringSchedule OsConfigPatchDeploymentRecurringSchedulePtrInput
	// Rollout strategy of the patch job.
	Rollout  OsConfigPatchDeploymentRolloutPtrInput
	Timeouts OsConfigPatchDeploymentTimeoutsPtrInput
	// Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
	// format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (OsConfigPatchDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*osConfigPatchDeploymentState)(nil)).Elem()
}

type osConfigPatchDeploymentArgs struct {
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
	// digits, terminated by 's'. Example: "3.5s"
	Duration *string `pulumi:"duration"`
	// VM instances to patch.
	InstanceFilter OsConfigPatchDeploymentInstanceFilter `pulumi:"instanceFilter"`
	// Schedule a one-time execution.
	OneTimeSchedule           *OsConfigPatchDeploymentOneTimeSchedule `pulumi:"oneTimeSchedule"`
	OsConfigPatchDeploymentId *string                                 `pulumi:"osConfigPatchDeploymentId"`
	// Patch configuration that is applied.
	PatchConfig *OsConfigPatchDeploymentPatchConfig `pulumi:"patchConfig"`
	// A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
	// lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
	// a number or a letter. * Must be unique within the project.
	PatchDeploymentId string  `pulumi:"patchDeploymentId"`
	Project           *string `pulumi:"project"`
	// Schedule recurring executions.
	RecurringSchedule *OsConfigPatchDeploymentRecurringSchedule `pulumi:"recurringSchedule"`
	// Rollout strategy of the patch job.
	Rollout  *OsConfigPatchDeploymentRollout  `pulumi:"rollout"`
	Timeouts *OsConfigPatchDeploymentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a OsConfigPatchDeployment resource.
type OsConfigPatchDeploymentArgs struct {
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
	// digits, terminated by 's'. Example: "3.5s"
	Duration pulumi.StringPtrInput
	// VM instances to patch.
	InstanceFilter OsConfigPatchDeploymentInstanceFilterInput
	// Schedule a one-time execution.
	OneTimeSchedule           OsConfigPatchDeploymentOneTimeSchedulePtrInput
	OsConfigPatchDeploymentId pulumi.StringPtrInput
	// Patch configuration that is applied.
	PatchConfig OsConfigPatchDeploymentPatchConfigPtrInput
	// A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
	// lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
	// a number or a letter. * Must be unique within the project.
	PatchDeploymentId pulumi.StringInput
	Project           pulumi.StringPtrInput
	// Schedule recurring executions.
	RecurringSchedule OsConfigPatchDeploymentRecurringSchedulePtrInput
	// Rollout strategy of the patch job.
	Rollout  OsConfigPatchDeploymentRolloutPtrInput
	Timeouts OsConfigPatchDeploymentTimeoutsPtrInput
}

func (OsConfigPatchDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*osConfigPatchDeploymentArgs)(nil)).Elem()
}

type OsConfigPatchDeploymentInput interface {
	pulumi.Input

	ToOsConfigPatchDeploymentOutput() OsConfigPatchDeploymentOutput
	ToOsConfigPatchDeploymentOutputWithContext(ctx context.Context) OsConfigPatchDeploymentOutput
}

func (*OsConfigPatchDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**OsConfigPatchDeployment)(nil)).Elem()
}

func (i *OsConfigPatchDeployment) ToOsConfigPatchDeploymentOutput() OsConfigPatchDeploymentOutput {
	return i.ToOsConfigPatchDeploymentOutputWithContext(context.Background())
}

func (i *OsConfigPatchDeployment) ToOsConfigPatchDeploymentOutputWithContext(ctx context.Context) OsConfigPatchDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsConfigPatchDeploymentOutput)
}

type OsConfigPatchDeploymentOutput struct{ *pulumi.OutputState }

func (OsConfigPatchDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsConfigPatchDeployment)(nil)).Elem()
}

func (o OsConfigPatchDeploymentOutput) ToOsConfigPatchDeploymentOutput() OsConfigPatchDeploymentOutput {
	return o
}

func (o OsConfigPatchDeploymentOutput) ToOsConfigPatchDeploymentOutputWithContext(ctx context.Context) OsConfigPatchDeploymentOutput {
	return o
}

// Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
func (o OsConfigPatchDeploymentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the patch deployment. Length of the description is limited to 1024 characters.
func (o OsConfigPatchDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
// digits, terminated by 's'. Example: "3.5s"
func (o OsConfigPatchDeploymentOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

// VM instances to patch.
func (o OsConfigPatchDeploymentOutput) InstanceFilter() OsConfigPatchDeploymentInstanceFilterOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) OsConfigPatchDeploymentInstanceFilterOutput { return v.InstanceFilter }).(OsConfigPatchDeploymentInstanceFilterOutput)
}

// The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format. A timestamp in RFC3339
// UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
func (o OsConfigPatchDeploymentOutput) LastExecuteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.LastExecuteTime }).(pulumi.StringOutput)
}

// Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
// projects/{project_id}/patchDeployments/{patchDeploymentId}.
func (o OsConfigPatchDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Schedule a one-time execution.
func (o OsConfigPatchDeploymentOutput) OneTimeSchedule() OsConfigPatchDeploymentOneTimeSchedulePtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) OsConfigPatchDeploymentOneTimeSchedulePtrOutput {
		return v.OneTimeSchedule
	}).(OsConfigPatchDeploymentOneTimeSchedulePtrOutput)
}

func (o OsConfigPatchDeploymentOutput) OsConfigPatchDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.OsConfigPatchDeploymentId }).(pulumi.StringOutput)
}

// Patch configuration that is applied.
func (o OsConfigPatchDeploymentOutput) PatchConfig() OsConfigPatchDeploymentPatchConfigPtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) OsConfigPatchDeploymentPatchConfigPtrOutput { return v.PatchConfig }).(OsConfigPatchDeploymentPatchConfigPtrOutput)
}

// A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
// lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
// a number or a letter. * Must be unique within the project.
func (o OsConfigPatchDeploymentOutput) PatchDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.PatchDeploymentId }).(pulumi.StringOutput)
}

func (o OsConfigPatchDeploymentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Schedule recurring executions.
func (o OsConfigPatchDeploymentOutput) RecurringSchedule() OsConfigPatchDeploymentRecurringSchedulePtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) OsConfigPatchDeploymentRecurringSchedulePtrOutput {
		return v.RecurringSchedule
	}).(OsConfigPatchDeploymentRecurringSchedulePtrOutput)
}

// Rollout strategy of the patch job.
func (o OsConfigPatchDeploymentOutput) Rollout() OsConfigPatchDeploymentRolloutPtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) OsConfigPatchDeploymentRolloutPtrOutput { return v.Rollout }).(OsConfigPatchDeploymentRolloutPtrOutput)
}

func (o OsConfigPatchDeploymentOutput) Timeouts() OsConfigPatchDeploymentTimeoutsPtrOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) OsConfigPatchDeploymentTimeoutsPtrOutput { return v.Timeouts }).(OsConfigPatchDeploymentTimeoutsPtrOutput)
}

// Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
// format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
func (o OsConfigPatchDeploymentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigPatchDeployment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OsConfigPatchDeploymentInput)(nil)).Elem(), &OsConfigPatchDeployment{})
	pulumi.RegisterOutputType(OsConfigPatchDeploymentOutput{})
}
