// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KmsKeyRing struct {
	pulumi.CustomResourceState

	KmsKeyRingId pulumi.StringOutput `pulumi:"kmsKeyRingId"`
	// The location for the KeyRing. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the KeyRing.
	Name     pulumi.StringOutput         `pulumi:"name"`
	Project  pulumi.StringOutput         `pulumi:"project"`
	Timeouts KmsKeyRingTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewKmsKeyRing registers a new resource with the given unique name, arguments, and options.
func NewKmsKeyRing(ctx *pulumi.Context,
	name string, args *KmsKeyRingArgs, opts ...pulumi.ResourceOption) (*KmsKeyRing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource KmsKeyRing
	err = ctx.RegisterPackageResource("google:index/kmsKeyRing:KmsKeyRing", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsKeyRing gets an existing KmsKeyRing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsKeyRing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsKeyRingState, opts ...pulumi.ResourceOption) (*KmsKeyRing, error) {
	var resource KmsKeyRing
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/kmsKeyRing:KmsKeyRing", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsKeyRing resources.
type kmsKeyRingState struct {
	KmsKeyRingId *string `pulumi:"kmsKeyRingId"`
	// The location for the KeyRing. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location *string `pulumi:"location"`
	// The resource name for the KeyRing.
	Name     *string             `pulumi:"name"`
	Project  *string             `pulumi:"project"`
	Timeouts *KmsKeyRingTimeouts `pulumi:"timeouts"`
}

type KmsKeyRingState struct {
	KmsKeyRingId pulumi.StringPtrInput
	// The location for the KeyRing. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location pulumi.StringPtrInput
	// The resource name for the KeyRing.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts KmsKeyRingTimeoutsPtrInput
}

func (KmsKeyRingState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyRingState)(nil)).Elem()
}

type kmsKeyRingArgs struct {
	KmsKeyRingId *string `pulumi:"kmsKeyRingId"`
	// The location for the KeyRing. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location string `pulumi:"location"`
	// The resource name for the KeyRing.
	Name     *string             `pulumi:"name"`
	Project  *string             `pulumi:"project"`
	Timeouts *KmsKeyRingTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a KmsKeyRing resource.
type KmsKeyRingArgs struct {
	KmsKeyRingId pulumi.StringPtrInput
	// The location for the KeyRing. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location pulumi.StringInput
	// The resource name for the KeyRing.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts KmsKeyRingTimeoutsPtrInput
}

func (KmsKeyRingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyRingArgs)(nil)).Elem()
}

type KmsKeyRingInput interface {
	pulumi.Input

	ToKmsKeyRingOutput() KmsKeyRingOutput
	ToKmsKeyRingOutputWithContext(ctx context.Context) KmsKeyRingOutput
}

func (*KmsKeyRing) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKeyRing)(nil)).Elem()
}

func (i *KmsKeyRing) ToKmsKeyRingOutput() KmsKeyRingOutput {
	return i.ToKmsKeyRingOutputWithContext(context.Background())
}

func (i *KmsKeyRing) ToKmsKeyRingOutputWithContext(ctx context.Context) KmsKeyRingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyRingOutput)
}

type KmsKeyRingOutput struct{ *pulumi.OutputState }

func (KmsKeyRingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKeyRing)(nil)).Elem()
}

func (o KmsKeyRingOutput) ToKmsKeyRingOutput() KmsKeyRingOutput {
	return o
}

func (o KmsKeyRingOutput) ToKmsKeyRingOutputWithContext(ctx context.Context) KmsKeyRingOutput {
	return o
}

func (o KmsKeyRingOutput) KmsKeyRingId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyRing) pulumi.StringOutput { return v.KmsKeyRingId }).(pulumi.StringOutput)
}

// The location for the KeyRing. A full list of valid locations can be found by running 'gcloud kms locations list'.
func (o KmsKeyRingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyRing) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the KeyRing.
func (o KmsKeyRingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyRing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KmsKeyRingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyRing) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o KmsKeyRingOutput) Timeouts() KmsKeyRingTimeoutsPtrOutput {
	return o.ApplyT(func(v *KmsKeyRing) KmsKeyRingTimeoutsPtrOutput { return v.Timeouts }).(KmsKeyRingTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmsKeyRingInput)(nil)).Elem(), &KmsKeyRing{})
	pulumi.RegisterOutputType(KmsKeyRingOutput{})
}
