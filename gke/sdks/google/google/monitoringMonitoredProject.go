// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MonitoringMonitoredProject struct {
	pulumi.CustomResourceState

	// Output only. The time when this 'MonitoredProject' was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
	// locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope                 pulumi.StringOutput `pulumi:"metricsScope"`
	MonitoringMonitoredProjectId pulumi.StringOutput `pulumi:"monitoringMonitoredProjectId"`
	// Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
	// monitored project ID. On output, it contains the equivalent project numbers. Example:
	// 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
	Name     pulumi.StringOutput                         `pulumi:"name"`
	Timeouts MonitoringMonitoredProjectTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewMonitoringMonitoredProject registers a new resource with the given unique name, arguments, and options.
func NewMonitoringMonitoredProject(ctx *pulumi.Context,
	name string, args *MonitoringMonitoredProjectArgs, opts ...pulumi.ResourceOption) (*MonitoringMonitoredProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricsScope == nil {
		return nil, errors.New("invalid value for required argument 'MetricsScope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MonitoringMonitoredProject
	err = ctx.RegisterPackageResource("google:index/monitoringMonitoredProject:MonitoringMonitoredProject", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringMonitoredProject gets an existing MonitoringMonitoredProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringMonitoredProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringMonitoredProjectState, opts ...pulumi.ResourceOption) (*MonitoringMonitoredProject, error) {
	var resource MonitoringMonitoredProject
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/monitoringMonitoredProject:MonitoringMonitoredProject", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringMonitoredProject resources.
type monitoringMonitoredProjectState struct {
	// Output only. The time when this 'MonitoredProject' was created.
	CreateTime *string `pulumi:"createTime"`
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
	// locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope                 *string `pulumi:"metricsScope"`
	MonitoringMonitoredProjectId *string `pulumi:"monitoringMonitoredProjectId"`
	// Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
	// monitored project ID. On output, it contains the equivalent project numbers. Example:
	// 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
	Name     *string                             `pulumi:"name"`
	Timeouts *MonitoringMonitoredProjectTimeouts `pulumi:"timeouts"`
}

type MonitoringMonitoredProjectState struct {
	// Output only. The time when this 'MonitoredProject' was created.
	CreateTime pulumi.StringPtrInput
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
	// locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope                 pulumi.StringPtrInput
	MonitoringMonitoredProjectId pulumi.StringPtrInput
	// Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
	// monitored project ID. On output, it contains the equivalent project numbers. Example:
	// 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
	Name     pulumi.StringPtrInput
	Timeouts MonitoringMonitoredProjectTimeoutsPtrInput
}

func (MonitoringMonitoredProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringMonitoredProjectState)(nil)).Elem()
}

type monitoringMonitoredProjectArgs struct {
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
	// locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope                 string  `pulumi:"metricsScope"`
	MonitoringMonitoredProjectId *string `pulumi:"monitoringMonitoredProjectId"`
	// Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
	// monitored project ID. On output, it contains the equivalent project numbers. Example:
	// 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
	Name     *string                             `pulumi:"name"`
	Timeouts *MonitoringMonitoredProjectTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a MonitoringMonitoredProject resource.
type MonitoringMonitoredProjectArgs struct {
	// Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
	// locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
	MetricsScope                 pulumi.StringInput
	MonitoringMonitoredProjectId pulumi.StringPtrInput
	// Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
	// monitored project ID. On output, it contains the equivalent project numbers. Example:
	// 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
	Name     pulumi.StringPtrInput
	Timeouts MonitoringMonitoredProjectTimeoutsPtrInput
}

func (MonitoringMonitoredProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringMonitoredProjectArgs)(nil)).Elem()
}

type MonitoringMonitoredProjectInput interface {
	pulumi.Input

	ToMonitoringMonitoredProjectOutput() MonitoringMonitoredProjectOutput
	ToMonitoringMonitoredProjectOutputWithContext(ctx context.Context) MonitoringMonitoredProjectOutput
}

func (*MonitoringMonitoredProject) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringMonitoredProject)(nil)).Elem()
}

func (i *MonitoringMonitoredProject) ToMonitoringMonitoredProjectOutput() MonitoringMonitoredProjectOutput {
	return i.ToMonitoringMonitoredProjectOutputWithContext(context.Background())
}

func (i *MonitoringMonitoredProject) ToMonitoringMonitoredProjectOutputWithContext(ctx context.Context) MonitoringMonitoredProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringMonitoredProjectOutput)
}

type MonitoringMonitoredProjectOutput struct{ *pulumi.OutputState }

func (MonitoringMonitoredProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringMonitoredProject)(nil)).Elem()
}

func (o MonitoringMonitoredProjectOutput) ToMonitoringMonitoredProjectOutput() MonitoringMonitoredProjectOutput {
	return o
}

func (o MonitoringMonitoredProjectOutput) ToMonitoringMonitoredProjectOutputWithContext(ctx context.Context) MonitoringMonitoredProjectOutput {
	return o
}

// Output only. The time when this 'MonitoredProject' was created.
func (o MonitoringMonitoredProjectOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringMonitoredProject) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
// locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
func (o MonitoringMonitoredProjectOutput) MetricsScope() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringMonitoredProject) pulumi.StringOutput { return v.MetricsScope }).(pulumi.StringOutput)
}

func (o MonitoringMonitoredProjectOutput) MonitoringMonitoredProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringMonitoredProject) pulumi.StringOutput { return v.MonitoringMonitoredProjectId }).(pulumi.StringOutput)
}

// Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
// monitored project ID. On output, it contains the equivalent project numbers. Example:
// 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
func (o MonitoringMonitoredProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringMonitoredProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MonitoringMonitoredProjectOutput) Timeouts() MonitoringMonitoredProjectTimeoutsPtrOutput {
	return o.ApplyT(func(v *MonitoringMonitoredProject) MonitoringMonitoredProjectTimeoutsPtrOutput { return v.Timeouts }).(MonitoringMonitoredProjectTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringMonitoredProjectInput)(nil)).Elem(), &MonitoringMonitoredProject{})
	pulumi.RegisterOutputType(MonitoringMonitoredProjectOutput{})
}
