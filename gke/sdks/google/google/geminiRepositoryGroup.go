// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeminiRepositoryGroup struct {
	pulumi.CustomResourceState

	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex pulumi.StringOutput `pulumi:"codeRepositoryIndex"`
	// Output only. Create time stamp.
	CreateTime              pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveLabels         pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	GeminiRepositoryGroupId pulumi.StringOutput    `pulumi:"geminiRepositoryGroupId"`
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the Code Repository Index, for example 'us-central1'.
	Location pulumi.StringOutput `pulumi:"location"`
	// Immutable. Identifier. Name of Repository Group.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. List of repositories to group.
	Repositories GeminiRepositoryGroupRepositoryArrayOutput `pulumi:"repositories"`
	// Required. Id of the Repository Group.
	RepositoryGroupId pulumi.StringOutput `pulumi:"repositoryGroupId"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                 `pulumi:"terraformLabels"`
	Timeouts        GeminiRepositoryGroupTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGeminiRepositoryGroup registers a new resource with the given unique name, arguments, and options.
func NewGeminiRepositoryGroup(ctx *pulumi.Context,
	name string, args *GeminiRepositoryGroupArgs, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndex == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndex'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Repositories == nil {
		return nil, errors.New("invalid value for required argument 'Repositories'")
	}
	if args.RepositoryGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GeminiRepositoryGroup
	err = ctx.RegisterPackageResource("google:index/geminiRepositoryGroup:GeminiRepositoryGroup", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeminiRepositoryGroup gets an existing GeminiRepositoryGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeminiRepositoryGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeminiRepositoryGroupState, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroup, error) {
	var resource GeminiRepositoryGroup
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/geminiRepositoryGroup:GeminiRepositoryGroup", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeminiRepositoryGroup resources.
type geminiRepositoryGroupState struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex *string `pulumi:"codeRepositoryIndex"`
	// Output only. Create time stamp.
	CreateTime              *string           `pulumi:"createTime"`
	EffectiveLabels         map[string]string `pulumi:"effectiveLabels"`
	GeminiRepositoryGroupId *string           `pulumi:"geminiRepositoryGroupId"`
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Code Repository Index, for example 'us-central1'.
	Location *string `pulumi:"location"`
	// Immutable. Identifier. Name of Repository Group.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Required. List of repositories to group.
	Repositories []GeminiRepositoryGroupRepository `pulumi:"repositories"`
	// Required. Id of the Repository Group.
	RepositoryGroupId *string `pulumi:"repositoryGroupId"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string              `pulumi:"terraformLabels"`
	Timeouts        *GeminiRepositoryGroupTimeouts `pulumi:"timeouts"`
	// Output only. Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type GeminiRepositoryGroupState struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex pulumi.StringPtrInput
	// Output only. Create time stamp.
	CreateTime              pulumi.StringPtrInput
	EffectiveLabels         pulumi.StringMapInput
	GeminiRepositoryGroupId pulumi.StringPtrInput
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Code Repository Index, for example 'us-central1'.
	Location pulumi.StringPtrInput
	// Immutable. Identifier. Name of Repository Group.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Required. List of repositories to group.
	Repositories GeminiRepositoryGroupRepositoryArrayInput
	// Required. Id of the Repository Group.
	RepositoryGroupId pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        GeminiRepositoryGroupTimeoutsPtrInput
	// Output only. Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (GeminiRepositoryGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupState)(nil)).Elem()
}

type geminiRepositoryGroupArgs struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex     string  `pulumi:"codeRepositoryIndex"`
	GeminiRepositoryGroupId *string `pulumi:"geminiRepositoryGroupId"`
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Code Repository Index, for example 'us-central1'.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Required. List of repositories to group.
	Repositories []GeminiRepositoryGroupRepository `pulumi:"repositories"`
	// Required. Id of the Repository Group.
	RepositoryGroupId string                         `pulumi:"repositoryGroupId"`
	Timeouts          *GeminiRepositoryGroupTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a GeminiRepositoryGroup resource.
type GeminiRepositoryGroupArgs struct {
	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex     pulumi.StringInput
	GeminiRepositoryGroupId pulumi.StringPtrInput
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Code Repository Index, for example 'us-central1'.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// Required. List of repositories to group.
	Repositories GeminiRepositoryGroupRepositoryArrayInput
	// Required. Id of the Repository Group.
	RepositoryGroupId pulumi.StringInput
	Timeouts          GeminiRepositoryGroupTimeoutsPtrInput
}

func (GeminiRepositoryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupArgs)(nil)).Elem()
}

type GeminiRepositoryGroupInput interface {
	pulumi.Input

	ToGeminiRepositoryGroupOutput() GeminiRepositoryGroupOutput
	ToGeminiRepositoryGroupOutputWithContext(ctx context.Context) GeminiRepositoryGroupOutput
}

func (*GeminiRepositoryGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroup)(nil)).Elem()
}

func (i *GeminiRepositoryGroup) ToGeminiRepositoryGroupOutput() GeminiRepositoryGroupOutput {
	return i.ToGeminiRepositoryGroupOutputWithContext(context.Background())
}

func (i *GeminiRepositoryGroup) ToGeminiRepositoryGroupOutputWithContext(ctx context.Context) GeminiRepositoryGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiRepositoryGroupOutput)
}

type GeminiRepositoryGroupOutput struct{ *pulumi.OutputState }

func (GeminiRepositoryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroup)(nil)).Elem()
}

func (o GeminiRepositoryGroupOutput) ToGeminiRepositoryGroupOutput() GeminiRepositoryGroupOutput {
	return o
}

func (o GeminiRepositoryGroupOutput) ToGeminiRepositoryGroupOutputWithContext(ctx context.Context) GeminiRepositoryGroupOutput {
	return o
}

// Required. Id of the Code Repository Index.
func (o GeminiRepositoryGroupOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

// Output only. Create time stamp.
func (o GeminiRepositoryGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o GeminiRepositoryGroupOutput) GeminiRepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.GeminiRepositoryGroupId }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o GeminiRepositoryGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the Code Repository Index, for example 'us-central1'.
func (o GeminiRepositoryGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. Identifier. Name of Repository Group.
func (o GeminiRepositoryGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. List of repositories to group.
func (o GeminiRepositoryGroupOutput) Repositories() GeminiRepositoryGroupRepositoryArrayOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) GeminiRepositoryGroupRepositoryArrayOutput { return v.Repositories }).(GeminiRepositoryGroupRepositoryArrayOutput)
}

// Required. Id of the Repository Group.
func (o GeminiRepositoryGroupOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o GeminiRepositoryGroupOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o GeminiRepositoryGroupOutput) Timeouts() GeminiRepositoryGroupTimeoutsPtrOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) GeminiRepositoryGroupTimeoutsPtrOutput { return v.Timeouts }).(GeminiRepositoryGroupTimeoutsPtrOutput)
}

// Output only. Update time stamp.
func (o GeminiRepositoryGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiRepositoryGroupInput)(nil)).Elem(), &GeminiRepositoryGroup{})
	pulumi.RegisterOutputType(GeminiRepositoryGroupOutput{})
}
