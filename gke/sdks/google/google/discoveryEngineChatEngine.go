// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DiscoveryEngineChatEngine struct {
	pulumi.CustomResourceState

	// Configurations for a chat Engine.
	ChatEngineConfig DiscoveryEngineChatEngineChatEngineConfigOutput `pulumi:"chatEngineConfig"`
	// Additional information of the Chat Engine.
	ChatEngineMetadatas DiscoveryEngineChatEngineChatEngineMetadataArrayOutput `pulumi:"chatEngineMetadatas"`
	// The collection ID.
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig DiscoveryEngineChatEngineCommonConfigPtrOutput `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All
	// listed DataStores must be 'SOLUTION_TYPE_CHAT'.
	DataStoreIds                pulumi.StringArrayOutput `pulumi:"dataStoreIds"`
	DiscoveryEngineChatEngineId pulumi.StringOutput      `pulumi:"discoveryEngineChatEngineId"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The ID to use for chat engine.
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical pulumi.StringPtrOutput `pulumi:"industryVertical"`
	// Location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the chat engine. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
	// encoded string with a length limit of 1024 characters.
	Name     pulumi.StringOutput                        `pulumi:"name"`
	Project  pulumi.StringOutput                        `pulumi:"project"`
	Timeouts DiscoveryEngineChatEngineTimeoutsPtrOutput `pulumi:"timeouts"`
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDiscoveryEngineChatEngine registers a new resource with the given unique name, arguments, and options.
func NewDiscoveryEngineChatEngine(ctx *pulumi.Context,
	name string, args *DiscoveryEngineChatEngineArgs, opts ...pulumi.ResourceOption) (*DiscoveryEngineChatEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChatEngineConfig == nil {
		return nil, errors.New("invalid value for required argument 'ChatEngineConfig'")
	}
	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreIds == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreIds'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DiscoveryEngineChatEngine
	err = ctx.RegisterPackageResource("google:index/discoveryEngineChatEngine:DiscoveryEngineChatEngine", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiscoveryEngineChatEngine gets an existing DiscoveryEngineChatEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiscoveryEngineChatEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiscoveryEngineChatEngineState, opts ...pulumi.ResourceOption) (*DiscoveryEngineChatEngine, error) {
	var resource DiscoveryEngineChatEngine
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/discoveryEngineChatEngine:DiscoveryEngineChatEngine", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiscoveryEngineChatEngine resources.
type discoveryEngineChatEngineState struct {
	// Configurations for a chat Engine.
	ChatEngineConfig *DiscoveryEngineChatEngineChatEngineConfig `pulumi:"chatEngineConfig"`
	// Additional information of the Chat Engine.
	ChatEngineMetadatas []DiscoveryEngineChatEngineChatEngineMetadata `pulumi:"chatEngineMetadatas"`
	// The collection ID.
	CollectionId *string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *DiscoveryEngineChatEngineCommonConfig `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime *string `pulumi:"createTime"`
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All
	// listed DataStores must be 'SOLUTION_TYPE_CHAT'.
	DataStoreIds                []string `pulumi:"dataStoreIds"`
	DiscoveryEngineChatEngineId *string  `pulumi:"discoveryEngineChatEngineId"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `pulumi:"displayName"`
	// The ID to use for chat engine.
	EngineId *string `pulumi:"engineId"`
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location *string `pulumi:"location"`
	// The unique full resource name of the chat engine. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
	// encoded string with a length limit of 1024 characters.
	Name     *string                            `pulumi:"name"`
	Project  *string                            `pulumi:"project"`
	Timeouts *DiscoveryEngineChatEngineTimeouts `pulumi:"timeouts"`
	// Timestamp the Engine was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DiscoveryEngineChatEngineState struct {
	// Configurations for a chat Engine.
	ChatEngineConfig DiscoveryEngineChatEngineChatEngineConfigPtrInput
	// Additional information of the Chat Engine.
	ChatEngineMetadatas DiscoveryEngineChatEngineChatEngineMetadataArrayInput
	// The collection ID.
	CollectionId pulumi.StringPtrInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig DiscoveryEngineChatEngineCommonConfigPtrInput
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringPtrInput
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All
	// listed DataStores must be 'SOLUTION_TYPE_CHAT'.
	DataStoreIds                pulumi.StringArrayInput
	DiscoveryEngineChatEngineId pulumi.StringPtrInput
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringPtrInput
	// The ID to use for chat engine.
	EngineId pulumi.StringPtrInput
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringPtrInput
	// The unique full resource name of the chat engine. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
	// encoded string with a length limit of 1024 characters.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts DiscoveryEngineChatEngineTimeoutsPtrInput
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (DiscoveryEngineChatEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryEngineChatEngineState)(nil)).Elem()
}

type discoveryEngineChatEngineArgs struct {
	// Configurations for a chat Engine.
	ChatEngineConfig DiscoveryEngineChatEngineChatEngineConfig `pulumi:"chatEngineConfig"`
	// The collection ID.
	CollectionId string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *DiscoveryEngineChatEngineCommonConfig `pulumi:"commonConfig"`
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All
	// listed DataStores must be 'SOLUTION_TYPE_CHAT'.
	DataStoreIds                []string `pulumi:"dataStoreIds"`
	DiscoveryEngineChatEngineId *string  `pulumi:"discoveryEngineChatEngineId"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName string `pulumi:"displayName"`
	// The ID to use for chat engine.
	EngineId string `pulumi:"engineId"`
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location string                             `pulumi:"location"`
	Project  *string                            `pulumi:"project"`
	Timeouts *DiscoveryEngineChatEngineTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DiscoveryEngineChatEngine resource.
type DiscoveryEngineChatEngineArgs struct {
	// Configurations for a chat Engine.
	ChatEngineConfig DiscoveryEngineChatEngineChatEngineConfigInput
	// The collection ID.
	CollectionId pulumi.StringInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig DiscoveryEngineChatEngineCommonConfigPtrInput
	// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All
	// listed DataStores must be 'SOLUTION_TYPE_CHAT'.
	DataStoreIds                pulumi.StringArrayInput
	DiscoveryEngineChatEngineId pulumi.StringPtrInput
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringInput
	// The ID to use for chat engine.
	EngineId pulumi.StringInput
	// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
	// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	Timeouts DiscoveryEngineChatEngineTimeoutsPtrInput
}

func (DiscoveryEngineChatEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryEngineChatEngineArgs)(nil)).Elem()
}

type DiscoveryEngineChatEngineInput interface {
	pulumi.Input

	ToDiscoveryEngineChatEngineOutput() DiscoveryEngineChatEngineOutput
	ToDiscoveryEngineChatEngineOutputWithContext(ctx context.Context) DiscoveryEngineChatEngineOutput
}

func (*DiscoveryEngineChatEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryEngineChatEngine)(nil)).Elem()
}

func (i *DiscoveryEngineChatEngine) ToDiscoveryEngineChatEngineOutput() DiscoveryEngineChatEngineOutput {
	return i.ToDiscoveryEngineChatEngineOutputWithContext(context.Background())
}

func (i *DiscoveryEngineChatEngine) ToDiscoveryEngineChatEngineOutputWithContext(ctx context.Context) DiscoveryEngineChatEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryEngineChatEngineOutput)
}

type DiscoveryEngineChatEngineOutput struct{ *pulumi.OutputState }

func (DiscoveryEngineChatEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryEngineChatEngine)(nil)).Elem()
}

func (o DiscoveryEngineChatEngineOutput) ToDiscoveryEngineChatEngineOutput() DiscoveryEngineChatEngineOutput {
	return o
}

func (o DiscoveryEngineChatEngineOutput) ToDiscoveryEngineChatEngineOutputWithContext(ctx context.Context) DiscoveryEngineChatEngineOutput {
	return o
}

// Configurations for a chat Engine.
func (o DiscoveryEngineChatEngineOutput) ChatEngineConfig() DiscoveryEngineChatEngineChatEngineConfigOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) DiscoveryEngineChatEngineChatEngineConfigOutput {
		return v.ChatEngineConfig
	}).(DiscoveryEngineChatEngineChatEngineConfigOutput)
}

// Additional information of the Chat Engine.
func (o DiscoveryEngineChatEngineOutput) ChatEngineMetadatas() DiscoveryEngineChatEngineChatEngineMetadataArrayOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) DiscoveryEngineChatEngineChatEngineMetadataArrayOutput {
		return v.ChatEngineMetadatas
	}).(DiscoveryEngineChatEngineChatEngineMetadataArrayOutput)
}

// The collection ID.
func (o DiscoveryEngineChatEngineOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// Common config spec that specifies the metadata of the engine.
func (o DiscoveryEngineChatEngineOutput) CommonConfig() DiscoveryEngineChatEngineCommonConfigPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) DiscoveryEngineChatEngineCommonConfigPtrOutput {
		return v.CommonConfig
	}).(DiscoveryEngineChatEngineCommonConfigPtrOutput)
}

// Timestamp the Engine was created at.
func (o DiscoveryEngineChatEngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All
// listed DataStores must be 'SOLUTION_TYPE_CHAT'.
func (o DiscoveryEngineChatEngineOutput) DataStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringArrayOutput { return v.DataStoreIds }).(pulumi.StringArrayOutput)
}

func (o DiscoveryEngineChatEngineOutput) DiscoveryEngineChatEngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.DiscoveryEngineChatEngineId }).(pulumi.StringOutput)
}

// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
func (o DiscoveryEngineChatEngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID to use for chat engine.
func (o DiscoveryEngineChatEngineOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked
// to the engine. Default value: "GENERIC" Possible values: ["GENERIC"]
func (o DiscoveryEngineChatEngineOutput) IndustryVertical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringPtrOutput { return v.IndustryVertical }).(pulumi.StringPtrOutput)
}

// Location.
func (o DiscoveryEngineChatEngineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the chat engine. Values are of the format
// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
// encoded string with a length limit of 1024 characters.
func (o DiscoveryEngineChatEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DiscoveryEngineChatEngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DiscoveryEngineChatEngineOutput) Timeouts() DiscoveryEngineChatEngineTimeoutsPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) DiscoveryEngineChatEngineTimeoutsPtrOutput { return v.Timeouts }).(DiscoveryEngineChatEngineTimeoutsPtrOutput)
}

// Timestamp the Engine was last updated.
func (o DiscoveryEngineChatEngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineChatEngine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryEngineChatEngineInput)(nil)).Elem(), &DiscoveryEngineChatEngine{})
	pulumi.RegisterOutputType(DiscoveryEngineChatEngineOutput{})
}
