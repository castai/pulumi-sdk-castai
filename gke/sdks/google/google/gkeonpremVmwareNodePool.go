// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeonpremVmwareNodePool struct {
	pulumi.CustomResourceState

	// Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
	// and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
	// slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
	// dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The node configuration of the node pool.
	Config GkeonpremVmwareNodePoolConfigOutput `pulumi:"config"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The time the cluster was deleted, in RFC3339 text format.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The display name for the node pool.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag                      pulumi.StringOutput `pulumi:"etag"`
	GkeonpremVmwareNodePoolId pulumi.StringOutput `pulumi:"gkeonpremVmwareNodePoolId"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The vmware node pool name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Node Pool autoscaling config for the node pool.
	NodePoolAutoscaling GkeonpremVmwareNodePoolNodePoolAutoscalingPtrOutput `pulumi:"nodePoolAutoscaling"`
	// Anthos version for the node pool. Defaults to the user cluster version.
	OnPremVersion pulumi.StringOutput `pulumi:"onPremVersion"`
	Project       pulumi.StringOutput `pulumi:"project"`
	// If set, there are currently changes in flight to the node pool.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The current state of this cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Statuses GkeonpremVmwareNodePoolStatusArrayOutput `pulumi:"statuses"`
	Timeouts GkeonpremVmwareNodePoolTimeoutsPtrOutput `pulumi:"timeouts"`
	// The unique identifier of the node pool.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The cluster this node pool belongs to.
	VmwareCluster pulumi.StringOutput `pulumi:"vmwareCluster"`
}

// NewGkeonpremVmwareNodePool registers a new resource with the given unique name, arguments, and options.
func NewGkeonpremVmwareNodePool(ctx *pulumi.Context,
	name string, args *GkeonpremVmwareNodePoolArgs, opts ...pulumi.ResourceOption) (*GkeonpremVmwareNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.VmwareCluster == nil {
		return nil, errors.New("invalid value for required argument 'VmwareCluster'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeonpremVmwareNodePool
	err = ctx.RegisterPackageResource("google:index/gkeonpremVmwareNodePool:GkeonpremVmwareNodePool", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeonpremVmwareNodePool gets an existing GkeonpremVmwareNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeonpremVmwareNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeonpremVmwareNodePoolState, opts ...pulumi.ResourceOption) (*GkeonpremVmwareNodePool, error) {
	var resource GkeonpremVmwareNodePool
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/gkeonpremVmwareNodePool:GkeonpremVmwareNodePool", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeonpremVmwareNodePool resources.
type gkeonpremVmwareNodePoolState struct {
	// Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
	// and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
	// slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
	// dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The node configuration of the node pool.
	Config *GkeonpremVmwareNodePoolConfig `pulumi:"config"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// The time the cluster was deleted, in RFC3339 text format.
	DeleteTime *string `pulumi:"deleteTime"`
	// The display name for the node pool.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag                      *string `pulumi:"etag"`
	GkeonpremVmwareNodePoolId *string `pulumi:"gkeonpremVmwareNodePoolId"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The vmware node pool name.
	Name *string `pulumi:"name"`
	// Node Pool autoscaling config for the node pool.
	NodePoolAutoscaling *GkeonpremVmwareNodePoolNodePoolAutoscaling `pulumi:"nodePoolAutoscaling"`
	// Anthos version for the node pool. Defaults to the user cluster version.
	OnPremVersion *string `pulumi:"onPremVersion"`
	Project       *string `pulumi:"project"`
	// If set, there are currently changes in flight to the node pool.
	Reconciling *bool `pulumi:"reconciling"`
	// The current state of this cluster.
	State *string `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Statuses []GkeonpremVmwareNodePoolStatus  `pulumi:"statuses"`
	Timeouts *GkeonpremVmwareNodePoolTimeouts `pulumi:"timeouts"`
	// The unique identifier of the node pool.
	Uid *string `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
	// The cluster this node pool belongs to.
	VmwareCluster *string `pulumi:"vmwareCluster"`
}

type GkeonpremVmwareNodePoolState struct {
	// Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
	// and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
	// slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
	// dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The node configuration of the node pool.
	Config GkeonpremVmwareNodePoolConfigPtrInput
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// The time the cluster was deleted, in RFC3339 text format.
	DeleteTime pulumi.StringPtrInput
	// The display name for the node pool.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag                      pulumi.StringPtrInput
	GkeonpremVmwareNodePoolId pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The vmware node pool name.
	Name pulumi.StringPtrInput
	// Node Pool autoscaling config for the node pool.
	NodePoolAutoscaling GkeonpremVmwareNodePoolNodePoolAutoscalingPtrInput
	// Anthos version for the node pool. Defaults to the user cluster version.
	OnPremVersion pulumi.StringPtrInput
	Project       pulumi.StringPtrInput
	// If set, there are currently changes in flight to the node pool.
	Reconciling pulumi.BoolPtrInput
	// The current state of this cluster.
	State pulumi.StringPtrInput
	// ResourceStatus representing detailed cluster state.
	Statuses GkeonpremVmwareNodePoolStatusArrayInput
	Timeouts GkeonpremVmwareNodePoolTimeoutsPtrInput
	// The unique identifier of the node pool.
	Uid pulumi.StringPtrInput
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
	// The cluster this node pool belongs to.
	VmwareCluster pulumi.StringPtrInput
}

func (GkeonpremVmwareNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeonpremVmwareNodePoolState)(nil)).Elem()
}

type gkeonpremVmwareNodePoolArgs struct {
	// Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
	// and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
	// slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
	// dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The node configuration of the node pool.
	Config GkeonpremVmwareNodePoolConfig `pulumi:"config"`
	// The display name for the node pool.
	DisplayName               *string `pulumi:"displayName"`
	GkeonpremVmwareNodePoolId *string `pulumi:"gkeonpremVmwareNodePoolId"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The vmware node pool name.
	Name *string `pulumi:"name"`
	// Node Pool autoscaling config for the node pool.
	NodePoolAutoscaling *GkeonpremVmwareNodePoolNodePoolAutoscaling `pulumi:"nodePoolAutoscaling"`
	Project             *string                                     `pulumi:"project"`
	Timeouts            *GkeonpremVmwareNodePoolTimeouts            `pulumi:"timeouts"`
	// The cluster this node pool belongs to.
	VmwareCluster string `pulumi:"vmwareCluster"`
}

// The set of arguments for constructing a GkeonpremVmwareNodePool resource.
type GkeonpremVmwareNodePoolArgs struct {
	// Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
	// and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
	// slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
	// dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The node configuration of the node pool.
	Config GkeonpremVmwareNodePoolConfigInput
	// The display name for the node pool.
	DisplayName               pulumi.StringPtrInput
	GkeonpremVmwareNodePoolId pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The vmware node pool name.
	Name pulumi.StringPtrInput
	// Node Pool autoscaling config for the node pool.
	NodePoolAutoscaling GkeonpremVmwareNodePoolNodePoolAutoscalingPtrInput
	Project             pulumi.StringPtrInput
	Timeouts            GkeonpremVmwareNodePoolTimeoutsPtrInput
	// The cluster this node pool belongs to.
	VmwareCluster pulumi.StringInput
}

func (GkeonpremVmwareNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeonpremVmwareNodePoolArgs)(nil)).Elem()
}

type GkeonpremVmwareNodePoolInput interface {
	pulumi.Input

	ToGkeonpremVmwareNodePoolOutput() GkeonpremVmwareNodePoolOutput
	ToGkeonpremVmwareNodePoolOutputWithContext(ctx context.Context) GkeonpremVmwareNodePoolOutput
}

func (*GkeonpremVmwareNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeonpremVmwareNodePool)(nil)).Elem()
}

func (i *GkeonpremVmwareNodePool) ToGkeonpremVmwareNodePoolOutput() GkeonpremVmwareNodePoolOutput {
	return i.ToGkeonpremVmwareNodePoolOutputWithContext(context.Background())
}

func (i *GkeonpremVmwareNodePool) ToGkeonpremVmwareNodePoolOutputWithContext(ctx context.Context) GkeonpremVmwareNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeonpremVmwareNodePoolOutput)
}

type GkeonpremVmwareNodePoolOutput struct{ *pulumi.OutputState }

func (GkeonpremVmwareNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeonpremVmwareNodePool)(nil)).Elem()
}

func (o GkeonpremVmwareNodePoolOutput) ToGkeonpremVmwareNodePoolOutput() GkeonpremVmwareNodePoolOutput {
	return o
}

func (o GkeonpremVmwareNodePoolOutput) ToGkeonpremVmwareNodePoolOutputWithContext(ctx context.Context) GkeonpremVmwareNodePoolOutput {
	return o
}

// Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
// and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
// slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
// dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
// the annotations present on the resource.
func (o GkeonpremVmwareNodePoolOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The node configuration of the node pool.
func (o GkeonpremVmwareNodePoolOutput) Config() GkeonpremVmwareNodePoolConfigOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) GkeonpremVmwareNodePoolConfigOutput { return v.Config }).(GkeonpremVmwareNodePoolConfigOutput)
}

// The time the cluster was created, in RFC3339 text format.
func (o GkeonpremVmwareNodePoolOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The time the cluster was deleted, in RFC3339 text format.
func (o GkeonpremVmwareNodePoolOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The display name for the node pool.
func (o GkeonpremVmwareNodePoolOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GkeonpremVmwareNodePoolOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
// read-modify-writes through optimistic concurrency control.
func (o GkeonpremVmwareNodePoolOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GkeonpremVmwareNodePoolOutput) GkeonpremVmwareNodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.GkeonpremVmwareNodePoolId }).(pulumi.StringOutput)
}

// The location of the resource.
func (o GkeonpremVmwareNodePoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The vmware node pool name.
func (o GkeonpremVmwareNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Node Pool autoscaling config for the node pool.
func (o GkeonpremVmwareNodePoolOutput) NodePoolAutoscaling() GkeonpremVmwareNodePoolNodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) GkeonpremVmwareNodePoolNodePoolAutoscalingPtrOutput {
		return v.NodePoolAutoscaling
	}).(GkeonpremVmwareNodePoolNodePoolAutoscalingPtrOutput)
}

// Anthos version for the node pool. Defaults to the user cluster version.
func (o GkeonpremVmwareNodePoolOutput) OnPremVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.OnPremVersion }).(pulumi.StringOutput)
}

func (o GkeonpremVmwareNodePoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the node pool.
func (o GkeonpremVmwareNodePoolOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of this cluster.
func (o GkeonpremVmwareNodePoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing detailed cluster state.
func (o GkeonpremVmwareNodePoolOutput) Statuses() GkeonpremVmwareNodePoolStatusArrayOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) GkeonpremVmwareNodePoolStatusArrayOutput { return v.Statuses }).(GkeonpremVmwareNodePoolStatusArrayOutput)
}

func (o GkeonpremVmwareNodePoolOutput) Timeouts() GkeonpremVmwareNodePoolTimeoutsPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) GkeonpremVmwareNodePoolTimeoutsPtrOutput { return v.Timeouts }).(GkeonpremVmwareNodePoolTimeoutsPtrOutput)
}

// The unique identifier of the node pool.
func (o GkeonpremVmwareNodePoolOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time the cluster was last updated, in RFC3339 text format.
func (o GkeonpremVmwareNodePoolOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The cluster this node pool belongs to.
func (o GkeonpremVmwareNodePoolOutput) VmwareCluster() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareNodePool) pulumi.StringOutput { return v.VmwareCluster }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeonpremVmwareNodePoolInput)(nil)).Elem(), &GkeonpremVmwareNodePool{})
	pulumi.RegisterOutputType(GkeonpremVmwareNodePoolOutput{})
}
