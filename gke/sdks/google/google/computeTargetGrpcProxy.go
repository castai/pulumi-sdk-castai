// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeTargetGrpcProxy struct {
	pulumi.CustomResourceState

	ComputeTargetGrpcProxyId pulumi.StringOutput `pulumi:"computeTargetGrpcProxyId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	// This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
	// patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
	// fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name     pulumi.StringOutput `pulumi:"name"`
	Project  pulumi.StringOutput `pulumi:"project"`
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Server-defined URL with id for the resource.
	SelfLinkWithId pulumi.StringOutput                     `pulumi:"selfLinkWithId"`
	Timeouts       ComputeTargetGrpcProxyTimeoutsPtrOutput `pulumi:"timeouts"`
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
	// BackendService must be set to GRPC.
	UrlMap pulumi.StringPtrOutput `pulumi:"urlMap"`
	// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
	// a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
	// unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
	// If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
	// sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
	// connecting to
	ValidateForProxyless pulumi.BoolPtrOutput `pulumi:"validateForProxyless"`
}

// NewComputeTargetGrpcProxy registers a new resource with the given unique name, arguments, and options.
func NewComputeTargetGrpcProxy(ctx *pulumi.Context,
	name string, args *ComputeTargetGrpcProxyArgs, opts ...pulumi.ResourceOption) (*ComputeTargetGrpcProxy, error) {
	if args == nil {
		args = &ComputeTargetGrpcProxyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeTargetGrpcProxy
	err = ctx.RegisterPackageResource("google:index/computeTargetGrpcProxy:ComputeTargetGrpcProxy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeTargetGrpcProxy gets an existing ComputeTargetGrpcProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeTargetGrpcProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeTargetGrpcProxyState, opts ...pulumi.ResourceOption) (*ComputeTargetGrpcProxy, error) {
	var resource ComputeTargetGrpcProxy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeTargetGrpcProxy:ComputeTargetGrpcProxy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeTargetGrpcProxy resources.
type computeTargetGrpcProxyState struct {
	ComputeTargetGrpcProxyId *string `pulumi:"computeTargetGrpcProxyId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	// This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
	// patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
	// fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
	Fingerprint *string `pulumi:"fingerprint"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name     *string `pulumi:"name"`
	Project  *string `pulumi:"project"`
	SelfLink *string `pulumi:"selfLink"`
	// Server-defined URL with id for the resource.
	SelfLinkWithId *string                         `pulumi:"selfLinkWithId"`
	Timeouts       *ComputeTargetGrpcProxyTimeouts `pulumi:"timeouts"`
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
	// BackendService must be set to GRPC.
	UrlMap *string `pulumi:"urlMap"`
	// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
	// a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
	// unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
	// If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
	// sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
	// connecting to
	ValidateForProxyless *bool `pulumi:"validateForProxyless"`
}

type ComputeTargetGrpcProxyState struct {
	ComputeTargetGrpcProxyId pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	// This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
	// patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
	// fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
	Fingerprint pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	SelfLink pulumi.StringPtrInput
	// Server-defined URL with id for the resource.
	SelfLinkWithId pulumi.StringPtrInput
	Timeouts       ComputeTargetGrpcProxyTimeoutsPtrInput
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
	// BackendService must be set to GRPC.
	UrlMap pulumi.StringPtrInput
	// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
	// a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
	// unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
	// If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
	// sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
	// connecting to
	ValidateForProxyless pulumi.BoolPtrInput
}

func (ComputeTargetGrpcProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeTargetGrpcProxyState)(nil)).Elem()
}

type computeTargetGrpcProxyArgs struct {
	ComputeTargetGrpcProxyId *string `pulumi:"computeTargetGrpcProxyId"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name     *string                         `pulumi:"name"`
	Project  *string                         `pulumi:"project"`
	Timeouts *ComputeTargetGrpcProxyTimeouts `pulumi:"timeouts"`
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
	// BackendService must be set to GRPC.
	UrlMap *string `pulumi:"urlMap"`
	// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
	// a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
	// unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
	// If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
	// sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
	// connecting to
	ValidateForProxyless *bool `pulumi:"validateForProxyless"`
}

// The set of arguments for constructing a ComputeTargetGrpcProxy resource.
type ComputeTargetGrpcProxyArgs struct {
	ComputeTargetGrpcProxyId pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts ComputeTargetGrpcProxyTimeoutsPtrInput
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
	// BackendService must be set to GRPC.
	UrlMap pulumi.StringPtrInput
	// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
	// a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
	// unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
	// If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
	// sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
	// connecting to
	ValidateForProxyless pulumi.BoolPtrInput
}

func (ComputeTargetGrpcProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeTargetGrpcProxyArgs)(nil)).Elem()
}

type ComputeTargetGrpcProxyInput interface {
	pulumi.Input

	ToComputeTargetGrpcProxyOutput() ComputeTargetGrpcProxyOutput
	ToComputeTargetGrpcProxyOutputWithContext(ctx context.Context) ComputeTargetGrpcProxyOutput
}

func (*ComputeTargetGrpcProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeTargetGrpcProxy)(nil)).Elem()
}

func (i *ComputeTargetGrpcProxy) ToComputeTargetGrpcProxyOutput() ComputeTargetGrpcProxyOutput {
	return i.ToComputeTargetGrpcProxyOutputWithContext(context.Background())
}

func (i *ComputeTargetGrpcProxy) ToComputeTargetGrpcProxyOutputWithContext(ctx context.Context) ComputeTargetGrpcProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeTargetGrpcProxyOutput)
}

type ComputeTargetGrpcProxyOutput struct{ *pulumi.OutputState }

func (ComputeTargetGrpcProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeTargetGrpcProxy)(nil)).Elem()
}

func (o ComputeTargetGrpcProxyOutput) ToComputeTargetGrpcProxyOutput() ComputeTargetGrpcProxyOutput {
	return o
}

func (o ComputeTargetGrpcProxyOutput) ToComputeTargetGrpcProxyOutputWithContext(ctx context.Context) ComputeTargetGrpcProxyOutput {
	return o
}

func (o ComputeTargetGrpcProxyOutput) ComputeTargetGrpcProxyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.ComputeTargetGrpcProxyId }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeTargetGrpcProxyOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o ComputeTargetGrpcProxyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
// This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
// patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
// fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
func (o ComputeTargetGrpcProxyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
// digit, except the last character, which cannot be a dash.
func (o ComputeTargetGrpcProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeTargetGrpcProxyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeTargetGrpcProxyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL with id for the resource.
func (o ComputeTargetGrpcProxyOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringOutput { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

func (o ComputeTargetGrpcProxyOutput) Timeouts() ComputeTargetGrpcProxyTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) ComputeTargetGrpcProxyTimeoutsPtrOutput { return v.Timeouts }).(ComputeTargetGrpcProxyTimeoutsPtrOutput)
}

// URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
// BackendService must be set to GRPC.
func (o ComputeTargetGrpcProxyOutput) UrlMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.StringPtrOutput { return v.UrlMap }).(pulumi.StringPtrOutput)
}

// If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
// a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
// unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
// If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
// sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
// connecting to
func (o ComputeTargetGrpcProxyOutput) ValidateForProxyless() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeTargetGrpcProxy) pulumi.BoolPtrOutput { return v.ValidateForProxyless }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeTargetGrpcProxyInput)(nil)).Elem(), &ComputeTargetGrpcProxy{})
	pulumi.RegisterOutputType(ComputeTargetGrpcProxyOutput{})
}
