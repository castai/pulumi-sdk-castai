// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ColabRuntimeTemplate struct {
	pulumi.CustomResourceState

	ColabRuntimeTemplateId pulumi.StringOutput `pulumi:"colabRuntimeTemplateId"`
	// The configuration for the data disk of the runtime.
	DataPersistentDiskSpec ColabRuntimeTemplateDataPersistentDiskSpecPtrOutput `pulumi:"dataPersistentDiskSpec"`
	// The description of the Runtime Template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Required. The display name of the Runtime Template.
	DisplayName     pulumi.StringOutput    `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Customer-managed encryption key spec for the notebook runtime.
	EncryptionSpec ColabRuntimeTemplateEncryptionSpecPtrOutput `pulumi:"encryptionSpec"`
	// EUC configuration of the NotebookRuntimeTemplate.
	EucConfig ColabRuntimeTemplateEucConfigPtrOutput `pulumi:"eucConfig"`
	// Notebook Idle Shutdown configuration for the runtime.
	IdleShutdownConfig ColabRuntimeTemplateIdleShutdownConfigPtrOutput `pulumi:"idleShutdownConfig"`
	// Labels to identify and group the runtime template. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringOutput `pulumi:"location"`
	// 'The machine configuration of the runtime.'
	MachineSpec ColabRuntimeTemplateMachineSpecPtrOutput `pulumi:"machineSpec"`
	// The resource name of the Runtime Template
	Name pulumi.StringOutput `pulumi:"name"`
	// The network configuration for the runtime.
	NetworkSpec ColabRuntimeTemplateNetworkSpecPtrOutput `pulumi:"networkSpec"`
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags pulumi.StringArrayOutput `pulumi:"networkTags"`
	Project     pulumi.StringOutput      `pulumi:"project"`
	// Runtime Shielded VM spec.
	ShieldedVmConfig ColabRuntimeTemplateShieldedVmConfigPtrOutput `pulumi:"shieldedVmConfig"`
	// The notebook software configuration of the notebook runtime.
	SoftwareConfig ColabRuntimeTemplateSoftwareConfigPtrOutput `pulumi:"softwareConfig"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                `pulumi:"terraformLabels"`
	Timeouts        ColabRuntimeTemplateTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewColabRuntimeTemplate registers a new resource with the given unique name, arguments, and options.
func NewColabRuntimeTemplate(ctx *pulumi.Context,
	name string, args *ColabRuntimeTemplateArgs, opts ...pulumi.ResourceOption) (*ColabRuntimeTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ColabRuntimeTemplate
	err = ctx.RegisterPackageResource("google:index/colabRuntimeTemplate:ColabRuntimeTemplate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetColabRuntimeTemplate gets an existing ColabRuntimeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetColabRuntimeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ColabRuntimeTemplateState, opts ...pulumi.ResourceOption) (*ColabRuntimeTemplate, error) {
	var resource ColabRuntimeTemplate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/colabRuntimeTemplate:ColabRuntimeTemplate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ColabRuntimeTemplate resources.
type colabRuntimeTemplateState struct {
	ColabRuntimeTemplateId *string `pulumi:"colabRuntimeTemplateId"`
	// The configuration for the data disk of the runtime.
	DataPersistentDiskSpec *ColabRuntimeTemplateDataPersistentDiskSpec `pulumi:"dataPersistentDiskSpec"`
	// The description of the Runtime Template.
	Description *string `pulumi:"description"`
	// Required. The display name of the Runtime Template.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Customer-managed encryption key spec for the notebook runtime.
	EncryptionSpec *ColabRuntimeTemplateEncryptionSpec `pulumi:"encryptionSpec"`
	// EUC configuration of the NotebookRuntimeTemplate.
	EucConfig *ColabRuntimeTemplateEucConfig `pulumi:"eucConfig"`
	// Notebook Idle Shutdown configuration for the runtime.
	IdleShutdownConfig *ColabRuntimeTemplateIdleShutdownConfig `pulumi:"idleShutdownConfig"`
	// Labels to identify and group the runtime template. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location *string `pulumi:"location"`
	// 'The machine configuration of the runtime.'
	MachineSpec *ColabRuntimeTemplateMachineSpec `pulumi:"machineSpec"`
	// The resource name of the Runtime Template
	Name *string `pulumi:"name"`
	// The network configuration for the runtime.
	NetworkSpec *ColabRuntimeTemplateNetworkSpec `pulumi:"networkSpec"`
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags []string `pulumi:"networkTags"`
	Project     *string  `pulumi:"project"`
	// Runtime Shielded VM spec.
	ShieldedVmConfig *ColabRuntimeTemplateShieldedVmConfig `pulumi:"shieldedVmConfig"`
	// The notebook software configuration of the notebook runtime.
	SoftwareConfig *ColabRuntimeTemplateSoftwareConfig `pulumi:"softwareConfig"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string             `pulumi:"terraformLabels"`
	Timeouts        *ColabRuntimeTemplateTimeouts `pulumi:"timeouts"`
}

type ColabRuntimeTemplateState struct {
	ColabRuntimeTemplateId pulumi.StringPtrInput
	// The configuration for the data disk of the runtime.
	DataPersistentDiskSpec ColabRuntimeTemplateDataPersistentDiskSpecPtrInput
	// The description of the Runtime Template.
	Description pulumi.StringPtrInput
	// Required. The display name of the Runtime Template.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Customer-managed encryption key spec for the notebook runtime.
	EncryptionSpec ColabRuntimeTemplateEncryptionSpecPtrInput
	// EUC configuration of the NotebookRuntimeTemplate.
	EucConfig ColabRuntimeTemplateEucConfigPtrInput
	// Notebook Idle Shutdown configuration for the runtime.
	IdleShutdownConfig ColabRuntimeTemplateIdleShutdownConfigPtrInput
	// Labels to identify and group the runtime template. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringPtrInput
	// 'The machine configuration of the runtime.'
	MachineSpec ColabRuntimeTemplateMachineSpecPtrInput
	// The resource name of the Runtime Template
	Name pulumi.StringPtrInput
	// The network configuration for the runtime.
	NetworkSpec ColabRuntimeTemplateNetworkSpecPtrInput
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags pulumi.StringArrayInput
	Project     pulumi.StringPtrInput
	// Runtime Shielded VM spec.
	ShieldedVmConfig ColabRuntimeTemplateShieldedVmConfigPtrInput
	// The notebook software configuration of the notebook runtime.
	SoftwareConfig ColabRuntimeTemplateSoftwareConfigPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        ColabRuntimeTemplateTimeoutsPtrInput
}

func (ColabRuntimeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*colabRuntimeTemplateState)(nil)).Elem()
}

type colabRuntimeTemplateArgs struct {
	ColabRuntimeTemplateId *string `pulumi:"colabRuntimeTemplateId"`
	// The configuration for the data disk of the runtime.
	DataPersistentDiskSpec *ColabRuntimeTemplateDataPersistentDiskSpec `pulumi:"dataPersistentDiskSpec"`
	// The description of the Runtime Template.
	Description *string `pulumi:"description"`
	// Required. The display name of the Runtime Template.
	DisplayName string `pulumi:"displayName"`
	// Customer-managed encryption key spec for the notebook runtime.
	EncryptionSpec *ColabRuntimeTemplateEncryptionSpec `pulumi:"encryptionSpec"`
	// EUC configuration of the NotebookRuntimeTemplate.
	EucConfig *ColabRuntimeTemplateEucConfig `pulumi:"eucConfig"`
	// Notebook Idle Shutdown configuration for the runtime.
	IdleShutdownConfig *ColabRuntimeTemplateIdleShutdownConfig `pulumi:"idleShutdownConfig"`
	// Labels to identify and group the runtime template. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location string `pulumi:"location"`
	// 'The machine configuration of the runtime.'
	MachineSpec *ColabRuntimeTemplateMachineSpec `pulumi:"machineSpec"`
	// The resource name of the Runtime Template
	Name *string `pulumi:"name"`
	// The network configuration for the runtime.
	NetworkSpec *ColabRuntimeTemplateNetworkSpec `pulumi:"networkSpec"`
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags []string `pulumi:"networkTags"`
	Project     *string  `pulumi:"project"`
	// Runtime Shielded VM spec.
	ShieldedVmConfig *ColabRuntimeTemplateShieldedVmConfig `pulumi:"shieldedVmConfig"`
	// The notebook software configuration of the notebook runtime.
	SoftwareConfig *ColabRuntimeTemplateSoftwareConfig `pulumi:"softwareConfig"`
	Timeouts       *ColabRuntimeTemplateTimeouts       `pulumi:"timeouts"`
}

// The set of arguments for constructing a ColabRuntimeTemplate resource.
type ColabRuntimeTemplateArgs struct {
	ColabRuntimeTemplateId pulumi.StringPtrInput
	// The configuration for the data disk of the runtime.
	DataPersistentDiskSpec ColabRuntimeTemplateDataPersistentDiskSpecPtrInput
	// The description of the Runtime Template.
	Description pulumi.StringPtrInput
	// Required. The display name of the Runtime Template.
	DisplayName pulumi.StringInput
	// Customer-managed encryption key spec for the notebook runtime.
	EncryptionSpec ColabRuntimeTemplateEncryptionSpecPtrInput
	// EUC configuration of the NotebookRuntimeTemplate.
	EucConfig ColabRuntimeTemplateEucConfigPtrInput
	// Notebook Idle Shutdown configuration for the runtime.
	IdleShutdownConfig ColabRuntimeTemplateIdleShutdownConfigPtrInput
	// Labels to identify and group the runtime template. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location for the resource: https://cloud.google.com/colab/docs/locations
	Location pulumi.StringInput
	// 'The machine configuration of the runtime.'
	MachineSpec ColabRuntimeTemplateMachineSpecPtrInput
	// The resource name of the Runtime Template
	Name pulumi.StringPtrInput
	// The network configuration for the runtime.
	NetworkSpec ColabRuntimeTemplateNetworkSpecPtrInput
	// Applies the given Compute Engine tags to the runtime.
	NetworkTags pulumi.StringArrayInput
	Project     pulumi.StringPtrInput
	// Runtime Shielded VM spec.
	ShieldedVmConfig ColabRuntimeTemplateShieldedVmConfigPtrInput
	// The notebook software configuration of the notebook runtime.
	SoftwareConfig ColabRuntimeTemplateSoftwareConfigPtrInput
	Timeouts       ColabRuntimeTemplateTimeoutsPtrInput
}

func (ColabRuntimeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*colabRuntimeTemplateArgs)(nil)).Elem()
}

type ColabRuntimeTemplateInput interface {
	pulumi.Input

	ToColabRuntimeTemplateOutput() ColabRuntimeTemplateOutput
	ToColabRuntimeTemplateOutputWithContext(ctx context.Context) ColabRuntimeTemplateOutput
}

func (*ColabRuntimeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabRuntimeTemplate)(nil)).Elem()
}

func (i *ColabRuntimeTemplate) ToColabRuntimeTemplateOutput() ColabRuntimeTemplateOutput {
	return i.ToColabRuntimeTemplateOutputWithContext(context.Background())
}

func (i *ColabRuntimeTemplate) ToColabRuntimeTemplateOutputWithContext(ctx context.Context) ColabRuntimeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColabRuntimeTemplateOutput)
}

type ColabRuntimeTemplateOutput struct{ *pulumi.OutputState }

func (ColabRuntimeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabRuntimeTemplate)(nil)).Elem()
}

func (o ColabRuntimeTemplateOutput) ToColabRuntimeTemplateOutput() ColabRuntimeTemplateOutput {
	return o
}

func (o ColabRuntimeTemplateOutput) ToColabRuntimeTemplateOutputWithContext(ctx context.Context) ColabRuntimeTemplateOutput {
	return o
}

func (o ColabRuntimeTemplateOutput) ColabRuntimeTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringOutput { return v.ColabRuntimeTemplateId }).(pulumi.StringOutput)
}

// The configuration for the data disk of the runtime.
func (o ColabRuntimeTemplateOutput) DataPersistentDiskSpec() ColabRuntimeTemplateDataPersistentDiskSpecPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateDataPersistentDiskSpecPtrOutput {
		return v.DataPersistentDiskSpec
	}).(ColabRuntimeTemplateDataPersistentDiskSpecPtrOutput)
}

// The description of the Runtime Template.
func (o ColabRuntimeTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Required. The display name of the Runtime Template.
func (o ColabRuntimeTemplateOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o ColabRuntimeTemplateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Customer-managed encryption key spec for the notebook runtime.
func (o ColabRuntimeTemplateOutput) EncryptionSpec() ColabRuntimeTemplateEncryptionSpecPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateEncryptionSpecPtrOutput { return v.EncryptionSpec }).(ColabRuntimeTemplateEncryptionSpecPtrOutput)
}

// EUC configuration of the NotebookRuntimeTemplate.
func (o ColabRuntimeTemplateOutput) EucConfig() ColabRuntimeTemplateEucConfigPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateEucConfigPtrOutput { return v.EucConfig }).(ColabRuntimeTemplateEucConfigPtrOutput)
}

// Notebook Idle Shutdown configuration for the runtime.
func (o ColabRuntimeTemplateOutput) IdleShutdownConfig() ColabRuntimeTemplateIdleShutdownConfigPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateIdleShutdownConfigPtrOutput {
		return v.IdleShutdownConfig
	}).(ColabRuntimeTemplateIdleShutdownConfigPtrOutput)
}

// Labels to identify and group the runtime template. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o ColabRuntimeTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource: https://cloud.google.com/colab/docs/locations
func (o ColabRuntimeTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// 'The machine configuration of the runtime.'
func (o ColabRuntimeTemplateOutput) MachineSpec() ColabRuntimeTemplateMachineSpecPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateMachineSpecPtrOutput { return v.MachineSpec }).(ColabRuntimeTemplateMachineSpecPtrOutput)
}

// The resource name of the Runtime Template
func (o ColabRuntimeTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network configuration for the runtime.
func (o ColabRuntimeTemplateOutput) NetworkSpec() ColabRuntimeTemplateNetworkSpecPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateNetworkSpecPtrOutput { return v.NetworkSpec }).(ColabRuntimeTemplateNetworkSpecPtrOutput)
}

// Applies the given Compute Engine tags to the runtime.
func (o ColabRuntimeTemplateOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringArrayOutput { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

func (o ColabRuntimeTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Runtime Shielded VM spec.
func (o ColabRuntimeTemplateOutput) ShieldedVmConfig() ColabRuntimeTemplateShieldedVmConfigPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateShieldedVmConfigPtrOutput { return v.ShieldedVmConfig }).(ColabRuntimeTemplateShieldedVmConfigPtrOutput)
}

// The notebook software configuration of the notebook runtime.
func (o ColabRuntimeTemplateOutput) SoftwareConfig() ColabRuntimeTemplateSoftwareConfigPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateSoftwareConfigPtrOutput { return v.SoftwareConfig }).(ColabRuntimeTemplateSoftwareConfigPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o ColabRuntimeTemplateOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o ColabRuntimeTemplateOutput) Timeouts() ColabRuntimeTemplateTimeoutsPtrOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplate) ColabRuntimeTemplateTimeoutsPtrOutput { return v.Timeouts }).(ColabRuntimeTemplateTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ColabRuntimeTemplateInput)(nil)).Elem(), &ColabRuntimeTemplate{})
	pulumi.RegisterOutputType(ColabRuntimeTemplateOutput{})
}
