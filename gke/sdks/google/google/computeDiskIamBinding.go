// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeDiskIamBinding struct {
	pulumi.CustomResourceState

	ComputeDiskIamBindingId pulumi.StringOutput                     `pulumi:"computeDiskIamBindingId"`
	Condition               ComputeDiskIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                    pulumi.StringOutput                     `pulumi:"etag"`
	Members                 pulumi.StringArrayOutput                `pulumi:"members"`
	Name                    pulumi.StringOutput                     `pulumi:"name"`
	Project                 pulumi.StringOutput                     `pulumi:"project"`
	Role                    pulumi.StringOutput                     `pulumi:"role"`
	Zone                    pulumi.StringOutput                     `pulumi:"zone"`
}

// NewComputeDiskIamBinding registers a new resource with the given unique name, arguments, and options.
func NewComputeDiskIamBinding(ctx *pulumi.Context,
	name string, args *ComputeDiskIamBindingArgs, opts ...pulumi.ResourceOption) (*ComputeDiskIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeDiskIamBinding
	err = ctx.RegisterPackageResource("google:index/computeDiskIamBinding:ComputeDiskIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeDiskIamBinding gets an existing ComputeDiskIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeDiskIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeDiskIamBindingState, opts ...pulumi.ResourceOption) (*ComputeDiskIamBinding, error) {
	var resource ComputeDiskIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeDiskIamBinding:ComputeDiskIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeDiskIamBinding resources.
type computeDiskIamBindingState struct {
	ComputeDiskIamBindingId *string                         `pulumi:"computeDiskIamBindingId"`
	Condition               *ComputeDiskIamBindingCondition `pulumi:"condition"`
	Etag                    *string                         `pulumi:"etag"`
	Members                 []string                        `pulumi:"members"`
	Name                    *string                         `pulumi:"name"`
	Project                 *string                         `pulumi:"project"`
	Role                    *string                         `pulumi:"role"`
	Zone                    *string                         `pulumi:"zone"`
}

type ComputeDiskIamBindingState struct {
	ComputeDiskIamBindingId pulumi.StringPtrInput
	Condition               ComputeDiskIamBindingConditionPtrInput
	Etag                    pulumi.StringPtrInput
	Members                 pulumi.StringArrayInput
	Name                    pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Role                    pulumi.StringPtrInput
	Zone                    pulumi.StringPtrInput
}

func (ComputeDiskIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskIamBindingState)(nil)).Elem()
}

type computeDiskIamBindingArgs struct {
	ComputeDiskIamBindingId *string                         `pulumi:"computeDiskIamBindingId"`
	Condition               *ComputeDiskIamBindingCondition `pulumi:"condition"`
	Members                 []string                        `pulumi:"members"`
	Name                    *string                         `pulumi:"name"`
	Project                 *string                         `pulumi:"project"`
	Role                    string                          `pulumi:"role"`
	Zone                    *string                         `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeDiskIamBinding resource.
type ComputeDiskIamBindingArgs struct {
	ComputeDiskIamBindingId pulumi.StringPtrInput
	Condition               ComputeDiskIamBindingConditionPtrInput
	Members                 pulumi.StringArrayInput
	Name                    pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Role                    pulumi.StringInput
	Zone                    pulumi.StringPtrInput
}

func (ComputeDiskIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskIamBindingArgs)(nil)).Elem()
}

type ComputeDiskIamBindingInput interface {
	pulumi.Input

	ToComputeDiskIamBindingOutput() ComputeDiskIamBindingOutput
	ToComputeDiskIamBindingOutputWithContext(ctx context.Context) ComputeDiskIamBindingOutput
}

func (*ComputeDiskIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskIamBinding)(nil)).Elem()
}

func (i *ComputeDiskIamBinding) ToComputeDiskIamBindingOutput() ComputeDiskIamBindingOutput {
	return i.ToComputeDiskIamBindingOutputWithContext(context.Background())
}

func (i *ComputeDiskIamBinding) ToComputeDiskIamBindingOutputWithContext(ctx context.Context) ComputeDiskIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskIamBindingOutput)
}

type ComputeDiskIamBindingOutput struct{ *pulumi.OutputState }

func (ComputeDiskIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskIamBinding)(nil)).Elem()
}

func (o ComputeDiskIamBindingOutput) ToComputeDiskIamBindingOutput() ComputeDiskIamBindingOutput {
	return o
}

func (o ComputeDiskIamBindingOutput) ToComputeDiskIamBindingOutputWithContext(ctx context.Context) ComputeDiskIamBindingOutput {
	return o
}

func (o ComputeDiskIamBindingOutput) ComputeDiskIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringOutput { return v.ComputeDiskIamBindingId }).(pulumi.StringOutput)
}

func (o ComputeDiskIamBindingOutput) Condition() ComputeDiskIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) ComputeDiskIamBindingConditionPtrOutput { return v.Condition }).(ComputeDiskIamBindingConditionPtrOutput)
}

func (o ComputeDiskIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeDiskIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ComputeDiskIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeDiskIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeDiskIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o ComputeDiskIamBindingOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDiskIamBinding) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskIamBindingInput)(nil)).Elem(), &ComputeDiskIamBinding{})
	pulumi.RegisterOutputType(ComputeDiskIamBindingOutput{})
}
