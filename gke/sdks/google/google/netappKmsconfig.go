// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetappKmsconfig struct {
	pulumi.CustomResourceState

	// Resource name of the KMS key to use. Only regional keys are supported. Format:
	// 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
	CryptoKeyName pulumi.StringOutput `pulumi:"cryptoKeyName"`
	// Description for the CMEK policy.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access. To make the
	// policy work, a CMEK policy check is required, which verifies key access.
	Instructions pulumi.StringOutput `pulumi:"instructions"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the policy location. CMEK policies apply to the whole region.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the CMEK policy.
	Name              pulumi.StringOutput `pulumi:"name"`
	NetappKmsconfigId pulumi.StringOutput `pulumi:"netappKmsconfigId"`
	Project           pulumi.StringOutput `pulumi:"project"`
	// The Service account which needs to have access to the provided KMS key.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput           `pulumi:"terraformLabels"`
	Timeouts        NetappKmsconfigTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetappKmsconfig registers a new resource with the given unique name, arguments, and options.
func NewNetappKmsconfig(ctx *pulumi.Context,
	name string, args *NetappKmsconfigArgs, opts ...pulumi.ResourceOption) (*NetappKmsconfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CryptoKeyName == nil {
		return nil, errors.New("invalid value for required argument 'CryptoKeyName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetappKmsconfig
	err = ctx.RegisterPackageResource("google:index/netappKmsconfig:NetappKmsconfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappKmsconfig gets an existing NetappKmsconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappKmsconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappKmsconfigState, opts ...pulumi.ResourceOption) (*NetappKmsconfig, error) {
	var resource NetappKmsconfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/netappKmsconfig:NetappKmsconfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappKmsconfig resources.
type netappKmsconfigState struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format:
	// 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
	CryptoKeyName *string `pulumi:"cryptoKeyName"`
	// Description for the CMEK policy.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access. To make the
	// policy work, a CMEK policy check is required, which verifies key access.
	Instructions *string `pulumi:"instructions"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the policy location. CMEK policies apply to the whole region.
	Location *string `pulumi:"location"`
	// Name of the CMEK policy.
	Name              *string `pulumi:"name"`
	NetappKmsconfigId *string `pulumi:"netappKmsconfigId"`
	Project           *string `pulumi:"project"`
	// The Service account which needs to have access to the provided KMS key.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string        `pulumi:"terraformLabels"`
	Timeouts        *NetappKmsconfigTimeouts `pulumi:"timeouts"`
}

type NetappKmsconfigState struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format:
	// 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
	CryptoKeyName pulumi.StringPtrInput
	// Description for the CMEK policy.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access. To make the
	// policy work, a CMEK policy check is required, which verifies key access.
	Instructions pulumi.StringPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the policy location. CMEK policies apply to the whole region.
	Location pulumi.StringPtrInput
	// Name of the CMEK policy.
	Name              pulumi.StringPtrInput
	NetappKmsconfigId pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	// The Service account which needs to have access to the provided KMS key.
	ServiceAccount pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetappKmsconfigTimeoutsPtrInput
}

func (NetappKmsconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappKmsconfigState)(nil)).Elem()
}

type netappKmsconfigArgs struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format:
	// 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
	CryptoKeyName string `pulumi:"cryptoKeyName"`
	// Description for the CMEK policy.
	Description *string `pulumi:"description"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the policy location. CMEK policies apply to the whole region.
	Location string `pulumi:"location"`
	// Name of the CMEK policy.
	Name              *string                  `pulumi:"name"`
	NetappKmsconfigId *string                  `pulumi:"netappKmsconfigId"`
	Project           *string                  `pulumi:"project"`
	Timeouts          *NetappKmsconfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetappKmsconfig resource.
type NetappKmsconfigArgs struct {
	// Resource name of the KMS key to use. Only regional keys are supported. Format:
	// 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
	CryptoKeyName pulumi.StringInput
	// Description for the CMEK policy.
	Description pulumi.StringPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the policy location. CMEK policies apply to the whole region.
	Location pulumi.StringInput
	// Name of the CMEK policy.
	Name              pulumi.StringPtrInput
	NetappKmsconfigId pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	Timeouts          NetappKmsconfigTimeoutsPtrInput
}

func (NetappKmsconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappKmsconfigArgs)(nil)).Elem()
}

type NetappKmsconfigInput interface {
	pulumi.Input

	ToNetappKmsconfigOutput() NetappKmsconfigOutput
	ToNetappKmsconfigOutputWithContext(ctx context.Context) NetappKmsconfigOutput
}

func (*NetappKmsconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappKmsconfig)(nil)).Elem()
}

func (i *NetappKmsconfig) ToNetappKmsconfigOutput() NetappKmsconfigOutput {
	return i.ToNetappKmsconfigOutputWithContext(context.Background())
}

func (i *NetappKmsconfig) ToNetappKmsconfigOutputWithContext(ctx context.Context) NetappKmsconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappKmsconfigOutput)
}

type NetappKmsconfigOutput struct{ *pulumi.OutputState }

func (NetappKmsconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappKmsconfig)(nil)).Elem()
}

func (o NetappKmsconfigOutput) ToNetappKmsconfigOutput() NetappKmsconfigOutput {
	return o
}

func (o NetappKmsconfigOutput) ToNetappKmsconfigOutputWithContext(ctx context.Context) NetappKmsconfigOutput {
	return o
}

// Resource name of the KMS key to use. Only regional keys are supported. Format:
// 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
func (o NetappKmsconfigOutput) CryptoKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.CryptoKeyName }).(pulumi.StringOutput)
}

// Description for the CMEK policy.
func (o NetappKmsconfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetappKmsconfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access. To make the
// policy work, a CMEK policy check is required, which verifies key access.
func (o NetappKmsconfigOutput) Instructions() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.Instructions }).(pulumi.StringOutput)
}

// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o NetappKmsconfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the policy location. CMEK policies apply to the whole region.
func (o NetappKmsconfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the CMEK policy.
func (o NetappKmsconfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetappKmsconfigOutput) NetappKmsconfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.NetappKmsconfigId }).(pulumi.StringOutput)
}

func (o NetappKmsconfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Service account which needs to have access to the provided KMS key.
func (o NetappKmsconfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetappKmsconfigOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappKmsconfig) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetappKmsconfigOutput) Timeouts() NetappKmsconfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetappKmsconfig) NetappKmsconfigTimeoutsPtrOutput { return v.Timeouts }).(NetappKmsconfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappKmsconfigInput)(nil)).Elem(), &NetappKmsconfig{})
	pulumi.RegisterOutputType(NetappKmsconfigOutput{})
}
