// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MonitoringService struct {
	pulumi.CustomResourceState

	// A well-known service type, defined by its service type and service labels. Valid values of service types and services
	// labels are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	BasicService MonitoringServiceBasicServicePtrOutput `pulumi:"basicService"`
	// Name used for UI elements listing this Service.
	DisplayName         pulumi.StringPtrOutput `pulumi:"displayName"`
	MonitoringServiceId pulumi.StringOutput    `pulumi:"monitoringServiceId"`
	// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	Telemetries MonitoringServiceTelemetryArrayOutput `pulumi:"telemetries"`
	Timeouts    MonitoringServiceTimeoutsPtrOutput    `pulumi:"timeouts"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapOutput `pulumi:"userLabels"`
}

// NewMonitoringService registers a new resource with the given unique name, arguments, and options.
func NewMonitoringService(ctx *pulumi.Context,
	name string, args *MonitoringServiceArgs, opts ...pulumi.ResourceOption) (*MonitoringService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MonitoringService
	err = ctx.RegisterPackageResource("google:index/monitoringService:MonitoringService", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringService gets an existing MonitoringService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringServiceState, opts ...pulumi.ResourceOption) (*MonitoringService, error) {
	var resource MonitoringService
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/monitoringService:MonitoringService", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringService resources.
type monitoringServiceState struct {
	// A well-known service type, defined by its service type and service labels. Valid values of service types and services
	// labels are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	BasicService *MonitoringServiceBasicService `pulumi:"basicService"`
	// Name used for UI elements listing this Service.
	DisplayName         *string `pulumi:"displayName"`
	MonitoringServiceId *string `pulumi:"monitoringServiceId"`
	// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId *string `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	Telemetries []MonitoringServiceTelemetry `pulumi:"telemetries"`
	Timeouts    *MonitoringServiceTimeouts   `pulumi:"timeouts"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `pulumi:"userLabels"`
}

type MonitoringServiceState struct {
	// A well-known service type, defined by its service type and service labels. Valid values of service types and services
	// labels are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	BasicService MonitoringServiceBasicServicePtrInput
	// Name used for UI elements listing this Service.
	DisplayName         pulumi.StringPtrInput
	MonitoringServiceId pulumi.StringPtrInput
	// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId pulumi.StringPtrInput
	// Configuration for how to query telemetry on a Service.
	Telemetries MonitoringServiceTelemetryArrayInput
	Timeouts    MonitoringServiceTimeoutsPtrInput
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapInput
}

func (MonitoringServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringServiceState)(nil)).Elem()
}

type monitoringServiceArgs struct {
	// A well-known service type, defined by its service type and service labels. Valid values of service types and services
	// labels are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	BasicService *MonitoringServiceBasicService `pulumi:"basicService"`
	// Name used for UI elements listing this Service.
	DisplayName         *string `pulumi:"displayName"`
	MonitoringServiceId *string `pulumi:"monitoringServiceId"`
	Project             *string `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId string                     `pulumi:"serviceId"`
	Timeouts  *MonitoringServiceTimeouts `pulumi:"timeouts"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// The set of arguments for constructing a MonitoringService resource.
type MonitoringServiceArgs struct {
	// A well-known service type, defined by its service type and service labels. Valid values of service types and services
	// labels are described at
	// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
	BasicService MonitoringServiceBasicServicePtrInput
	// Name used for UI elements listing this Service.
	DisplayName         pulumi.StringPtrInput
	MonitoringServiceId pulumi.StringPtrInput
	Project             pulumi.StringPtrInput
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId pulumi.StringInput
	Timeouts  MonitoringServiceTimeoutsPtrInput
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapInput
}

func (MonitoringServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringServiceArgs)(nil)).Elem()
}

type MonitoringServiceInput interface {
	pulumi.Input

	ToMonitoringServiceOutput() MonitoringServiceOutput
	ToMonitoringServiceOutputWithContext(ctx context.Context) MonitoringServiceOutput
}

func (*MonitoringService) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringService)(nil)).Elem()
}

func (i *MonitoringService) ToMonitoringServiceOutput() MonitoringServiceOutput {
	return i.ToMonitoringServiceOutputWithContext(context.Background())
}

func (i *MonitoringService) ToMonitoringServiceOutputWithContext(ctx context.Context) MonitoringServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringServiceOutput)
}

type MonitoringServiceOutput struct{ *pulumi.OutputState }

func (MonitoringServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringService)(nil)).Elem()
}

func (o MonitoringServiceOutput) ToMonitoringServiceOutput() MonitoringServiceOutput {
	return o
}

func (o MonitoringServiceOutput) ToMonitoringServiceOutputWithContext(ctx context.Context) MonitoringServiceOutput {
	return o
}

// A well-known service type, defined by its service type and service labels. Valid values of service types and services
// labels are described at
// https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
func (o MonitoringServiceOutput) BasicService() MonitoringServiceBasicServicePtrOutput {
	return o.ApplyT(func(v *MonitoringService) MonitoringServiceBasicServicePtrOutput { return v.BasicService }).(MonitoringServiceBasicServicePtrOutput)
}

// Name used for UI elements listing this Service.
func (o MonitoringServiceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringService) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MonitoringServiceOutput) MonitoringServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringService) pulumi.StringOutput { return v.MonitoringServiceId }).(pulumi.StringOutput)
}

// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
func (o MonitoringServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MonitoringServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An optional service ID to use. If not given, the server will generate a service ID.
func (o MonitoringServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Configuration for how to query telemetry on a Service.
func (o MonitoringServiceOutput) Telemetries() MonitoringServiceTelemetryArrayOutput {
	return o.ApplyT(func(v *MonitoringService) MonitoringServiceTelemetryArrayOutput { return v.Telemetries }).(MonitoringServiceTelemetryArrayOutput)
}

func (o MonitoringServiceOutput) Timeouts() MonitoringServiceTimeoutsPtrOutput {
	return o.ApplyT(func(v *MonitoringService) MonitoringServiceTimeoutsPtrOutput { return v.Timeouts }).(MonitoringServiceTimeoutsPtrOutput)
}

// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
// a semantic value, the empty string may be supplied for the label value.
func (o MonitoringServiceOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringService) pulumi.StringMapOutput { return v.UserLabels }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringServiceInput)(nil)).Elem(), &MonitoringService{})
	pulumi.RegisterOutputType(MonitoringServiceOutput{})
}
