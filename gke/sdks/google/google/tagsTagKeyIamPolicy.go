// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TagsTagKeyIamPolicy struct {
	pulumi.CustomResourceState

	Etag                  pulumi.StringOutput `pulumi:"etag"`
	PolicyData            pulumi.StringOutput `pulumi:"policyData"`
	TagKey                pulumi.StringOutput `pulumi:"tagKey"`
	TagsTagKeyIamPolicyId pulumi.StringOutput `pulumi:"tagsTagKeyIamPolicyId"`
}

// NewTagsTagKeyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTagsTagKeyIamPolicy(ctx *pulumi.Context,
	name string, args *TagsTagKeyIamPolicyArgs, opts ...pulumi.ResourceOption) (*TagsTagKeyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.TagKey == nil {
		return nil, errors.New("invalid value for required argument 'TagKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource TagsTagKeyIamPolicy
	err = ctx.RegisterPackageResource("google:index/tagsTagKeyIamPolicy:TagsTagKeyIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagsTagKeyIamPolicy gets an existing TagsTagKeyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagsTagKeyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagsTagKeyIamPolicyState, opts ...pulumi.ResourceOption) (*TagsTagKeyIamPolicy, error) {
	var resource TagsTagKeyIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/tagsTagKeyIamPolicy:TagsTagKeyIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagsTagKeyIamPolicy resources.
type tagsTagKeyIamPolicyState struct {
	Etag                  *string `pulumi:"etag"`
	PolicyData            *string `pulumi:"policyData"`
	TagKey                *string `pulumi:"tagKey"`
	TagsTagKeyIamPolicyId *string `pulumi:"tagsTagKeyIamPolicyId"`
}

type TagsTagKeyIamPolicyState struct {
	Etag                  pulumi.StringPtrInput
	PolicyData            pulumi.StringPtrInput
	TagKey                pulumi.StringPtrInput
	TagsTagKeyIamPolicyId pulumi.StringPtrInput
}

func (TagsTagKeyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagsTagKeyIamPolicyState)(nil)).Elem()
}

type tagsTagKeyIamPolicyArgs struct {
	PolicyData            string  `pulumi:"policyData"`
	TagKey                string  `pulumi:"tagKey"`
	TagsTagKeyIamPolicyId *string `pulumi:"tagsTagKeyIamPolicyId"`
}

// The set of arguments for constructing a TagsTagKeyIamPolicy resource.
type TagsTagKeyIamPolicyArgs struct {
	PolicyData            pulumi.StringInput
	TagKey                pulumi.StringInput
	TagsTagKeyIamPolicyId pulumi.StringPtrInput
}

func (TagsTagKeyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagsTagKeyIamPolicyArgs)(nil)).Elem()
}

type TagsTagKeyIamPolicyInput interface {
	pulumi.Input

	ToTagsTagKeyIamPolicyOutput() TagsTagKeyIamPolicyOutput
	ToTagsTagKeyIamPolicyOutputWithContext(ctx context.Context) TagsTagKeyIamPolicyOutput
}

func (*TagsTagKeyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsTagKeyIamPolicy)(nil)).Elem()
}

func (i *TagsTagKeyIamPolicy) ToTagsTagKeyIamPolicyOutput() TagsTagKeyIamPolicyOutput {
	return i.ToTagsTagKeyIamPolicyOutputWithContext(context.Background())
}

func (i *TagsTagKeyIamPolicy) ToTagsTagKeyIamPolicyOutputWithContext(ctx context.Context) TagsTagKeyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagKeyIamPolicyOutput)
}

type TagsTagKeyIamPolicyOutput struct{ *pulumi.OutputState }

func (TagsTagKeyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsTagKeyIamPolicy)(nil)).Elem()
}

func (o TagsTagKeyIamPolicyOutput) ToTagsTagKeyIamPolicyOutput() TagsTagKeyIamPolicyOutput {
	return o
}

func (o TagsTagKeyIamPolicyOutput) ToTagsTagKeyIamPolicyOutputWithContext(ctx context.Context) TagsTagKeyIamPolicyOutput {
	return o
}

func (o TagsTagKeyIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TagsTagKeyIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TagsTagKeyIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *TagsTagKeyIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o TagsTagKeyIamPolicyOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v *TagsTagKeyIamPolicy) pulumi.StringOutput { return v.TagKey }).(pulumi.StringOutput)
}

func (o TagsTagKeyIamPolicyOutput) TagsTagKeyIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagsTagKeyIamPolicy) pulumi.StringOutput { return v.TagsTagKeyIamPolicyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagKeyIamPolicyInput)(nil)).Elem(), &TagsTagKeyIamPolicy{})
	pulumi.RegisterOutputType(TagsTagKeyIamPolicyOutput{})
}
