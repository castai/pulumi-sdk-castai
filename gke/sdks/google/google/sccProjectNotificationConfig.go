// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccProjectNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The resource name of this notification config, in the format 'projects/{{projectId}}/notificationConfigs/{{config_id}}'.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                    pulumi.StringOutput `pulumi:"pubsubTopic"`
	SccProjectNotificationConfigId pulumi.StringOutput `pulumi:"sccProjectNotificationConfigId"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig SccProjectNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
	Timeouts        SccProjectNotificationConfigTimeoutsPtrOutput     `pulumi:"timeouts"`
}

// NewSccProjectNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewSccProjectNotificationConfig(ctx *pulumi.Context,
	name string, args *SccProjectNotificationConfigArgs, opts ...pulumi.ResourceOption) (*SccProjectNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccProjectNotificationConfig
	err = ctx.RegisterPackageResource("google:index/sccProjectNotificationConfig:SccProjectNotificationConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccProjectNotificationConfig gets an existing SccProjectNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccProjectNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccProjectNotificationConfigState, opts ...pulumi.ResourceOption) (*SccProjectNotificationConfig, error) {
	var resource SccProjectNotificationConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/sccProjectNotificationConfig:SccProjectNotificationConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccProjectNotificationConfig resources.
type sccProjectNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// The resource name of this notification config, in the format 'projects/{{projectId}}/notificationConfigs/{{config_id}}'.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                    *string `pulumi:"pubsubTopic"`
	SccProjectNotificationConfigId *string `pulumi:"sccProjectNotificationConfigId"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig *SccProjectNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
	Timeouts        *SccProjectNotificationConfigTimeouts        `pulumi:"timeouts"`
}

type SccProjectNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// The resource name of this notification config, in the format 'projects/{{projectId}}/notificationConfigs/{{config_id}}'.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                    pulumi.StringPtrInput
	SccProjectNotificationConfigId pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig SccProjectNotificationConfigStreamingConfigPtrInput
	Timeouts        SccProjectNotificationConfigTimeoutsPtrInput
}

func (SccProjectNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccProjectNotificationConfigState)(nil)).Elem()
}

type sccProjectNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	Project     *string `pulumi:"project"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                    string  `pulumi:"pubsubTopic"`
	SccProjectNotificationConfigId *string `pulumi:"sccProjectNotificationConfigId"`
	// The config for triggering streaming-based notifications.
	StreamingConfig SccProjectNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
	Timeouts        *SccProjectNotificationConfigTimeouts       `pulumi:"timeouts"`
}

// The set of arguments for constructing a SccProjectNotificationConfig resource.
type SccProjectNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                    pulumi.StringInput
	SccProjectNotificationConfigId pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig SccProjectNotificationConfigStreamingConfigInput
	Timeouts        SccProjectNotificationConfigTimeoutsPtrInput
}

func (SccProjectNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccProjectNotificationConfigArgs)(nil)).Elem()
}

type SccProjectNotificationConfigInput interface {
	pulumi.Input

	ToSccProjectNotificationConfigOutput() SccProjectNotificationConfigOutput
	ToSccProjectNotificationConfigOutputWithContext(ctx context.Context) SccProjectNotificationConfigOutput
}

func (*SccProjectNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SccProjectNotificationConfig)(nil)).Elem()
}

func (i *SccProjectNotificationConfig) ToSccProjectNotificationConfigOutput() SccProjectNotificationConfigOutput {
	return i.ToSccProjectNotificationConfigOutputWithContext(context.Background())
}

func (i *SccProjectNotificationConfig) ToSccProjectNotificationConfigOutputWithContext(ctx context.Context) SccProjectNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccProjectNotificationConfigOutput)
}

type SccProjectNotificationConfigOutput struct{ *pulumi.OutputState }

func (SccProjectNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccProjectNotificationConfig)(nil)).Elem()
}

func (o SccProjectNotificationConfigOutput) ToSccProjectNotificationConfigOutput() SccProjectNotificationConfigOutput {
	return o
}

func (o SccProjectNotificationConfigOutput) ToSccProjectNotificationConfigOutputWithContext(ctx context.Context) SccProjectNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o SccProjectNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o SccProjectNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource name of this notification config, in the format 'projects/{{projectId}}/notificationConfigs/{{config_id}}'.
func (o SccProjectNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SccProjectNotificationConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
func (o SccProjectNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

func (o SccProjectNotificationConfigOutput) SccProjectNotificationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringOutput { return v.SccProjectNotificationConfigId }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
func (o SccProjectNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
func (o SccProjectNotificationConfigOutput) StreamingConfig() SccProjectNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) SccProjectNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(SccProjectNotificationConfigStreamingConfigOutput)
}

func (o SccProjectNotificationConfigOutput) Timeouts() SccProjectNotificationConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccProjectNotificationConfig) SccProjectNotificationConfigTimeoutsPtrOutput { return v.Timeouts }).(SccProjectNotificationConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccProjectNotificationConfigInput)(nil)).Elem(), &SccProjectNotificationConfig{})
	pulumi.RegisterOutputType(SccProjectNotificationConfigOutput{})
}
