// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseAppCheckServiceConfig struct {
	pulumi.CustomResourceState

	EnforcementMode                 pulumi.StringPtrOutput `pulumi:"enforcementMode"`
	FirebaseAppCheckServiceConfigId pulumi.StringOutput    `pulumi:"firebaseAppCheckServiceConfigId"`
	// The fully-qualified resource name of the service enforcement configuration.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
	ServiceId pulumi.StringOutput                            `pulumi:"serviceId"`
	Timeouts  FirebaseAppCheckServiceConfigTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFirebaseAppCheckServiceConfig registers a new resource with the given unique name, arguments, and options.
func NewFirebaseAppCheckServiceConfig(ctx *pulumi.Context,
	name string, args *FirebaseAppCheckServiceConfigArgs, opts ...pulumi.ResourceOption) (*FirebaseAppCheckServiceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseAppCheckServiceConfig
	err = ctx.RegisterPackageResource("google:index/firebaseAppCheckServiceConfig:FirebaseAppCheckServiceConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseAppCheckServiceConfig gets an existing FirebaseAppCheckServiceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseAppCheckServiceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseAppCheckServiceConfigState, opts ...pulumi.ResourceOption) (*FirebaseAppCheckServiceConfig, error) {
	var resource FirebaseAppCheckServiceConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/firebaseAppCheckServiceConfig:FirebaseAppCheckServiceConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseAppCheckServiceConfig resources.
type firebaseAppCheckServiceConfigState struct {
	EnforcementMode                 *string `pulumi:"enforcementMode"`
	FirebaseAppCheckServiceConfigId *string `pulumi:"firebaseAppCheckServiceConfigId"`
	// The fully-qualified resource name of the service enforcement configuration.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
	ServiceId *string                                `pulumi:"serviceId"`
	Timeouts  *FirebaseAppCheckServiceConfigTimeouts `pulumi:"timeouts"`
}

type FirebaseAppCheckServiceConfigState struct {
	EnforcementMode                 pulumi.StringPtrInput
	FirebaseAppCheckServiceConfigId pulumi.StringPtrInput
	// The fully-qualified resource name of the service enforcement configuration.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
	ServiceId pulumi.StringPtrInput
	Timeouts  FirebaseAppCheckServiceConfigTimeoutsPtrInput
}

func (FirebaseAppCheckServiceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseAppCheckServiceConfigState)(nil)).Elem()
}

type firebaseAppCheckServiceConfigArgs struct {
	EnforcementMode                 *string `pulumi:"enforcementMode"`
	FirebaseAppCheckServiceConfigId *string `pulumi:"firebaseAppCheckServiceConfigId"`
	Project                         *string `pulumi:"project"`
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
	ServiceId string                                 `pulumi:"serviceId"`
	Timeouts  *FirebaseAppCheckServiceConfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaseAppCheckServiceConfig resource.
type FirebaseAppCheckServiceConfigArgs struct {
	EnforcementMode                 pulumi.StringPtrInput
	FirebaseAppCheckServiceConfigId pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
	ServiceId pulumi.StringInput
	Timeouts  FirebaseAppCheckServiceConfigTimeoutsPtrInput
}

func (FirebaseAppCheckServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseAppCheckServiceConfigArgs)(nil)).Elem()
}

type FirebaseAppCheckServiceConfigInput interface {
	pulumi.Input

	ToFirebaseAppCheckServiceConfigOutput() FirebaseAppCheckServiceConfigOutput
	ToFirebaseAppCheckServiceConfigOutputWithContext(ctx context.Context) FirebaseAppCheckServiceConfigOutput
}

func (*FirebaseAppCheckServiceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseAppCheckServiceConfig)(nil)).Elem()
}

func (i *FirebaseAppCheckServiceConfig) ToFirebaseAppCheckServiceConfigOutput() FirebaseAppCheckServiceConfigOutput {
	return i.ToFirebaseAppCheckServiceConfigOutputWithContext(context.Background())
}

func (i *FirebaseAppCheckServiceConfig) ToFirebaseAppCheckServiceConfigOutputWithContext(ctx context.Context) FirebaseAppCheckServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseAppCheckServiceConfigOutput)
}

type FirebaseAppCheckServiceConfigOutput struct{ *pulumi.OutputState }

func (FirebaseAppCheckServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseAppCheckServiceConfig)(nil)).Elem()
}

func (o FirebaseAppCheckServiceConfigOutput) ToFirebaseAppCheckServiceConfigOutput() FirebaseAppCheckServiceConfigOutput {
	return o
}

func (o FirebaseAppCheckServiceConfigOutput) ToFirebaseAppCheckServiceConfigOutputWithContext(ctx context.Context) FirebaseAppCheckServiceConfigOutput {
	return o
}

func (o FirebaseAppCheckServiceConfigOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseAppCheckServiceConfig) pulumi.StringPtrOutput { return v.EnforcementMode }).(pulumi.StringPtrOutput)
}

func (o FirebaseAppCheckServiceConfigOutput) FirebaseAppCheckServiceConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppCheckServiceConfig) pulumi.StringOutput { return v.FirebaseAppCheckServiceConfigId }).(pulumi.StringOutput)
}

// The fully-qualified resource name of the service enforcement configuration.
func (o FirebaseAppCheckServiceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppCheckServiceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirebaseAppCheckServiceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppCheckServiceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
// firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
// firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
func (o FirebaseAppCheckServiceConfigOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppCheckServiceConfig) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

func (o FirebaseAppCheckServiceConfigOutput) Timeouts() FirebaseAppCheckServiceConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseAppCheckServiceConfig) FirebaseAppCheckServiceConfigTimeoutsPtrOutput {
		return v.Timeouts
	}).(FirebaseAppCheckServiceConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseAppCheckServiceConfigInput)(nil)).Elem(), &FirebaseAppCheckServiceConfig{})
	pulumi.RegisterOutputType(FirebaseAppCheckServiceConfigOutput{})
}
