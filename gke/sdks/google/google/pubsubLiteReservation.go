// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubLiteReservation struct {
	pulumi.CustomResourceState

	// Name of the reservation.
	Name                    pulumi.StringOutput `pulumi:"name"`
	Project                 pulumi.StringOutput `pulumi:"project"`
	PubsubLiteReservationId pulumi.StringOutput `pulumi:"pubsubLiteReservationId"`
	// The region of the pubsub lite reservation.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2
	// MiB/s of subscribed messages.
	ThroughputCapacity pulumi.Float64Output                   `pulumi:"throughputCapacity"`
	Timeouts           PubsubLiteReservationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewPubsubLiteReservation registers a new resource with the given unique name, arguments, and options.
func NewPubsubLiteReservation(ctx *pulumi.Context,
	name string, args *PubsubLiteReservationArgs, opts ...pulumi.ResourceOption) (*PubsubLiteReservation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ThroughputCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ThroughputCapacity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubLiteReservation
	err = ctx.RegisterPackageResource("google:index/pubsubLiteReservation:PubsubLiteReservation", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubLiteReservation gets an existing PubsubLiteReservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubLiteReservation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubLiteReservationState, opts ...pulumi.ResourceOption) (*PubsubLiteReservation, error) {
	var resource PubsubLiteReservation
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/pubsubLiteReservation:PubsubLiteReservation", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubLiteReservation resources.
type pubsubLiteReservationState struct {
	// Name of the reservation.
	Name                    *string `pulumi:"name"`
	Project                 *string `pulumi:"project"`
	PubsubLiteReservationId *string `pulumi:"pubsubLiteReservationId"`
	// The region of the pubsub lite reservation.
	Region *string `pulumi:"region"`
	// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2
	// MiB/s of subscribed messages.
	ThroughputCapacity *float64                       `pulumi:"throughputCapacity"`
	Timeouts           *PubsubLiteReservationTimeouts `pulumi:"timeouts"`
}

type PubsubLiteReservationState struct {
	// Name of the reservation.
	Name                    pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	PubsubLiteReservationId pulumi.StringPtrInput
	// The region of the pubsub lite reservation.
	Region pulumi.StringPtrInput
	// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2
	// MiB/s of subscribed messages.
	ThroughputCapacity pulumi.Float64PtrInput
	Timeouts           PubsubLiteReservationTimeoutsPtrInput
}

func (PubsubLiteReservationState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubLiteReservationState)(nil)).Elem()
}

type pubsubLiteReservationArgs struct {
	// Name of the reservation.
	Name                    *string `pulumi:"name"`
	Project                 *string `pulumi:"project"`
	PubsubLiteReservationId *string `pulumi:"pubsubLiteReservationId"`
	// The region of the pubsub lite reservation.
	Region *string `pulumi:"region"`
	// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2
	// MiB/s of subscribed messages.
	ThroughputCapacity float64                        `pulumi:"throughputCapacity"`
	Timeouts           *PubsubLiteReservationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a PubsubLiteReservation resource.
type PubsubLiteReservationArgs struct {
	// Name of the reservation.
	Name                    pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	PubsubLiteReservationId pulumi.StringPtrInput
	// The region of the pubsub lite reservation.
	Region pulumi.StringPtrInput
	// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2
	// MiB/s of subscribed messages.
	ThroughputCapacity pulumi.Float64Input
	Timeouts           PubsubLiteReservationTimeoutsPtrInput
}

func (PubsubLiteReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubLiteReservationArgs)(nil)).Elem()
}

type PubsubLiteReservationInput interface {
	pulumi.Input

	ToPubsubLiteReservationOutput() PubsubLiteReservationOutput
	ToPubsubLiteReservationOutputWithContext(ctx context.Context) PubsubLiteReservationOutput
}

func (*PubsubLiteReservation) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubLiteReservation)(nil)).Elem()
}

func (i *PubsubLiteReservation) ToPubsubLiteReservationOutput() PubsubLiteReservationOutput {
	return i.ToPubsubLiteReservationOutputWithContext(context.Background())
}

func (i *PubsubLiteReservation) ToPubsubLiteReservationOutputWithContext(ctx context.Context) PubsubLiteReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubLiteReservationOutput)
}

type PubsubLiteReservationOutput struct{ *pulumi.OutputState }

func (PubsubLiteReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubLiteReservation)(nil)).Elem()
}

func (o PubsubLiteReservationOutput) ToPubsubLiteReservationOutput() PubsubLiteReservationOutput {
	return o
}

func (o PubsubLiteReservationOutput) ToPubsubLiteReservationOutputWithContext(ctx context.Context) PubsubLiteReservationOutput {
	return o
}

// Name of the reservation.
func (o PubsubLiteReservationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubLiteReservation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PubsubLiteReservationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubLiteReservation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubLiteReservationOutput) PubsubLiteReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubLiteReservation) pulumi.StringOutput { return v.PubsubLiteReservationId }).(pulumi.StringOutput)
}

// The region of the pubsub lite reservation.
func (o PubsubLiteReservationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubLiteReservation) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2
// MiB/s of subscribed messages.
func (o PubsubLiteReservationOutput) ThroughputCapacity() pulumi.Float64Output {
	return o.ApplyT(func(v *PubsubLiteReservation) pulumi.Float64Output { return v.ThroughputCapacity }).(pulumi.Float64Output)
}

func (o PubsubLiteReservationOutput) Timeouts() PubsubLiteReservationTimeoutsPtrOutput {
	return o.ApplyT(func(v *PubsubLiteReservation) PubsubLiteReservationTimeoutsPtrOutput { return v.Timeouts }).(PubsubLiteReservationTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubLiteReservationInput)(nil)).Elem(), &PubsubLiteReservation{})
	pulumi.RegisterOutputType(PubsubLiteReservationOutput{})
}
