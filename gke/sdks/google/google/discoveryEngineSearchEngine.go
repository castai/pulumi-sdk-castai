// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DiscoveryEngineSearchEngine struct {
	pulumi.CustomResourceState

	// The collection ID.
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig DiscoveryEngineSearchEngineCommonConfigPtrOutput `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at
	// most one data store.
	DataStoreIds                  pulumi.StringArrayOutput `pulumi:"dataStoreIds"`
	DiscoveryEngineSearchEngineId pulumi.StringOutput      `pulumi:"discoveryEngineSearchEngineId"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Unique ID to use for Search Engine App.
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
	// If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA", "HEALTHCARE_FHIR"]
	IndustryVertical pulumi.StringPtrOutput `pulumi:"industryVertical"`
	// Location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the search engine. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
	// encoded string with a length limit of 1024 characters.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Configurations for a Search Engine.
	SearchEngineConfig DiscoveryEngineSearchEngineSearchEngineConfigOutput `pulumi:"searchEngineConfig"`
	Timeouts           DiscoveryEngineSearchEngineTimeoutsPtrOutput        `pulumi:"timeouts"`
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDiscoveryEngineSearchEngine registers a new resource with the given unique name, arguments, and options.
func NewDiscoveryEngineSearchEngine(ctx *pulumi.Context,
	name string, args *DiscoveryEngineSearchEngineArgs, opts ...pulumi.ResourceOption) (*DiscoveryEngineSearchEngine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreIds == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreIds'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.SearchEngineConfig == nil {
		return nil, errors.New("invalid value for required argument 'SearchEngineConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DiscoveryEngineSearchEngine
	err = ctx.RegisterPackageResource("google:index/discoveryEngineSearchEngine:DiscoveryEngineSearchEngine", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiscoveryEngineSearchEngine gets an existing DiscoveryEngineSearchEngine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiscoveryEngineSearchEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiscoveryEngineSearchEngineState, opts ...pulumi.ResourceOption) (*DiscoveryEngineSearchEngine, error) {
	var resource DiscoveryEngineSearchEngine
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/discoveryEngineSearchEngine:DiscoveryEngineSearchEngine", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiscoveryEngineSearchEngine resources.
type discoveryEngineSearchEngineState struct {
	// The collection ID.
	CollectionId *string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *DiscoveryEngineSearchEngineCommonConfig `pulumi:"commonConfig"`
	// Timestamp the Engine was created at.
	CreateTime *string `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at
	// most one data store.
	DataStoreIds                  []string `pulumi:"dataStoreIds"`
	DiscoveryEngineSearchEngineId *string  `pulumi:"discoveryEngineSearchEngineId"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName *string `pulumi:"displayName"`
	// Unique ID to use for Search Engine App.
	EngineId *string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
	// If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA", "HEALTHCARE_FHIR"]
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location *string `pulumi:"location"`
	// The unique full resource name of the search engine. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
	// encoded string with a length limit of 1024 characters.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Configurations for a Search Engine.
	SearchEngineConfig *DiscoveryEngineSearchEngineSearchEngineConfig `pulumi:"searchEngineConfig"`
	Timeouts           *DiscoveryEngineSearchEngineTimeouts           `pulumi:"timeouts"`
	// Timestamp the Engine was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DiscoveryEngineSearchEngineState struct {
	// The collection ID.
	CollectionId pulumi.StringPtrInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig DiscoveryEngineSearchEngineCommonConfigPtrInput
	// Timestamp the Engine was created at.
	CreateTime pulumi.StringPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at
	// most one data store.
	DataStoreIds                  pulumi.StringArrayInput
	DiscoveryEngineSearchEngineId pulumi.StringPtrInput
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringPtrInput
	// Unique ID to use for Search Engine App.
	EngineId pulumi.StringPtrInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
	// If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA", "HEALTHCARE_FHIR"]
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringPtrInput
	// The unique full resource name of the search engine. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
	// encoded string with a length limit of 1024 characters.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Configurations for a Search Engine.
	SearchEngineConfig DiscoveryEngineSearchEngineSearchEngineConfigPtrInput
	Timeouts           DiscoveryEngineSearchEngineTimeoutsPtrInput
	// Timestamp the Engine was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (DiscoveryEngineSearchEngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryEngineSearchEngineState)(nil)).Elem()
}

type discoveryEngineSearchEngineArgs struct {
	// The collection ID.
	CollectionId string `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *DiscoveryEngineSearchEngineCommonConfig `pulumi:"commonConfig"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at
	// most one data store.
	DataStoreIds                  []string `pulumi:"dataStoreIds"`
	DiscoveryEngineSearchEngineId *string  `pulumi:"discoveryEngineSearchEngineId"`
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName string `pulumi:"displayName"`
	// Unique ID to use for Search Engine App.
	EngineId string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
	// If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA", "HEALTHCARE_FHIR"]
	IndustryVertical *string `pulumi:"industryVertical"`
	// Location.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Configurations for a Search Engine.
	SearchEngineConfig DiscoveryEngineSearchEngineSearchEngineConfig `pulumi:"searchEngineConfig"`
	Timeouts           *DiscoveryEngineSearchEngineTimeouts          `pulumi:"timeouts"`
}

// The set of arguments for constructing a DiscoveryEngineSearchEngine resource.
type DiscoveryEngineSearchEngineArgs struct {
	// The collection ID.
	CollectionId pulumi.StringInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig DiscoveryEngineSearchEngineCommonConfigPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at
	// most one data store.
	DataStoreIds                  pulumi.StringArrayInput
	DiscoveryEngineSearchEngineId pulumi.StringPtrInput
	// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringInput
	// Unique ID to use for Search Engine App.
	EngineId pulumi.StringInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
	// If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	// Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA", "HEALTHCARE_FHIR"]
	IndustryVertical pulumi.StringPtrInput
	// Location.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// Configurations for a Search Engine.
	SearchEngineConfig DiscoveryEngineSearchEngineSearchEngineConfigInput
	Timeouts           DiscoveryEngineSearchEngineTimeoutsPtrInput
}

func (DiscoveryEngineSearchEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryEngineSearchEngineArgs)(nil)).Elem()
}

type DiscoveryEngineSearchEngineInput interface {
	pulumi.Input

	ToDiscoveryEngineSearchEngineOutput() DiscoveryEngineSearchEngineOutput
	ToDiscoveryEngineSearchEngineOutputWithContext(ctx context.Context) DiscoveryEngineSearchEngineOutput
}

func (*DiscoveryEngineSearchEngine) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryEngineSearchEngine)(nil)).Elem()
}

func (i *DiscoveryEngineSearchEngine) ToDiscoveryEngineSearchEngineOutput() DiscoveryEngineSearchEngineOutput {
	return i.ToDiscoveryEngineSearchEngineOutputWithContext(context.Background())
}

func (i *DiscoveryEngineSearchEngine) ToDiscoveryEngineSearchEngineOutputWithContext(ctx context.Context) DiscoveryEngineSearchEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryEngineSearchEngineOutput)
}

type DiscoveryEngineSearchEngineOutput struct{ *pulumi.OutputState }

func (DiscoveryEngineSearchEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryEngineSearchEngine)(nil)).Elem()
}

func (o DiscoveryEngineSearchEngineOutput) ToDiscoveryEngineSearchEngineOutput() DiscoveryEngineSearchEngineOutput {
	return o
}

func (o DiscoveryEngineSearchEngineOutput) ToDiscoveryEngineSearchEngineOutputWithContext(ctx context.Context) DiscoveryEngineSearchEngineOutput {
	return o
}

// The collection ID.
func (o DiscoveryEngineSearchEngineOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// Common config spec that specifies the metadata of the engine.
func (o DiscoveryEngineSearchEngineOutput) CommonConfig() DiscoveryEngineSearchEngineCommonConfigPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) DiscoveryEngineSearchEngineCommonConfigPtrOutput {
		return v.CommonConfig
	}).(DiscoveryEngineSearchEngineCommonConfigPtrOutput)
}

// Timestamp the Engine was created at.
func (o DiscoveryEngineSearchEngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH type of engines, they can only associate with at
// most one data store.
func (o DiscoveryEngineSearchEngineOutput) DataStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringArrayOutput { return v.DataStoreIds }).(pulumi.StringArrayOutput)
}

func (o DiscoveryEngineSearchEngineOutput) DiscoveryEngineSearchEngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.DiscoveryEngineSearchEngineId }).(pulumi.StringOutput)
}

// Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
func (o DiscoveryEngineSearchEngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Unique ID to use for Search Engine App.
func (o DiscoveryEngineSearchEngineOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore:
// If unspecified, default to GENERIC. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
// Default value: "GENERIC" Possible values: ["GENERIC", "MEDIA", "HEALTHCARE_FHIR"]
func (o DiscoveryEngineSearchEngineOutput) IndustryVertical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringPtrOutput { return v.IndustryVertical }).(pulumi.StringPtrOutput)
}

// Location.
func (o DiscoveryEngineSearchEngineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the search engine. Values are of the format
// 'projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}'. This field must be a UTF-8
// encoded string with a length limit of 1024 characters.
func (o DiscoveryEngineSearchEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DiscoveryEngineSearchEngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Configurations for a Search Engine.
func (o DiscoveryEngineSearchEngineOutput) SearchEngineConfig() DiscoveryEngineSearchEngineSearchEngineConfigOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) DiscoveryEngineSearchEngineSearchEngineConfigOutput {
		return v.SearchEngineConfig
	}).(DiscoveryEngineSearchEngineSearchEngineConfigOutput)
}

func (o DiscoveryEngineSearchEngineOutput) Timeouts() DiscoveryEngineSearchEngineTimeoutsPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) DiscoveryEngineSearchEngineTimeoutsPtrOutput { return v.Timeouts }).(DiscoveryEngineSearchEngineTimeoutsPtrOutput)
}

// Timestamp the Engine was last updated.
func (o DiscoveryEngineSearchEngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineSearchEngine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryEngineSearchEngineInput)(nil)).Elem(), &DiscoveryEngineSearchEngine{})
	pulumi.RegisterOutputType(DiscoveryEngineSearchEngineOutput{})
}
