// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeSharedVpcServiceProject struct {
	pulumi.CustomResourceState

	ComputeSharedVpcServiceProjectId pulumi.StringOutput `pulumi:"computeSharedVpcServiceProjectId"`
	// The deletion policy for the shared VPC service. Setting ABANDON allows the resource to be abandoned rather than deleted.
	// Possible values are: "ABANDON".
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// The ID of a host project to associate.
	HostProject pulumi.StringOutput `pulumi:"hostProject"`
	// The ID of the project that will serve as a Shared VPC service project.
	ServiceProject pulumi.StringOutput                             `pulumi:"serviceProject"`
	Timeouts       ComputeSharedVpcServiceProjectTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewComputeSharedVpcServiceProject registers a new resource with the given unique name, arguments, and options.
func NewComputeSharedVpcServiceProject(ctx *pulumi.Context,
	name string, args *ComputeSharedVpcServiceProjectArgs, opts ...pulumi.ResourceOption) (*ComputeSharedVpcServiceProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostProject == nil {
		return nil, errors.New("invalid value for required argument 'HostProject'")
	}
	if args.ServiceProject == nil {
		return nil, errors.New("invalid value for required argument 'ServiceProject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeSharedVpcServiceProject
	err = ctx.RegisterPackageResource("google:index/computeSharedVpcServiceProject:ComputeSharedVpcServiceProject", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeSharedVpcServiceProject gets an existing ComputeSharedVpcServiceProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeSharedVpcServiceProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeSharedVpcServiceProjectState, opts ...pulumi.ResourceOption) (*ComputeSharedVpcServiceProject, error) {
	var resource ComputeSharedVpcServiceProject
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeSharedVpcServiceProject:ComputeSharedVpcServiceProject", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeSharedVpcServiceProject resources.
type computeSharedVpcServiceProjectState struct {
	ComputeSharedVpcServiceProjectId *string `pulumi:"computeSharedVpcServiceProjectId"`
	// The deletion policy for the shared VPC service. Setting ABANDON allows the resource to be abandoned rather than deleted.
	// Possible values are: "ABANDON".
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The ID of a host project to associate.
	HostProject *string `pulumi:"hostProject"`
	// The ID of the project that will serve as a Shared VPC service project.
	ServiceProject *string                                 `pulumi:"serviceProject"`
	Timeouts       *ComputeSharedVpcServiceProjectTimeouts `pulumi:"timeouts"`
}

type ComputeSharedVpcServiceProjectState struct {
	ComputeSharedVpcServiceProjectId pulumi.StringPtrInput
	// The deletion policy for the shared VPC service. Setting ABANDON allows the resource to be abandoned rather than deleted.
	// Possible values are: "ABANDON".
	DeletionPolicy pulumi.StringPtrInput
	// The ID of a host project to associate.
	HostProject pulumi.StringPtrInput
	// The ID of the project that will serve as a Shared VPC service project.
	ServiceProject pulumi.StringPtrInput
	Timeouts       ComputeSharedVpcServiceProjectTimeoutsPtrInput
}

func (ComputeSharedVpcServiceProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSharedVpcServiceProjectState)(nil)).Elem()
}

type computeSharedVpcServiceProjectArgs struct {
	ComputeSharedVpcServiceProjectId *string `pulumi:"computeSharedVpcServiceProjectId"`
	// The deletion policy for the shared VPC service. Setting ABANDON allows the resource to be abandoned rather than deleted.
	// Possible values are: "ABANDON".
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The ID of a host project to associate.
	HostProject string `pulumi:"hostProject"`
	// The ID of the project that will serve as a Shared VPC service project.
	ServiceProject string                                  `pulumi:"serviceProject"`
	Timeouts       *ComputeSharedVpcServiceProjectTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeSharedVpcServiceProject resource.
type ComputeSharedVpcServiceProjectArgs struct {
	ComputeSharedVpcServiceProjectId pulumi.StringPtrInput
	// The deletion policy for the shared VPC service. Setting ABANDON allows the resource to be abandoned rather than deleted.
	// Possible values are: "ABANDON".
	DeletionPolicy pulumi.StringPtrInput
	// The ID of a host project to associate.
	HostProject pulumi.StringInput
	// The ID of the project that will serve as a Shared VPC service project.
	ServiceProject pulumi.StringInput
	Timeouts       ComputeSharedVpcServiceProjectTimeoutsPtrInput
}

func (ComputeSharedVpcServiceProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSharedVpcServiceProjectArgs)(nil)).Elem()
}

type ComputeSharedVpcServiceProjectInput interface {
	pulumi.Input

	ToComputeSharedVpcServiceProjectOutput() ComputeSharedVpcServiceProjectOutput
	ToComputeSharedVpcServiceProjectOutputWithContext(ctx context.Context) ComputeSharedVpcServiceProjectOutput
}

func (*ComputeSharedVpcServiceProject) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSharedVpcServiceProject)(nil)).Elem()
}

func (i *ComputeSharedVpcServiceProject) ToComputeSharedVpcServiceProjectOutput() ComputeSharedVpcServiceProjectOutput {
	return i.ToComputeSharedVpcServiceProjectOutputWithContext(context.Background())
}

func (i *ComputeSharedVpcServiceProject) ToComputeSharedVpcServiceProjectOutputWithContext(ctx context.Context) ComputeSharedVpcServiceProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSharedVpcServiceProjectOutput)
}

type ComputeSharedVpcServiceProjectOutput struct{ *pulumi.OutputState }

func (ComputeSharedVpcServiceProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSharedVpcServiceProject)(nil)).Elem()
}

func (o ComputeSharedVpcServiceProjectOutput) ToComputeSharedVpcServiceProjectOutput() ComputeSharedVpcServiceProjectOutput {
	return o
}

func (o ComputeSharedVpcServiceProjectOutput) ToComputeSharedVpcServiceProjectOutputWithContext(ctx context.Context) ComputeSharedVpcServiceProjectOutput {
	return o
}

func (o ComputeSharedVpcServiceProjectOutput) ComputeSharedVpcServiceProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSharedVpcServiceProject) pulumi.StringOutput { return v.ComputeSharedVpcServiceProjectId }).(pulumi.StringOutput)
}

// The deletion policy for the shared VPC service. Setting ABANDON allows the resource to be abandoned rather than deleted.
// Possible values are: "ABANDON".
func (o ComputeSharedVpcServiceProjectOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeSharedVpcServiceProject) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The ID of a host project to associate.
func (o ComputeSharedVpcServiceProjectOutput) HostProject() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSharedVpcServiceProject) pulumi.StringOutput { return v.HostProject }).(pulumi.StringOutput)
}

// The ID of the project that will serve as a Shared VPC service project.
func (o ComputeSharedVpcServiceProjectOutput) ServiceProject() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSharedVpcServiceProject) pulumi.StringOutput { return v.ServiceProject }).(pulumi.StringOutput)
}

func (o ComputeSharedVpcServiceProjectOutput) Timeouts() ComputeSharedVpcServiceProjectTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeSharedVpcServiceProject) ComputeSharedVpcServiceProjectTimeoutsPtrOutput {
		return v.Timeouts
	}).(ComputeSharedVpcServiceProjectTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSharedVpcServiceProjectInput)(nil)).Elem(), &ComputeSharedVpcServiceProject{})
	pulumi.RegisterOutputType(ComputeSharedVpcServiceProjectOutput{})
}
