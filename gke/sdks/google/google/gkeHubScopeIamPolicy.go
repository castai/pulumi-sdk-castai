// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeHubScopeIamPolicy struct {
	pulumi.CustomResourceState

	Etag                   pulumi.StringOutput `pulumi:"etag"`
	GkeHubScopeIamPolicyId pulumi.StringOutput `pulumi:"gkeHubScopeIamPolicyId"`
	PolicyData             pulumi.StringOutput `pulumi:"policyData"`
	Project                pulumi.StringOutput `pulumi:"project"`
	ScopeId                pulumi.StringOutput `pulumi:"scopeId"`
}

// NewGkeHubScopeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewGkeHubScopeIamPolicy(ctx *pulumi.Context,
	name string, args *GkeHubScopeIamPolicyArgs, opts ...pulumi.ResourceOption) (*GkeHubScopeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeHubScopeIamPolicy
	err = ctx.RegisterPackageResource("google:index/gkeHubScopeIamPolicy:GkeHubScopeIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeHubScopeIamPolicy gets an existing GkeHubScopeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeHubScopeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeHubScopeIamPolicyState, opts ...pulumi.ResourceOption) (*GkeHubScopeIamPolicy, error) {
	var resource GkeHubScopeIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/gkeHubScopeIamPolicy:GkeHubScopeIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeHubScopeIamPolicy resources.
type gkeHubScopeIamPolicyState struct {
	Etag                   *string `pulumi:"etag"`
	GkeHubScopeIamPolicyId *string `pulumi:"gkeHubScopeIamPolicyId"`
	PolicyData             *string `pulumi:"policyData"`
	Project                *string `pulumi:"project"`
	ScopeId                *string `pulumi:"scopeId"`
}

type GkeHubScopeIamPolicyState struct {
	Etag                   pulumi.StringPtrInput
	GkeHubScopeIamPolicyId pulumi.StringPtrInput
	PolicyData             pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	ScopeId                pulumi.StringPtrInput
}

func (GkeHubScopeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubScopeIamPolicyState)(nil)).Elem()
}

type gkeHubScopeIamPolicyArgs struct {
	GkeHubScopeIamPolicyId *string `pulumi:"gkeHubScopeIamPolicyId"`
	PolicyData             string  `pulumi:"policyData"`
	Project                *string `pulumi:"project"`
	ScopeId                string  `pulumi:"scopeId"`
}

// The set of arguments for constructing a GkeHubScopeIamPolicy resource.
type GkeHubScopeIamPolicyArgs struct {
	GkeHubScopeIamPolicyId pulumi.StringPtrInput
	PolicyData             pulumi.StringInput
	Project                pulumi.StringPtrInput
	ScopeId                pulumi.StringInput
}

func (GkeHubScopeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubScopeIamPolicyArgs)(nil)).Elem()
}

type GkeHubScopeIamPolicyInput interface {
	pulumi.Input

	ToGkeHubScopeIamPolicyOutput() GkeHubScopeIamPolicyOutput
	ToGkeHubScopeIamPolicyOutputWithContext(ctx context.Context) GkeHubScopeIamPolicyOutput
}

func (*GkeHubScopeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubScopeIamPolicy)(nil)).Elem()
}

func (i *GkeHubScopeIamPolicy) ToGkeHubScopeIamPolicyOutput() GkeHubScopeIamPolicyOutput {
	return i.ToGkeHubScopeIamPolicyOutputWithContext(context.Background())
}

func (i *GkeHubScopeIamPolicy) ToGkeHubScopeIamPolicyOutputWithContext(ctx context.Context) GkeHubScopeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeHubScopeIamPolicyOutput)
}

type GkeHubScopeIamPolicyOutput struct{ *pulumi.OutputState }

func (GkeHubScopeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubScopeIamPolicy)(nil)).Elem()
}

func (o GkeHubScopeIamPolicyOutput) ToGkeHubScopeIamPolicyOutput() GkeHubScopeIamPolicyOutput {
	return o
}

func (o GkeHubScopeIamPolicyOutput) ToGkeHubScopeIamPolicyOutputWithContext(ctx context.Context) GkeHubScopeIamPolicyOutput {
	return o
}

func (o GkeHubScopeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GkeHubScopeIamPolicyOutput) GkeHubScopeIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeIamPolicy) pulumi.StringOutput { return v.GkeHubScopeIamPolicyId }).(pulumi.StringOutput)
}

func (o GkeHubScopeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o GkeHubScopeIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o GkeHubScopeIamPolicyOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeIamPolicy) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeHubScopeIamPolicyInput)(nil)).Elem(), &GkeHubScopeIamPolicy{})
	pulumi.RegisterOutputType(GkeHubScopeIamPolicyOutput{})
}
