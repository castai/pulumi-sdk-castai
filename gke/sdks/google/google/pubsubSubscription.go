// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubSubscription struct {
	pulumi.CustomResourceState

	// This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the
	// message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an
	// outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions,
	// this value is used as the initial value for the ack deadline. To override this value for a given message, call
	// subscriptions.modifyAckDeadline with the corresponding ackId if using pull. The minimum custom deadline you can specify
	// is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a
	// default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call
	// to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the
	// message.
	AckDeadlineSeconds pulumi.Float64Output `pulumi:"ackDeadlineSeconds"`
	// If delivery to BigQuery is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	BigqueryConfig PubsubSubscriptionBigqueryConfigPtrOutput `pulumi:"bigqueryConfig"`
	// If delivery to Cloud Storage is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	CloudStorageConfig PubsubSubscriptionCloudStorageConfigPtrOutput `pulumi:"cloudStorageConfig"`
	// A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not
	// set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscription's parent project
	// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on
	// this subscription.
	DeadLetterPolicy PubsubSubscriptionDeadLetterPolicyPtrOutput `pulumi:"deadLetterPolicy"`
	EffectiveLabels  pulumi.StringMapOutput                      `pulumi:"effectiveLabels"`
	// If 'true', Pub/Sub provides the following guarantees for the delivery of a message with a given value of messageId on
	// this Subscriptions': - The message sent to a subscriber is guaranteed not to be resent before the message's
	// acknowledgement deadline expires. - An acknowledged message will not be resent to a subscriber. Note that subscribers
	// may still receive multiple copies of a message when 'enable_exactly_once_delivery' is true if the message was published
	// multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
	EnableExactlyOnceDelivery pulumi.BoolPtrOutput `pulumi:"enableExactlyOnceDelivery"`
	// If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to the subscribers in the
	// order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
	EnableMessageOrdering pulumi.BoolPtrOutput `pulumi:"enableMessageOrdering"`
	// A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long
	// as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the
	// subscription. If expirationPolicy is not set, a default policy with ttl of 31 days will be used. If it is set but ttl is
	// "", the resource never expires. The minimum allowed value for expirationPolicy.ttl is 1 day.
	ExpirationPolicy PubsubSubscriptionExpirationPolicyPtrOutput `pulumi:"expirationPolicy"`
	// The subscription only delivers the messages that match the filter. Pub/Sub automatically acknowledges the messages that
	// don't match the filter. You can filter messages by their attributes. The maximum length of a filter is 256 bytes. After
	// creating the subscription, you can't modify the filter.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// A set of key/value label pairs to assign to this Subscription. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If
	// retain_acked_messages is true, then this also configures the retention of acknowledged messages, and thus configures how
	// far back in time a subscriptions.seek can be done. Defaults to 7 days. Cannot be more than 31 days ('"2678400s"') or
	// less than 10 minutes ('"600s"'). A duration in seconds with up to nine fractional digits, terminated by 's'. Example:
	// '"600.5s"'.
	MessageRetentionDuration pulumi.StringPtrOutput `pulumi:"messageRetentionDuration"`
	// Name of the subscription.
	Name                 pulumi.StringOutput `pulumi:"name"`
	Project              pulumi.StringOutput `pulumi:"project"`
	PubsubSubscriptionId pulumi.StringOutput `pulumi:"pubsubSubscriptionId"`
	// If push delivery is used with this subscription, this field is used to configure it. An empty pushConfig signifies that
	// the subscriber will pull and ack messages using API methods.
	PushConfig PubsubSubscriptionPushConfigPtrOutput `pulumi:"pushConfig"`
	// Indicates whether to retain acknowledged messages. If 'true', then messages are not expunged from the subscription's
	// backlog, even if they are acknowledged, until they fall out of the messageRetentionDuration window.
	RetainAckedMessages pulumi.BoolPtrOutput `pulumi:"retainAckedMessages"`
	// A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy
	// is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
	// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
	RetryPolicy PubsubSubscriptionRetryPolicyPtrOutput `pulumi:"retryPolicy"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput              `pulumi:"terraformLabels"`
	Timeouts        PubsubSubscriptionTimeoutsPtrOutput `pulumi:"timeouts"`
	// A reference to a Topic resource, of the form projects/{project}/topics/{{name}} (as in the id property of a
	// google_pubsub_topic), or just a topic name if the topic is in the same project as the subscription.
	Topic pulumi.StringOutput `pulumi:"topic"`
}

// NewPubsubSubscription registers a new resource with the given unique name, arguments, and options.
func NewPubsubSubscription(ctx *pulumi.Context,
	name string, args *PubsubSubscriptionArgs, opts ...pulumi.ResourceOption) (*PubsubSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubSubscription
	err = ctx.RegisterPackageResource("google:index/pubsubSubscription:PubsubSubscription", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubSubscription gets an existing PubsubSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubSubscriptionState, opts ...pulumi.ResourceOption) (*PubsubSubscription, error) {
	var resource PubsubSubscription
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/pubsubSubscription:PubsubSubscription", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubSubscription resources.
type pubsubSubscriptionState struct {
	// This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the
	// message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an
	// outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions,
	// this value is used as the initial value for the ack deadline. To override this value for a given message, call
	// subscriptions.modifyAckDeadline with the corresponding ackId if using pull. The minimum custom deadline you can specify
	// is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a
	// default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call
	// to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the
	// message.
	AckDeadlineSeconds *float64 `pulumi:"ackDeadlineSeconds"`
	// If delivery to BigQuery is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	BigqueryConfig *PubsubSubscriptionBigqueryConfig `pulumi:"bigqueryConfig"`
	// If delivery to Cloud Storage is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	CloudStorageConfig *PubsubSubscriptionCloudStorageConfig `pulumi:"cloudStorageConfig"`
	// A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not
	// set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscription's parent project
	// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on
	// this subscription.
	DeadLetterPolicy *PubsubSubscriptionDeadLetterPolicy `pulumi:"deadLetterPolicy"`
	EffectiveLabels  map[string]string                   `pulumi:"effectiveLabels"`
	// If 'true', Pub/Sub provides the following guarantees for the delivery of a message with a given value of messageId on
	// this Subscriptions': - The message sent to a subscriber is guaranteed not to be resent before the message's
	// acknowledgement deadline expires. - An acknowledged message will not be resent to a subscriber. Note that subscribers
	// may still receive multiple copies of a message when 'enable_exactly_once_delivery' is true if the message was published
	// multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
	EnableExactlyOnceDelivery *bool `pulumi:"enableExactlyOnceDelivery"`
	// If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to the subscribers in the
	// order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
	EnableMessageOrdering *bool `pulumi:"enableMessageOrdering"`
	// A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long
	// as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the
	// subscription. If expirationPolicy is not set, a default policy with ttl of 31 days will be used. If it is set but ttl is
	// "", the resource never expires. The minimum allowed value for expirationPolicy.ttl is 1 day.
	ExpirationPolicy *PubsubSubscriptionExpirationPolicy `pulumi:"expirationPolicy"`
	// The subscription only delivers the messages that match the filter. Pub/Sub automatically acknowledges the messages that
	// don't match the filter. You can filter messages by their attributes. The maximum length of a filter is 256 bytes. After
	// creating the subscription, you can't modify the filter.
	Filter *string `pulumi:"filter"`
	// A set of key/value label pairs to assign to this Subscription. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If
	// retain_acked_messages is true, then this also configures the retention of acknowledged messages, and thus configures how
	// far back in time a subscriptions.seek can be done. Defaults to 7 days. Cannot be more than 31 days ('"2678400s"') or
	// less than 10 minutes ('"600s"'). A duration in seconds with up to nine fractional digits, terminated by 's'. Example:
	// '"600.5s"'.
	MessageRetentionDuration *string `pulumi:"messageRetentionDuration"`
	// Name of the subscription.
	Name                 *string `pulumi:"name"`
	Project              *string `pulumi:"project"`
	PubsubSubscriptionId *string `pulumi:"pubsubSubscriptionId"`
	// If push delivery is used with this subscription, this field is used to configure it. An empty pushConfig signifies that
	// the subscriber will pull and ack messages using API methods.
	PushConfig *PubsubSubscriptionPushConfig `pulumi:"pushConfig"`
	// Indicates whether to retain acknowledged messages. If 'true', then messages are not expunged from the subscription's
	// backlog, even if they are acknowledged, until they fall out of the messageRetentionDuration window.
	RetainAckedMessages *bool `pulumi:"retainAckedMessages"`
	// A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy
	// is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
	// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
	RetryPolicy *PubsubSubscriptionRetryPolicy `pulumi:"retryPolicy"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string           `pulumi:"terraformLabels"`
	Timeouts        *PubsubSubscriptionTimeouts `pulumi:"timeouts"`
	// A reference to a Topic resource, of the form projects/{project}/topics/{{name}} (as in the id property of a
	// google_pubsub_topic), or just a topic name if the topic is in the same project as the subscription.
	Topic *string `pulumi:"topic"`
}

type PubsubSubscriptionState struct {
	// This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the
	// message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an
	// outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions,
	// this value is used as the initial value for the ack deadline. To override this value for a given message, call
	// subscriptions.modifyAckDeadline with the corresponding ackId if using pull. The minimum custom deadline you can specify
	// is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a
	// default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call
	// to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the
	// message.
	AckDeadlineSeconds pulumi.Float64PtrInput
	// If delivery to BigQuery is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	BigqueryConfig PubsubSubscriptionBigqueryConfigPtrInput
	// If delivery to Cloud Storage is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	CloudStorageConfig PubsubSubscriptionCloudStorageConfigPtrInput
	// A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not
	// set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscription's parent project
	// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on
	// this subscription.
	DeadLetterPolicy PubsubSubscriptionDeadLetterPolicyPtrInput
	EffectiveLabels  pulumi.StringMapInput
	// If 'true', Pub/Sub provides the following guarantees for the delivery of a message with a given value of messageId on
	// this Subscriptions': - The message sent to a subscriber is guaranteed not to be resent before the message's
	// acknowledgement deadline expires. - An acknowledged message will not be resent to a subscriber. Note that subscribers
	// may still receive multiple copies of a message when 'enable_exactly_once_delivery' is true if the message was published
	// multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
	EnableExactlyOnceDelivery pulumi.BoolPtrInput
	// If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to the subscribers in the
	// order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
	EnableMessageOrdering pulumi.BoolPtrInput
	// A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long
	// as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the
	// subscription. If expirationPolicy is not set, a default policy with ttl of 31 days will be used. If it is set but ttl is
	// "", the resource never expires. The minimum allowed value for expirationPolicy.ttl is 1 day.
	ExpirationPolicy PubsubSubscriptionExpirationPolicyPtrInput
	// The subscription only delivers the messages that match the filter. Pub/Sub automatically acknowledges the messages that
	// don't match the filter. You can filter messages by their attributes. The maximum length of a filter is 256 bytes. After
	// creating the subscription, you can't modify the filter.
	Filter pulumi.StringPtrInput
	// A set of key/value label pairs to assign to this Subscription. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If
	// retain_acked_messages is true, then this also configures the retention of acknowledged messages, and thus configures how
	// far back in time a subscriptions.seek can be done. Defaults to 7 days. Cannot be more than 31 days ('"2678400s"') or
	// less than 10 minutes ('"600s"'). A duration in seconds with up to nine fractional digits, terminated by 's'. Example:
	// '"600.5s"'.
	MessageRetentionDuration pulumi.StringPtrInput
	// Name of the subscription.
	Name                 pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	PubsubSubscriptionId pulumi.StringPtrInput
	// If push delivery is used with this subscription, this field is used to configure it. An empty pushConfig signifies that
	// the subscriber will pull and ack messages using API methods.
	PushConfig PubsubSubscriptionPushConfigPtrInput
	// Indicates whether to retain acknowledged messages. If 'true', then messages are not expunged from the subscription's
	// backlog, even if they are acknowledged, until they fall out of the messageRetentionDuration window.
	RetainAckedMessages pulumi.BoolPtrInput
	// A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy
	// is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
	// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
	RetryPolicy PubsubSubscriptionRetryPolicyPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        PubsubSubscriptionTimeoutsPtrInput
	// A reference to a Topic resource, of the form projects/{project}/topics/{{name}} (as in the id property of a
	// google_pubsub_topic), or just a topic name if the topic is in the same project as the subscription.
	Topic pulumi.StringPtrInput
}

func (PubsubSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubSubscriptionState)(nil)).Elem()
}

type pubsubSubscriptionArgs struct {
	// This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the
	// message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an
	// outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions,
	// this value is used as the initial value for the ack deadline. To override this value for a given message, call
	// subscriptions.modifyAckDeadline with the corresponding ackId if using pull. The minimum custom deadline you can specify
	// is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a
	// default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call
	// to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the
	// message.
	AckDeadlineSeconds *float64 `pulumi:"ackDeadlineSeconds"`
	// If delivery to BigQuery is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	BigqueryConfig *PubsubSubscriptionBigqueryConfig `pulumi:"bigqueryConfig"`
	// If delivery to Cloud Storage is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	CloudStorageConfig *PubsubSubscriptionCloudStorageConfig `pulumi:"cloudStorageConfig"`
	// A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not
	// set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscription's parent project
	// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on
	// this subscription.
	DeadLetterPolicy *PubsubSubscriptionDeadLetterPolicy `pulumi:"deadLetterPolicy"`
	// If 'true', Pub/Sub provides the following guarantees for the delivery of a message with a given value of messageId on
	// this Subscriptions': - The message sent to a subscriber is guaranteed not to be resent before the message's
	// acknowledgement deadline expires. - An acknowledged message will not be resent to a subscriber. Note that subscribers
	// may still receive multiple copies of a message when 'enable_exactly_once_delivery' is true if the message was published
	// multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
	EnableExactlyOnceDelivery *bool `pulumi:"enableExactlyOnceDelivery"`
	// If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to the subscribers in the
	// order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
	EnableMessageOrdering *bool `pulumi:"enableMessageOrdering"`
	// A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long
	// as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the
	// subscription. If expirationPolicy is not set, a default policy with ttl of 31 days will be used. If it is set but ttl is
	// "", the resource never expires. The minimum allowed value for expirationPolicy.ttl is 1 day.
	ExpirationPolicy *PubsubSubscriptionExpirationPolicy `pulumi:"expirationPolicy"`
	// The subscription only delivers the messages that match the filter. Pub/Sub automatically acknowledges the messages that
	// don't match the filter. You can filter messages by their attributes. The maximum length of a filter is 256 bytes. After
	// creating the subscription, you can't modify the filter.
	Filter *string `pulumi:"filter"`
	// A set of key/value label pairs to assign to this Subscription. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If
	// retain_acked_messages is true, then this also configures the retention of acknowledged messages, and thus configures how
	// far back in time a subscriptions.seek can be done. Defaults to 7 days. Cannot be more than 31 days ('"2678400s"') or
	// less than 10 minutes ('"600s"'). A duration in seconds with up to nine fractional digits, terminated by 's'. Example:
	// '"600.5s"'.
	MessageRetentionDuration *string `pulumi:"messageRetentionDuration"`
	// Name of the subscription.
	Name                 *string `pulumi:"name"`
	Project              *string `pulumi:"project"`
	PubsubSubscriptionId *string `pulumi:"pubsubSubscriptionId"`
	// If push delivery is used with this subscription, this field is used to configure it. An empty pushConfig signifies that
	// the subscriber will pull and ack messages using API methods.
	PushConfig *PubsubSubscriptionPushConfig `pulumi:"pushConfig"`
	// Indicates whether to retain acknowledged messages. If 'true', then messages are not expunged from the subscription's
	// backlog, even if they are acknowledged, until they fall out of the messageRetentionDuration window.
	RetainAckedMessages *bool `pulumi:"retainAckedMessages"`
	// A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy
	// is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
	// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
	RetryPolicy *PubsubSubscriptionRetryPolicy `pulumi:"retryPolicy"`
	Timeouts    *PubsubSubscriptionTimeouts    `pulumi:"timeouts"`
	// A reference to a Topic resource, of the form projects/{project}/topics/{{name}} (as in the id property of a
	// google_pubsub_topic), or just a topic name if the topic is in the same project as the subscription.
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a PubsubSubscription resource.
type PubsubSubscriptionArgs struct {
	// This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the
	// message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an
	// outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions,
	// this value is used as the initial value for the ack deadline. To override this value for a given message, call
	// subscriptions.modifyAckDeadline with the corresponding ackId if using pull. The minimum custom deadline you can specify
	// is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a
	// default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call
	// to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the
	// message.
	AckDeadlineSeconds pulumi.Float64PtrInput
	// If delivery to BigQuery is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	BigqueryConfig PubsubSubscriptionBigqueryConfigPtrInput
	// If delivery to Cloud Storage is used with this subscription, this field is used to configure it. Either pushConfig,
	// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
	// and ack messages using API methods.
	CloudStorageConfig PubsubSubscriptionCloudStorageConfigPtrInput
	// A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not
	// set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscription's parent project
	// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on
	// this subscription.
	DeadLetterPolicy PubsubSubscriptionDeadLetterPolicyPtrInput
	// If 'true', Pub/Sub provides the following guarantees for the delivery of a message with a given value of messageId on
	// this Subscriptions': - The message sent to a subscriber is guaranteed not to be resent before the message's
	// acknowledgement deadline expires. - An acknowledged message will not be resent to a subscriber. Note that subscribers
	// may still receive multiple copies of a message when 'enable_exactly_once_delivery' is true if the message was published
	// multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
	EnableExactlyOnceDelivery pulumi.BoolPtrInput
	// If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to the subscribers in the
	// order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
	EnableMessageOrdering pulumi.BoolPtrInput
	// A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long
	// as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the
	// subscription. If expirationPolicy is not set, a default policy with ttl of 31 days will be used. If it is set but ttl is
	// "", the resource never expires. The minimum allowed value for expirationPolicy.ttl is 1 day.
	ExpirationPolicy PubsubSubscriptionExpirationPolicyPtrInput
	// The subscription only delivers the messages that match the filter. Pub/Sub automatically acknowledges the messages that
	// don't match the filter. You can filter messages by their attributes. The maximum length of a filter is 256 bytes. After
	// creating the subscription, you can't modify the filter.
	Filter pulumi.StringPtrInput
	// A set of key/value label pairs to assign to this Subscription. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If
	// retain_acked_messages is true, then this also configures the retention of acknowledged messages, and thus configures how
	// far back in time a subscriptions.seek can be done. Defaults to 7 days. Cannot be more than 31 days ('"2678400s"') or
	// less than 10 minutes ('"600s"'). A duration in seconds with up to nine fractional digits, terminated by 's'. Example:
	// '"600.5s"'.
	MessageRetentionDuration pulumi.StringPtrInput
	// Name of the subscription.
	Name                 pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	PubsubSubscriptionId pulumi.StringPtrInput
	// If push delivery is used with this subscription, this field is used to configure it. An empty pushConfig signifies that
	// the subscriber will pull and ack messages using API methods.
	PushConfig PubsubSubscriptionPushConfigPtrInput
	// Indicates whether to retain acknowledged messages. If 'true', then messages are not expunged from the subscription's
	// backlog, even if they are acknowledged, until they fall out of the messageRetentionDuration window.
	RetainAckedMessages pulumi.BoolPtrInput
	// A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy
	// is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
	// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
	RetryPolicy PubsubSubscriptionRetryPolicyPtrInput
	Timeouts    PubsubSubscriptionTimeoutsPtrInput
	// A reference to a Topic resource, of the form projects/{project}/topics/{{name}} (as in the id property of a
	// google_pubsub_topic), or just a topic name if the topic is in the same project as the subscription.
	Topic pulumi.StringInput
}

func (PubsubSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubSubscriptionArgs)(nil)).Elem()
}

type PubsubSubscriptionInput interface {
	pulumi.Input

	ToPubsubSubscriptionOutput() PubsubSubscriptionOutput
	ToPubsubSubscriptionOutputWithContext(ctx context.Context) PubsubSubscriptionOutput
}

func (*PubsubSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubSubscription)(nil)).Elem()
}

func (i *PubsubSubscription) ToPubsubSubscriptionOutput() PubsubSubscriptionOutput {
	return i.ToPubsubSubscriptionOutputWithContext(context.Background())
}

func (i *PubsubSubscription) ToPubsubSubscriptionOutputWithContext(ctx context.Context) PubsubSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubSubscriptionOutput)
}

type PubsubSubscriptionOutput struct{ *pulumi.OutputState }

func (PubsubSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubSubscription)(nil)).Elem()
}

func (o PubsubSubscriptionOutput) ToPubsubSubscriptionOutput() PubsubSubscriptionOutput {
	return o
}

func (o PubsubSubscriptionOutput) ToPubsubSubscriptionOutputWithContext(ctx context.Context) PubsubSubscriptionOutput {
	return o
}

// This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the
// message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an
// outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions,
// this value is used as the initial value for the ack deadline. To override this value for a given message, call
// subscriptions.modifyAckDeadline with the corresponding ackId if using pull. The minimum custom deadline you can specify
// is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a
// default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call
// to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the
// message.
func (o PubsubSubscriptionOutput) AckDeadlineSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.Float64Output { return v.AckDeadlineSeconds }).(pulumi.Float64Output)
}

// If delivery to BigQuery is used with this subscription, this field is used to configure it. Either pushConfig,
// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
// and ack messages using API methods.
func (o PubsubSubscriptionOutput) BigqueryConfig() PubsubSubscriptionBigqueryConfigPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionBigqueryConfigPtrOutput { return v.BigqueryConfig }).(PubsubSubscriptionBigqueryConfigPtrOutput)
}

// If delivery to Cloud Storage is used with this subscription, this field is used to configure it. Either pushConfig,
// bigQueryConfig or cloudStorageConfig can be set, but not combined. If all three are empty, then the subscriber will pull
// and ack messages using API methods.
func (o PubsubSubscriptionOutput) CloudStorageConfig() PubsubSubscriptionCloudStorageConfigPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionCloudStorageConfigPtrOutput { return v.CloudStorageConfig }).(PubsubSubscriptionCloudStorageConfigPtrOutput)
}

// A policy that specifies the conditions for dead lettering messages in this subscription. If dead_letter_policy is not
// set, dead lettering is disabled. The Cloud Pub/Sub service account associated with this subscription's parent project
// (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Acknowledge() messages on
// this subscription.
func (o PubsubSubscriptionOutput) DeadLetterPolicy() PubsubSubscriptionDeadLetterPolicyPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionDeadLetterPolicyPtrOutput { return v.DeadLetterPolicy }).(PubsubSubscriptionDeadLetterPolicyPtrOutput)
}

func (o PubsubSubscriptionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// If 'true', Pub/Sub provides the following guarantees for the delivery of a message with a given value of messageId on
// this Subscriptions': - The message sent to a subscriber is guaranteed not to be resent before the message's
// acknowledgement deadline expires. - An acknowledged message will not be resent to a subscriber. Note that subscribers
// may still receive multiple copies of a message when 'enable_exactly_once_delivery' is true if the message was published
// multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
func (o PubsubSubscriptionOutput) EnableExactlyOnceDelivery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.BoolPtrOutput { return v.EnableExactlyOnceDelivery }).(pulumi.BoolPtrOutput)
}

// If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to the subscribers in the
// order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.
func (o PubsubSubscriptionOutput) EnableMessageOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.BoolPtrOutput { return v.EnableMessageOrdering }).(pulumi.BoolPtrOutput)
}

// A policy that specifies the conditions for this subscription's expiration. A subscription is considered active as long
// as any connected subscriber is successfully consuming messages from the subscription or is issuing operations on the
// subscription. If expirationPolicy is not set, a default policy with ttl of 31 days will be used. If it is set but ttl is
// "", the resource never expires. The minimum allowed value for expirationPolicy.ttl is 1 day.
func (o PubsubSubscriptionOutput) ExpirationPolicy() PubsubSubscriptionExpirationPolicyPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionExpirationPolicyPtrOutput { return v.ExpirationPolicy }).(PubsubSubscriptionExpirationPolicyPtrOutput)
}

// The subscription only delivers the messages that match the filter. Pub/Sub automatically acknowledges the messages that
// don't match the filter. You can filter messages by their attributes. The maximum length of a filter is 256 bytes. After
// creating the subscription, you can't modify the filter.
func (o PubsubSubscriptionOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// A set of key/value label pairs to assign to this Subscription. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o PubsubSubscriptionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If
// retain_acked_messages is true, then this also configures the retention of acknowledged messages, and thus configures how
// far back in time a subscriptions.seek can be done. Defaults to 7 days. Cannot be more than 31 days ('"2678400s"') or
// less than 10 minutes ('"600s"'). A duration in seconds with up to nine fractional digits, terminated by 's'. Example:
// '"600.5s"'.
func (o PubsubSubscriptionOutput) MessageRetentionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringPtrOutput { return v.MessageRetentionDuration }).(pulumi.StringPtrOutput)
}

// Name of the subscription.
func (o PubsubSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PubsubSubscriptionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubSubscriptionOutput) PubsubSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringOutput { return v.PubsubSubscriptionId }).(pulumi.StringOutput)
}

// If push delivery is used with this subscription, this field is used to configure it. An empty pushConfig signifies that
// the subscriber will pull and ack messages using API methods.
func (o PubsubSubscriptionOutput) PushConfig() PubsubSubscriptionPushConfigPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionPushConfigPtrOutput { return v.PushConfig }).(PubsubSubscriptionPushConfigPtrOutput)
}

// Indicates whether to retain acknowledged messages. If 'true', then messages are not expunged from the subscription's
// backlog, even if they are acknowledged, until they fall out of the messageRetentionDuration window.
func (o PubsubSubscriptionOutput) RetainAckedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.BoolPtrOutput { return v.RetainAckedMessages }).(pulumi.BoolPtrOutput)
}

// A policy that specifies how Pub/Sub retries message delivery for this subscription. If not set, the default retry policy
// is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
func (o PubsubSubscriptionOutput) RetryPolicy() PubsubSubscriptionRetryPolicyPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionRetryPolicyPtrOutput { return v.RetryPolicy }).(PubsubSubscriptionRetryPolicyPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o PubsubSubscriptionOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o PubsubSubscriptionOutput) Timeouts() PubsubSubscriptionTimeoutsPtrOutput {
	return o.ApplyT(func(v *PubsubSubscription) PubsubSubscriptionTimeoutsPtrOutput { return v.Timeouts }).(PubsubSubscriptionTimeoutsPtrOutput)
}

// A reference to a Topic resource, of the form projects/{project}/topics/{{name}} (as in the id property of a
// google_pubsub_topic), or just a topic name if the topic is in the same project as the subscription.
func (o PubsubSubscriptionOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSubscription) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubSubscriptionInput)(nil)).Elem(), &PubsubSubscription{})
	pulumi.RegisterOutputType(PubsubSubscriptionOutput{})
}
