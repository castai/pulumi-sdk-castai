// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoggingLogScope struct {
	pulumi.CustomResourceState

	// Output only. The creation timestamp of the log scopes.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes this log scopes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The location of the resource. The only supported location is global so far.
	Location          pulumi.StringOutput `pulumi:"location"`
	LoggingLogScopeId pulumi.StringOutput `pulumi:"loggingLogScopeId"`
	// The resource name of the log scope. For example: \'projects/my-project/locations/global/logScopes/my-log-scope\'
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the resource.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Names of one or more parent resources : * \'projects/[PROJECT_ID]\' May alternatively be one or more views : *
	// \'projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\' A log scope can include a maximum
	// of 50 projects and a maximum of 100 resources in total.
	ResourceNames pulumi.StringArrayOutput         `pulumi:"resourceNames"`
	Timeouts      LoggingLogScopeTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. The last update timestamp of the log scopes.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewLoggingLogScope registers a new resource with the given unique name, arguments, and options.
func NewLoggingLogScope(ctx *pulumi.Context,
	name string, args *LoggingLogScopeArgs, opts ...pulumi.ResourceOption) (*LoggingLogScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceNames == nil {
		return nil, errors.New("invalid value for required argument 'ResourceNames'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource LoggingLogScope
	err = ctx.RegisterPackageResource("google:index/loggingLogScope:LoggingLogScope", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingLogScope gets an existing LoggingLogScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingLogScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingLogScopeState, opts ...pulumi.ResourceOption) (*LoggingLogScope, error) {
	var resource LoggingLogScope
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/loggingLogScope:LoggingLogScope", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingLogScope resources.
type loggingLogScopeState struct {
	// Output only. The creation timestamp of the log scopes.
	CreateTime *string `pulumi:"createTime"`
	// Describes this log scopes.
	Description *string `pulumi:"description"`
	// The location of the resource. The only supported location is global so far.
	Location          *string `pulumi:"location"`
	LoggingLogScopeId *string `pulumi:"loggingLogScopeId"`
	// The resource name of the log scope. For example: \'projects/my-project/locations/global/logScopes/my-log-scope\'
	Name *string `pulumi:"name"`
	// The parent of the resource.
	Parent *string `pulumi:"parent"`
	// Names of one or more parent resources : * \'projects/[PROJECT_ID]\' May alternatively be one or more views : *
	// \'projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\' A log scope can include a maximum
	// of 50 projects and a maximum of 100 resources in total.
	ResourceNames []string                 `pulumi:"resourceNames"`
	Timeouts      *LoggingLogScopeTimeouts `pulumi:"timeouts"`
	// Output only. The last update timestamp of the log scopes.
	UpdateTime *string `pulumi:"updateTime"`
}

type LoggingLogScopeState struct {
	// Output only. The creation timestamp of the log scopes.
	CreateTime pulumi.StringPtrInput
	// Describes this log scopes.
	Description pulumi.StringPtrInput
	// The location of the resource. The only supported location is global so far.
	Location          pulumi.StringPtrInput
	LoggingLogScopeId pulumi.StringPtrInput
	// The resource name of the log scope. For example: \'projects/my-project/locations/global/logScopes/my-log-scope\'
	Name pulumi.StringPtrInput
	// The parent of the resource.
	Parent pulumi.StringPtrInput
	// Names of one or more parent resources : * \'projects/[PROJECT_ID]\' May alternatively be one or more views : *
	// \'projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\' A log scope can include a maximum
	// of 50 projects and a maximum of 100 resources in total.
	ResourceNames pulumi.StringArrayInput
	Timeouts      LoggingLogScopeTimeoutsPtrInput
	// Output only. The last update timestamp of the log scopes.
	UpdateTime pulumi.StringPtrInput
}

func (LoggingLogScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingLogScopeState)(nil)).Elem()
}

type loggingLogScopeArgs struct {
	// Describes this log scopes.
	Description *string `pulumi:"description"`
	// The location of the resource. The only supported location is global so far.
	Location          *string `pulumi:"location"`
	LoggingLogScopeId *string `pulumi:"loggingLogScopeId"`
	// The resource name of the log scope. For example: \'projects/my-project/locations/global/logScopes/my-log-scope\'
	Name *string `pulumi:"name"`
	// The parent of the resource.
	Parent *string `pulumi:"parent"`
	// Names of one or more parent resources : * \'projects/[PROJECT_ID]\' May alternatively be one or more views : *
	// \'projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\' A log scope can include a maximum
	// of 50 projects and a maximum of 100 resources in total.
	ResourceNames []string                 `pulumi:"resourceNames"`
	Timeouts      *LoggingLogScopeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a LoggingLogScope resource.
type LoggingLogScopeArgs struct {
	// Describes this log scopes.
	Description pulumi.StringPtrInput
	// The location of the resource. The only supported location is global so far.
	Location          pulumi.StringPtrInput
	LoggingLogScopeId pulumi.StringPtrInput
	// The resource name of the log scope. For example: \'projects/my-project/locations/global/logScopes/my-log-scope\'
	Name pulumi.StringPtrInput
	// The parent of the resource.
	Parent pulumi.StringPtrInput
	// Names of one or more parent resources : * \'projects/[PROJECT_ID]\' May alternatively be one or more views : *
	// \'projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\' A log scope can include a maximum
	// of 50 projects and a maximum of 100 resources in total.
	ResourceNames pulumi.StringArrayInput
	Timeouts      LoggingLogScopeTimeoutsPtrInput
}

func (LoggingLogScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingLogScopeArgs)(nil)).Elem()
}

type LoggingLogScopeInput interface {
	pulumi.Input

	ToLoggingLogScopeOutput() LoggingLogScopeOutput
	ToLoggingLogScopeOutputWithContext(ctx context.Context) LoggingLogScopeOutput
}

func (*LoggingLogScope) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingLogScope)(nil)).Elem()
}

func (i *LoggingLogScope) ToLoggingLogScopeOutput() LoggingLogScopeOutput {
	return i.ToLoggingLogScopeOutputWithContext(context.Background())
}

func (i *LoggingLogScope) ToLoggingLogScopeOutputWithContext(ctx context.Context) LoggingLogScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingLogScopeOutput)
}

type LoggingLogScopeOutput struct{ *pulumi.OutputState }

func (LoggingLogScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingLogScope)(nil)).Elem()
}

func (o LoggingLogScopeOutput) ToLoggingLogScopeOutput() LoggingLogScopeOutput {
	return o
}

func (o LoggingLogScopeOutput) ToLoggingLogScopeOutputWithContext(ctx context.Context) LoggingLogScopeOutput {
	return o
}

// Output only. The creation timestamp of the log scopes.
func (o LoggingLogScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Describes this log scopes.
func (o LoggingLogScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The location of the resource. The only supported location is global so far.
func (o LoggingLogScopeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LoggingLogScopeOutput) LoggingLogScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringOutput { return v.LoggingLogScopeId }).(pulumi.StringOutput)
}

// The resource name of the log scope. For example: \'projects/my-project/locations/global/logScopes/my-log-scope\'
func (o LoggingLogScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the resource.
func (o LoggingLogScopeOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Names of one or more parent resources : * \'projects/[PROJECT_ID]\' May alternatively be one or more views : *
// \'projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]\' A log scope can include a maximum
// of 50 projects and a maximum of 100 resources in total.
func (o LoggingLogScopeOutput) ResourceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringArrayOutput { return v.ResourceNames }).(pulumi.StringArrayOutput)
}

func (o LoggingLogScopeOutput) Timeouts() LoggingLogScopeTimeoutsPtrOutput {
	return o.ApplyT(func(v *LoggingLogScope) LoggingLogScopeTimeoutsPtrOutput { return v.Timeouts }).(LoggingLogScopeTimeoutsPtrOutput)
}

// Output only. The last update timestamp of the log scopes.
func (o LoggingLogScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogScope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingLogScopeInput)(nil)).Elem(), &LoggingLogScope{})
	pulumi.RegisterOutputType(LoggingLogScopeOutput{})
}
