// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourcerepoRepositoryIamBinding struct {
	pulumi.CustomResourceState

	Condition                        SourcerepoRepositoryIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                             pulumi.StringOutput                              `pulumi:"etag"`
	Members                          pulumi.StringArrayOutput                         `pulumi:"members"`
	Project                          pulumi.StringOutput                              `pulumi:"project"`
	Repository                       pulumi.StringOutput                              `pulumi:"repository"`
	Role                             pulumi.StringOutput                              `pulumi:"role"`
	SourcerepoRepositoryIamBindingId pulumi.StringOutput                              `pulumi:"sourcerepoRepositoryIamBindingId"`
}

// NewSourcerepoRepositoryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSourcerepoRepositoryIamBinding(ctx *pulumi.Context,
	name string, args *SourcerepoRepositoryIamBindingArgs, opts ...pulumi.ResourceOption) (*SourcerepoRepositoryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SourcerepoRepositoryIamBinding
	err = ctx.RegisterPackageResource("google:index/sourcerepoRepositoryIamBinding:SourcerepoRepositoryIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourcerepoRepositoryIamBinding gets an existing SourcerepoRepositoryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourcerepoRepositoryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourcerepoRepositoryIamBindingState, opts ...pulumi.ResourceOption) (*SourcerepoRepositoryIamBinding, error) {
	var resource SourcerepoRepositoryIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/sourcerepoRepositoryIamBinding:SourcerepoRepositoryIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourcerepoRepositoryIamBinding resources.
type sourcerepoRepositoryIamBindingState struct {
	Condition                        *SourcerepoRepositoryIamBindingCondition `pulumi:"condition"`
	Etag                             *string                                  `pulumi:"etag"`
	Members                          []string                                 `pulumi:"members"`
	Project                          *string                                  `pulumi:"project"`
	Repository                       *string                                  `pulumi:"repository"`
	Role                             *string                                  `pulumi:"role"`
	SourcerepoRepositoryIamBindingId *string                                  `pulumi:"sourcerepoRepositoryIamBindingId"`
}

type SourcerepoRepositoryIamBindingState struct {
	Condition                        SourcerepoRepositoryIamBindingConditionPtrInput
	Etag                             pulumi.StringPtrInput
	Members                          pulumi.StringArrayInput
	Project                          pulumi.StringPtrInput
	Repository                       pulumi.StringPtrInput
	Role                             pulumi.StringPtrInput
	SourcerepoRepositoryIamBindingId pulumi.StringPtrInput
}

func (SourcerepoRepositoryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcerepoRepositoryIamBindingState)(nil)).Elem()
}

type sourcerepoRepositoryIamBindingArgs struct {
	Condition                        *SourcerepoRepositoryIamBindingCondition `pulumi:"condition"`
	Members                          []string                                 `pulumi:"members"`
	Project                          *string                                  `pulumi:"project"`
	Repository                       string                                   `pulumi:"repository"`
	Role                             string                                   `pulumi:"role"`
	SourcerepoRepositoryIamBindingId *string                                  `pulumi:"sourcerepoRepositoryIamBindingId"`
}

// The set of arguments for constructing a SourcerepoRepositoryIamBinding resource.
type SourcerepoRepositoryIamBindingArgs struct {
	Condition                        SourcerepoRepositoryIamBindingConditionPtrInput
	Members                          pulumi.StringArrayInput
	Project                          pulumi.StringPtrInput
	Repository                       pulumi.StringInput
	Role                             pulumi.StringInput
	SourcerepoRepositoryIamBindingId pulumi.StringPtrInput
}

func (SourcerepoRepositoryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcerepoRepositoryIamBindingArgs)(nil)).Elem()
}

type SourcerepoRepositoryIamBindingInput interface {
	pulumi.Input

	ToSourcerepoRepositoryIamBindingOutput() SourcerepoRepositoryIamBindingOutput
	ToSourcerepoRepositoryIamBindingOutputWithContext(ctx context.Context) SourcerepoRepositoryIamBindingOutput
}

func (*SourcerepoRepositoryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcerepoRepositoryIamBinding)(nil)).Elem()
}

func (i *SourcerepoRepositoryIamBinding) ToSourcerepoRepositoryIamBindingOutput() SourcerepoRepositoryIamBindingOutput {
	return i.ToSourcerepoRepositoryIamBindingOutputWithContext(context.Background())
}

func (i *SourcerepoRepositoryIamBinding) ToSourcerepoRepositoryIamBindingOutputWithContext(ctx context.Context) SourcerepoRepositoryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcerepoRepositoryIamBindingOutput)
}

type SourcerepoRepositoryIamBindingOutput struct{ *pulumi.OutputState }

func (SourcerepoRepositoryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcerepoRepositoryIamBinding)(nil)).Elem()
}

func (o SourcerepoRepositoryIamBindingOutput) ToSourcerepoRepositoryIamBindingOutput() SourcerepoRepositoryIamBindingOutput {
	return o
}

func (o SourcerepoRepositoryIamBindingOutput) ToSourcerepoRepositoryIamBindingOutputWithContext(ctx context.Context) SourcerepoRepositoryIamBindingOutput {
	return o
}

func (o SourcerepoRepositoryIamBindingOutput) Condition() SourcerepoRepositoryIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) SourcerepoRepositoryIamBindingConditionPtrOutput {
		return v.Condition
	}).(SourcerepoRepositoryIamBindingConditionPtrOutput)
}

func (o SourcerepoRepositoryIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o SourcerepoRepositoryIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamBindingOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamBindingOutput) SourcerepoRepositoryIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamBinding) pulumi.StringOutput { return v.SourcerepoRepositoryIamBindingId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourcerepoRepositoryIamBindingInput)(nil)).Elem(), &SourcerepoRepositoryIamBinding{})
	pulumi.RegisterOutputType(SourcerepoRepositoryIamBindingOutput{})
}
