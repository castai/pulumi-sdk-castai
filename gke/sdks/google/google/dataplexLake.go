// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataplexLake struct {
	pulumi.CustomResourceState

	// Output only. Aggregated status of the underlying assets of the lake.
	AssetStatuses DataplexLakeAssetStatusArrayOutput `pulumi:"assetStatuses"`
	// Output only. The time when the lake was created.
	CreateTime     pulumi.StringOutput `pulumi:"createTime"`
	DataplexLakeId pulumi.StringOutput `pulumi:"dataplexLakeId"`
	// Optional. Description of the lake.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName     pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. User-defined labels for the lake. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field `effective_labels` for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore DataplexLakeMetastorePtrOutput `pulumi:"metastore"`
	// Output only. Metastore status of the lake.
	MetastoreStatuses DataplexLakeMetastoreStatusArrayOutput `pulumi:"metastoreStatuses"`
	// The name of the lake.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. Service account associated with this lake. This service account must be authorized to access or operate on
	// resources managed by the lake.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
	State pulumi.StringOutput `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput        `pulumi:"terraformLabels"`
	Timeouts        DataplexLakeTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
	// re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The time when the lake was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataplexLake registers a new resource with the given unique name, arguments, and options.
func NewDataplexLake(ctx *pulumi.Context,
	name string, args *DataplexLakeArgs, opts ...pulumi.ResourceOption) (*DataplexLake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataplexLake
	err = ctx.RegisterPackageResource("google:index/dataplexLake:DataplexLake", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataplexLake gets an existing DataplexLake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataplexLake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataplexLakeState, opts ...pulumi.ResourceOption) (*DataplexLake, error) {
	var resource DataplexLake
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/dataplexLake:DataplexLake", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataplexLake resources.
type dataplexLakeState struct {
	// Output only. Aggregated status of the underlying assets of the lake.
	AssetStatuses []DataplexLakeAssetStatus `pulumi:"assetStatuses"`
	// Output only. The time when the lake was created.
	CreateTime     *string `pulumi:"createTime"`
	DataplexLakeId *string `pulumi:"dataplexLakeId"`
	// Optional. Description of the lake.
	Description *string `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. User-defined labels for the lake. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field `effective_labels` for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore *DataplexLakeMetastore `pulumi:"metastore"`
	// Output only. Metastore status of the lake.
	MetastoreStatuses []DataplexLakeMetastoreStatus `pulumi:"metastoreStatuses"`
	// The name of the lake.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. Service account associated with this lake. This service account must be authorized to access or operate on
	// resources managed by the lake.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
	State *string `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string     `pulumi:"terraformLabels"`
	Timeouts        *DataplexLakeTimeouts `pulumi:"timeouts"`
	// Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
	// re-created with the same name.
	Uid *string `pulumi:"uid"`
	// Output only. The time when the lake was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DataplexLakeState struct {
	// Output only. Aggregated status of the underlying assets of the lake.
	AssetStatuses DataplexLakeAssetStatusArrayInput
	// Output only. The time when the lake was created.
	CreateTime     pulumi.StringPtrInput
	DataplexLakeId pulumi.StringPtrInput
	// Optional. Description of the lake.
	Description pulumi.StringPtrInput
	// Optional. User friendly display name.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Optional. User-defined labels for the lake. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field `effective_labels` for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore DataplexLakeMetastorePtrInput
	// Output only. Metastore status of the lake.
	MetastoreStatuses DataplexLakeMetastoreStatusArrayInput
	// The name of the lake.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. Service account associated with this lake. This service account must be authorized to access or operate on
	// resources managed by the lake.
	ServiceAccount pulumi.StringPtrInput
	// Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
	State pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DataplexLakeTimeoutsPtrInput
	// Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
	// re-created with the same name.
	Uid pulumi.StringPtrInput
	// Output only. The time when the lake was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (DataplexLakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataplexLakeState)(nil)).Elem()
}

type dataplexLakeArgs struct {
	DataplexLakeId *string `pulumi:"dataplexLakeId"`
	// Optional. Description of the lake.
	Description *string `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// Optional. User-defined labels for the lake. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field `effective_labels` for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore *DataplexLakeMetastore `pulumi:"metastore"`
	// The name of the lake.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project  *string               `pulumi:"project"`
	Timeouts *DataplexLakeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DataplexLake resource.
type DataplexLakeArgs struct {
	DataplexLakeId pulumi.StringPtrInput
	// Optional. Description of the lake.
	Description pulumi.StringPtrInput
	// Optional. User friendly display name.
	DisplayName pulumi.StringPtrInput
	// Optional. User-defined labels for the lake. **Note**: This field is non-authoritative, and will only manage the labels
	// present in your configuration. Please refer to the field `effective_labels` for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringInput
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore DataplexLakeMetastorePtrInput
	// The name of the lake.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project  pulumi.StringPtrInput
	Timeouts DataplexLakeTimeoutsPtrInput
}

func (DataplexLakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataplexLakeArgs)(nil)).Elem()
}

type DataplexLakeInput interface {
	pulumi.Input

	ToDataplexLakeOutput() DataplexLakeOutput
	ToDataplexLakeOutputWithContext(ctx context.Context) DataplexLakeOutput
}

func (*DataplexLake) ElementType() reflect.Type {
	return reflect.TypeOf((**DataplexLake)(nil)).Elem()
}

func (i *DataplexLake) ToDataplexLakeOutput() DataplexLakeOutput {
	return i.ToDataplexLakeOutputWithContext(context.Background())
}

func (i *DataplexLake) ToDataplexLakeOutputWithContext(ctx context.Context) DataplexLakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataplexLakeOutput)
}

type DataplexLakeOutput struct{ *pulumi.OutputState }

func (DataplexLakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataplexLake)(nil)).Elem()
}

func (o DataplexLakeOutput) ToDataplexLakeOutput() DataplexLakeOutput {
	return o
}

func (o DataplexLakeOutput) ToDataplexLakeOutputWithContext(ctx context.Context) DataplexLakeOutput {
	return o
}

// Output only. Aggregated status of the underlying assets of the lake.
func (o DataplexLakeOutput) AssetStatuses() DataplexLakeAssetStatusArrayOutput {
	return o.ApplyT(func(v *DataplexLake) DataplexLakeAssetStatusArrayOutput { return v.AssetStatuses }).(DataplexLakeAssetStatusArrayOutput)
}

// Output only. The time when the lake was created.
func (o DataplexLakeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DataplexLakeOutput) DataplexLakeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.DataplexLakeId }).(pulumi.StringOutput)
}

// Optional. Description of the lake.
func (o DataplexLakeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. User friendly display name.
func (o DataplexLakeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o DataplexLakeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. User-defined labels for the lake. **Note**: This field is non-authoritative, and will only manage the labels
// present in your configuration. Please refer to the field `effective_labels` for all of the labels present on the
// resource.
func (o DataplexLakeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource
func (o DataplexLakeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Settings to manage lake and Dataproc Metastore service instance association.
func (o DataplexLakeOutput) Metastore() DataplexLakeMetastorePtrOutput {
	return o.ApplyT(func(v *DataplexLake) DataplexLakeMetastorePtrOutput { return v.Metastore }).(DataplexLakeMetastorePtrOutput)
}

// Output only. Metastore status of the lake.
func (o DataplexLakeOutput) MetastoreStatuses() DataplexLakeMetastoreStatusArrayOutput {
	return o.ApplyT(func(v *DataplexLake) DataplexLakeMetastoreStatusArrayOutput { return v.MetastoreStatuses }).(DataplexLakeMetastoreStatusArrayOutput)
}

// The name of the lake.
func (o DataplexLakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o DataplexLakeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. Service account associated with this lake. This service account must be authorized to access or operate on
// resources managed by the lake.
func (o DataplexLakeOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
func (o DataplexLakeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DataplexLakeOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DataplexLakeOutput) Timeouts() DataplexLakeTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataplexLake) DataplexLakeTimeoutsPtrOutput { return v.Timeouts }).(DataplexLakeTimeoutsPtrOutput)
}

// Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
// re-created with the same name.
func (o DataplexLakeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The time when the lake was last updated.
func (o DataplexLakeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLake) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataplexLakeInput)(nil)).Elem(), &DataplexLake{})
	pulumi.RegisterOutputType(DataplexLakeOutput{})
}
