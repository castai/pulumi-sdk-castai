// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificateManagerCertificateIssuanceConfig struct {
	pulumi.CustomResourceState

	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig                    CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfigOutput `pulumi:"certificateAuthorityConfig"`
	CertificateManagerCertificateIssuanceConfigId pulumi.StringOutput                                                         `pulumi:"certificateManagerCertificateIssuanceConfigId"`
	// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
	// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Key algorithm to use when generating the private key. Possible values: ["RSA_2048", "ECDSA_P256"]
	KeyAlgorithm pulumi.StringOutput `pulumi:"keyAlgorithm"`
	// 'Set of label tags associated with the CertificateIssuanceConfig resource. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'. Example:
	// "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime pulumi.StringOutput `pulumi:"lifetime"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be
	// a number between 1-99, inclusive. You must set the rotation window percentage in relation to the certificate lifetime so
	// that certificate renewal occurs at least 7 days after the certificate has been issued and at least 7 days before it
	// expires.
	RotationWindowPercentage pulumi.Float64Output `pulumi:"rotationWindowPercentage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                                       `pulumi:"terraformLabels"`
	Timeouts        CertificateManagerCertificateIssuanceConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
	// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateManagerCertificateIssuanceConfig registers a new resource with the given unique name, arguments, and options.
func NewCertificateManagerCertificateIssuanceConfig(ctx *pulumi.Context,
	name string, args *CertificateManagerCertificateIssuanceConfigArgs, opts ...pulumi.ResourceOption) (*CertificateManagerCertificateIssuanceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityConfig == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityConfig'")
	}
	if args.KeyAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'KeyAlgorithm'")
	}
	if args.Lifetime == nil {
		return nil, errors.New("invalid value for required argument 'Lifetime'")
	}
	if args.RotationWindowPercentage == nil {
		return nil, errors.New("invalid value for required argument 'RotationWindowPercentage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CertificateManagerCertificateIssuanceConfig
	err = ctx.RegisterPackageResource("google:index/certificateManagerCertificateIssuanceConfig:CertificateManagerCertificateIssuanceConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateManagerCertificateIssuanceConfig gets an existing CertificateManagerCertificateIssuanceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateManagerCertificateIssuanceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateManagerCertificateIssuanceConfigState, opts ...pulumi.ResourceOption) (*CertificateManagerCertificateIssuanceConfig, error) {
	var resource CertificateManagerCertificateIssuanceConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/certificateManagerCertificateIssuanceConfig:CertificateManagerCertificateIssuanceConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateManagerCertificateIssuanceConfig resources.
type certificateManagerCertificateIssuanceConfigState struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig                    *CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfig `pulumi:"certificateAuthorityConfig"`
	CertificateManagerCertificateIssuanceConfigId *string                                                                `pulumi:"certificateManagerCertificateIssuanceConfigId"`
	// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
	// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Key algorithm to use when generating the private key. Possible values: ["RSA_2048", "ECDSA_P256"]
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// 'Set of label tags associated with the CertificateIssuanceConfig resource. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'. Example:
	// "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime *string `pulumi:"lifetime"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be
	// a number between 1-99, inclusive. You must set the rotation window percentage in relation to the certificate lifetime so
	// that certificate renewal occurs at least 7 days after the certificate has been issued and at least 7 days before it
	// expires.
	RotationWindowPercentage *float64 `pulumi:"rotationWindowPercentage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                                    `pulumi:"terraformLabels"`
	Timeouts        *CertificateManagerCertificateIssuanceConfigTimeouts `pulumi:"timeouts"`
	// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
	// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type CertificateManagerCertificateIssuanceConfigState struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig                    CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfigPtrInput
	CertificateManagerCertificateIssuanceConfigId pulumi.StringPtrInput
	// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
	// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Key algorithm to use when generating the private key. Possible values: ["RSA_2048", "ECDSA_P256"]
	KeyAlgorithm pulumi.StringPtrInput
	// 'Set of label tags associated with the CertificateIssuanceConfig resource. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'. Example:
	// "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime pulumi.StringPtrInput
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be
	// a number between 1-99, inclusive. You must set the rotation window percentage in relation to the certificate lifetime so
	// that certificate renewal occurs at least 7 days after the certificate has been issued and at least 7 days before it
	// expires.
	RotationWindowPercentage pulumi.Float64PtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        CertificateManagerCertificateIssuanceConfigTimeoutsPtrInput
	// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
	// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (CertificateManagerCertificateIssuanceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateManagerCertificateIssuanceConfigState)(nil)).Elem()
}

type certificateManagerCertificateIssuanceConfigArgs struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig                    CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfig `pulumi:"certificateAuthorityConfig"`
	CertificateManagerCertificateIssuanceConfigId *string                                                               `pulumi:"certificateManagerCertificateIssuanceConfigId"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description *string `pulumi:"description"`
	// Key algorithm to use when generating the private key. Possible values: ["RSA_2048", "ECDSA_P256"]
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// 'Set of label tags associated with the CertificateIssuanceConfig resource. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'. Example:
	// "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime string `pulumi:"lifetime"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be
	// a number between 1-99, inclusive. You must set the rotation window percentage in relation to the certificate lifetime so
	// that certificate renewal occurs at least 7 days after the certificate has been issued and at least 7 days before it
	// expires.
	RotationWindowPercentage float64                                              `pulumi:"rotationWindowPercentage"`
	Timeouts                 *CertificateManagerCertificateIssuanceConfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a CertificateManagerCertificateIssuanceConfig resource.
type CertificateManagerCertificateIssuanceConfigArgs struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig                    CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfigInput
	CertificateManagerCertificateIssuanceConfigId pulumi.StringPtrInput
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description pulumi.StringPtrInput
	// Key algorithm to use when generating the private key. Possible values: ["RSA_2048", "ECDSA_P256"]
	KeyAlgorithm pulumi.StringInput
	// 'Set of label tags associated with the CertificateIssuanceConfig resource. An object containing a list of "key": value
	// pairs. Example: { "name": "wrench", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'. Example:
	// "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime pulumi.StringInput
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be
	// a number between 1-99, inclusive. You must set the rotation window percentage in relation to the certificate lifetime so
	// that certificate renewal occurs at least 7 days after the certificate has been issued and at least 7 days before it
	// expires.
	RotationWindowPercentage pulumi.Float64Input
	Timeouts                 CertificateManagerCertificateIssuanceConfigTimeoutsPtrInput
}

func (CertificateManagerCertificateIssuanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateManagerCertificateIssuanceConfigArgs)(nil)).Elem()
}

type CertificateManagerCertificateIssuanceConfigInput interface {
	pulumi.Input

	ToCertificateManagerCertificateIssuanceConfigOutput() CertificateManagerCertificateIssuanceConfigOutput
	ToCertificateManagerCertificateIssuanceConfigOutputWithContext(ctx context.Context) CertificateManagerCertificateIssuanceConfigOutput
}

func (*CertificateManagerCertificateIssuanceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManagerCertificateIssuanceConfig)(nil)).Elem()
}

func (i *CertificateManagerCertificateIssuanceConfig) ToCertificateManagerCertificateIssuanceConfigOutput() CertificateManagerCertificateIssuanceConfigOutput {
	return i.ToCertificateManagerCertificateIssuanceConfigOutputWithContext(context.Background())
}

func (i *CertificateManagerCertificateIssuanceConfig) ToCertificateManagerCertificateIssuanceConfigOutputWithContext(ctx context.Context) CertificateManagerCertificateIssuanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagerCertificateIssuanceConfigOutput)
}

type CertificateManagerCertificateIssuanceConfigOutput struct{ *pulumi.OutputState }

func (CertificateManagerCertificateIssuanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManagerCertificateIssuanceConfig)(nil)).Elem()
}

func (o CertificateManagerCertificateIssuanceConfigOutput) ToCertificateManagerCertificateIssuanceConfigOutput() CertificateManagerCertificateIssuanceConfigOutput {
	return o
}

func (o CertificateManagerCertificateIssuanceConfigOutput) ToCertificateManagerCertificateIssuanceConfigOutputWithContext(ctx context.Context) CertificateManagerCertificateIssuanceConfigOutput {
	return o
}

// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
func (o CertificateManagerCertificateIssuanceConfigOutput) CertificateAuthorityConfig() CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfigOutput {
		return v.CertificateAuthorityConfig
	}).(CertificateManagerCertificateIssuanceConfigCertificateAuthorityConfigOutput)
}

func (o CertificateManagerCertificateIssuanceConfigOutput) CertificateManagerCertificateIssuanceConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput {
		return v.CertificateManagerCertificateIssuanceConfigId
	}).(pulumi.StringOutput)
}

// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateManagerCertificateIssuanceConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a CertificateIssuanceConfig.
func (o CertificateManagerCertificateIssuanceConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CertificateManagerCertificateIssuanceConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Key algorithm to use when generating the private key. Possible values: ["RSA_2048", "ECDSA_P256"]
func (o CertificateManagerCertificateIssuanceConfigOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// 'Set of label tags associated with the CertificateIssuanceConfig resource. An object containing a list of "key": value
// pairs. Example: { "name": "wrench", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o CertificateManagerCertificateIssuanceConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'. Example:
// "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
func (o CertificateManagerCertificateIssuanceConfigOutput) Lifetime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput { return v.Lifetime }).(pulumi.StringOutput)
}

// The Certificate Manager location. If not specified, "global" is used.
func (o CertificateManagerCertificateIssuanceConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally.
func (o CertificateManagerCertificateIssuanceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateManagerCertificateIssuanceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be
// a number between 1-99, inclusive. You must set the rotation window percentage in relation to the certificate lifetime so
// that certificate renewal occurs at least 7 days after the certificate has been issued and at least 7 days before it
// expires.
func (o CertificateManagerCertificateIssuanceConfigOutput) RotationWindowPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.Float64Output {
		return v.RotationWindowPercentage
	}).(pulumi.Float64Output)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o CertificateManagerCertificateIssuanceConfigOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o CertificateManagerCertificateIssuanceConfigOutput) Timeouts() CertificateManagerCertificateIssuanceConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) CertificateManagerCertificateIssuanceConfigTimeoutsPtrOutput {
		return v.Timeouts
	}).(CertificateManagerCertificateIssuanceConfigTimeoutsPtrOutput)
}

// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format, accurate to
// nanoseconds with up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateManagerCertificateIssuanceConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerCertificateIssuanceConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagerCertificateIssuanceConfigInput)(nil)).Elem(), &CertificateManagerCertificateIssuanceConfig{})
	pulumi.RegisterOutputType(CertificateManagerCertificateIssuanceConfigOutput{})
}
