// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcAccessConnector struct {
	pulumi.CustomResourceState

	// List of projects using the connector.
	ConnectedProjects pulumi.StringArrayOutput `pulumi:"connectedProjects"`
	// The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
	IpCidrRange pulumi.StringPtrOutput `pulumi:"ipCidrRange"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrOutput `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
	// Must be higher than the value specified by min_instances.
	MaxInstances pulumi.Float64Output `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
	// expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
	// higher than the value specified by min_throughput. Only one of 'max_throughput' and 'max_instances' can be specified.
	// The use of max_throughput is discouraged in favor of max_instances.
	MaxThroughput pulumi.Float64Output `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
	// be lower than the value specified by max_instances.
	MinInstances pulumi.Float64Output `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
	// e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
	// max_throughput. Only one of 'min_throughput' and 'min_instances' can be specified. The use of min_throughput is
	// discouraged in favor of min_instances.
	MinThroughput pulumi.Float64Output `pulumi:"minThroughput"`
	// The name of the resource (Max 25 characters).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
	Network pulumi.StringOutput `pulumi:"network"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The fully qualified name of this VPC connector
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// State of the VPC access connector.
	State pulumi.StringOutput `pulumi:"state"`
	// The subnet in which to house the connector
	Subnet               VpcAccessConnectorSubnetPtrOutput   `pulumi:"subnet"`
	Timeouts             VpcAccessConnectorTimeoutsPtrOutput `pulumi:"timeouts"`
	VpcAccessConnectorId pulumi.StringOutput                 `pulumi:"vpcAccessConnectorId"`
}

// NewVpcAccessConnector registers a new resource with the given unique name, arguments, and options.
func NewVpcAccessConnector(ctx *pulumi.Context,
	name string, args *VpcAccessConnectorArgs, opts ...pulumi.ResourceOption) (*VpcAccessConnector, error) {
	if args == nil {
		args = &VpcAccessConnectorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VpcAccessConnector
	err = ctx.RegisterPackageResource("google:index/vpcAccessConnector:VpcAccessConnector", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcAccessConnector gets an existing VpcAccessConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcAccessConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcAccessConnectorState, opts ...pulumi.ResourceOption) (*VpcAccessConnector, error) {
	var resource VpcAccessConnector
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/vpcAccessConnector:VpcAccessConnector", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcAccessConnector resources.
type vpcAccessConnectorState struct {
	// List of projects using the connector.
	ConnectedProjects []string `pulumi:"connectedProjects"`
	// The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
	// Must be higher than the value specified by min_instances.
	MaxInstances *float64 `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
	// expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
	// higher than the value specified by min_throughput. Only one of 'max_throughput' and 'max_instances' can be specified.
	// The use of max_throughput is discouraged in favor of max_instances.
	MaxThroughput *float64 `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
	// be lower than the value specified by max_instances.
	MinInstances *float64 `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
	// e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
	// max_throughput. Only one of 'min_throughput' and 'min_instances' can be specified. The use of min_throughput is
	// discouraged in favor of min_instances.
	MinThroughput *float64 `pulumi:"minThroughput"`
	// The name of the resource (Max 25 characters).
	Name *string `pulumi:"name"`
	// Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
	Network *string `pulumi:"network"`
	Project *string `pulumi:"project"`
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The fully qualified name of this VPC connector
	SelfLink *string `pulumi:"selfLink"`
	// State of the VPC access connector.
	State *string `pulumi:"state"`
	// The subnet in which to house the connector
	Subnet               *VpcAccessConnectorSubnet   `pulumi:"subnet"`
	Timeouts             *VpcAccessConnectorTimeouts `pulumi:"timeouts"`
	VpcAccessConnectorId *string                     `pulumi:"vpcAccessConnectorId"`
}

type VpcAccessConnectorState struct {
	// List of projects using the connector.
	ConnectedProjects pulumi.StringArrayInput
	// The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
	IpCidrRange pulumi.StringPtrInput
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrInput
	// Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
	// Must be higher than the value specified by min_instances.
	MaxInstances pulumi.Float64PtrInput
	// Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
	// expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
	// higher than the value specified by min_throughput. Only one of 'max_throughput' and 'max_instances' can be specified.
	// The use of max_throughput is discouraged in favor of max_instances.
	MaxThroughput pulumi.Float64PtrInput
	// Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
	// be lower than the value specified by max_instances.
	MinInstances pulumi.Float64PtrInput
	// Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
	// e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
	// max_throughput. Only one of 'min_throughput' and 'min_instances' can be specified. The use of min_throughput is
	// discouraged in favor of min_instances.
	MinThroughput pulumi.Float64PtrInput
	// The name of the resource (Max 25 characters).
	Name pulumi.StringPtrInput
	// Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
	Network pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The fully qualified name of this VPC connector
	SelfLink pulumi.StringPtrInput
	// State of the VPC access connector.
	State pulumi.StringPtrInput
	// The subnet in which to house the connector
	Subnet               VpcAccessConnectorSubnetPtrInput
	Timeouts             VpcAccessConnectorTimeoutsPtrInput
	VpcAccessConnectorId pulumi.StringPtrInput
}

func (VpcAccessConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAccessConnectorState)(nil)).Elem()
}

type vpcAccessConnectorArgs struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
	// Must be higher than the value specified by min_instances.
	MaxInstances *float64 `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
	// expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
	// higher than the value specified by min_throughput. Only one of 'max_throughput' and 'max_instances' can be specified.
	// The use of max_throughput is discouraged in favor of max_instances.
	MaxThroughput *float64 `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
	// be lower than the value specified by max_instances.
	MinInstances *float64 `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
	// e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
	// max_throughput. Only one of 'min_throughput' and 'min_instances' can be specified. The use of min_throughput is
	// discouraged in favor of min_instances.
	MinThroughput *float64 `pulumi:"minThroughput"`
	// The name of the resource (Max 25 characters).
	Name *string `pulumi:"name"`
	// Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
	Network *string `pulumi:"network"`
	Project *string `pulumi:"project"`
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The subnet in which to house the connector
	Subnet               *VpcAccessConnectorSubnet   `pulumi:"subnet"`
	Timeouts             *VpcAccessConnectorTimeouts `pulumi:"timeouts"`
	VpcAccessConnectorId *string                     `pulumi:"vpcAccessConnectorId"`
}

// The set of arguments for constructing a VpcAccessConnector resource.
type VpcAccessConnectorArgs struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
	IpCidrRange pulumi.StringPtrInput
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrInput
	// Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
	// Must be higher than the value specified by min_instances.
	MaxInstances pulumi.Float64PtrInput
	// Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
	// expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
	// higher than the value specified by min_throughput. Only one of 'max_throughput' and 'max_instances' can be specified.
	// The use of max_throughput is discouraged in favor of max_instances.
	MaxThroughput pulumi.Float64PtrInput
	// Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
	// be lower than the value specified by max_instances.
	MinInstances pulumi.Float64PtrInput
	// Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
	// e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
	// max_throughput. Only one of 'min_throughput' and 'min_instances' can be specified. The use of min_throughput is
	// discouraged in favor of min_instances.
	MinThroughput pulumi.Float64PtrInput
	// The name of the resource (Max 25 characters).
	Name pulumi.StringPtrInput
	// Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
	Network pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The subnet in which to house the connector
	Subnet               VpcAccessConnectorSubnetPtrInput
	Timeouts             VpcAccessConnectorTimeoutsPtrInput
	VpcAccessConnectorId pulumi.StringPtrInput
}

func (VpcAccessConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAccessConnectorArgs)(nil)).Elem()
}

type VpcAccessConnectorInput interface {
	pulumi.Input

	ToVpcAccessConnectorOutput() VpcAccessConnectorOutput
	ToVpcAccessConnectorOutputWithContext(ctx context.Context) VpcAccessConnectorOutput
}

func (*VpcAccessConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAccessConnector)(nil)).Elem()
}

func (i *VpcAccessConnector) ToVpcAccessConnectorOutput() VpcAccessConnectorOutput {
	return i.ToVpcAccessConnectorOutputWithContext(context.Background())
}

func (i *VpcAccessConnector) ToVpcAccessConnectorOutputWithContext(ctx context.Context) VpcAccessConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAccessConnectorOutput)
}

type VpcAccessConnectorOutput struct{ *pulumi.OutputState }

func (VpcAccessConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAccessConnector)(nil)).Elem()
}

func (o VpcAccessConnectorOutput) ToVpcAccessConnectorOutput() VpcAccessConnectorOutput {
	return o
}

func (o VpcAccessConnectorOutput) ToVpcAccessConnectorOutputWithContext(ctx context.Context) VpcAccessConnectorOutput {
	return o
}

// List of projects using the connector.
func (o VpcAccessConnectorOutput) ConnectedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringArrayOutput { return v.ConnectedProjects }).(pulumi.StringArrayOutput)
}

// The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
func (o VpcAccessConnectorOutput) IpCidrRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringPtrOutput { return v.IpCidrRange }).(pulumi.StringPtrOutput)
}

// Machine type of VM Instance underlying connector. Default is e2-micro
func (o VpcAccessConnectorOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringPtrOutput { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
// Must be higher than the value specified by min_instances.
func (o VpcAccessConnectorOutput) MaxInstances() pulumi.Float64Output {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.Float64Output { return v.MaxInstances }).(pulumi.Float64Output)
}

// Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
// expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
// higher than the value specified by min_throughput. Only one of 'max_throughput' and 'max_instances' can be specified.
// The use of max_throughput is discouraged in favor of max_instances.
func (o VpcAccessConnectorOutput) MaxThroughput() pulumi.Float64Output {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.Float64Output { return v.MaxThroughput }).(pulumi.Float64Output)
}

// Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
// be lower than the value specified by max_instances.
func (o VpcAccessConnectorOutput) MinInstances() pulumi.Float64Output {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.Float64Output { return v.MinInstances }).(pulumi.Float64Output)
}

// Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
// e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
// max_throughput. Only one of 'min_throughput' and 'min_instances' can be specified. The use of min_throughput is
// discouraged in favor of min_instances.
func (o VpcAccessConnectorOutput) MinThroughput() pulumi.Float64Output {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.Float64Output { return v.MinThroughput }).(pulumi.Float64Output)
}

// The name of the resource (Max 25 characters).
func (o VpcAccessConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
func (o VpcAccessConnectorOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

func (o VpcAccessConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the VPC Access connector resides. If it is not provided, the provider region is used.
func (o VpcAccessConnectorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The fully qualified name of this VPC connector
func (o VpcAccessConnectorOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// State of the VPC access connector.
func (o VpcAccessConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The subnet in which to house the connector
func (o VpcAccessConnectorOutput) Subnet() VpcAccessConnectorSubnetPtrOutput {
	return o.ApplyT(func(v *VpcAccessConnector) VpcAccessConnectorSubnetPtrOutput { return v.Subnet }).(VpcAccessConnectorSubnetPtrOutput)
}

func (o VpcAccessConnectorOutput) Timeouts() VpcAccessConnectorTimeoutsPtrOutput {
	return o.ApplyT(func(v *VpcAccessConnector) VpcAccessConnectorTimeoutsPtrOutput { return v.Timeouts }).(VpcAccessConnectorTimeoutsPtrOutput)
}

func (o VpcAccessConnectorOutput) VpcAccessConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAccessConnector) pulumi.StringOutput { return v.VpcAccessConnectorId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAccessConnectorInput)(nil)).Elem(), &VpcAccessConnector{})
	pulumi.RegisterOutputType(VpcAccessConnectorOutput{})
}
