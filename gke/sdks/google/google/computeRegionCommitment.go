// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeRegionCommitment struct {
	pulumi.CustomResourceState

	// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. If the
	// field is set to true, the commitment will be automatically renewed for either one or three years according to the terms
	// of the existing commitment.
	AutoRenew pulumi.BoolOutput `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or
	// MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in
	// licenseResources. Note that only MACHINE commitments should have a Type specified. Possible values: ["LICENSE",
	// "MACHINE"]
	Category pulumi.StringOutput `pulumi:"category"`
	// Unique identifier for the resource.
	CommitmentId              pulumi.Float64Output `pulumi:"commitmentId"`
	ComputeRegionCommitmentId pulumi.StringOutput  `pulumi:"computeRegionCommitmentId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Commitment end time in RFC3339 text format.
	EndTimestamp pulumi.StringOutput `pulumi:"endTimestamp"`
	// Specifies the already existing reservations to attach to the Commitment.
	ExistingReservations pulumi.StringOutput `pulumi:"existingReservations"`
	// The license specification required as part of a license commitment.
	LicenseResource ComputeRegionCommitmentLicenseResourcePtrOutput `pulumi:"licenseResource"`
	// Name of the resource. The name must be 1-63 characters long and match the regular expression 'a-z?' which means the
	// first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate. The currently supported plans are
	// TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). Possible values: ["TWELVE_MONTH", "THIRTY_SIX_MONTH"]
	Plan    pulumi.StringOutput `pulumi:"plan"`
	Project pulumi.StringOutput `pulumi:"project"`
	// URL of the region where this commitment may be used.
	Region pulumi.StringOutput `pulumi:"region"`
	// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur
	// together.
	Resources ComputeRegionCommitmentResourceArrayOutput `pulumi:"resources"`
	SelfLink  pulumi.StringOutput                        `pulumi:"selfLink"`
	// Commitment start time in RFC3339 text format.
	StartTimestamp pulumi.StringOutput `pulumi:"startTimestamp"`
	// Status of the commitment with regards to eventual expiration (each commitment has an end date defined).
	Status pulumi.StringOutput `pulumi:"status"`
	// A human-readable explanation of the status.
	StatusMessage pulumi.StringOutput                      `pulumi:"statusMessage"`
	Timeouts      ComputeRegionCommitmentTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of commitment, which affects the discount rate and the eligible resources. The type could be one of the
	// following value: 'MEMORY_OPTIMIZED', 'ACCELERATOR_OPTIMIZED', 'GENERAL_PURPOSE_N1', 'GENERAL_PURPOSE_N2',
	// 'GENERAL_PURPOSE_N2D', 'GENERAL_PURPOSE_E2', 'GENERAL_PURPOSE_T2D', 'GENERAL_PURPOSE_C3', 'COMPUTE_OPTIMIZED_C2',
	// 'COMPUTE_OPTIMIZED_C2D' and 'GRAPHICS_OPTIMIZED_G2'
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewComputeRegionCommitment registers a new resource with the given unique name, arguments, and options.
func NewComputeRegionCommitment(ctx *pulumi.Context,
	name string, args *ComputeRegionCommitmentArgs, opts ...pulumi.ResourceOption) (*ComputeRegionCommitment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeRegionCommitment
	err = ctx.RegisterPackageResource("google:index/computeRegionCommitment:ComputeRegionCommitment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeRegionCommitment gets an existing ComputeRegionCommitment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeRegionCommitment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeRegionCommitmentState, opts ...pulumi.ResourceOption) (*ComputeRegionCommitment, error) {
	var resource ComputeRegionCommitment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/computeRegionCommitment:ComputeRegionCommitment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeRegionCommitment resources.
type computeRegionCommitmentState struct {
	// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. If the
	// field is set to true, the commitment will be automatically renewed for either one or three years according to the terms
	// of the existing commitment.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or
	// MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in
	// licenseResources. Note that only MACHINE commitments should have a Type specified. Possible values: ["LICENSE",
	// "MACHINE"]
	Category *string `pulumi:"category"`
	// Unique identifier for the resource.
	CommitmentId              *float64 `pulumi:"commitmentId"`
	ComputeRegionCommitmentId *string  `pulumi:"computeRegionCommitmentId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Commitment end time in RFC3339 text format.
	EndTimestamp *string `pulumi:"endTimestamp"`
	// Specifies the already existing reservations to attach to the Commitment.
	ExistingReservations *string `pulumi:"existingReservations"`
	// The license specification required as part of a license commitment.
	LicenseResource *ComputeRegionCommitmentLicenseResource `pulumi:"licenseResource"`
	// Name of the resource. The name must be 1-63 characters long and match the regular expression 'a-z?' which means the
	// first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate. The currently supported plans are
	// TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). Possible values: ["TWELVE_MONTH", "THIRTY_SIX_MONTH"]
	Plan    *string `pulumi:"plan"`
	Project *string `pulumi:"project"`
	// URL of the region where this commitment may be used.
	Region *string `pulumi:"region"`
	// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur
	// together.
	Resources []ComputeRegionCommitmentResource `pulumi:"resources"`
	SelfLink  *string                           `pulumi:"selfLink"`
	// Commitment start time in RFC3339 text format.
	StartTimestamp *string `pulumi:"startTimestamp"`
	// Status of the commitment with regards to eventual expiration (each commitment has an end date defined).
	Status *string `pulumi:"status"`
	// A human-readable explanation of the status.
	StatusMessage *string                          `pulumi:"statusMessage"`
	Timeouts      *ComputeRegionCommitmentTimeouts `pulumi:"timeouts"`
	// The type of commitment, which affects the discount rate and the eligible resources. The type could be one of the
	// following value: 'MEMORY_OPTIMIZED', 'ACCELERATOR_OPTIMIZED', 'GENERAL_PURPOSE_N1', 'GENERAL_PURPOSE_N2',
	// 'GENERAL_PURPOSE_N2D', 'GENERAL_PURPOSE_E2', 'GENERAL_PURPOSE_T2D', 'GENERAL_PURPOSE_C3', 'COMPUTE_OPTIMIZED_C2',
	// 'COMPUTE_OPTIMIZED_C2D' and 'GRAPHICS_OPTIMIZED_G2'
	Type *string `pulumi:"type"`
}

type ComputeRegionCommitmentState struct {
	// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. If the
	// field is set to true, the commitment will be automatically renewed for either one or three years according to the terms
	// of the existing commitment.
	AutoRenew pulumi.BoolPtrInput
	// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or
	// MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in
	// licenseResources. Note that only MACHINE commitments should have a Type specified. Possible values: ["LICENSE",
	// "MACHINE"]
	Category pulumi.StringPtrInput
	// Unique identifier for the resource.
	CommitmentId              pulumi.Float64PtrInput
	ComputeRegionCommitmentId pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Commitment end time in RFC3339 text format.
	EndTimestamp pulumi.StringPtrInput
	// Specifies the already existing reservations to attach to the Commitment.
	ExistingReservations pulumi.StringPtrInput
	// The license specification required as part of a license commitment.
	LicenseResource ComputeRegionCommitmentLicenseResourcePtrInput
	// Name of the resource. The name must be 1-63 characters long and match the regular expression 'a-z?' which means the
	// first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The plan for this commitment, which determines duration and discount rate. The currently supported plans are
	// TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). Possible values: ["TWELVE_MONTH", "THIRTY_SIX_MONTH"]
	Plan    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// URL of the region where this commitment may be used.
	Region pulumi.StringPtrInput
	// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur
	// together.
	Resources ComputeRegionCommitmentResourceArrayInput
	SelfLink  pulumi.StringPtrInput
	// Commitment start time in RFC3339 text format.
	StartTimestamp pulumi.StringPtrInput
	// Status of the commitment with regards to eventual expiration (each commitment has an end date defined).
	Status pulumi.StringPtrInput
	// A human-readable explanation of the status.
	StatusMessage pulumi.StringPtrInput
	Timeouts      ComputeRegionCommitmentTimeoutsPtrInput
	// The type of commitment, which affects the discount rate and the eligible resources. The type could be one of the
	// following value: 'MEMORY_OPTIMIZED', 'ACCELERATOR_OPTIMIZED', 'GENERAL_PURPOSE_N1', 'GENERAL_PURPOSE_N2',
	// 'GENERAL_PURPOSE_N2D', 'GENERAL_PURPOSE_E2', 'GENERAL_PURPOSE_T2D', 'GENERAL_PURPOSE_C3', 'COMPUTE_OPTIMIZED_C2',
	// 'COMPUTE_OPTIMIZED_C2D' and 'GRAPHICS_OPTIMIZED_G2'
	Type pulumi.StringPtrInput
}

func (ComputeRegionCommitmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeRegionCommitmentState)(nil)).Elem()
}

type computeRegionCommitmentArgs struct {
	// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. If the
	// field is set to true, the commitment will be automatically renewed for either one or three years according to the terms
	// of the existing commitment.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or
	// MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in
	// licenseResources. Note that only MACHINE commitments should have a Type specified. Possible values: ["LICENSE",
	// "MACHINE"]
	Category                  *string `pulumi:"category"`
	ComputeRegionCommitmentId *string `pulumi:"computeRegionCommitmentId"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Specifies the already existing reservations to attach to the Commitment.
	ExistingReservations *string `pulumi:"existingReservations"`
	// The license specification required as part of a license commitment.
	LicenseResource *ComputeRegionCommitmentLicenseResource `pulumi:"licenseResource"`
	// Name of the resource. The name must be 1-63 characters long and match the regular expression 'a-z?' which means the
	// first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate. The currently supported plans are
	// TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). Possible values: ["TWELVE_MONTH", "THIRTY_SIX_MONTH"]
	Plan    string  `pulumi:"plan"`
	Project *string `pulumi:"project"`
	// URL of the region where this commitment may be used.
	Region *string `pulumi:"region"`
	// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur
	// together.
	Resources []ComputeRegionCommitmentResource `pulumi:"resources"`
	Timeouts  *ComputeRegionCommitmentTimeouts  `pulumi:"timeouts"`
	// The type of commitment, which affects the discount rate and the eligible resources. The type could be one of the
	// following value: 'MEMORY_OPTIMIZED', 'ACCELERATOR_OPTIMIZED', 'GENERAL_PURPOSE_N1', 'GENERAL_PURPOSE_N2',
	// 'GENERAL_PURPOSE_N2D', 'GENERAL_PURPOSE_E2', 'GENERAL_PURPOSE_T2D', 'GENERAL_PURPOSE_C3', 'COMPUTE_OPTIMIZED_C2',
	// 'COMPUTE_OPTIMIZED_C2D' and 'GRAPHICS_OPTIMIZED_G2'
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ComputeRegionCommitment resource.
type ComputeRegionCommitmentArgs struct {
	// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. If the
	// field is set to true, the commitment will be automatically renewed for either one or three years according to the terms
	// of the existing commitment.
	AutoRenew pulumi.BoolPtrInput
	// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or
	// MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in
	// licenseResources. Note that only MACHINE commitments should have a Type specified. Possible values: ["LICENSE",
	// "MACHINE"]
	Category                  pulumi.StringPtrInput
	ComputeRegionCommitmentId pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Specifies the already existing reservations to attach to the Commitment.
	ExistingReservations pulumi.StringPtrInput
	// The license specification required as part of a license commitment.
	LicenseResource ComputeRegionCommitmentLicenseResourcePtrInput
	// Name of the resource. The name must be 1-63 characters long and match the regular expression 'a-z?' which means the
	// first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The plan for this commitment, which determines duration and discount rate. The currently supported plans are
	// TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). Possible values: ["TWELVE_MONTH", "THIRTY_SIX_MONTH"]
	Plan    pulumi.StringInput
	Project pulumi.StringPtrInput
	// URL of the region where this commitment may be used.
	Region pulumi.StringPtrInput
	// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur
	// together.
	Resources ComputeRegionCommitmentResourceArrayInput
	Timeouts  ComputeRegionCommitmentTimeoutsPtrInput
	// The type of commitment, which affects the discount rate and the eligible resources. The type could be one of the
	// following value: 'MEMORY_OPTIMIZED', 'ACCELERATOR_OPTIMIZED', 'GENERAL_PURPOSE_N1', 'GENERAL_PURPOSE_N2',
	// 'GENERAL_PURPOSE_N2D', 'GENERAL_PURPOSE_E2', 'GENERAL_PURPOSE_T2D', 'GENERAL_PURPOSE_C3', 'COMPUTE_OPTIMIZED_C2',
	// 'COMPUTE_OPTIMIZED_C2D' and 'GRAPHICS_OPTIMIZED_G2'
	Type pulumi.StringPtrInput
}

func (ComputeRegionCommitmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeRegionCommitmentArgs)(nil)).Elem()
}

type ComputeRegionCommitmentInput interface {
	pulumi.Input

	ToComputeRegionCommitmentOutput() ComputeRegionCommitmentOutput
	ToComputeRegionCommitmentOutputWithContext(ctx context.Context) ComputeRegionCommitmentOutput
}

func (*ComputeRegionCommitment) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRegionCommitment)(nil)).Elem()
}

func (i *ComputeRegionCommitment) ToComputeRegionCommitmentOutput() ComputeRegionCommitmentOutput {
	return i.ToComputeRegionCommitmentOutputWithContext(context.Background())
}

func (i *ComputeRegionCommitment) ToComputeRegionCommitmentOutputWithContext(ctx context.Context) ComputeRegionCommitmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRegionCommitmentOutput)
}

type ComputeRegionCommitmentOutput struct{ *pulumi.OutputState }

func (ComputeRegionCommitmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRegionCommitment)(nil)).Elem()
}

func (o ComputeRegionCommitmentOutput) ToComputeRegionCommitmentOutput() ComputeRegionCommitmentOutput {
	return o
}

func (o ComputeRegionCommitmentOutput) ToComputeRegionCommitmentOutputWithContext(ctx context.Context) ComputeRegionCommitmentOutput {
	return o
}

// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. If the
// field is set to true, the commitment will be automatically renewed for either one or three years according to the terms
// of the existing commitment.
func (o ComputeRegionCommitmentOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.BoolOutput { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or
// MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in
// licenseResources. Note that only MACHINE commitments should have a Type specified. Possible values: ["LICENSE",
// "MACHINE"]
func (o ComputeRegionCommitmentOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Unique identifier for the resource.
func (o ComputeRegionCommitmentOutput) CommitmentId() pulumi.Float64Output {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.Float64Output { return v.CommitmentId }).(pulumi.Float64Output)
}

func (o ComputeRegionCommitmentOutput) ComputeRegionCommitmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.ComputeRegionCommitmentId }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeRegionCommitmentOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o ComputeRegionCommitmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Commitment end time in RFC3339 text format.
func (o ComputeRegionCommitmentOutput) EndTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.EndTimestamp }).(pulumi.StringOutput)
}

// Specifies the already existing reservations to attach to the Commitment.
func (o ComputeRegionCommitmentOutput) ExistingReservations() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.ExistingReservations }).(pulumi.StringOutput)
}

// The license specification required as part of a license commitment.
func (o ComputeRegionCommitmentOutput) LicenseResource() ComputeRegionCommitmentLicenseResourcePtrOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) ComputeRegionCommitmentLicenseResourcePtrOutput {
		return v.LicenseResource
	}).(ComputeRegionCommitmentLicenseResourcePtrOutput)
}

// Name of the resource. The name must be 1-63 characters long and match the regular expression 'a-z?' which means the
// first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit,
// except the last character, which cannot be a dash.
func (o ComputeRegionCommitmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The plan for this commitment, which determines duration and discount rate. The currently supported plans are
// TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). Possible values: ["TWELVE_MONTH", "THIRTY_SIX_MONTH"]
func (o ComputeRegionCommitmentOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

func (o ComputeRegionCommitmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// URL of the region where this commitment may be used.
func (o ComputeRegionCommitmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur
// together.
func (o ComputeRegionCommitmentOutput) Resources() ComputeRegionCommitmentResourceArrayOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) ComputeRegionCommitmentResourceArrayOutput { return v.Resources }).(ComputeRegionCommitmentResourceArrayOutput)
}

func (o ComputeRegionCommitmentOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Commitment start time in RFC3339 text format.
func (o ComputeRegionCommitmentOutput) StartTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.StartTimestamp }).(pulumi.StringOutput)
}

// Status of the commitment with regards to eventual expiration (each commitment has an end date defined).
func (o ComputeRegionCommitmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A human-readable explanation of the status.
func (o ComputeRegionCommitmentOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

func (o ComputeRegionCommitmentOutput) Timeouts() ComputeRegionCommitmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) ComputeRegionCommitmentTimeoutsPtrOutput { return v.Timeouts }).(ComputeRegionCommitmentTimeoutsPtrOutput)
}

// The type of commitment, which affects the discount rate and the eligible resources. The type could be one of the
// following value: 'MEMORY_OPTIMIZED', 'ACCELERATOR_OPTIMIZED', 'GENERAL_PURPOSE_N1', 'GENERAL_PURPOSE_N2',
// 'GENERAL_PURPOSE_N2D', 'GENERAL_PURPOSE_E2', 'GENERAL_PURPOSE_T2D', 'GENERAL_PURPOSE_C3', 'COMPUTE_OPTIMIZED_C2',
// 'COMPUTE_OPTIMIZED_C2D' and 'GRAPHICS_OPTIMIZED_G2'
func (o ComputeRegionCommitmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionCommitment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeRegionCommitmentInput)(nil)).Elem(), &ComputeRegionCommitment{})
	pulumi.RegisterOutputType(ComputeRegionCommitmentOutput{})
}
