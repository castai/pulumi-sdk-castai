// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatastreamPrivateConnection struct {
	pulumi.CustomResourceState

	// If set to true, will skip validations.
	CreateWithoutValidation       pulumi.BoolPtrOutput `pulumi:"createWithoutValidation"`
	DatastreamPrivateConnectionId pulumi.StringOutput  `pulumi:"datastreamPrivateConnectionId"`
	// Display name.
	DisplayName     pulumi.StringOutput    `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The PrivateConnection error in case of failure.
	Errors DatastreamPrivateConnectionErrorArrayOutput `pulumi:"errors"`
	// Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
	// refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the location this private connection is located in.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The private connectivity identifier.
	PrivateConnectionId pulumi.StringOutput `pulumi:"privateConnectionId"`
	Project             pulumi.StringOutput `pulumi:"project"`
	// State of the PrivateConnection.
	State pulumi.StringOutput `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                       `pulumi:"terraformLabels"`
	Timeouts        DatastreamPrivateConnectionTimeoutsPtrOutput `pulumi:"timeouts"`
	// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
	VpcPeeringConfig DatastreamPrivateConnectionVpcPeeringConfigOutput `pulumi:"vpcPeeringConfig"`
}

// NewDatastreamPrivateConnection registers a new resource with the given unique name, arguments, and options.
func NewDatastreamPrivateConnection(ctx *pulumi.Context,
	name string, args *DatastreamPrivateConnectionArgs, opts ...pulumi.ResourceOption) (*DatastreamPrivateConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PrivateConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateConnectionId'")
	}
	if args.VpcPeeringConfig == nil {
		return nil, errors.New("invalid value for required argument 'VpcPeeringConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DatastreamPrivateConnection
	err = ctx.RegisterPackageResource("google:index/datastreamPrivateConnection:DatastreamPrivateConnection", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastreamPrivateConnection gets an existing DatastreamPrivateConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastreamPrivateConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastreamPrivateConnectionState, opts ...pulumi.ResourceOption) (*DatastreamPrivateConnection, error) {
	var resource DatastreamPrivateConnection
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/datastreamPrivateConnection:DatastreamPrivateConnection", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatastreamPrivateConnection resources.
type datastreamPrivateConnectionState struct {
	// If set to true, will skip validations.
	CreateWithoutValidation       *bool   `pulumi:"createWithoutValidation"`
	DatastreamPrivateConnectionId *string `pulumi:"datastreamPrivateConnectionId"`
	// Display name.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The PrivateConnection error in case of failure.
	Errors []DatastreamPrivateConnectionError `pulumi:"errors"`
	// Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
	// refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the location this private connection is located in.
	Location *string `pulumi:"location"`
	// The resource's name.
	Name *string `pulumi:"name"`
	// The private connectivity identifier.
	PrivateConnectionId *string `pulumi:"privateConnectionId"`
	Project             *string `pulumi:"project"`
	// State of the PrivateConnection.
	State *string `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                    `pulumi:"terraformLabels"`
	Timeouts        *DatastreamPrivateConnectionTimeouts `pulumi:"timeouts"`
	// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
	VpcPeeringConfig *DatastreamPrivateConnectionVpcPeeringConfig `pulumi:"vpcPeeringConfig"`
}

type DatastreamPrivateConnectionState struct {
	// If set to true, will skip validations.
	CreateWithoutValidation       pulumi.BoolPtrInput
	DatastreamPrivateConnectionId pulumi.StringPtrInput
	// Display name.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The PrivateConnection error in case of failure.
	Errors DatastreamPrivateConnectionErrorArrayInput
	// Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
	// refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the location this private connection is located in.
	Location pulumi.StringPtrInput
	// The resource's name.
	Name pulumi.StringPtrInput
	// The private connectivity identifier.
	PrivateConnectionId pulumi.StringPtrInput
	Project             pulumi.StringPtrInput
	// State of the PrivateConnection.
	State pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DatastreamPrivateConnectionTimeoutsPtrInput
	// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
	VpcPeeringConfig DatastreamPrivateConnectionVpcPeeringConfigPtrInput
}

func (DatastreamPrivateConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastreamPrivateConnectionState)(nil)).Elem()
}

type datastreamPrivateConnectionArgs struct {
	// If set to true, will skip validations.
	CreateWithoutValidation       *bool   `pulumi:"createWithoutValidation"`
	DatastreamPrivateConnectionId *string `pulumi:"datastreamPrivateConnectionId"`
	// Display name.
	DisplayName string `pulumi:"displayName"`
	// Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
	// refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the location this private connection is located in.
	Location string `pulumi:"location"`
	// The private connectivity identifier.
	PrivateConnectionId string                               `pulumi:"privateConnectionId"`
	Project             *string                              `pulumi:"project"`
	Timeouts            *DatastreamPrivateConnectionTimeouts `pulumi:"timeouts"`
	// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
	VpcPeeringConfig DatastreamPrivateConnectionVpcPeeringConfig `pulumi:"vpcPeeringConfig"`
}

// The set of arguments for constructing a DatastreamPrivateConnection resource.
type DatastreamPrivateConnectionArgs struct {
	// If set to true, will skip validations.
	CreateWithoutValidation       pulumi.BoolPtrInput
	DatastreamPrivateConnectionId pulumi.StringPtrInput
	// Display name.
	DisplayName pulumi.StringInput
	// Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
	// refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the location this private connection is located in.
	Location pulumi.StringInput
	// The private connectivity identifier.
	PrivateConnectionId pulumi.StringInput
	Project             pulumi.StringPtrInput
	Timeouts            DatastreamPrivateConnectionTimeoutsPtrInput
	// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
	VpcPeeringConfig DatastreamPrivateConnectionVpcPeeringConfigInput
}

func (DatastreamPrivateConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastreamPrivateConnectionArgs)(nil)).Elem()
}

type DatastreamPrivateConnectionInput interface {
	pulumi.Input

	ToDatastreamPrivateConnectionOutput() DatastreamPrivateConnectionOutput
	ToDatastreamPrivateConnectionOutputWithContext(ctx context.Context) DatastreamPrivateConnectionOutput
}

func (*DatastreamPrivateConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastreamPrivateConnection)(nil)).Elem()
}

func (i *DatastreamPrivateConnection) ToDatastreamPrivateConnectionOutput() DatastreamPrivateConnectionOutput {
	return i.ToDatastreamPrivateConnectionOutputWithContext(context.Background())
}

func (i *DatastreamPrivateConnection) ToDatastreamPrivateConnectionOutputWithContext(ctx context.Context) DatastreamPrivateConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamPrivateConnectionOutput)
}

type DatastreamPrivateConnectionOutput struct{ *pulumi.OutputState }

func (DatastreamPrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastreamPrivateConnection)(nil)).Elem()
}

func (o DatastreamPrivateConnectionOutput) ToDatastreamPrivateConnectionOutput() DatastreamPrivateConnectionOutput {
	return o
}

func (o DatastreamPrivateConnectionOutput) ToDatastreamPrivateConnectionOutputWithContext(ctx context.Context) DatastreamPrivateConnectionOutput {
	return o
}

// If set to true, will skip validations.
func (o DatastreamPrivateConnectionOutput) CreateWithoutValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.BoolPtrOutput { return v.CreateWithoutValidation }).(pulumi.BoolPtrOutput)
}

func (o DatastreamPrivateConnectionOutput) DatastreamPrivateConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.DatastreamPrivateConnectionId }).(pulumi.StringOutput)
}

// Display name.
func (o DatastreamPrivateConnectionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o DatastreamPrivateConnectionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The PrivateConnection error in case of failure.
func (o DatastreamPrivateConnectionOutput) Errors() DatastreamPrivateConnectionErrorArrayOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) DatastreamPrivateConnectionErrorArrayOutput { return v.Errors }).(DatastreamPrivateConnectionErrorArrayOutput)
}

// Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
// refer to the field 'effective_labels' for all of the labels present on the resource.
func (o DatastreamPrivateConnectionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the location this private connection is located in.
func (o DatastreamPrivateConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource's name.
func (o DatastreamPrivateConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The private connectivity identifier.
func (o DatastreamPrivateConnectionOutput) PrivateConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.PrivateConnectionId }).(pulumi.StringOutput)
}

func (o DatastreamPrivateConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// State of the PrivateConnection.
func (o DatastreamPrivateConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DatastreamPrivateConnectionOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DatastreamPrivateConnectionOutput) Timeouts() DatastreamPrivateConnectionTimeoutsPtrOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) DatastreamPrivateConnectionTimeoutsPtrOutput { return v.Timeouts }).(DatastreamPrivateConnectionTimeoutsPtrOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
func (o DatastreamPrivateConnectionOutput) VpcPeeringConfig() DatastreamPrivateConnectionVpcPeeringConfigOutput {
	return o.ApplyT(func(v *DatastreamPrivateConnection) DatastreamPrivateConnectionVpcPeeringConfigOutput {
		return v.VpcPeeringConfig
	}).(DatastreamPrivateConnectionVpcPeeringConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamPrivateConnectionInput)(nil)).Elem(), &DatastreamPrivateConnection{})
	pulumi.RegisterOutputType(DatastreamPrivateConnectionOutput{})
}
