// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HealthcareDatasetIamPolicy struct {
	pulumi.CustomResourceState

	DatasetId                    pulumi.StringOutput `pulumi:"datasetId"`
	Etag                         pulumi.StringOutput `pulumi:"etag"`
	HealthcareDatasetIamPolicyId pulumi.StringOutput `pulumi:"healthcareDatasetIamPolicyId"`
	PolicyData                   pulumi.StringOutput `pulumi:"policyData"`
}

// NewHealthcareDatasetIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewHealthcareDatasetIamPolicy(ctx *pulumi.Context,
	name string, args *HealthcareDatasetIamPolicyArgs, opts ...pulumi.ResourceOption) (*HealthcareDatasetIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HealthcareDatasetIamPolicy
	err = ctx.RegisterPackageResource("google:index/healthcareDatasetIamPolicy:HealthcareDatasetIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcareDatasetIamPolicy gets an existing HealthcareDatasetIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcareDatasetIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcareDatasetIamPolicyState, opts ...pulumi.ResourceOption) (*HealthcareDatasetIamPolicy, error) {
	var resource HealthcareDatasetIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/healthcareDatasetIamPolicy:HealthcareDatasetIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthcareDatasetIamPolicy resources.
type healthcareDatasetIamPolicyState struct {
	DatasetId                    *string `pulumi:"datasetId"`
	Etag                         *string `pulumi:"etag"`
	HealthcareDatasetIamPolicyId *string `pulumi:"healthcareDatasetIamPolicyId"`
	PolicyData                   *string `pulumi:"policyData"`
}

type HealthcareDatasetIamPolicyState struct {
	DatasetId                    pulumi.StringPtrInput
	Etag                         pulumi.StringPtrInput
	HealthcareDatasetIamPolicyId pulumi.StringPtrInput
	PolicyData                   pulumi.StringPtrInput
}

func (HealthcareDatasetIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareDatasetIamPolicyState)(nil)).Elem()
}

type healthcareDatasetIamPolicyArgs struct {
	DatasetId                    string  `pulumi:"datasetId"`
	HealthcareDatasetIamPolicyId *string `pulumi:"healthcareDatasetIamPolicyId"`
	PolicyData                   string  `pulumi:"policyData"`
}

// The set of arguments for constructing a HealthcareDatasetIamPolicy resource.
type HealthcareDatasetIamPolicyArgs struct {
	DatasetId                    pulumi.StringInput
	HealthcareDatasetIamPolicyId pulumi.StringPtrInput
	PolicyData                   pulumi.StringInput
}

func (HealthcareDatasetIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareDatasetIamPolicyArgs)(nil)).Elem()
}

type HealthcareDatasetIamPolicyInput interface {
	pulumi.Input

	ToHealthcareDatasetIamPolicyOutput() HealthcareDatasetIamPolicyOutput
	ToHealthcareDatasetIamPolicyOutputWithContext(ctx context.Context) HealthcareDatasetIamPolicyOutput
}

func (*HealthcareDatasetIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareDatasetIamPolicy)(nil)).Elem()
}

func (i *HealthcareDatasetIamPolicy) ToHealthcareDatasetIamPolicyOutput() HealthcareDatasetIamPolicyOutput {
	return i.ToHealthcareDatasetIamPolicyOutputWithContext(context.Background())
}

func (i *HealthcareDatasetIamPolicy) ToHealthcareDatasetIamPolicyOutputWithContext(ctx context.Context) HealthcareDatasetIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcareDatasetIamPolicyOutput)
}

type HealthcareDatasetIamPolicyOutput struct{ *pulumi.OutputState }

func (HealthcareDatasetIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareDatasetIamPolicy)(nil)).Elem()
}

func (o HealthcareDatasetIamPolicyOutput) ToHealthcareDatasetIamPolicyOutput() HealthcareDatasetIamPolicyOutput {
	return o
}

func (o HealthcareDatasetIamPolicyOutput) ToHealthcareDatasetIamPolicyOutputWithContext(ctx context.Context) HealthcareDatasetIamPolicyOutput {
	return o
}

func (o HealthcareDatasetIamPolicyOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamPolicy) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamPolicyOutput) HealthcareDatasetIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamPolicy) pulumi.StringOutput { return v.HealthcareDatasetIamPolicyId }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcareDatasetIamPolicyInput)(nil)).Elem(), &HealthcareDatasetIamPolicy{})
	pulumi.RegisterOutputType(HealthcareDatasetIamPolicyOutput{})
}
