// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirestoreDatabase struct {
	pulumi.CustomResourceState

	// The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
	AppEngineIntegrationMode pulumi.StringOutput `pulumi:"appEngineIntegrationMode"`
	// The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
	// secured by the default Google encryption key.
	CmekConfig FirestoreDatabaseCmekConfigPtrOutput `pulumi:"cmekConfig"`
	// The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
	// "OPTIMISTIC_WITH_ENTITY_GROUPS"]
	ConcurrencyMode pulumi.StringOutput `pulumi:"concurrencyMode"`
	// Output only. The timestamp at which this database was created.
	CreateTime            pulumi.StringOutput    `pulumi:"createTime"`
	DeleteProtectionState pulumi.StringOutput    `pulumi:"deleteProtectionState"`
	DeletionPolicy        pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// Output only. The earliest timestamp at which older versions of the data can be read from the database. See
	// versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod. This value is continuously
	// updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account
	// for the time from the moment when the value is queried to the moment when you initiate the recovery. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
	// and "2014-10-02T15:01:23.045123456Z".
	EarliestVersionTime pulumi.StringOutput `pulumi:"earliestVersionTime"`
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag                pulumi.StringOutput `pulumi:"etag"`
	FirestoreDatabaseId pulumi.StringOutput `pulumi:"firestoreDatabaseId"`
	// Output only. The keyPrefix for this database. This keyPrefix is used, in combination with the project id ("~") to
	// construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation
	// runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead
	// of v~foo).
	KeyPrefix pulumi.StringOutput `pulumi:"keyPrefix"`
	// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
	LocationId pulumi.StringOutput `pulumi:"locationId"`
	// The ID to use for the database, which will become the final component of the database's resource name. This value should
	// be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
	// Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
	// supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
	// can be used to determine the supported versions. These include reads against any timestamp within the past hour and
	// reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
	// reads are supported on any version of the data from within the past 1 hour. Default value:
	// "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
	PointInTimeRecoveryEnablement pulumi.StringPtrOutput             `pulumi:"pointInTimeRecoveryEnablement"`
	Project                       pulumi.StringOutput                `pulumi:"project"`
	Timeouts                      FirestoreDatabaseTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
	// to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
	Type pulumi.StringOutput `pulumi:"type"`
	// Output only. The system-generated UUID4 for this Database.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The timestamp at which this database was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Output only. The period during which past versions of data are retained in the database. Any read or query can specify a
	// readTime within this window, and will read the state of the database at that time. If the PITR feature is enabled, the
	// retention period is 7 days. Otherwise, the retention period is 1 hour. A duration in seconds with up to nine fractional
	// digits, ending with 's'. Example: "3.5s".
	VersionRetentionPeriod pulumi.StringOutput `pulumi:"versionRetentionPeriod"`
}

// NewFirestoreDatabase registers a new resource with the given unique name, arguments, and options.
func NewFirestoreDatabase(ctx *pulumi.Context,
	name string, args *FirestoreDatabaseArgs, opts ...pulumi.ResourceOption) (*FirestoreDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationId == nil {
		return nil, errors.New("invalid value for required argument 'LocationId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirestoreDatabase
	err = ctx.RegisterPackageResource("google:index/firestoreDatabase:FirestoreDatabase", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirestoreDatabase gets an existing FirestoreDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirestoreDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirestoreDatabaseState, opts ...pulumi.ResourceOption) (*FirestoreDatabase, error) {
	var resource FirestoreDatabase
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/firestoreDatabase:FirestoreDatabase", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirestoreDatabase resources.
type firestoreDatabaseState struct {
	// The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
	AppEngineIntegrationMode *string `pulumi:"appEngineIntegrationMode"`
	// The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
	// secured by the default Google encryption key.
	CmekConfig *FirestoreDatabaseCmekConfig `pulumi:"cmekConfig"`
	// The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
	// "OPTIMISTIC_WITH_ENTITY_GROUPS"]
	ConcurrencyMode *string `pulumi:"concurrencyMode"`
	// Output only. The timestamp at which this database was created.
	CreateTime            *string `pulumi:"createTime"`
	DeleteProtectionState *string `pulumi:"deleteProtectionState"`
	DeletionPolicy        *string `pulumi:"deletionPolicy"`
	// Output only. The earliest timestamp at which older versions of the data can be read from the database. See
	// versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod. This value is continuously
	// updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account
	// for the time from the moment when the value is queried to the moment when you initiate the recovery. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
	// and "2014-10-02T15:01:23.045123456Z".
	EarliestVersionTime *string `pulumi:"earliestVersionTime"`
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag                *string `pulumi:"etag"`
	FirestoreDatabaseId *string `pulumi:"firestoreDatabaseId"`
	// Output only. The keyPrefix for this database. This keyPrefix is used, in combination with the project id ("~") to
	// construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation
	// runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead
	// of v~foo).
	KeyPrefix *string `pulumi:"keyPrefix"`
	// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
	LocationId *string `pulumi:"locationId"`
	// The ID to use for the database, which will become the final component of the database's resource name. This value should
	// be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
	// Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
	Name *string `pulumi:"name"`
	// Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
	// supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
	// can be used to determine the supported versions. These include reads against any timestamp within the past hour and
	// reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
	// reads are supported on any version of the data from within the past 1 hour. Default value:
	// "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
	PointInTimeRecoveryEnablement *string                    `pulumi:"pointInTimeRecoveryEnablement"`
	Project                       *string                    `pulumi:"project"`
	Timeouts                      *FirestoreDatabaseTimeouts `pulumi:"timeouts"`
	// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
	// to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
	Type *string `pulumi:"type"`
	// Output only. The system-generated UUID4 for this Database.
	Uid *string `pulumi:"uid"`
	// Output only. The timestamp at which this database was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Output only. The period during which past versions of data are retained in the database. Any read or query can specify a
	// readTime within this window, and will read the state of the database at that time. If the PITR feature is enabled, the
	// retention period is 7 days. Otherwise, the retention period is 1 hour. A duration in seconds with up to nine fractional
	// digits, ending with 's'. Example: "3.5s".
	VersionRetentionPeriod *string `pulumi:"versionRetentionPeriod"`
}

type FirestoreDatabaseState struct {
	// The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
	AppEngineIntegrationMode pulumi.StringPtrInput
	// The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
	// secured by the default Google encryption key.
	CmekConfig FirestoreDatabaseCmekConfigPtrInput
	// The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
	// "OPTIMISTIC_WITH_ENTITY_GROUPS"]
	ConcurrencyMode pulumi.StringPtrInput
	// Output only. The timestamp at which this database was created.
	CreateTime            pulumi.StringPtrInput
	DeleteProtectionState pulumi.StringPtrInput
	DeletionPolicy        pulumi.StringPtrInput
	// Output only. The earliest timestamp at which older versions of the data can be read from the database. See
	// versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod. This value is continuously
	// updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account
	// for the time from the moment when the value is queried to the moment when you initiate the recovery. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
	// and "2014-10-02T15:01:23.045123456Z".
	EarliestVersionTime pulumi.StringPtrInput
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag                pulumi.StringPtrInput
	FirestoreDatabaseId pulumi.StringPtrInput
	// Output only. The keyPrefix for this database. This keyPrefix is used, in combination with the project id ("~") to
	// construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation
	// runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead
	// of v~foo).
	KeyPrefix pulumi.StringPtrInput
	// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
	LocationId pulumi.StringPtrInput
	// The ID to use for the database, which will become the final component of the database's resource name. This value should
	// be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
	// Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
	Name pulumi.StringPtrInput
	// Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
	// supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
	// can be used to determine the supported versions. These include reads against any timestamp within the past hour and
	// reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
	// reads are supported on any version of the data from within the past 1 hour. Default value:
	// "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
	PointInTimeRecoveryEnablement pulumi.StringPtrInput
	Project                       pulumi.StringPtrInput
	Timeouts                      FirestoreDatabaseTimeoutsPtrInput
	// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
	// to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
	Type pulumi.StringPtrInput
	// Output only. The system-generated UUID4 for this Database.
	Uid pulumi.StringPtrInput
	// Output only. The timestamp at which this database was most recently updated.
	UpdateTime pulumi.StringPtrInput
	// Output only. The period during which past versions of data are retained in the database. Any read or query can specify a
	// readTime within this window, and will read the state of the database at that time. If the PITR feature is enabled, the
	// retention period is 7 days. Otherwise, the retention period is 1 hour. A duration in seconds with up to nine fractional
	// digits, ending with 's'. Example: "3.5s".
	VersionRetentionPeriod pulumi.StringPtrInput
}

func (FirestoreDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*firestoreDatabaseState)(nil)).Elem()
}

type firestoreDatabaseArgs struct {
	// The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
	AppEngineIntegrationMode *string `pulumi:"appEngineIntegrationMode"`
	// The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
	// secured by the default Google encryption key.
	CmekConfig *FirestoreDatabaseCmekConfig `pulumi:"cmekConfig"`
	// The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
	// "OPTIMISTIC_WITH_ENTITY_GROUPS"]
	ConcurrencyMode       *string `pulumi:"concurrencyMode"`
	DeleteProtectionState *string `pulumi:"deleteProtectionState"`
	DeletionPolicy        *string `pulumi:"deletionPolicy"`
	FirestoreDatabaseId   *string `pulumi:"firestoreDatabaseId"`
	// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
	LocationId string `pulumi:"locationId"`
	// The ID to use for the database, which will become the final component of the database's resource name. This value should
	// be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
	// Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
	Name *string `pulumi:"name"`
	// Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
	// supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
	// can be used to determine the supported versions. These include reads against any timestamp within the past hour and
	// reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
	// reads are supported on any version of the data from within the past 1 hour. Default value:
	// "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
	PointInTimeRecoveryEnablement *string                    `pulumi:"pointInTimeRecoveryEnablement"`
	Project                       *string                    `pulumi:"project"`
	Timeouts                      *FirestoreDatabaseTimeouts `pulumi:"timeouts"`
	// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
	// to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a FirestoreDatabase resource.
type FirestoreDatabaseArgs struct {
	// The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
	AppEngineIntegrationMode pulumi.StringPtrInput
	// The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
	// secured by the default Google encryption key.
	CmekConfig FirestoreDatabaseCmekConfigPtrInput
	// The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
	// "OPTIMISTIC_WITH_ENTITY_GROUPS"]
	ConcurrencyMode       pulumi.StringPtrInput
	DeleteProtectionState pulumi.StringPtrInput
	DeletionPolicy        pulumi.StringPtrInput
	FirestoreDatabaseId   pulumi.StringPtrInput
	// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
	LocationId pulumi.StringInput
	// The ID to use for the database, which will become the final component of the database's resource name. This value should
	// be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
	// Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
	Name pulumi.StringPtrInput
	// Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
	// supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
	// can be used to determine the supported versions. These include reads against any timestamp within the past hour and
	// reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
	// reads are supported on any version of the data from within the past 1 hour. Default value:
	// "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
	PointInTimeRecoveryEnablement pulumi.StringPtrInput
	Project                       pulumi.StringPtrInput
	Timeouts                      FirestoreDatabaseTimeoutsPtrInput
	// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
	// to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
	Type pulumi.StringInput
}

func (FirestoreDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firestoreDatabaseArgs)(nil)).Elem()
}

type FirestoreDatabaseInput interface {
	pulumi.Input

	ToFirestoreDatabaseOutput() FirestoreDatabaseOutput
	ToFirestoreDatabaseOutputWithContext(ctx context.Context) FirestoreDatabaseOutput
}

func (*FirestoreDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**FirestoreDatabase)(nil)).Elem()
}

func (i *FirestoreDatabase) ToFirestoreDatabaseOutput() FirestoreDatabaseOutput {
	return i.ToFirestoreDatabaseOutputWithContext(context.Background())
}

func (i *FirestoreDatabase) ToFirestoreDatabaseOutputWithContext(ctx context.Context) FirestoreDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirestoreDatabaseOutput)
}

type FirestoreDatabaseOutput struct{ *pulumi.OutputState }

func (FirestoreDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirestoreDatabase)(nil)).Elem()
}

func (o FirestoreDatabaseOutput) ToFirestoreDatabaseOutput() FirestoreDatabaseOutput {
	return o
}

func (o FirestoreDatabaseOutput) ToFirestoreDatabaseOutputWithContext(ctx context.Context) FirestoreDatabaseOutput {
	return o
}

// The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
func (o FirestoreDatabaseOutput) AppEngineIntegrationMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.AppEngineIntegrationMode }).(pulumi.StringOutput)
}

// The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
// secured by the default Google encryption key.
func (o FirestoreDatabaseOutput) CmekConfig() FirestoreDatabaseCmekConfigPtrOutput {
	return o.ApplyT(func(v *FirestoreDatabase) FirestoreDatabaseCmekConfigPtrOutput { return v.CmekConfig }).(FirestoreDatabaseCmekConfigPtrOutput)
}

// The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
// "OPTIMISTIC_WITH_ENTITY_GROUPS"]
func (o FirestoreDatabaseOutput) ConcurrencyMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.ConcurrencyMode }).(pulumi.StringOutput)
}

// Output only. The timestamp at which this database was created.
func (o FirestoreDatabaseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o FirestoreDatabaseOutput) DeleteProtectionState() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.DeleteProtectionState }).(pulumi.StringOutput)
}

func (o FirestoreDatabaseOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// Output only. The earliest timestamp at which older versions of the data can be read from the database. See
// versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod. This value is continuously
// updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account
// for the time from the moment when the value is queried to the moment when you initiate the recovery. A timestamp in
// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
// and "2014-10-02T15:01:23.045123456Z".
func (o FirestoreDatabaseOutput) EarliestVersionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.EarliestVersionTime }).(pulumi.StringOutput)
}

// Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and
// delete requests to ensure the client has an up-to-date value before proceeding.
func (o FirestoreDatabaseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o FirestoreDatabaseOutput) FirestoreDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.FirestoreDatabaseId }).(pulumi.StringOutput)
}

// Output only. The keyPrefix for this database. This keyPrefix is used, in combination with the project id ("~") to
// construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation
// runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead
// of v~foo).
func (o FirestoreDatabaseOutput) KeyPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.KeyPrefix }).(pulumi.StringOutput)
}

// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
func (o FirestoreDatabaseOutput) LocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.LocationId }).(pulumi.StringOutput)
}

// The ID to use for the database, which will become the final component of the database's resource name. This value should
// be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
// Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
func (o FirestoreDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
// supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
// can be used to determine the supported versions. These include reads against any timestamp within the past hour and
// reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
// reads are supported on any version of the data from within the past 1 hour. Default value:
// "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
func (o FirestoreDatabaseOutput) PointInTimeRecoveryEnablement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringPtrOutput { return v.PointInTimeRecoveryEnablement }).(pulumi.StringPtrOutput)
}

func (o FirestoreDatabaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o FirestoreDatabaseOutput) Timeouts() FirestoreDatabaseTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirestoreDatabase) FirestoreDatabaseTimeoutsPtrOutput { return v.Timeouts }).(FirestoreDatabaseTimeoutsPtrOutput)
}

// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
// to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
func (o FirestoreDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Output only. The system-generated UUID4 for this Database.
func (o FirestoreDatabaseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The timestamp at which this database was most recently updated.
func (o FirestoreDatabaseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Output only. The period during which past versions of data are retained in the database. Any read or query can specify a
// readTime within this window, and will read the state of the database at that time. If the PITR feature is enabled, the
// retention period is 7 days. Otherwise, the retention period is 1 hour. A duration in seconds with up to nine fractional
// digits, ending with 's'. Example: "3.5s".
func (o FirestoreDatabaseOutput) VersionRetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *FirestoreDatabase) pulumi.StringOutput { return v.VersionRetentionPeriod }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirestoreDatabaseInput)(nil)).Elem(), &FirestoreDatabase{})
	pulumi.RegisterOutputType(FirestoreDatabaseOutput{})
}
