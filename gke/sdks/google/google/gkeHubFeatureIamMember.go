// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeHubFeatureIamMember struct {
	pulumi.CustomResourceState

	Condition                GkeHubFeatureIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                     pulumi.StringOutput                      `pulumi:"etag"`
	GkeHubFeatureIamMemberId pulumi.StringOutput                      `pulumi:"gkeHubFeatureIamMemberId"`
	Location                 pulumi.StringOutput                      `pulumi:"location"`
	Member                   pulumi.StringOutput                      `pulumi:"member"`
	Name                     pulumi.StringOutput                      `pulumi:"name"`
	Project                  pulumi.StringOutput                      `pulumi:"project"`
	Role                     pulumi.StringOutput                      `pulumi:"role"`
}

// NewGkeHubFeatureIamMember registers a new resource with the given unique name, arguments, and options.
func NewGkeHubFeatureIamMember(ctx *pulumi.Context,
	name string, args *GkeHubFeatureIamMemberArgs, opts ...pulumi.ResourceOption) (*GkeHubFeatureIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeHubFeatureIamMember
	err = ctx.RegisterPackageResource("google:index/gkeHubFeatureIamMember:GkeHubFeatureIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeHubFeatureIamMember gets an existing GkeHubFeatureIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeHubFeatureIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeHubFeatureIamMemberState, opts ...pulumi.ResourceOption) (*GkeHubFeatureIamMember, error) {
	var resource GkeHubFeatureIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/gkeHubFeatureIamMember:GkeHubFeatureIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeHubFeatureIamMember resources.
type gkeHubFeatureIamMemberState struct {
	Condition                *GkeHubFeatureIamMemberCondition `pulumi:"condition"`
	Etag                     *string                          `pulumi:"etag"`
	GkeHubFeatureIamMemberId *string                          `pulumi:"gkeHubFeatureIamMemberId"`
	Location                 *string                          `pulumi:"location"`
	Member                   *string                          `pulumi:"member"`
	Name                     *string                          `pulumi:"name"`
	Project                  *string                          `pulumi:"project"`
	Role                     *string                          `pulumi:"role"`
}

type GkeHubFeatureIamMemberState struct {
	Condition                GkeHubFeatureIamMemberConditionPtrInput
	Etag                     pulumi.StringPtrInput
	GkeHubFeatureIamMemberId pulumi.StringPtrInput
	Location                 pulumi.StringPtrInput
	Member                   pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Project                  pulumi.StringPtrInput
	Role                     pulumi.StringPtrInput
}

func (GkeHubFeatureIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubFeatureIamMemberState)(nil)).Elem()
}

type gkeHubFeatureIamMemberArgs struct {
	Condition                *GkeHubFeatureIamMemberCondition `pulumi:"condition"`
	GkeHubFeatureIamMemberId *string                          `pulumi:"gkeHubFeatureIamMemberId"`
	Location                 *string                          `pulumi:"location"`
	Member                   string                           `pulumi:"member"`
	Name                     *string                          `pulumi:"name"`
	Project                  *string                          `pulumi:"project"`
	Role                     string                           `pulumi:"role"`
}

// The set of arguments for constructing a GkeHubFeatureIamMember resource.
type GkeHubFeatureIamMemberArgs struct {
	Condition                GkeHubFeatureIamMemberConditionPtrInput
	GkeHubFeatureIamMemberId pulumi.StringPtrInput
	Location                 pulumi.StringPtrInput
	Member                   pulumi.StringInput
	Name                     pulumi.StringPtrInput
	Project                  pulumi.StringPtrInput
	Role                     pulumi.StringInput
}

func (GkeHubFeatureIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubFeatureIamMemberArgs)(nil)).Elem()
}

type GkeHubFeatureIamMemberInput interface {
	pulumi.Input

	ToGkeHubFeatureIamMemberOutput() GkeHubFeatureIamMemberOutput
	ToGkeHubFeatureIamMemberOutputWithContext(ctx context.Context) GkeHubFeatureIamMemberOutput
}

func (*GkeHubFeatureIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubFeatureIamMember)(nil)).Elem()
}

func (i *GkeHubFeatureIamMember) ToGkeHubFeatureIamMemberOutput() GkeHubFeatureIamMemberOutput {
	return i.ToGkeHubFeatureIamMemberOutputWithContext(context.Background())
}

func (i *GkeHubFeatureIamMember) ToGkeHubFeatureIamMemberOutputWithContext(ctx context.Context) GkeHubFeatureIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeHubFeatureIamMemberOutput)
}

type GkeHubFeatureIamMemberOutput struct{ *pulumi.OutputState }

func (GkeHubFeatureIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubFeatureIamMember)(nil)).Elem()
}

func (o GkeHubFeatureIamMemberOutput) ToGkeHubFeatureIamMemberOutput() GkeHubFeatureIamMemberOutput {
	return o
}

func (o GkeHubFeatureIamMemberOutput) ToGkeHubFeatureIamMemberOutputWithContext(ctx context.Context) GkeHubFeatureIamMemberOutput {
	return o
}

func (o GkeHubFeatureIamMemberOutput) Condition() GkeHubFeatureIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) GkeHubFeatureIamMemberConditionPtrOutput { return v.Condition }).(GkeHubFeatureIamMemberConditionPtrOutput)
}

func (o GkeHubFeatureIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GkeHubFeatureIamMemberOutput) GkeHubFeatureIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.GkeHubFeatureIamMemberId }).(pulumi.StringOutput)
}

func (o GkeHubFeatureIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o GkeHubFeatureIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o GkeHubFeatureIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GkeHubFeatureIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o GkeHubFeatureIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubFeatureIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeHubFeatureIamMemberInput)(nil)).Elem(), &GkeHubFeatureIamMember{})
	pulumi.RegisterOutputType(GkeHubFeatureIamMemberOutput{})
}
