// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiIndex struct {
	pulumi.CustomResourceState

	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had
	// been undeployed first.
	DeployedIndexes VertexAiIndexDeployedIndexArrayOutput `pulumi:"deployedIndexes"`
	// The description of the Index.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName     pulumi.StringOutput    `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Stats of the index resource.
	IndexStats VertexAiIndexIndexStatArrayOutput `pulumi:"indexStats"`
	// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by
	// default. * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update. *
	// STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be
	// applied in corresponding DeployedIndexes in nearly real-time.
	IndexUpdateMethod pulumi.StringPtrOutput `pulumi:"indexUpdateMethod"`
	// The labels with user-defined metadata to organize your Indexes. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// An additional information about the Index
	Metadata VertexAiIndexMetadataPtrOutput `pulumi:"metadata"`
	// Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific
	// to it. Unset if the Index does not have any additional information.
	MetadataSchemaUri pulumi.StringOutput `pulumi:"metadataSchemaUri"`
	// The resource name of the Index.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of the index. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput         `pulumi:"terraformLabels"`
	Timeouts        VertexAiIndexTimeoutsPtrOutput `pulumi:"timeouts"`
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	UpdateTime      pulumi.StringOutput `pulumi:"updateTime"`
	VertexAiIndexId pulumi.StringOutput `pulumi:"vertexAiIndexId"`
}

// NewVertexAiIndex registers a new resource with the given unique name, arguments, and options.
func NewVertexAiIndex(ctx *pulumi.Context,
	name string, args *VertexAiIndexArgs, opts ...pulumi.ResourceOption) (*VertexAiIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiIndex
	err = ctx.RegisterPackageResource("google:index/vertexAiIndex:VertexAiIndex", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiIndex gets an existing VertexAiIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiIndexState, opts ...pulumi.ResourceOption) (*VertexAiIndex, error) {
	var resource VertexAiIndex
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/vertexAiIndex:VertexAiIndex", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiIndex resources.
type vertexAiIndexState struct {
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had
	// been undeployed first.
	DeployedIndexes []VertexAiIndexDeployedIndex `pulumi:"deployedIndexes"`
	// The description of the Index.
	Description *string `pulumi:"description"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// Stats of the index resource.
	IndexStats []VertexAiIndexIndexStat `pulumi:"indexStats"`
	// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by
	// default. * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update. *
	// STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be
	// applied in corresponding DeployedIndexes in nearly real-time.
	IndexUpdateMethod *string `pulumi:"indexUpdateMethod"`
	// The labels with user-defined metadata to organize your Indexes. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// An additional information about the Index
	Metadata *VertexAiIndexMetadata `pulumi:"metadata"`
	// Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific
	// to it. Unset if the Index does not have any additional information.
	MetadataSchemaUri *string `pulumi:"metadataSchemaUri"`
	// The resource name of the Index.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The region of the index. eg us-central1
	Region *string `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string      `pulumi:"terraformLabels"`
	Timeouts        *VertexAiIndexTimeouts `pulumi:"timeouts"`
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	UpdateTime      *string `pulumi:"updateTime"`
	VertexAiIndexId *string `pulumi:"vertexAiIndexId"`
}

type VertexAiIndexState struct {
	// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	CreateTime pulumi.StringPtrInput
	// The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had
	// been undeployed first.
	DeployedIndexes VertexAiIndexDeployedIndexArrayInput
	// The description of the Index.
	Description pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// Stats of the index resource.
	IndexStats VertexAiIndexIndexStatArrayInput
	// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by
	// default. * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update. *
	// STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be
	// applied in corresponding DeployedIndexes in nearly real-time.
	IndexUpdateMethod pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your Indexes. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// An additional information about the Index
	Metadata VertexAiIndexMetadataPtrInput
	// Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific
	// to it. Unset if the Index does not have any additional information.
	MetadataSchemaUri pulumi.StringPtrInput
	// The resource name of the Index.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The region of the index. eg us-central1
	Region pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        VertexAiIndexTimeoutsPtrInput
	// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	UpdateTime      pulumi.StringPtrInput
	VertexAiIndexId pulumi.StringPtrInput
}

func (VertexAiIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiIndexState)(nil)).Elem()
}

type vertexAiIndexArgs struct {
	// The description of the Index.
	Description *string `pulumi:"description"`
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName string `pulumi:"displayName"`
	// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by
	// default. * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update. *
	// STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be
	// applied in corresponding DeployedIndexes in nearly real-time.
	IndexUpdateMethod *string `pulumi:"indexUpdateMethod"`
	// The labels with user-defined metadata to organize your Indexes. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// An additional information about the Index
	Metadata *VertexAiIndexMetadata `pulumi:"metadata"`
	Project  *string                `pulumi:"project"`
	// The region of the index. eg us-central1
	Region          *string                `pulumi:"region"`
	Timeouts        *VertexAiIndexTimeouts `pulumi:"timeouts"`
	VertexAiIndexId *string                `pulumi:"vertexAiIndexId"`
}

// The set of arguments for constructing a VertexAiIndex resource.
type VertexAiIndexArgs struct {
	// The description of the Index.
	Description pulumi.StringPtrInput
	// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
	DisplayName pulumi.StringInput
	// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by
	// default. * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update. *
	// STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be
	// applied in corresponding DeployedIndexes in nearly real-time.
	IndexUpdateMethod pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your Indexes. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// An additional information about the Index
	Metadata VertexAiIndexMetadataPtrInput
	Project  pulumi.StringPtrInput
	// The region of the index. eg us-central1
	Region          pulumi.StringPtrInput
	Timeouts        VertexAiIndexTimeoutsPtrInput
	VertexAiIndexId pulumi.StringPtrInput
}

func (VertexAiIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiIndexArgs)(nil)).Elem()
}

type VertexAiIndexInput interface {
	pulumi.Input

	ToVertexAiIndexOutput() VertexAiIndexOutput
	ToVertexAiIndexOutputWithContext(ctx context.Context) VertexAiIndexOutput
}

func (*VertexAiIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiIndex)(nil)).Elem()
}

func (i *VertexAiIndex) ToVertexAiIndexOutput() VertexAiIndexOutput {
	return i.ToVertexAiIndexOutputWithContext(context.Background())
}

func (i *VertexAiIndex) ToVertexAiIndexOutputWithContext(ctx context.Context) VertexAiIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiIndexOutput)
}

type VertexAiIndexOutput struct{ *pulumi.OutputState }

func (VertexAiIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiIndex)(nil)).Elem()
}

func (o VertexAiIndexOutput) ToVertexAiIndexOutput() VertexAiIndexOutput {
	return o
}

func (o VertexAiIndexOutput) ToVertexAiIndexOutputWithContext(ctx context.Context) VertexAiIndexOutput {
	return o
}

// The timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits.
func (o VertexAiIndexOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had
// been undeployed first.
func (o VertexAiIndexOutput) DeployedIndexes() VertexAiIndexDeployedIndexArrayOutput {
	return o.ApplyT(func(v *VertexAiIndex) VertexAiIndexDeployedIndexArrayOutput { return v.DeployedIndexes }).(VertexAiIndexDeployedIndexArrayOutput)
}

// The description of the Index.
func (o VertexAiIndexOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
func (o VertexAiIndexOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o VertexAiIndexOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Used to perform consistent read-modify-write updates.
func (o VertexAiIndexOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Stats of the index resource.
func (o VertexAiIndexOutput) IndexStats() VertexAiIndexIndexStatArrayOutput {
	return o.ApplyT(func(v *VertexAiIndex) VertexAiIndexIndexStatArrayOutput { return v.IndexStats }).(VertexAiIndexIndexStatArrayOutput)
}

// The update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by
// default. * BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update. *
// STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be
// applied in corresponding DeployedIndexes in nearly real-time.
func (o VertexAiIndexOutput) IndexUpdateMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringPtrOutput { return v.IndexUpdateMethod }).(pulumi.StringPtrOutput)
}

// The labels with user-defined metadata to organize your Indexes. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o VertexAiIndexOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// An additional information about the Index
func (o VertexAiIndexOutput) Metadata() VertexAiIndexMetadataPtrOutput {
	return o.ApplyT(func(v *VertexAiIndex) VertexAiIndexMetadataPtrOutput { return v.Metadata }).(VertexAiIndexMetadataPtrOutput)
}

// Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific
// to it. Unset if the Index does not have any additional information.
func (o VertexAiIndexOutput) MetadataSchemaUri() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.MetadataSchemaUri }).(pulumi.StringOutput)
}

// The resource name of the Index.
func (o VertexAiIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VertexAiIndexOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the index. eg us-central1
func (o VertexAiIndexOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o VertexAiIndexOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o VertexAiIndexOutput) Timeouts() VertexAiIndexTimeoutsPtrOutput {
	return o.ApplyT(func(v *VertexAiIndex) VertexAiIndexTimeoutsPtrOutput { return v.Timeouts }).(VertexAiIndexTimeoutsPtrOutput)
}

// The timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits.
func (o VertexAiIndexOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o VertexAiIndexOutput) VertexAiIndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiIndex) pulumi.StringOutput { return v.VertexAiIndexId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiIndexInput)(nil)).Elem(), &VertexAiIndex{})
	pulumi.RegisterOutputType(VertexAiIndexOutput{})
}
