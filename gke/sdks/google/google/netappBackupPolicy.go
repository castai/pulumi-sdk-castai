// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetappBackupPolicy struct {
	pulumi.CustomResourceState

	// The total number of volumes assigned by this backup policy.
	AssignedVolumeCount pulumi.Float64Output `pulumi:"assignedVolumeCount"`
	// Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Number of daily backups to keep. Note that the minimum daily backup limit is 2.
	DailyBackupLimit pulumi.Float64Output `pulumi:"dailyBackupLimit"`
	// An optional description of this resource.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// If enabled, make backups automatically according to the schedules. This will be applied to all volumes that have this
	// policy attached and enforced on volume level.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the region for the policy to apply to.
	Location pulumi.StringOutput `pulumi:"location"`
	// Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	MonthlyBackupLimit pulumi.Float64Output `pulumi:"monthlyBackupLimit"`
	// The name of the backup policy. Needs to be unique per location.
	Name                 pulumi.StringOutput `pulumi:"name"`
	NetappBackupPolicyId pulumi.StringOutput `pulumi:"netappBackupPolicyId"`
	Project              pulumi.StringOutput `pulumi:"project"`
	// The state of the backup policy.
	State pulumi.StringOutput `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput              `pulumi:"terraformLabels"`
	Timeouts        NetappBackupPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
	// Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	WeeklyBackupLimit pulumi.Float64Output `pulumi:"weeklyBackupLimit"`
}

// NewNetappBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewNetappBackupPolicy(ctx *pulumi.Context,
	name string, args *NetappBackupPolicyArgs, opts ...pulumi.ResourceOption) (*NetappBackupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DailyBackupLimit == nil {
		return nil, errors.New("invalid value for required argument 'DailyBackupLimit'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MonthlyBackupLimit == nil {
		return nil, errors.New("invalid value for required argument 'MonthlyBackupLimit'")
	}
	if args.WeeklyBackupLimit == nil {
		return nil, errors.New("invalid value for required argument 'WeeklyBackupLimit'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetappBackupPolicy
	err = ctx.RegisterPackageResource("google:index/netappBackupPolicy:NetappBackupPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappBackupPolicy gets an existing NetappBackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappBackupPolicyState, opts ...pulumi.ResourceOption) (*NetappBackupPolicy, error) {
	var resource NetappBackupPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/netappBackupPolicy:NetappBackupPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappBackupPolicy resources.
type netappBackupPolicyState struct {
	// The total number of volumes assigned by this backup policy.
	AssignedVolumeCount *float64 `pulumi:"assignedVolumeCount"`
	// Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// Number of daily backups to keep. Note that the minimum daily backup limit is 2.
	DailyBackupLimit *float64 `pulumi:"dailyBackupLimit"`
	// An optional description of this resource.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// If enabled, make backups automatically according to the schedules. This will be applied to all volumes that have this
	// policy attached and enforced on volume level.
	Enabled *bool `pulumi:"enabled"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the region for the policy to apply to.
	Location *string `pulumi:"location"`
	// Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	MonthlyBackupLimit *float64 `pulumi:"monthlyBackupLimit"`
	// The name of the backup policy. Needs to be unique per location.
	Name                 *string `pulumi:"name"`
	NetappBackupPolicyId *string `pulumi:"netappBackupPolicyId"`
	Project              *string `pulumi:"project"`
	// The state of the backup policy.
	State *string `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string           `pulumi:"terraformLabels"`
	Timeouts        *NetappBackupPolicyTimeouts `pulumi:"timeouts"`
	// Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	WeeklyBackupLimit *float64 `pulumi:"weeklyBackupLimit"`
}

type NetappBackupPolicyState struct {
	// The total number of volumes assigned by this backup policy.
	AssignedVolumeCount pulumi.Float64PtrInput
	// Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// Number of daily backups to keep. Note that the minimum daily backup limit is 2.
	DailyBackupLimit pulumi.Float64PtrInput
	// An optional description of this resource.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// If enabled, make backups automatically according to the schedules. This will be applied to all volumes that have this
	// policy attached and enforced on volume level.
	Enabled pulumi.BoolPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the region for the policy to apply to.
	Location pulumi.StringPtrInput
	// Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	MonthlyBackupLimit pulumi.Float64PtrInput
	// The name of the backup policy. Needs to be unique per location.
	Name                 pulumi.StringPtrInput
	NetappBackupPolicyId pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	// The state of the backup policy.
	State pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetappBackupPolicyTimeoutsPtrInput
	// Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	WeeklyBackupLimit pulumi.Float64PtrInput
}

func (NetappBackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappBackupPolicyState)(nil)).Elem()
}

type netappBackupPolicyArgs struct {
	// Number of daily backups to keep. Note that the minimum daily backup limit is 2.
	DailyBackupLimit float64 `pulumi:"dailyBackupLimit"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// If enabled, make backups automatically according to the schedules. This will be applied to all volumes that have this
	// policy attached and enforced on volume level.
	Enabled *bool `pulumi:"enabled"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the region for the policy to apply to.
	Location string `pulumi:"location"`
	// Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	MonthlyBackupLimit float64 `pulumi:"monthlyBackupLimit"`
	// The name of the backup policy. Needs to be unique per location.
	Name                 *string                     `pulumi:"name"`
	NetappBackupPolicyId *string                     `pulumi:"netappBackupPolicyId"`
	Project              *string                     `pulumi:"project"`
	Timeouts             *NetappBackupPolicyTimeouts `pulumi:"timeouts"`
	// Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	WeeklyBackupLimit float64 `pulumi:"weeklyBackupLimit"`
}

// The set of arguments for constructing a NetappBackupPolicy resource.
type NetappBackupPolicyArgs struct {
	// Number of daily backups to keep. Note that the minimum daily backup limit is 2.
	DailyBackupLimit pulumi.Float64Input
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// If enabled, make backups automatically according to the schedules. This will be applied to all volumes that have this
	// policy attached and enforced on volume level.
	Enabled pulumi.BoolPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the region for the policy to apply to.
	Location pulumi.StringInput
	// Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	MonthlyBackupLimit pulumi.Float64Input
	// The name of the backup policy. Needs to be unique per location.
	Name                 pulumi.StringPtrInput
	NetappBackupPolicyId pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	Timeouts             NetappBackupPolicyTimeoutsPtrInput
	// Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
	WeeklyBackupLimit pulumi.Float64Input
}

func (NetappBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappBackupPolicyArgs)(nil)).Elem()
}

type NetappBackupPolicyInput interface {
	pulumi.Input

	ToNetappBackupPolicyOutput() NetappBackupPolicyOutput
	ToNetappBackupPolicyOutputWithContext(ctx context.Context) NetappBackupPolicyOutput
}

func (*NetappBackupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappBackupPolicy)(nil)).Elem()
}

func (i *NetappBackupPolicy) ToNetappBackupPolicyOutput() NetappBackupPolicyOutput {
	return i.ToNetappBackupPolicyOutputWithContext(context.Background())
}

func (i *NetappBackupPolicy) ToNetappBackupPolicyOutputWithContext(ctx context.Context) NetappBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappBackupPolicyOutput)
}

type NetappBackupPolicyOutput struct{ *pulumi.OutputState }

func (NetappBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappBackupPolicy)(nil)).Elem()
}

func (o NetappBackupPolicyOutput) ToNetappBackupPolicyOutput() NetappBackupPolicyOutput {
	return o
}

func (o NetappBackupPolicyOutput) ToNetappBackupPolicyOutputWithContext(ctx context.Context) NetappBackupPolicyOutput {
	return o
}

// The total number of volumes assigned by this backup policy.
func (o NetappBackupPolicyOutput) AssignedVolumeCount() pulumi.Float64Output {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.Float64Output { return v.AssignedVolumeCount }).(pulumi.Float64Output)
}

// Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o NetappBackupPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Number of daily backups to keep. Note that the minimum daily backup limit is 2.
func (o NetappBackupPolicyOutput) DailyBackupLimit() pulumi.Float64Output {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.Float64Output { return v.DailyBackupLimit }).(pulumi.Float64Output)
}

// An optional description of this resource.
func (o NetappBackupPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetappBackupPolicyOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// If enabled, make backups automatically according to the schedules. This will be applied to all volumes that have this
// policy attached and enforced on volume level.
func (o NetappBackupPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o NetappBackupPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the region for the policy to apply to.
func (o NetappBackupPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
func (o NetappBackupPolicyOutput) MonthlyBackupLimit() pulumi.Float64Output {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.Float64Output { return v.MonthlyBackupLimit }).(pulumi.Float64Output)
}

// The name of the backup policy. Needs to be unique per location.
func (o NetappBackupPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetappBackupPolicyOutput) NetappBackupPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringOutput { return v.NetappBackupPolicyId }).(pulumi.StringOutput)
}

func (o NetappBackupPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The state of the backup policy.
func (o NetappBackupPolicyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetappBackupPolicyOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetappBackupPolicyOutput) Timeouts() NetappBackupPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetappBackupPolicy) NetappBackupPolicyTimeoutsPtrOutput { return v.Timeouts }).(NetappBackupPolicyTimeoutsPtrOutput)
}

// Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
func (o NetappBackupPolicyOutput) WeeklyBackupLimit() pulumi.Float64Output {
	return o.ApplyT(func(v *NetappBackupPolicy) pulumi.Float64Output { return v.WeeklyBackupLimit }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappBackupPolicyInput)(nil)).Elem(), &NetappBackupPolicy{})
	pulumi.RegisterOutputType(NetappBackupPolicyOutput{})
}
