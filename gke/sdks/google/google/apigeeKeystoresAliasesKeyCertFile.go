// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApigeeKeystoresAliasesKeyCertFile struct {
	pulumi.CustomResourceState

	// Alias Name
	Alias                               pulumi.StringOutput `pulumi:"alias"`
	ApigeeKeystoresAliasesKeyCertFileId pulumi.StringOutput `pulumi:"apigeeKeystoresAliasesKeyCertFileId"`
	// Cert content
	Cert pulumi.StringOutput `pulumi:"cert"`
	// Chain of certificates under this alias.
	CertsInfo ApigeeKeystoresAliasesKeyCertFileCertsInfoPtrOutput `pulumi:"certsInfo"`
	// Environment associated with the alias
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Private Key content, omit if uploading to truststore
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Keystore Name
	Keystore pulumi.StringOutput `pulumi:"keystore"`
	// Organization ID associated with the alias
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Password for the Private Key if it's encrypted
	Password pulumi.StringPtrOutput                             `pulumi:"password"`
	Timeouts ApigeeKeystoresAliasesKeyCertFileTimeoutsPtrOutput `pulumi:"timeouts"`
	// Optional.Type of Alias
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApigeeKeystoresAliasesKeyCertFile registers a new resource with the given unique name, arguments, and options.
func NewApigeeKeystoresAliasesKeyCertFile(ctx *pulumi.Context,
	name string, args *ApigeeKeystoresAliasesKeyCertFileArgs, opts ...pulumi.ResourceOption) (*ApigeeKeystoresAliasesKeyCertFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.Cert == nil {
		return nil, errors.New("invalid value for required argument 'Cert'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Keystore == nil {
		return nil, errors.New("invalid value for required argument 'Keystore'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ApigeeKeystoresAliasesKeyCertFile
	err = ctx.RegisterPackageResource("google:index/apigeeKeystoresAliasesKeyCertFile:ApigeeKeystoresAliasesKeyCertFile", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigeeKeystoresAliasesKeyCertFile gets an existing ApigeeKeystoresAliasesKeyCertFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigeeKeystoresAliasesKeyCertFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigeeKeystoresAliasesKeyCertFileState, opts ...pulumi.ResourceOption) (*ApigeeKeystoresAliasesKeyCertFile, error) {
	var resource ApigeeKeystoresAliasesKeyCertFile
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/apigeeKeystoresAliasesKeyCertFile:ApigeeKeystoresAliasesKeyCertFile", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigeeKeystoresAliasesKeyCertFile resources.
type apigeeKeystoresAliasesKeyCertFileState struct {
	// Alias Name
	Alias                               *string `pulumi:"alias"`
	ApigeeKeystoresAliasesKeyCertFileId *string `pulumi:"apigeeKeystoresAliasesKeyCertFileId"`
	// Cert content
	Cert *string `pulumi:"cert"`
	// Chain of certificates under this alias.
	CertsInfo *ApigeeKeystoresAliasesKeyCertFileCertsInfo `pulumi:"certsInfo"`
	// Environment associated with the alias
	Environment *string `pulumi:"environment"`
	// Private Key content, omit if uploading to truststore
	Key *string `pulumi:"key"`
	// Keystore Name
	Keystore *string `pulumi:"keystore"`
	// Organization ID associated with the alias
	OrgId *string `pulumi:"orgId"`
	// Password for the Private Key if it's encrypted
	Password *string                                    `pulumi:"password"`
	Timeouts *ApigeeKeystoresAliasesKeyCertFileTimeouts `pulumi:"timeouts"`
	// Optional.Type of Alias
	Type *string `pulumi:"type"`
}

type ApigeeKeystoresAliasesKeyCertFileState struct {
	// Alias Name
	Alias                               pulumi.StringPtrInput
	ApigeeKeystoresAliasesKeyCertFileId pulumi.StringPtrInput
	// Cert content
	Cert pulumi.StringPtrInput
	// Chain of certificates under this alias.
	CertsInfo ApigeeKeystoresAliasesKeyCertFileCertsInfoPtrInput
	// Environment associated with the alias
	Environment pulumi.StringPtrInput
	// Private Key content, omit if uploading to truststore
	Key pulumi.StringPtrInput
	// Keystore Name
	Keystore pulumi.StringPtrInput
	// Organization ID associated with the alias
	OrgId pulumi.StringPtrInput
	// Password for the Private Key if it's encrypted
	Password pulumi.StringPtrInput
	Timeouts ApigeeKeystoresAliasesKeyCertFileTimeoutsPtrInput
	// Optional.Type of Alias
	Type pulumi.StringPtrInput
}

func (ApigeeKeystoresAliasesKeyCertFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigeeKeystoresAliasesKeyCertFileState)(nil)).Elem()
}

type apigeeKeystoresAliasesKeyCertFileArgs struct {
	// Alias Name
	Alias                               string  `pulumi:"alias"`
	ApigeeKeystoresAliasesKeyCertFileId *string `pulumi:"apigeeKeystoresAliasesKeyCertFileId"`
	// Cert content
	Cert string `pulumi:"cert"`
	// Chain of certificates under this alias.
	CertsInfo *ApigeeKeystoresAliasesKeyCertFileCertsInfo `pulumi:"certsInfo"`
	// Environment associated with the alias
	Environment string `pulumi:"environment"`
	// Private Key content, omit if uploading to truststore
	Key *string `pulumi:"key"`
	// Keystore Name
	Keystore string `pulumi:"keystore"`
	// Organization ID associated with the alias
	OrgId string `pulumi:"orgId"`
	// Password for the Private Key if it's encrypted
	Password *string                                    `pulumi:"password"`
	Timeouts *ApigeeKeystoresAliasesKeyCertFileTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ApigeeKeystoresAliasesKeyCertFile resource.
type ApigeeKeystoresAliasesKeyCertFileArgs struct {
	// Alias Name
	Alias                               pulumi.StringInput
	ApigeeKeystoresAliasesKeyCertFileId pulumi.StringPtrInput
	// Cert content
	Cert pulumi.StringInput
	// Chain of certificates under this alias.
	CertsInfo ApigeeKeystoresAliasesKeyCertFileCertsInfoPtrInput
	// Environment associated with the alias
	Environment pulumi.StringInput
	// Private Key content, omit if uploading to truststore
	Key pulumi.StringPtrInput
	// Keystore Name
	Keystore pulumi.StringInput
	// Organization ID associated with the alias
	OrgId pulumi.StringInput
	// Password for the Private Key if it's encrypted
	Password pulumi.StringPtrInput
	Timeouts ApigeeKeystoresAliasesKeyCertFileTimeoutsPtrInput
}

func (ApigeeKeystoresAliasesKeyCertFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigeeKeystoresAliasesKeyCertFileArgs)(nil)).Elem()
}

type ApigeeKeystoresAliasesKeyCertFileInput interface {
	pulumi.Input

	ToApigeeKeystoresAliasesKeyCertFileOutput() ApigeeKeystoresAliasesKeyCertFileOutput
	ToApigeeKeystoresAliasesKeyCertFileOutputWithContext(ctx context.Context) ApigeeKeystoresAliasesKeyCertFileOutput
}

func (*ApigeeKeystoresAliasesKeyCertFile) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigeeKeystoresAliasesKeyCertFile)(nil)).Elem()
}

func (i *ApigeeKeystoresAliasesKeyCertFile) ToApigeeKeystoresAliasesKeyCertFileOutput() ApigeeKeystoresAliasesKeyCertFileOutput {
	return i.ToApigeeKeystoresAliasesKeyCertFileOutputWithContext(context.Background())
}

func (i *ApigeeKeystoresAliasesKeyCertFile) ToApigeeKeystoresAliasesKeyCertFileOutputWithContext(ctx context.Context) ApigeeKeystoresAliasesKeyCertFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigeeKeystoresAliasesKeyCertFileOutput)
}

type ApigeeKeystoresAliasesKeyCertFileOutput struct{ *pulumi.OutputState }

func (ApigeeKeystoresAliasesKeyCertFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigeeKeystoresAliasesKeyCertFile)(nil)).Elem()
}

func (o ApigeeKeystoresAliasesKeyCertFileOutput) ToApigeeKeystoresAliasesKeyCertFileOutput() ApigeeKeystoresAliasesKeyCertFileOutput {
	return o
}

func (o ApigeeKeystoresAliasesKeyCertFileOutput) ToApigeeKeystoresAliasesKeyCertFileOutputWithContext(ctx context.Context) ApigeeKeystoresAliasesKeyCertFileOutput {
	return o
}

// Alias Name
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o ApigeeKeystoresAliasesKeyCertFileOutput) ApigeeKeystoresAliasesKeyCertFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput {
		return v.ApigeeKeystoresAliasesKeyCertFileId
	}).(pulumi.StringOutput)
}

// Cert content
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

// Chain of certificates under this alias.
func (o ApigeeKeystoresAliasesKeyCertFileOutput) CertsInfo() ApigeeKeystoresAliasesKeyCertFileCertsInfoPtrOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) ApigeeKeystoresAliasesKeyCertFileCertsInfoPtrOutput {
		return v.CertsInfo
	}).(ApigeeKeystoresAliasesKeyCertFileCertsInfoPtrOutput)
}

// Environment associated with the alias
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Private Key content, omit if uploading to truststore
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Keystore Name
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Keystore() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput { return v.Keystore }).(pulumi.StringOutput)
}

// Organization ID associated with the alias
func (o ApigeeKeystoresAliasesKeyCertFileOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Password for the Private Key if it's encrypted
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ApigeeKeystoresAliasesKeyCertFileOutput) Timeouts() ApigeeKeystoresAliasesKeyCertFileTimeoutsPtrOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) ApigeeKeystoresAliasesKeyCertFileTimeoutsPtrOutput {
		return v.Timeouts
	}).(ApigeeKeystoresAliasesKeyCertFileTimeoutsPtrOutput)
}

// Optional.Type of Alias
func (o ApigeeKeystoresAliasesKeyCertFileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigeeKeystoresAliasesKeyCertFile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigeeKeystoresAliasesKeyCertFileInput)(nil)).Elem(), &ApigeeKeystoresAliasesKeyCertFile{})
	pulumi.RegisterOutputType(ApigeeKeystoresAliasesKeyCertFileOutput{})
}
