// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeonpremVmwareCluster struct {
	pulumi.CustomResourceState

	// The admin cluster this VMware User Cluster belongs to. This is the full resource name of the admin cluster's hub
	// membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their
	// own resources.
	AdminClusterMembership pulumi.StringOutput `pulumi:"adminClusterMembership"`
	// Annotations on the VMware User Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware User Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups GkeonpremVmwareClusterAntiAffinityGroupsPtrOutput `pulumi:"antiAffinityGroups"`
	// RBAC policy that will be applied and managed by GKE On-Prem.
	Authorization GkeonpremVmwareClusterAuthorizationPtrOutput `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig GkeonpremVmwareClusterAutoRepairConfigPtrOutput `pulumi:"autoRepairConfig"`
	// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode GkeonpremVmwareClusterControlPlaneNodeOutput `pulumi:"controlPlaneNode"`
	// The time at which VMware User Cluster was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 GkeonpremVmwareClusterDataplaneV2PtrOutput `pulumi:"dataplaneV2"`
	// The time at which VMware User Cluster was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// A human readable description of this VMware User Cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disable bundled ingress.
	DisableBundledIngress pulumi.BoolPtrOutput   `pulumi:"disableBundledIngress"`
	EffectiveAnnotations  pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 pulumi.BoolPtrOutput `pulumi:"enableControlPlaneV2"`
	// The DNS name of VMware User Cluster's API server.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Fleet configuration for the cluster.
	Fleets                   GkeonpremVmwareClusterFleetArrayOutput `pulumi:"fleets"`
	GkeonpremVmwareClusterId pulumi.StringOutput                    `pulumi:"gkeonpremVmwareClusterId"`
	// Load Balancer configuration.
	LoadBalancer GkeonpremVmwareClusterLoadBalancerPtrOutput `pulumi:"loadBalancer"`
	// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to
	// support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this
	// field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID
	// and be visible in the last component of the resource name. It is not modifiable. All users should use this name to
	// access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster
	// controller logs.
	LocalName pulumi.StringOutput `pulumi:"localName"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The VMware cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The VMware User Cluster network configuration.
	NetworkConfig GkeonpremVmwareClusterNetworkConfigPtrOutput `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion pulumi.StringOutput `pulumi:"onPremVersion"`
	Project       pulumi.StringOutput `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware User Cluster.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The current state of this cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Statuses GkeonpremVmwareClusterStatusArrayOutput `pulumi:"statuses"`
	// Storage configuration.
	Storage  GkeonpremVmwareClusterStoragePtrOutput  `pulumi:"storage"`
	Timeouts GkeonpremVmwareClusterTimeoutsPtrOutput `pulumi:"timeouts"`
	// The unique identifier of the VMware User Cluster.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time at which VMware User Cluster was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Specifies upgrade policy for the cluster.
	UpgradePolicy GkeonpremVmwareClusterUpgradePolicyPtrOutput `pulumi:"upgradePolicy"`
	// ValidationCheck represents the result of the preflight check job.
	ValidationChecks GkeonpremVmwareClusterValidationCheckArrayOutput `pulumi:"validationChecks"`
	// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
	Vcenter GkeonpremVmwareClusterVcenterPtrOutput `pulumi:"vcenter"`
	// Enable VM tracking.
	VmTrackingEnabled pulumi.BoolOutput `pulumi:"vmTrackingEnabled"`
}

// NewGkeonpremVmwareCluster registers a new resource with the given unique name, arguments, and options.
func NewGkeonpremVmwareCluster(ctx *pulumi.Context,
	name string, args *GkeonpremVmwareClusterArgs, opts ...pulumi.ResourceOption) (*GkeonpremVmwareCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminClusterMembership == nil {
		return nil, errors.New("invalid value for required argument 'AdminClusterMembership'")
	}
	if args.ControlPlaneNode == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneNode'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.OnPremVersion == nil {
		return nil, errors.New("invalid value for required argument 'OnPremVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeonpremVmwareCluster
	err = ctx.RegisterPackageResource("google:index/gkeonpremVmwareCluster:GkeonpremVmwareCluster", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeonpremVmwareCluster gets an existing GkeonpremVmwareCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeonpremVmwareCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeonpremVmwareClusterState, opts ...pulumi.ResourceOption) (*GkeonpremVmwareCluster, error) {
	var resource GkeonpremVmwareCluster
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/gkeonpremVmwareCluster:GkeonpremVmwareCluster", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeonpremVmwareCluster resources.
type gkeonpremVmwareClusterState struct {
	// The admin cluster this VMware User Cluster belongs to. This is the full resource name of the admin cluster's hub
	// membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their
	// own resources.
	AdminClusterMembership *string `pulumi:"adminClusterMembership"`
	// Annotations on the VMware User Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware User Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *GkeonpremVmwareClusterAntiAffinityGroups `pulumi:"antiAffinityGroups"`
	// RBAC policy that will be applied and managed by GKE On-Prem.
	Authorization *GkeonpremVmwareClusterAuthorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *GkeonpremVmwareClusterAutoRepairConfig `pulumi:"autoRepairConfig"`
	// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode *GkeonpremVmwareClusterControlPlaneNode `pulumi:"controlPlaneNode"`
	// The time at which VMware User Cluster was created.
	CreateTime *string `pulumi:"createTime"`
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 *GkeonpremVmwareClusterDataplaneV2 `pulumi:"dataplaneV2"`
	// The time at which VMware User Cluster was deleted.
	DeleteTime *string `pulumi:"deleteTime"`
	// A human readable description of this VMware User Cluster.
	Description *string `pulumi:"description"`
	// Disable bundled ingress.
	DisableBundledIngress *bool             `pulumi:"disableBundledIngress"`
	EffectiveAnnotations  map[string]string `pulumi:"effectiveAnnotations"`
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 *bool `pulumi:"enableControlPlaneV2"`
	// The DNS name of VMware User Cluster's API server.
	Endpoint *string `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag *string `pulumi:"etag"`
	// Fleet configuration for the cluster.
	Fleets                   []GkeonpremVmwareClusterFleet `pulumi:"fleets"`
	GkeonpremVmwareClusterId *string                       `pulumi:"gkeonpremVmwareClusterId"`
	// Load Balancer configuration.
	LoadBalancer *GkeonpremVmwareClusterLoadBalancer `pulumi:"loadBalancer"`
	// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to
	// support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this
	// field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID
	// and be visible in the last component of the resource name. It is not modifiable. All users should use this name to
	// access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster
	// controller logs.
	LocalName *string `pulumi:"localName"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The VMware cluster name.
	Name *string `pulumi:"name"`
	// The VMware User Cluster network configuration.
	NetworkConfig *GkeonpremVmwareClusterNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion *string `pulumi:"onPremVersion"`
	Project       *string `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware User Cluster.
	Reconciling *bool `pulumi:"reconciling"`
	// The current state of this cluster.
	State *string `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Statuses []GkeonpremVmwareClusterStatus `pulumi:"statuses"`
	// Storage configuration.
	Storage  *GkeonpremVmwareClusterStorage  `pulumi:"storage"`
	Timeouts *GkeonpremVmwareClusterTimeouts `pulumi:"timeouts"`
	// The unique identifier of the VMware User Cluster.
	Uid *string `pulumi:"uid"`
	// The time at which VMware User Cluster was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Specifies upgrade policy for the cluster.
	UpgradePolicy *GkeonpremVmwareClusterUpgradePolicy `pulumi:"upgradePolicy"`
	// ValidationCheck represents the result of the preflight check job.
	ValidationChecks []GkeonpremVmwareClusterValidationCheck `pulumi:"validationChecks"`
	// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
	Vcenter *GkeonpremVmwareClusterVcenter `pulumi:"vcenter"`
	// Enable VM tracking.
	VmTrackingEnabled *bool `pulumi:"vmTrackingEnabled"`
}

type GkeonpremVmwareClusterState struct {
	// The admin cluster this VMware User Cluster belongs to. This is the full resource name of the admin cluster's hub
	// membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their
	// own resources.
	AdminClusterMembership pulumi.StringPtrInput
	// Annotations on the VMware User Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware User Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups GkeonpremVmwareClusterAntiAffinityGroupsPtrInput
	// RBAC policy that will be applied and managed by GKE On-Prem.
	Authorization GkeonpremVmwareClusterAuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig GkeonpremVmwareClusterAutoRepairConfigPtrInput
	// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode GkeonpremVmwareClusterControlPlaneNodePtrInput
	// The time at which VMware User Cluster was created.
	CreateTime pulumi.StringPtrInput
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 GkeonpremVmwareClusterDataplaneV2PtrInput
	// The time at which VMware User Cluster was deleted.
	DeleteTime pulumi.StringPtrInput
	// A human readable description of this VMware User Cluster.
	Description pulumi.StringPtrInput
	// Disable bundled ingress.
	DisableBundledIngress pulumi.BoolPtrInput
	EffectiveAnnotations  pulumi.StringMapInput
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 pulumi.BoolPtrInput
	// The DNS name of VMware User Cluster's API server.
	Endpoint pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag pulumi.StringPtrInput
	// Fleet configuration for the cluster.
	Fleets                   GkeonpremVmwareClusterFleetArrayInput
	GkeonpremVmwareClusterId pulumi.StringPtrInput
	// Load Balancer configuration.
	LoadBalancer GkeonpremVmwareClusterLoadBalancerPtrInput
	// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to
	// support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this
	// field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID
	// and be visible in the last component of the resource name. It is not modifiable. All users should use this name to
	// access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster
	// controller logs.
	LocalName pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The VMware cluster name.
	Name pulumi.StringPtrInput
	// The VMware User Cluster network configuration.
	NetworkConfig GkeonpremVmwareClusterNetworkConfigPtrInput
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion pulumi.StringPtrInput
	Project       pulumi.StringPtrInput
	// If set, there are currently changes in flight to the VMware User Cluster.
	Reconciling pulumi.BoolPtrInput
	// The current state of this cluster.
	State pulumi.StringPtrInput
	// ResourceStatus representing detailed cluster state.
	Statuses GkeonpremVmwareClusterStatusArrayInput
	// Storage configuration.
	Storage  GkeonpremVmwareClusterStoragePtrInput
	Timeouts GkeonpremVmwareClusterTimeoutsPtrInput
	// The unique identifier of the VMware User Cluster.
	Uid pulumi.StringPtrInput
	// The time at which VMware User Cluster was last updated.
	UpdateTime pulumi.StringPtrInput
	// Specifies upgrade policy for the cluster.
	UpgradePolicy GkeonpremVmwareClusterUpgradePolicyPtrInput
	// ValidationCheck represents the result of the preflight check job.
	ValidationChecks GkeonpremVmwareClusterValidationCheckArrayInput
	// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
	Vcenter GkeonpremVmwareClusterVcenterPtrInput
	// Enable VM tracking.
	VmTrackingEnabled pulumi.BoolPtrInput
}

func (GkeonpremVmwareClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeonpremVmwareClusterState)(nil)).Elem()
}

type gkeonpremVmwareClusterArgs struct {
	// The admin cluster this VMware User Cluster belongs to. This is the full resource name of the admin cluster's hub
	// membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their
	// own resources.
	AdminClusterMembership string `pulumi:"adminClusterMembership"`
	// Annotations on the VMware User Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware User Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *GkeonpremVmwareClusterAntiAffinityGroups `pulumi:"antiAffinityGroups"`
	// RBAC policy that will be applied and managed by GKE On-Prem.
	Authorization *GkeonpremVmwareClusterAuthorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *GkeonpremVmwareClusterAutoRepairConfig `pulumi:"autoRepairConfig"`
	// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode GkeonpremVmwareClusterControlPlaneNode `pulumi:"controlPlaneNode"`
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 *GkeonpremVmwareClusterDataplaneV2 `pulumi:"dataplaneV2"`
	// A human readable description of this VMware User Cluster.
	Description *string `pulumi:"description"`
	// Disable bundled ingress.
	DisableBundledIngress *bool `pulumi:"disableBundledIngress"`
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2     *bool   `pulumi:"enableControlPlaneV2"`
	GkeonpremVmwareClusterId *string `pulumi:"gkeonpremVmwareClusterId"`
	// Load Balancer configuration.
	LoadBalancer *GkeonpremVmwareClusterLoadBalancer `pulumi:"loadBalancer"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The VMware cluster name.
	Name *string `pulumi:"name"`
	// The VMware User Cluster network configuration.
	NetworkConfig *GkeonpremVmwareClusterNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion string  `pulumi:"onPremVersion"`
	Project       *string `pulumi:"project"`
	// Storage configuration.
	Storage  *GkeonpremVmwareClusterStorage  `pulumi:"storage"`
	Timeouts *GkeonpremVmwareClusterTimeouts `pulumi:"timeouts"`
	// Specifies upgrade policy for the cluster.
	UpgradePolicy *GkeonpremVmwareClusterUpgradePolicy `pulumi:"upgradePolicy"`
	// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
	Vcenter *GkeonpremVmwareClusterVcenter `pulumi:"vcenter"`
	// Enable VM tracking.
	VmTrackingEnabled *bool `pulumi:"vmTrackingEnabled"`
}

// The set of arguments for constructing a GkeonpremVmwareCluster resource.
type GkeonpremVmwareClusterArgs struct {
	// The admin cluster this VMware User Cluster belongs to. This is the full resource name of the admin cluster's hub
	// membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their
	// own resources.
	AdminClusterMembership pulumi.StringInput
	// Annotations on the VMware User Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware User Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups GkeonpremVmwareClusterAntiAffinityGroupsPtrInput
	// RBAC policy that will be applied and managed by GKE On-Prem.
	Authorization GkeonpremVmwareClusterAuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig GkeonpremVmwareClusterAutoRepairConfigPtrInput
	// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode GkeonpremVmwareClusterControlPlaneNodeInput
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 GkeonpremVmwareClusterDataplaneV2PtrInput
	// A human readable description of this VMware User Cluster.
	Description pulumi.StringPtrInput
	// Disable bundled ingress.
	DisableBundledIngress pulumi.BoolPtrInput
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2     pulumi.BoolPtrInput
	GkeonpremVmwareClusterId pulumi.StringPtrInput
	// Load Balancer configuration.
	LoadBalancer GkeonpremVmwareClusterLoadBalancerPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The VMware cluster name.
	Name pulumi.StringPtrInput
	// The VMware User Cluster network configuration.
	NetworkConfig GkeonpremVmwareClusterNetworkConfigPtrInput
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion pulumi.StringInput
	Project       pulumi.StringPtrInput
	// Storage configuration.
	Storage  GkeonpremVmwareClusterStoragePtrInput
	Timeouts GkeonpremVmwareClusterTimeoutsPtrInput
	// Specifies upgrade policy for the cluster.
	UpgradePolicy GkeonpremVmwareClusterUpgradePolicyPtrInput
	// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
	Vcenter GkeonpremVmwareClusterVcenterPtrInput
	// Enable VM tracking.
	VmTrackingEnabled pulumi.BoolPtrInput
}

func (GkeonpremVmwareClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeonpremVmwareClusterArgs)(nil)).Elem()
}

type GkeonpremVmwareClusterInput interface {
	pulumi.Input

	ToGkeonpremVmwareClusterOutput() GkeonpremVmwareClusterOutput
	ToGkeonpremVmwareClusterOutputWithContext(ctx context.Context) GkeonpremVmwareClusterOutput
}

func (*GkeonpremVmwareCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeonpremVmwareCluster)(nil)).Elem()
}

func (i *GkeonpremVmwareCluster) ToGkeonpremVmwareClusterOutput() GkeonpremVmwareClusterOutput {
	return i.ToGkeonpremVmwareClusterOutputWithContext(context.Background())
}

func (i *GkeonpremVmwareCluster) ToGkeonpremVmwareClusterOutputWithContext(ctx context.Context) GkeonpremVmwareClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeonpremVmwareClusterOutput)
}

type GkeonpremVmwareClusterOutput struct{ *pulumi.OutputState }

func (GkeonpremVmwareClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeonpremVmwareCluster)(nil)).Elem()
}

func (o GkeonpremVmwareClusterOutput) ToGkeonpremVmwareClusterOutput() GkeonpremVmwareClusterOutput {
	return o
}

func (o GkeonpremVmwareClusterOutput) ToGkeonpremVmwareClusterOutputWithContext(ctx context.Context) GkeonpremVmwareClusterOutput {
	return o
}

// The admin cluster this VMware User Cluster belongs to. This is the full resource name of the admin cluster's hub
// membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their
// own resources.
func (o GkeonpremVmwareClusterOutput) AdminClusterMembership() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.AdminClusterMembership }).(pulumi.StringOutput)
}

// Annotations on the VMware User Cluster. This field has the same restrictions as Kubernetes annotations. The total size
// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
// 'effective_annotations' for all of the annotations present on the resource.
func (o GkeonpremVmwareClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// AAGConfig specifies whether to spread VMware User Cluster nodes across at least three physical hosts in the datacenter.
func (o GkeonpremVmwareClusterOutput) AntiAffinityGroups() GkeonpremVmwareClusterAntiAffinityGroupsPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterAntiAffinityGroupsPtrOutput {
		return v.AntiAffinityGroups
	}).(GkeonpremVmwareClusterAntiAffinityGroupsPtrOutput)
}

// RBAC policy that will be applied and managed by GKE On-Prem.
func (o GkeonpremVmwareClusterOutput) Authorization() GkeonpremVmwareClusterAuthorizationPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterAuthorizationPtrOutput { return v.Authorization }).(GkeonpremVmwareClusterAuthorizationPtrOutput)
}

// Configuration for auto repairing.
func (o GkeonpremVmwareClusterOutput) AutoRepairConfig() GkeonpremVmwareClusterAutoRepairConfigPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterAutoRepairConfigPtrOutput {
		return v.AutoRepairConfig
	}).(GkeonpremVmwareClusterAutoRepairConfigPtrOutput)
}

// VMware User Cluster control plane nodes must have either 1 or 3 replicas.
func (o GkeonpremVmwareClusterOutput) ControlPlaneNode() GkeonpremVmwareClusterControlPlaneNodeOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterControlPlaneNodeOutput {
		return v.ControlPlaneNode
	}).(GkeonpremVmwareClusterControlPlaneNodeOutput)
}

// The time at which VMware User Cluster was created.
func (o GkeonpremVmwareClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
func (o GkeonpremVmwareClusterOutput) DataplaneV2() GkeonpremVmwareClusterDataplaneV2PtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterDataplaneV2PtrOutput { return v.DataplaneV2 }).(GkeonpremVmwareClusterDataplaneV2PtrOutput)
}

// The time at which VMware User Cluster was deleted.
func (o GkeonpremVmwareClusterOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// A human readable description of this VMware User Cluster.
func (o GkeonpremVmwareClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disable bundled ingress.
func (o GkeonpremVmwareClusterOutput) DisableBundledIngress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.BoolPtrOutput { return v.DisableBundledIngress }).(pulumi.BoolPtrOutput)
}

func (o GkeonpremVmwareClusterOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// Enable control plane V2. Default to false.
func (o GkeonpremVmwareClusterOutput) EnableControlPlaneV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.BoolPtrOutput { return v.EnableControlPlaneV2 }).(pulumi.BoolPtrOutput)
}

// The DNS name of VMware User Cluster's API server.
func (o GkeonpremVmwareClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
// read-modify-writes through optimistic concurrency control.
func (o GkeonpremVmwareClusterOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Fleet configuration for the cluster.
func (o GkeonpremVmwareClusterOutput) Fleets() GkeonpremVmwareClusterFleetArrayOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterFleetArrayOutput { return v.Fleets }).(GkeonpremVmwareClusterFleetArrayOutput)
}

func (o GkeonpremVmwareClusterOutput) GkeonpremVmwareClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.GkeonpremVmwareClusterId }).(pulumi.StringOutput)
}

// Load Balancer configuration.
func (o GkeonpremVmwareClusterOutput) LoadBalancer() GkeonpremVmwareClusterLoadBalancerPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterLoadBalancerPtrOutput { return v.LoadBalancer }).(GkeonpremVmwareClusterLoadBalancerPtrOutput)
}

// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to
// support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this
// field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID
// and be visible in the last component of the resource name. It is not modifiable. All users should use this name to
// access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster
// controller logs.
func (o GkeonpremVmwareClusterOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.LocalName }).(pulumi.StringOutput)
}

// The location of the resource.
func (o GkeonpremVmwareClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The VMware cluster name.
func (o GkeonpremVmwareClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The VMware User Cluster network configuration.
func (o GkeonpremVmwareClusterOutput) NetworkConfig() GkeonpremVmwareClusterNetworkConfigPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterNetworkConfigPtrOutput { return v.NetworkConfig }).(GkeonpremVmwareClusterNetworkConfigPtrOutput)
}

// The Anthos clusters on the VMware version for your user cluster.
func (o GkeonpremVmwareClusterOutput) OnPremVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.OnPremVersion }).(pulumi.StringOutput)
}

func (o GkeonpremVmwareClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the VMware User Cluster.
func (o GkeonpremVmwareClusterOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of this cluster.
func (o GkeonpremVmwareClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing detailed cluster state.
func (o GkeonpremVmwareClusterOutput) Statuses() GkeonpremVmwareClusterStatusArrayOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterStatusArrayOutput { return v.Statuses }).(GkeonpremVmwareClusterStatusArrayOutput)
}

// Storage configuration.
func (o GkeonpremVmwareClusterOutput) Storage() GkeonpremVmwareClusterStoragePtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterStoragePtrOutput { return v.Storage }).(GkeonpremVmwareClusterStoragePtrOutput)
}

func (o GkeonpremVmwareClusterOutput) Timeouts() GkeonpremVmwareClusterTimeoutsPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterTimeoutsPtrOutput { return v.Timeouts }).(GkeonpremVmwareClusterTimeoutsPtrOutput)
}

// The unique identifier of the VMware User Cluster.
func (o GkeonpremVmwareClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time at which VMware User Cluster was last updated.
func (o GkeonpremVmwareClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Specifies upgrade policy for the cluster.
func (o GkeonpremVmwareClusterOutput) UpgradePolicy() GkeonpremVmwareClusterUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterUpgradePolicyPtrOutput { return v.UpgradePolicy }).(GkeonpremVmwareClusterUpgradePolicyPtrOutput)
}

// ValidationCheck represents the result of the preflight check job.
func (o GkeonpremVmwareClusterOutput) ValidationChecks() GkeonpremVmwareClusterValidationCheckArrayOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterValidationCheckArrayOutput {
		return v.ValidationChecks
	}).(GkeonpremVmwareClusterValidationCheckArrayOutput)
}

// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
func (o GkeonpremVmwareClusterOutput) Vcenter() GkeonpremVmwareClusterVcenterPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) GkeonpremVmwareClusterVcenterPtrOutput { return v.Vcenter }).(GkeonpremVmwareClusterVcenterPtrOutput)
}

// Enable VM tracking.
func (o GkeonpremVmwareClusterOutput) VmTrackingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GkeonpremVmwareCluster) pulumi.BoolOutput { return v.VmTrackingEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeonpremVmwareClusterInput)(nil)).Elem(), &GkeonpremVmwareCluster{})
	pulumi.RegisterOutputType(GkeonpremVmwareClusterOutput{})
}
