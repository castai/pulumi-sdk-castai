// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ArtifactRegistryRepositoryIamPolicy struct {
	pulumi.CustomResourceState

	ArtifactRegistryRepositoryIamPolicyId pulumi.StringOutput `pulumi:"artifactRegistryRepositoryIamPolicyId"`
	Etag                                  pulumi.StringOutput `pulumi:"etag"`
	Location                              pulumi.StringOutput `pulumi:"location"`
	PolicyData                            pulumi.StringOutput `pulumi:"policyData"`
	Project                               pulumi.StringOutput `pulumi:"project"`
	Repository                            pulumi.StringOutput `pulumi:"repository"`
}

// NewArtifactRegistryRepositoryIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewArtifactRegistryRepositoryIamPolicy(ctx *pulumi.Context,
	name string, args *ArtifactRegistryRepositoryIamPolicyArgs, opts ...pulumi.ResourceOption) (*ArtifactRegistryRepositoryIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ArtifactRegistryRepositoryIamPolicy
	err = ctx.RegisterPackageResource("google:index/artifactRegistryRepositoryIamPolicy:ArtifactRegistryRepositoryIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactRegistryRepositoryIamPolicy gets an existing ArtifactRegistryRepositoryIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactRegistryRepositoryIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactRegistryRepositoryIamPolicyState, opts ...pulumi.ResourceOption) (*ArtifactRegistryRepositoryIamPolicy, error) {
	var resource ArtifactRegistryRepositoryIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/artifactRegistryRepositoryIamPolicy:ArtifactRegistryRepositoryIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactRegistryRepositoryIamPolicy resources.
type artifactRegistryRepositoryIamPolicyState struct {
	ArtifactRegistryRepositoryIamPolicyId *string `pulumi:"artifactRegistryRepositoryIamPolicyId"`
	Etag                                  *string `pulumi:"etag"`
	Location                              *string `pulumi:"location"`
	PolicyData                            *string `pulumi:"policyData"`
	Project                               *string `pulumi:"project"`
	Repository                            *string `pulumi:"repository"`
}

type ArtifactRegistryRepositoryIamPolicyState struct {
	ArtifactRegistryRepositoryIamPolicyId pulumi.StringPtrInput
	Etag                                  pulumi.StringPtrInput
	Location                              pulumi.StringPtrInput
	PolicyData                            pulumi.StringPtrInput
	Project                               pulumi.StringPtrInput
	Repository                            pulumi.StringPtrInput
}

func (ArtifactRegistryRepositoryIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactRegistryRepositoryIamPolicyState)(nil)).Elem()
}

type artifactRegistryRepositoryIamPolicyArgs struct {
	ArtifactRegistryRepositoryIamPolicyId *string `pulumi:"artifactRegistryRepositoryIamPolicyId"`
	Location                              *string `pulumi:"location"`
	PolicyData                            string  `pulumi:"policyData"`
	Project                               *string `pulumi:"project"`
	Repository                            string  `pulumi:"repository"`
}

// The set of arguments for constructing a ArtifactRegistryRepositoryIamPolicy resource.
type ArtifactRegistryRepositoryIamPolicyArgs struct {
	ArtifactRegistryRepositoryIamPolicyId pulumi.StringPtrInput
	Location                              pulumi.StringPtrInput
	PolicyData                            pulumi.StringInput
	Project                               pulumi.StringPtrInput
	Repository                            pulumi.StringInput
}

func (ArtifactRegistryRepositoryIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactRegistryRepositoryIamPolicyArgs)(nil)).Elem()
}

type ArtifactRegistryRepositoryIamPolicyInput interface {
	pulumi.Input

	ToArtifactRegistryRepositoryIamPolicyOutput() ArtifactRegistryRepositoryIamPolicyOutput
	ToArtifactRegistryRepositoryIamPolicyOutputWithContext(ctx context.Context) ArtifactRegistryRepositoryIamPolicyOutput
}

func (*ArtifactRegistryRepositoryIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactRegistryRepositoryIamPolicy)(nil)).Elem()
}

func (i *ArtifactRegistryRepositoryIamPolicy) ToArtifactRegistryRepositoryIamPolicyOutput() ArtifactRegistryRepositoryIamPolicyOutput {
	return i.ToArtifactRegistryRepositoryIamPolicyOutputWithContext(context.Background())
}

func (i *ArtifactRegistryRepositoryIamPolicy) ToArtifactRegistryRepositoryIamPolicyOutputWithContext(ctx context.Context) ArtifactRegistryRepositoryIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRegistryRepositoryIamPolicyOutput)
}

type ArtifactRegistryRepositoryIamPolicyOutput struct{ *pulumi.OutputState }

func (ArtifactRegistryRepositoryIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactRegistryRepositoryIamPolicy)(nil)).Elem()
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) ToArtifactRegistryRepositoryIamPolicyOutput() ArtifactRegistryRepositoryIamPolicyOutput {
	return o
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) ToArtifactRegistryRepositoryIamPolicyOutputWithContext(ctx context.Context) ArtifactRegistryRepositoryIamPolicyOutput {
	return o
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) ArtifactRegistryRepositoryIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamPolicy) pulumi.StringOutput {
		return v.ArtifactRegistryRepositoryIamPolicyId
	}).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamPolicyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamPolicy) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactRegistryRepositoryIamPolicyInput)(nil)).Elem(), &ArtifactRegistryRepositoryIamPolicy{})
	pulumi.RegisterOutputType(ArtifactRegistryRepositoryIamPolicyOutput{})
}
