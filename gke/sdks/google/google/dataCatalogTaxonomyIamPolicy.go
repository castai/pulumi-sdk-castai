// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataCatalogTaxonomyIamPolicy struct {
	pulumi.CustomResourceState

	DataCatalogTaxonomyIamPolicyId pulumi.StringOutput `pulumi:"dataCatalogTaxonomyIamPolicyId"`
	Etag                           pulumi.StringOutput `pulumi:"etag"`
	PolicyData                     pulumi.StringOutput `pulumi:"policyData"`
	Project                        pulumi.StringOutput `pulumi:"project"`
	Region                         pulumi.StringOutput `pulumi:"region"`
	Taxonomy                       pulumi.StringOutput `pulumi:"taxonomy"`
}

// NewDataCatalogTaxonomyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDataCatalogTaxonomyIamPolicy(ctx *pulumi.Context,
	name string, args *DataCatalogTaxonomyIamPolicyArgs, opts ...pulumi.ResourceOption) (*DataCatalogTaxonomyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Taxonomy == nil {
		return nil, errors.New("invalid value for required argument 'Taxonomy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataCatalogTaxonomyIamPolicy
	err = ctx.RegisterPackageResource("google:index/dataCatalogTaxonomyIamPolicy:DataCatalogTaxonomyIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalogTaxonomyIamPolicy gets an existing DataCatalogTaxonomyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalogTaxonomyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogTaxonomyIamPolicyState, opts ...pulumi.ResourceOption) (*DataCatalogTaxonomyIamPolicy, error) {
	var resource DataCatalogTaxonomyIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/dataCatalogTaxonomyIamPolicy:DataCatalogTaxonomyIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalogTaxonomyIamPolicy resources.
type dataCatalogTaxonomyIamPolicyState struct {
	DataCatalogTaxonomyIamPolicyId *string `pulumi:"dataCatalogTaxonomyIamPolicyId"`
	Etag                           *string `pulumi:"etag"`
	PolicyData                     *string `pulumi:"policyData"`
	Project                        *string `pulumi:"project"`
	Region                         *string `pulumi:"region"`
	Taxonomy                       *string `pulumi:"taxonomy"`
}

type DataCatalogTaxonomyIamPolicyState struct {
	DataCatalogTaxonomyIamPolicyId pulumi.StringPtrInput
	Etag                           pulumi.StringPtrInput
	PolicyData                     pulumi.StringPtrInput
	Project                        pulumi.StringPtrInput
	Region                         pulumi.StringPtrInput
	Taxonomy                       pulumi.StringPtrInput
}

func (DataCatalogTaxonomyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogTaxonomyIamPolicyState)(nil)).Elem()
}

type dataCatalogTaxonomyIamPolicyArgs struct {
	DataCatalogTaxonomyIamPolicyId *string `pulumi:"dataCatalogTaxonomyIamPolicyId"`
	PolicyData                     string  `pulumi:"policyData"`
	Project                        *string `pulumi:"project"`
	Region                         *string `pulumi:"region"`
	Taxonomy                       string  `pulumi:"taxonomy"`
}

// The set of arguments for constructing a DataCatalogTaxonomyIamPolicy resource.
type DataCatalogTaxonomyIamPolicyArgs struct {
	DataCatalogTaxonomyIamPolicyId pulumi.StringPtrInput
	PolicyData                     pulumi.StringInput
	Project                        pulumi.StringPtrInput
	Region                         pulumi.StringPtrInput
	Taxonomy                       pulumi.StringInput
}

func (DataCatalogTaxonomyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogTaxonomyIamPolicyArgs)(nil)).Elem()
}

type DataCatalogTaxonomyIamPolicyInput interface {
	pulumi.Input

	ToDataCatalogTaxonomyIamPolicyOutput() DataCatalogTaxonomyIamPolicyOutput
	ToDataCatalogTaxonomyIamPolicyOutputWithContext(ctx context.Context) DataCatalogTaxonomyIamPolicyOutput
}

func (*DataCatalogTaxonomyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogTaxonomyIamPolicy)(nil)).Elem()
}

func (i *DataCatalogTaxonomyIamPolicy) ToDataCatalogTaxonomyIamPolicyOutput() DataCatalogTaxonomyIamPolicyOutput {
	return i.ToDataCatalogTaxonomyIamPolicyOutputWithContext(context.Background())
}

func (i *DataCatalogTaxonomyIamPolicy) ToDataCatalogTaxonomyIamPolicyOutputWithContext(ctx context.Context) DataCatalogTaxonomyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogTaxonomyIamPolicyOutput)
}

type DataCatalogTaxonomyIamPolicyOutput struct{ *pulumi.OutputState }

func (DataCatalogTaxonomyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogTaxonomyIamPolicy)(nil)).Elem()
}

func (o DataCatalogTaxonomyIamPolicyOutput) ToDataCatalogTaxonomyIamPolicyOutput() DataCatalogTaxonomyIamPolicyOutput {
	return o
}

func (o DataCatalogTaxonomyIamPolicyOutput) ToDataCatalogTaxonomyIamPolicyOutputWithContext(ctx context.Context) DataCatalogTaxonomyIamPolicyOutput {
	return o
}

func (o DataCatalogTaxonomyIamPolicyOutput) DataCatalogTaxonomyIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamPolicy) pulumi.StringOutput { return v.DataCatalogTaxonomyIamPolicyId }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamPolicyOutput) Taxonomy() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamPolicy) pulumi.StringOutput { return v.Taxonomy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogTaxonomyIamPolicyInput)(nil)).Elem(), &DataCatalogTaxonomyIamPolicy{})
	pulumi.RegisterOutputType(DataCatalogTaxonomyIamPolicyOutput{})
}
