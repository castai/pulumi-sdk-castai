// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataCatalogEntryGroupIamMember struct {
	pulumi.CustomResourceState

	Condition                        DataCatalogEntryGroupIamMemberConditionPtrOutput `pulumi:"condition"`
	DataCatalogEntryGroupIamMemberId pulumi.StringOutput                              `pulumi:"dataCatalogEntryGroupIamMemberId"`
	EntryGroup                       pulumi.StringOutput                              `pulumi:"entryGroup"`
	Etag                             pulumi.StringOutput                              `pulumi:"etag"`
	Member                           pulumi.StringOutput                              `pulumi:"member"`
	Project                          pulumi.StringOutput                              `pulumi:"project"`
	Region                           pulumi.StringOutput                              `pulumi:"region"`
	Role                             pulumi.StringOutput                              `pulumi:"role"`
}

// NewDataCatalogEntryGroupIamMember registers a new resource with the given unique name, arguments, and options.
func NewDataCatalogEntryGroupIamMember(ctx *pulumi.Context,
	name string, args *DataCatalogEntryGroupIamMemberArgs, opts ...pulumi.ResourceOption) (*DataCatalogEntryGroupIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryGroup == nil {
		return nil, errors.New("invalid value for required argument 'EntryGroup'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataCatalogEntryGroupIamMember
	err = ctx.RegisterPackageResource("google:index/dataCatalogEntryGroupIamMember:DataCatalogEntryGroupIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalogEntryGroupIamMember gets an existing DataCatalogEntryGroupIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalogEntryGroupIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogEntryGroupIamMemberState, opts ...pulumi.ResourceOption) (*DataCatalogEntryGroupIamMember, error) {
	var resource DataCatalogEntryGroupIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/dataCatalogEntryGroupIamMember:DataCatalogEntryGroupIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalogEntryGroupIamMember resources.
type dataCatalogEntryGroupIamMemberState struct {
	Condition                        *DataCatalogEntryGroupIamMemberCondition `pulumi:"condition"`
	DataCatalogEntryGroupIamMemberId *string                                  `pulumi:"dataCatalogEntryGroupIamMemberId"`
	EntryGroup                       *string                                  `pulumi:"entryGroup"`
	Etag                             *string                                  `pulumi:"etag"`
	Member                           *string                                  `pulumi:"member"`
	Project                          *string                                  `pulumi:"project"`
	Region                           *string                                  `pulumi:"region"`
	Role                             *string                                  `pulumi:"role"`
}

type DataCatalogEntryGroupIamMemberState struct {
	Condition                        DataCatalogEntryGroupIamMemberConditionPtrInput
	DataCatalogEntryGroupIamMemberId pulumi.StringPtrInput
	EntryGroup                       pulumi.StringPtrInput
	Etag                             pulumi.StringPtrInput
	Member                           pulumi.StringPtrInput
	Project                          pulumi.StringPtrInput
	Region                           pulumi.StringPtrInput
	Role                             pulumi.StringPtrInput
}

func (DataCatalogEntryGroupIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogEntryGroupIamMemberState)(nil)).Elem()
}

type dataCatalogEntryGroupIamMemberArgs struct {
	Condition                        *DataCatalogEntryGroupIamMemberCondition `pulumi:"condition"`
	DataCatalogEntryGroupIamMemberId *string                                  `pulumi:"dataCatalogEntryGroupIamMemberId"`
	EntryGroup                       string                                   `pulumi:"entryGroup"`
	Member                           string                                   `pulumi:"member"`
	Project                          *string                                  `pulumi:"project"`
	Region                           *string                                  `pulumi:"region"`
	Role                             string                                   `pulumi:"role"`
}

// The set of arguments for constructing a DataCatalogEntryGroupIamMember resource.
type DataCatalogEntryGroupIamMemberArgs struct {
	Condition                        DataCatalogEntryGroupIamMemberConditionPtrInput
	DataCatalogEntryGroupIamMemberId pulumi.StringPtrInput
	EntryGroup                       pulumi.StringInput
	Member                           pulumi.StringInput
	Project                          pulumi.StringPtrInput
	Region                           pulumi.StringPtrInput
	Role                             pulumi.StringInput
}

func (DataCatalogEntryGroupIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogEntryGroupIamMemberArgs)(nil)).Elem()
}

type DataCatalogEntryGroupIamMemberInput interface {
	pulumi.Input

	ToDataCatalogEntryGroupIamMemberOutput() DataCatalogEntryGroupIamMemberOutput
	ToDataCatalogEntryGroupIamMemberOutputWithContext(ctx context.Context) DataCatalogEntryGroupIamMemberOutput
}

func (*DataCatalogEntryGroupIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEntryGroupIamMember)(nil)).Elem()
}

func (i *DataCatalogEntryGroupIamMember) ToDataCatalogEntryGroupIamMemberOutput() DataCatalogEntryGroupIamMemberOutput {
	return i.ToDataCatalogEntryGroupIamMemberOutputWithContext(context.Background())
}

func (i *DataCatalogEntryGroupIamMember) ToDataCatalogEntryGroupIamMemberOutputWithContext(ctx context.Context) DataCatalogEntryGroupIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEntryGroupIamMemberOutput)
}

type DataCatalogEntryGroupIamMemberOutput struct{ *pulumi.OutputState }

func (DataCatalogEntryGroupIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEntryGroupIamMember)(nil)).Elem()
}

func (o DataCatalogEntryGroupIamMemberOutput) ToDataCatalogEntryGroupIamMemberOutput() DataCatalogEntryGroupIamMemberOutput {
	return o
}

func (o DataCatalogEntryGroupIamMemberOutput) ToDataCatalogEntryGroupIamMemberOutputWithContext(ctx context.Context) DataCatalogEntryGroupIamMemberOutput {
	return o
}

func (o DataCatalogEntryGroupIamMemberOutput) Condition() DataCatalogEntryGroupIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) DataCatalogEntryGroupIamMemberConditionPtrOutput {
		return v.Condition
	}).(DataCatalogEntryGroupIamMemberConditionPtrOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) DataCatalogEntryGroupIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.DataCatalogEntryGroupIamMemberId }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) EntryGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.EntryGroup }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEntryGroupIamMemberInput)(nil)).Elem(), &DataCatalogEntryGroupIamMember{})
	pulumi.RegisterOutputType(DataCatalogEntryGroupIamMemberOutput{})
}
