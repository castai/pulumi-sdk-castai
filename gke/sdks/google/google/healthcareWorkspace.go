// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HealthcareWorkspace struct {
	pulumi.CustomResourceState

	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset               pulumi.StringOutput    `pulumi:"dataset"`
	EffectiveLabels       pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	HealthcareWorkspaceId pulumi.StringOutput    `pulumi:"healthcareWorkspaceId"`
	// The user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg",
	// "count": "3" } **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the workspace, in the format
	// 'projects/{projectId}/locations/{location}/datasets/{datasetId}/dataMapperWorkspaces/{workspaceId}'
	Name pulumi.StringOutput `pulumi:"name"`
	// Settings associated with this workspace.
	Settings HealthcareWorkspaceSettingsOutput `pulumi:"settings"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput               `pulumi:"terraformLabels"`
	Timeouts        HealthcareWorkspaceTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewHealthcareWorkspace registers a new resource with the given unique name, arguments, and options.
func NewHealthcareWorkspace(ctx *pulumi.Context,
	name string, args *HealthcareWorkspaceArgs, opts ...pulumi.ResourceOption) (*HealthcareWorkspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.Settings == nil {
		return nil, errors.New("invalid value for required argument 'Settings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HealthcareWorkspace
	err = ctx.RegisterPackageResource("google:index/healthcareWorkspace:HealthcareWorkspace", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcareWorkspace gets an existing HealthcareWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcareWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcareWorkspaceState, opts ...pulumi.ResourceOption) (*HealthcareWorkspace, error) {
	var resource HealthcareWorkspace
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/healthcareWorkspace:HealthcareWorkspace", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthcareWorkspace resources.
type healthcareWorkspaceState struct {
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset               *string           `pulumi:"dataset"`
	EffectiveLabels       map[string]string `pulumi:"effectiveLabels"`
	HealthcareWorkspaceId *string           `pulumi:"healthcareWorkspaceId"`
	// The user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg",
	// "count": "3" } **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the workspace, in the format
	// 'projects/{projectId}/locations/{location}/datasets/{datasetId}/dataMapperWorkspaces/{workspaceId}'
	Name *string `pulumi:"name"`
	// Settings associated with this workspace.
	Settings *HealthcareWorkspaceSettings `pulumi:"settings"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string            `pulumi:"terraformLabels"`
	Timeouts        *HealthcareWorkspaceTimeouts `pulumi:"timeouts"`
}

type HealthcareWorkspaceState struct {
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset               pulumi.StringPtrInput
	EffectiveLabels       pulumi.StringMapInput
	HealthcareWorkspaceId pulumi.StringPtrInput
	// The user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg",
	// "count": "3" } **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the workspace, in the format
	// 'projects/{projectId}/locations/{location}/datasets/{datasetId}/dataMapperWorkspaces/{workspaceId}'
	Name pulumi.StringPtrInput
	// Settings associated with this workspace.
	Settings HealthcareWorkspaceSettingsPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        HealthcareWorkspaceTimeoutsPtrInput
}

func (HealthcareWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareWorkspaceState)(nil)).Elem()
}

type healthcareWorkspaceArgs struct {
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset               string  `pulumi:"dataset"`
	HealthcareWorkspaceId *string `pulumi:"healthcareWorkspaceId"`
	// The user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg",
	// "count": "3" } **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the workspace, in the format
	// 'projects/{projectId}/locations/{location}/datasets/{datasetId}/dataMapperWorkspaces/{workspaceId}'
	Name *string `pulumi:"name"`
	// Settings associated with this workspace.
	Settings HealthcareWorkspaceSettings  `pulumi:"settings"`
	Timeouts *HealthcareWorkspaceTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a HealthcareWorkspace resource.
type HealthcareWorkspaceArgs struct {
	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	Dataset               pulumi.StringInput
	HealthcareWorkspaceId pulumi.StringPtrInput
	// The user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg",
	// "count": "3" } **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the workspace, in the format
	// 'projects/{projectId}/locations/{location}/datasets/{datasetId}/dataMapperWorkspaces/{workspaceId}'
	Name pulumi.StringPtrInput
	// Settings associated with this workspace.
	Settings HealthcareWorkspaceSettingsInput
	Timeouts HealthcareWorkspaceTimeoutsPtrInput
}

func (HealthcareWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareWorkspaceArgs)(nil)).Elem()
}

type HealthcareWorkspaceInput interface {
	pulumi.Input

	ToHealthcareWorkspaceOutput() HealthcareWorkspaceOutput
	ToHealthcareWorkspaceOutputWithContext(ctx context.Context) HealthcareWorkspaceOutput
}

func (*HealthcareWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareWorkspace)(nil)).Elem()
}

func (i *HealthcareWorkspace) ToHealthcareWorkspaceOutput() HealthcareWorkspaceOutput {
	return i.ToHealthcareWorkspaceOutputWithContext(context.Background())
}

func (i *HealthcareWorkspace) ToHealthcareWorkspaceOutputWithContext(ctx context.Context) HealthcareWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcareWorkspaceOutput)
}

type HealthcareWorkspaceOutput struct{ *pulumi.OutputState }

func (HealthcareWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareWorkspace)(nil)).Elem()
}

func (o HealthcareWorkspaceOutput) ToHealthcareWorkspaceOutput() HealthcareWorkspaceOutput {
	return o
}

func (o HealthcareWorkspaceOutput) ToHealthcareWorkspaceOutputWithContext(ctx context.Context) HealthcareWorkspaceOutput {
	return o
}

// Identifies the dataset addressed by this request. Must be in the format
// 'projects/{project}/locations/{location}/datasets/{dataset}'
func (o HealthcareWorkspaceOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

func (o HealthcareWorkspaceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o HealthcareWorkspaceOutput) HealthcareWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) pulumi.StringOutput { return v.HealthcareWorkspaceId }).(pulumi.StringOutput)
}

// The user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg",
// "count": "3" } **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o HealthcareWorkspaceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the workspace, in the format
// 'projects/{projectId}/locations/{location}/datasets/{datasetId}/dataMapperWorkspaces/{workspaceId}'
func (o HealthcareWorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Settings associated with this workspace.
func (o HealthcareWorkspaceOutput) Settings() HealthcareWorkspaceSettingsOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) HealthcareWorkspaceSettingsOutput { return v.Settings }).(HealthcareWorkspaceSettingsOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o HealthcareWorkspaceOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o HealthcareWorkspaceOutput) Timeouts() HealthcareWorkspaceTimeoutsPtrOutput {
	return o.ApplyT(func(v *HealthcareWorkspace) HealthcareWorkspaceTimeoutsPtrOutput { return v.Timeouts }).(HealthcareWorkspaceTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcareWorkspaceInput)(nil)).Elem(), &HealthcareWorkspace{})
	pulumi.RegisterOutputType(HealthcareWorkspaceOutput{})
}
