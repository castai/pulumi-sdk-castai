// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeminiRepositoryGroupIamMember struct {
	pulumi.CustomResourceState

	CodeRepositoryIndex              pulumi.StringOutput                              `pulumi:"codeRepositoryIndex"`
	Condition                        GeminiRepositoryGroupIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                             pulumi.StringOutput                              `pulumi:"etag"`
	GeminiRepositoryGroupIamMemberId pulumi.StringOutput                              `pulumi:"geminiRepositoryGroupIamMemberId"`
	Location                         pulumi.StringOutput                              `pulumi:"location"`
	Member                           pulumi.StringOutput                              `pulumi:"member"`
	Project                          pulumi.StringOutput                              `pulumi:"project"`
	RepositoryGroupId                pulumi.StringOutput                              `pulumi:"repositoryGroupId"`
	Role                             pulumi.StringOutput                              `pulumi:"role"`
}

// NewGeminiRepositoryGroupIamMember registers a new resource with the given unique name, arguments, and options.
func NewGeminiRepositoryGroupIamMember(ctx *pulumi.Context,
	name string, args *GeminiRepositoryGroupIamMemberArgs, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroupIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndex == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndex'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.RepositoryGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryGroupId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GeminiRepositoryGroupIamMember
	err = ctx.RegisterPackageResource("google:index/geminiRepositoryGroupIamMember:GeminiRepositoryGroupIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeminiRepositoryGroupIamMember gets an existing GeminiRepositoryGroupIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeminiRepositoryGroupIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeminiRepositoryGroupIamMemberState, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroupIamMember, error) {
	var resource GeminiRepositoryGroupIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/geminiRepositoryGroupIamMember:GeminiRepositoryGroupIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeminiRepositoryGroupIamMember resources.
type geminiRepositoryGroupIamMemberState struct {
	CodeRepositoryIndex              *string                                  `pulumi:"codeRepositoryIndex"`
	Condition                        *GeminiRepositoryGroupIamMemberCondition `pulumi:"condition"`
	Etag                             *string                                  `pulumi:"etag"`
	GeminiRepositoryGroupIamMemberId *string                                  `pulumi:"geminiRepositoryGroupIamMemberId"`
	Location                         *string                                  `pulumi:"location"`
	Member                           *string                                  `pulumi:"member"`
	Project                          *string                                  `pulumi:"project"`
	RepositoryGroupId                *string                                  `pulumi:"repositoryGroupId"`
	Role                             *string                                  `pulumi:"role"`
}

type GeminiRepositoryGroupIamMemberState struct {
	CodeRepositoryIndex              pulumi.StringPtrInput
	Condition                        GeminiRepositoryGroupIamMemberConditionPtrInput
	Etag                             pulumi.StringPtrInput
	GeminiRepositoryGroupIamMemberId pulumi.StringPtrInput
	Location                         pulumi.StringPtrInput
	Member                           pulumi.StringPtrInput
	Project                          pulumi.StringPtrInput
	RepositoryGroupId                pulumi.StringPtrInput
	Role                             pulumi.StringPtrInput
}

func (GeminiRepositoryGroupIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupIamMemberState)(nil)).Elem()
}

type geminiRepositoryGroupIamMemberArgs struct {
	CodeRepositoryIndex              string                                   `pulumi:"codeRepositoryIndex"`
	Condition                        *GeminiRepositoryGroupIamMemberCondition `pulumi:"condition"`
	GeminiRepositoryGroupIamMemberId *string                                  `pulumi:"geminiRepositoryGroupIamMemberId"`
	Location                         *string                                  `pulumi:"location"`
	Member                           string                                   `pulumi:"member"`
	Project                          *string                                  `pulumi:"project"`
	RepositoryGroupId                string                                   `pulumi:"repositoryGroupId"`
	Role                             string                                   `pulumi:"role"`
}

// The set of arguments for constructing a GeminiRepositoryGroupIamMember resource.
type GeminiRepositoryGroupIamMemberArgs struct {
	CodeRepositoryIndex              pulumi.StringInput
	Condition                        GeminiRepositoryGroupIamMemberConditionPtrInput
	GeminiRepositoryGroupIamMemberId pulumi.StringPtrInput
	Location                         pulumi.StringPtrInput
	Member                           pulumi.StringInput
	Project                          pulumi.StringPtrInput
	RepositoryGroupId                pulumi.StringInput
	Role                             pulumi.StringInput
}

func (GeminiRepositoryGroupIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupIamMemberArgs)(nil)).Elem()
}

type GeminiRepositoryGroupIamMemberInput interface {
	pulumi.Input

	ToGeminiRepositoryGroupIamMemberOutput() GeminiRepositoryGroupIamMemberOutput
	ToGeminiRepositoryGroupIamMemberOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamMemberOutput
}

func (*GeminiRepositoryGroupIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroupIamMember)(nil)).Elem()
}

func (i *GeminiRepositoryGroupIamMember) ToGeminiRepositoryGroupIamMemberOutput() GeminiRepositoryGroupIamMemberOutput {
	return i.ToGeminiRepositoryGroupIamMemberOutputWithContext(context.Background())
}

func (i *GeminiRepositoryGroupIamMember) ToGeminiRepositoryGroupIamMemberOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiRepositoryGroupIamMemberOutput)
}

type GeminiRepositoryGroupIamMemberOutput struct{ *pulumi.OutputState }

func (GeminiRepositoryGroupIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroupIamMember)(nil)).Elem()
}

func (o GeminiRepositoryGroupIamMemberOutput) ToGeminiRepositoryGroupIamMemberOutput() GeminiRepositoryGroupIamMemberOutput {
	return o
}

func (o GeminiRepositoryGroupIamMemberOutput) ToGeminiRepositoryGroupIamMemberOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamMemberOutput {
	return o
}

func (o GeminiRepositoryGroupIamMemberOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) Condition() GeminiRepositoryGroupIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) GeminiRepositoryGroupIamMemberConditionPtrOutput {
		return v.Condition
	}).(GeminiRepositoryGroupIamMemberConditionPtrOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) GeminiRepositoryGroupIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.GeminiRepositoryGroupIamMemberId }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiRepositoryGroupIamMemberInput)(nil)).Elem(), &GeminiRepositoryGroupIamMember{})
	pulumi.RegisterOutputType(GeminiRepositoryGroupIamMemberOutput{})
}
