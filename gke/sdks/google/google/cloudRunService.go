// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudRunService struct {
	pulumi.CustomResourceState

	// If set to 'true', the revision name (template.metadata.name) will be omitted and autogenerated by Cloud Run. This cannot
	// be set to 'true' while 'template.metadata.name' is also set. (For legacy support, if 'template.metadata.name' is unset
	// in state while this field is set to false, the revision name will still autogenerate.)
	AutogenerateRevisionName pulumi.BoolPtrOutput `pulumi:"autogenerateRevisionName"`
	CloudRunServiceId        pulumi.StringOutput  `pulumi:"cloudRunServiceId"`
	// The location of the cloud run instance. eg us-central1
	Location pulumi.StringOutput `pulumi:"location"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata CloudRunServiceMetadataPtrOutput `pulumi:"metadata"`
	// Name must be unique within a Google Cloud project and region. Is required when creating resources. Name is primarily
	// intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The current status of the Service.
	Statuses CloudRunServiceStatusArrayOutput `pulumi:"statuses"`
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
	// does not currently support referencing a build that is responsible for materializing the container image from source.
	Template CloudRunServiceTemplatePtrOutput `pulumi:"template"`
	Timeouts CloudRunServiceTimeoutsPtrOutput `pulumi:"timeouts"`
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics CloudRunServiceTrafficArrayOutput `pulumi:"traffics"`
}

// NewCloudRunService registers a new resource with the given unique name, arguments, and options.
func NewCloudRunService(ctx *pulumi.Context,
	name string, args *CloudRunServiceArgs, opts ...pulumi.ResourceOption) (*CloudRunService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudRunService
	err = ctx.RegisterPackageResource("google:index/cloudRunService:CloudRunService", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudRunService gets an existing CloudRunService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudRunService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudRunServiceState, opts ...pulumi.ResourceOption) (*CloudRunService, error) {
	var resource CloudRunService
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/cloudRunService:CloudRunService", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudRunService resources.
type cloudRunServiceState struct {
	// If set to 'true', the revision name (template.metadata.name) will be omitted and autogenerated by Cloud Run. This cannot
	// be set to 'true' while 'template.metadata.name' is also set. (For legacy support, if 'template.metadata.name' is unset
	// in state while this field is set to false, the revision name will still autogenerate.)
	AutogenerateRevisionName *bool   `pulumi:"autogenerateRevisionName"`
	CloudRunServiceId        *string `pulumi:"cloudRunServiceId"`
	// The location of the cloud run instance. eg us-central1
	Location *string `pulumi:"location"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata *CloudRunServiceMetadata `pulumi:"metadata"`
	// Name must be unique within a Google Cloud project and region. Is required when creating resources. Name is primarily
	// intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The current status of the Service.
	Statuses []CloudRunServiceStatus `pulumi:"statuses"`
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
	// does not currently support referencing a build that is responsible for materializing the container image from source.
	Template *CloudRunServiceTemplate `pulumi:"template"`
	Timeouts *CloudRunServiceTimeouts `pulumi:"timeouts"`
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics []CloudRunServiceTraffic `pulumi:"traffics"`
}

type CloudRunServiceState struct {
	// If set to 'true', the revision name (template.metadata.name) will be omitted and autogenerated by Cloud Run. This cannot
	// be set to 'true' while 'template.metadata.name' is also set. (For legacy support, if 'template.metadata.name' is unset
	// in state while this field is set to false, the revision name will still autogenerate.)
	AutogenerateRevisionName pulumi.BoolPtrInput
	CloudRunServiceId        pulumi.StringPtrInput
	// The location of the cloud run instance. eg us-central1
	Location pulumi.StringPtrInput
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata CloudRunServiceMetadataPtrInput
	// Name must be unique within a Google Cloud project and region. Is required when creating resources. Name is primarily
	// intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The current status of the Service.
	Statuses CloudRunServiceStatusArrayInput
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
	// does not currently support referencing a build that is responsible for materializing the container image from source.
	Template CloudRunServiceTemplatePtrInput
	Timeouts CloudRunServiceTimeoutsPtrInput
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics CloudRunServiceTrafficArrayInput
}

func (CloudRunServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudRunServiceState)(nil)).Elem()
}

type cloudRunServiceArgs struct {
	// If set to 'true', the revision name (template.metadata.name) will be omitted and autogenerated by Cloud Run. This cannot
	// be set to 'true' while 'template.metadata.name' is also set. (For legacy support, if 'template.metadata.name' is unset
	// in state while this field is set to false, the revision name will still autogenerate.)
	AutogenerateRevisionName *bool   `pulumi:"autogenerateRevisionName"`
	CloudRunServiceId        *string `pulumi:"cloudRunServiceId"`
	// The location of the cloud run instance. eg us-central1
	Location string `pulumi:"location"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata *CloudRunServiceMetadata `pulumi:"metadata"`
	// Name must be unique within a Google Cloud project and region. Is required when creating resources. Name is primarily
	// intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
	// does not currently support referencing a build that is responsible for materializing the container image from source.
	Template *CloudRunServiceTemplate `pulumi:"template"`
	Timeouts *CloudRunServiceTimeouts `pulumi:"timeouts"`
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics []CloudRunServiceTraffic `pulumi:"traffics"`
}

// The set of arguments for constructing a CloudRunService resource.
type CloudRunServiceArgs struct {
	// If set to 'true', the revision name (template.metadata.name) will be omitted and autogenerated by Cloud Run. This cannot
	// be set to 'true' while 'template.metadata.name' is also set. (For legacy support, if 'template.metadata.name' is unset
	// in state while this field is set to false, the revision name will still autogenerate.)
	AutogenerateRevisionName pulumi.BoolPtrInput
	CloudRunServiceId        pulumi.StringPtrInput
	// The location of the cloud run instance. eg us-central1
	Location pulumi.StringInput
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata CloudRunServiceMetadataPtrInput
	// Name must be unique within a Google Cloud project and region. Is required when creating resources. Name is primarily
	// intended for creation idempotence and configuration definition. Cannot be updated. More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// template holds the latest specification for the Revision to be stamped out. The template references the container image,
	// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
	// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
	// metadata. For more details, see:
	// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
	// does not currently support referencing a build that is responsible for materializing the container image from source.
	Template CloudRunServiceTemplatePtrInput
	Timeouts CloudRunServiceTimeoutsPtrInput
	// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
	Traffics CloudRunServiceTrafficArrayInput
}

func (CloudRunServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudRunServiceArgs)(nil)).Elem()
}

type CloudRunServiceInput interface {
	pulumi.Input

	ToCloudRunServiceOutput() CloudRunServiceOutput
	ToCloudRunServiceOutputWithContext(ctx context.Context) CloudRunServiceOutput
}

func (*CloudRunService) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunService)(nil)).Elem()
}

func (i *CloudRunService) ToCloudRunServiceOutput() CloudRunServiceOutput {
	return i.ToCloudRunServiceOutputWithContext(context.Background())
}

func (i *CloudRunService) ToCloudRunServiceOutputWithContext(ctx context.Context) CloudRunServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunServiceOutput)
}

type CloudRunServiceOutput struct{ *pulumi.OutputState }

func (CloudRunServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunService)(nil)).Elem()
}

func (o CloudRunServiceOutput) ToCloudRunServiceOutput() CloudRunServiceOutput {
	return o
}

func (o CloudRunServiceOutput) ToCloudRunServiceOutputWithContext(ctx context.Context) CloudRunServiceOutput {
	return o
}

// If set to 'true', the revision name (template.metadata.name) will be omitted and autogenerated by Cloud Run. This cannot
// be set to 'true' while 'template.metadata.name' is also set. (For legacy support, if 'template.metadata.name' is unset
// in state while this field is set to false, the revision name will still autogenerate.)
func (o CloudRunServiceOutput) AutogenerateRevisionName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudRunService) pulumi.BoolPtrOutput { return v.AutogenerateRevisionName }).(pulumi.BoolPtrOutput)
}

func (o CloudRunServiceOutput) CloudRunServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudRunService) pulumi.StringOutput { return v.CloudRunServiceId }).(pulumi.StringOutput)
}

// The location of the cloud run instance. eg us-central1
func (o CloudRunServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudRunService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Metadata associated with this Service, including name, namespace, labels, and annotations.
func (o CloudRunServiceOutput) Metadata() CloudRunServiceMetadataPtrOutput {
	return o.ApplyT(func(v *CloudRunService) CloudRunServiceMetadataPtrOutput { return v.Metadata }).(CloudRunServiceMetadataPtrOutput)
}

// Name must be unique within a Google Cloud project and region. Is required when creating resources. Name is primarily
// intended for creation idempotence and configuration definition. Cannot be updated. More info:
// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o CloudRunServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudRunService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloudRunServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudRunService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The current status of the Service.
func (o CloudRunServiceOutput) Statuses() CloudRunServiceStatusArrayOutput {
	return o.ApplyT(func(v *CloudRunService) CloudRunServiceStatusArrayOutput { return v.Statuses }).(CloudRunServiceStatusArrayOutput)
}

// template holds the latest specification for the Revision to be stamped out. The template references the container image,
// and may also include labels and annotations that should be attached to the Revision. To correlate a Revision, and/or to
// force a Revision to be created when the spec doesn't otherwise change, a nonce label may be provided in the template
// metadata. For more details, see:
// https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions Cloud Run
// does not currently support referencing a build that is responsible for materializing the container image from source.
func (o CloudRunServiceOutput) Template() CloudRunServiceTemplatePtrOutput {
	return o.ApplyT(func(v *CloudRunService) CloudRunServiceTemplatePtrOutput { return v.Template }).(CloudRunServiceTemplatePtrOutput)
}

func (o CloudRunServiceOutput) Timeouts() CloudRunServiceTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudRunService) CloudRunServiceTimeoutsPtrOutput { return v.Timeouts }).(CloudRunServiceTimeoutsPtrOutput)
}

// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations
func (o CloudRunServiceOutput) Traffics() CloudRunServiceTrafficArrayOutput {
	return o.ApplyT(func(v *CloudRunService) CloudRunServiceTrafficArrayOutput { return v.Traffics }).(CloudRunServiceTrafficArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunServiceInput)(nil)).Elem(), &CloudRunService{})
	pulumi.RegisterOutputType(CloudRunServiceOutput{})
}
