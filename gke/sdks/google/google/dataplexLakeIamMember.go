// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataplexLakeIamMember struct {
	pulumi.CustomResourceState

	Condition               DataplexLakeIamMemberConditionPtrOutput `pulumi:"condition"`
	DataplexLakeIamMemberId pulumi.StringOutput                     `pulumi:"dataplexLakeIamMemberId"`
	Etag                    pulumi.StringOutput                     `pulumi:"etag"`
	Lake                    pulumi.StringOutput                     `pulumi:"lake"`
	Location                pulumi.StringOutput                     `pulumi:"location"`
	Member                  pulumi.StringOutput                     `pulumi:"member"`
	Project                 pulumi.StringOutput                     `pulumi:"project"`
	Role                    pulumi.StringOutput                     `pulumi:"role"`
}

// NewDataplexLakeIamMember registers a new resource with the given unique name, arguments, and options.
func NewDataplexLakeIamMember(ctx *pulumi.Context,
	name string, args *DataplexLakeIamMemberArgs, opts ...pulumi.ResourceOption) (*DataplexLakeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataplexLakeIamMember
	err = ctx.RegisterPackageResource("google:index/dataplexLakeIamMember:DataplexLakeIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataplexLakeIamMember gets an existing DataplexLakeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataplexLakeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataplexLakeIamMemberState, opts ...pulumi.ResourceOption) (*DataplexLakeIamMember, error) {
	var resource DataplexLakeIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/dataplexLakeIamMember:DataplexLakeIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataplexLakeIamMember resources.
type dataplexLakeIamMemberState struct {
	Condition               *DataplexLakeIamMemberCondition `pulumi:"condition"`
	DataplexLakeIamMemberId *string                         `pulumi:"dataplexLakeIamMemberId"`
	Etag                    *string                         `pulumi:"etag"`
	Lake                    *string                         `pulumi:"lake"`
	Location                *string                         `pulumi:"location"`
	Member                  *string                         `pulumi:"member"`
	Project                 *string                         `pulumi:"project"`
	Role                    *string                         `pulumi:"role"`
}

type DataplexLakeIamMemberState struct {
	Condition               DataplexLakeIamMemberConditionPtrInput
	DataplexLakeIamMemberId pulumi.StringPtrInput
	Etag                    pulumi.StringPtrInput
	Lake                    pulumi.StringPtrInput
	Location                pulumi.StringPtrInput
	Member                  pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Role                    pulumi.StringPtrInput
}

func (DataplexLakeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataplexLakeIamMemberState)(nil)).Elem()
}

type dataplexLakeIamMemberArgs struct {
	Condition               *DataplexLakeIamMemberCondition `pulumi:"condition"`
	DataplexLakeIamMemberId *string                         `pulumi:"dataplexLakeIamMemberId"`
	Lake                    string                          `pulumi:"lake"`
	Location                *string                         `pulumi:"location"`
	Member                  string                          `pulumi:"member"`
	Project                 *string                         `pulumi:"project"`
	Role                    string                          `pulumi:"role"`
}

// The set of arguments for constructing a DataplexLakeIamMember resource.
type DataplexLakeIamMemberArgs struct {
	Condition               DataplexLakeIamMemberConditionPtrInput
	DataplexLakeIamMemberId pulumi.StringPtrInput
	Lake                    pulumi.StringInput
	Location                pulumi.StringPtrInput
	Member                  pulumi.StringInput
	Project                 pulumi.StringPtrInput
	Role                    pulumi.StringInput
}

func (DataplexLakeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataplexLakeIamMemberArgs)(nil)).Elem()
}

type DataplexLakeIamMemberInput interface {
	pulumi.Input

	ToDataplexLakeIamMemberOutput() DataplexLakeIamMemberOutput
	ToDataplexLakeIamMemberOutputWithContext(ctx context.Context) DataplexLakeIamMemberOutput
}

func (*DataplexLakeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DataplexLakeIamMember)(nil)).Elem()
}

func (i *DataplexLakeIamMember) ToDataplexLakeIamMemberOutput() DataplexLakeIamMemberOutput {
	return i.ToDataplexLakeIamMemberOutputWithContext(context.Background())
}

func (i *DataplexLakeIamMember) ToDataplexLakeIamMemberOutputWithContext(ctx context.Context) DataplexLakeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataplexLakeIamMemberOutput)
}

type DataplexLakeIamMemberOutput struct{ *pulumi.OutputState }

func (DataplexLakeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataplexLakeIamMember)(nil)).Elem()
}

func (o DataplexLakeIamMemberOutput) ToDataplexLakeIamMemberOutput() DataplexLakeIamMemberOutput {
	return o
}

func (o DataplexLakeIamMemberOutput) ToDataplexLakeIamMemberOutputWithContext(ctx context.Context) DataplexLakeIamMemberOutput {
	return o
}

func (o DataplexLakeIamMemberOutput) Condition() DataplexLakeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) DataplexLakeIamMemberConditionPtrOutput { return v.Condition }).(DataplexLakeIamMemberConditionPtrOutput)
}

func (o DataplexLakeIamMemberOutput) DataplexLakeIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.DataplexLakeIamMemberId }).(pulumi.StringOutput)
}

func (o DataplexLakeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataplexLakeIamMemberOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o DataplexLakeIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DataplexLakeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o DataplexLakeIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataplexLakeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataplexLakeIamMemberInput)(nil)).Elem(), &DataplexLakeIamMember{})
	pulumi.RegisterOutputType(DataplexLakeIamMemberOutput{})
}
