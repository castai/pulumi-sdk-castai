// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package google

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google/v6/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubSchemaIamBinding struct {
	pulumi.CustomResourceState

	Condition                PubsubSchemaIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                     pulumi.StringOutput                      `pulumi:"etag"`
	Members                  pulumi.StringArrayOutput                 `pulumi:"members"`
	Project                  pulumi.StringOutput                      `pulumi:"project"`
	PubsubSchemaIamBindingId pulumi.StringOutput                      `pulumi:"pubsubSchemaIamBindingId"`
	Role                     pulumi.StringOutput                      `pulumi:"role"`
	Schema                   pulumi.StringOutput                      `pulumi:"schema"`
}

// NewPubsubSchemaIamBinding registers a new resource with the given unique name, arguments, and options.
func NewPubsubSchemaIamBinding(ctx *pulumi.Context,
	name string, args *PubsubSchemaIamBindingArgs, opts ...pulumi.ResourceOption) (*PubsubSchemaIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubSchemaIamBinding
	err = ctx.RegisterPackageResource("google:index/pubsubSchemaIamBinding:PubsubSchemaIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubSchemaIamBinding gets an existing PubsubSchemaIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubSchemaIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubSchemaIamBindingState, opts ...pulumi.ResourceOption) (*PubsubSchemaIamBinding, error) {
	var resource PubsubSchemaIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google:index/pubsubSchemaIamBinding:PubsubSchemaIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubSchemaIamBinding resources.
type pubsubSchemaIamBindingState struct {
	Condition                *PubsubSchemaIamBindingCondition `pulumi:"condition"`
	Etag                     *string                          `pulumi:"etag"`
	Members                  []string                         `pulumi:"members"`
	Project                  *string                          `pulumi:"project"`
	PubsubSchemaIamBindingId *string                          `pulumi:"pubsubSchemaIamBindingId"`
	Role                     *string                          `pulumi:"role"`
	Schema                   *string                          `pulumi:"schema"`
}

type PubsubSchemaIamBindingState struct {
	Condition                PubsubSchemaIamBindingConditionPtrInput
	Etag                     pulumi.StringPtrInput
	Members                  pulumi.StringArrayInput
	Project                  pulumi.StringPtrInput
	PubsubSchemaIamBindingId pulumi.StringPtrInput
	Role                     pulumi.StringPtrInput
	Schema                   pulumi.StringPtrInput
}

func (PubsubSchemaIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubSchemaIamBindingState)(nil)).Elem()
}

type pubsubSchemaIamBindingArgs struct {
	Condition                *PubsubSchemaIamBindingCondition `pulumi:"condition"`
	Members                  []string                         `pulumi:"members"`
	Project                  *string                          `pulumi:"project"`
	PubsubSchemaIamBindingId *string                          `pulumi:"pubsubSchemaIamBindingId"`
	Role                     string                           `pulumi:"role"`
	Schema                   string                           `pulumi:"schema"`
}

// The set of arguments for constructing a PubsubSchemaIamBinding resource.
type PubsubSchemaIamBindingArgs struct {
	Condition                PubsubSchemaIamBindingConditionPtrInput
	Members                  pulumi.StringArrayInput
	Project                  pulumi.StringPtrInput
	PubsubSchemaIamBindingId pulumi.StringPtrInput
	Role                     pulumi.StringInput
	Schema                   pulumi.StringInput
}

func (PubsubSchemaIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubSchemaIamBindingArgs)(nil)).Elem()
}

type PubsubSchemaIamBindingInput interface {
	pulumi.Input

	ToPubsubSchemaIamBindingOutput() PubsubSchemaIamBindingOutput
	ToPubsubSchemaIamBindingOutputWithContext(ctx context.Context) PubsubSchemaIamBindingOutput
}

func (*PubsubSchemaIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubSchemaIamBinding)(nil)).Elem()
}

func (i *PubsubSchemaIamBinding) ToPubsubSchemaIamBindingOutput() PubsubSchemaIamBindingOutput {
	return i.ToPubsubSchemaIamBindingOutputWithContext(context.Background())
}

func (i *PubsubSchemaIamBinding) ToPubsubSchemaIamBindingOutputWithContext(ctx context.Context) PubsubSchemaIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubSchemaIamBindingOutput)
}

type PubsubSchemaIamBindingOutput struct{ *pulumi.OutputState }

func (PubsubSchemaIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubSchemaIamBinding)(nil)).Elem()
}

func (o PubsubSchemaIamBindingOutput) ToPubsubSchemaIamBindingOutput() PubsubSchemaIamBindingOutput {
	return o
}

func (o PubsubSchemaIamBindingOutput) ToPubsubSchemaIamBindingOutputWithContext(ctx context.Context) PubsubSchemaIamBindingOutput {
	return o
}

func (o PubsubSchemaIamBindingOutput) Condition() PubsubSchemaIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) PubsubSchemaIamBindingConditionPtrOutput { return v.Condition }).(PubsubSchemaIamBindingConditionPtrOutput)
}

func (o PubsubSchemaIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o PubsubSchemaIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamBindingOutput) PubsubSchemaIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) pulumi.StringOutput { return v.PubsubSchemaIamBindingId }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamBindingOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamBinding) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubSchemaIamBindingInput)(nil)).Elem(), &PubsubSchemaIamBinding{})
	pulumi.RegisterOutputType(PubsubSchemaIamBindingOutput{})
}
