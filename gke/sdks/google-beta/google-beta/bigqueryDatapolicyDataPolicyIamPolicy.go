// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryDatapolicyDataPolicyIamPolicy struct {
	pulumi.CustomResourceState

	BigqueryDatapolicyDataPolicyIamPolicyId pulumi.StringOutput `pulumi:"bigqueryDatapolicyDataPolicyIamPolicyId"`
	DataPolicyId                            pulumi.StringOutput `pulumi:"dataPolicyId"`
	Etag                                    pulumi.StringOutput `pulumi:"etag"`
	Location                                pulumi.StringOutput `pulumi:"location"`
	PolicyData                              pulumi.StringOutput `pulumi:"policyData"`
	Project                                 pulumi.StringOutput `pulumi:"project"`
}

// NewBigqueryDatapolicyDataPolicyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewBigqueryDatapolicyDataPolicyIamPolicy(ctx *pulumi.Context,
	name string, args *BigqueryDatapolicyDataPolicyIamPolicyArgs, opts ...pulumi.ResourceOption) (*BigqueryDatapolicyDataPolicyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryDatapolicyDataPolicyIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/bigqueryDatapolicyDataPolicyIamPolicy:BigqueryDatapolicyDataPolicyIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryDatapolicyDataPolicyIamPolicy gets an existing BigqueryDatapolicyDataPolicyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryDatapolicyDataPolicyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryDatapolicyDataPolicyIamPolicyState, opts ...pulumi.ResourceOption) (*BigqueryDatapolicyDataPolicyIamPolicy, error) {
	var resource BigqueryDatapolicyDataPolicyIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigqueryDatapolicyDataPolicyIamPolicy:BigqueryDatapolicyDataPolicyIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryDatapolicyDataPolicyIamPolicy resources.
type bigqueryDatapolicyDataPolicyIamPolicyState struct {
	BigqueryDatapolicyDataPolicyIamPolicyId *string `pulumi:"bigqueryDatapolicyDataPolicyIamPolicyId"`
	DataPolicyId                            *string `pulumi:"dataPolicyId"`
	Etag                                    *string `pulumi:"etag"`
	Location                                *string `pulumi:"location"`
	PolicyData                              *string `pulumi:"policyData"`
	Project                                 *string `pulumi:"project"`
}

type BigqueryDatapolicyDataPolicyIamPolicyState struct {
	BigqueryDatapolicyDataPolicyIamPolicyId pulumi.StringPtrInput
	DataPolicyId                            pulumi.StringPtrInput
	Etag                                    pulumi.StringPtrInput
	Location                                pulumi.StringPtrInput
	PolicyData                              pulumi.StringPtrInput
	Project                                 pulumi.StringPtrInput
}

func (BigqueryDatapolicyDataPolicyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryDatapolicyDataPolicyIamPolicyState)(nil)).Elem()
}

type bigqueryDatapolicyDataPolicyIamPolicyArgs struct {
	BigqueryDatapolicyDataPolicyIamPolicyId *string `pulumi:"bigqueryDatapolicyDataPolicyIamPolicyId"`
	DataPolicyId                            string  `pulumi:"dataPolicyId"`
	Location                                *string `pulumi:"location"`
	PolicyData                              string  `pulumi:"policyData"`
	Project                                 *string `pulumi:"project"`
}

// The set of arguments for constructing a BigqueryDatapolicyDataPolicyIamPolicy resource.
type BigqueryDatapolicyDataPolicyIamPolicyArgs struct {
	BigqueryDatapolicyDataPolicyIamPolicyId pulumi.StringPtrInput
	DataPolicyId                            pulumi.StringInput
	Location                                pulumi.StringPtrInput
	PolicyData                              pulumi.StringInput
	Project                                 pulumi.StringPtrInput
}

func (BigqueryDatapolicyDataPolicyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryDatapolicyDataPolicyIamPolicyArgs)(nil)).Elem()
}

type BigqueryDatapolicyDataPolicyIamPolicyInput interface {
	pulumi.Input

	ToBigqueryDatapolicyDataPolicyIamPolicyOutput() BigqueryDatapolicyDataPolicyIamPolicyOutput
	ToBigqueryDatapolicyDataPolicyIamPolicyOutputWithContext(ctx context.Context) BigqueryDatapolicyDataPolicyIamPolicyOutput
}

func (*BigqueryDatapolicyDataPolicyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryDatapolicyDataPolicyIamPolicy)(nil)).Elem()
}

func (i *BigqueryDatapolicyDataPolicyIamPolicy) ToBigqueryDatapolicyDataPolicyIamPolicyOutput() BigqueryDatapolicyDataPolicyIamPolicyOutput {
	return i.ToBigqueryDatapolicyDataPolicyIamPolicyOutputWithContext(context.Background())
}

func (i *BigqueryDatapolicyDataPolicyIamPolicy) ToBigqueryDatapolicyDataPolicyIamPolicyOutputWithContext(ctx context.Context) BigqueryDatapolicyDataPolicyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryDatapolicyDataPolicyIamPolicyOutput)
}

type BigqueryDatapolicyDataPolicyIamPolicyOutput struct{ *pulumi.OutputState }

func (BigqueryDatapolicyDataPolicyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryDatapolicyDataPolicyIamPolicy)(nil)).Elem()
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) ToBigqueryDatapolicyDataPolicyIamPolicyOutput() BigqueryDatapolicyDataPolicyIamPolicyOutput {
	return o
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) ToBigqueryDatapolicyDataPolicyIamPolicyOutputWithContext(ctx context.Context) BigqueryDatapolicyDataPolicyIamPolicyOutput {
	return o
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) BigqueryDatapolicyDataPolicyIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatapolicyDataPolicyIamPolicy) pulumi.StringOutput {
		return v.BigqueryDatapolicyDataPolicyIamPolicyId
	}).(pulumi.StringOutput)
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatapolicyDataPolicyIamPolicy) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatapolicyDataPolicyIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatapolicyDataPolicyIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatapolicyDataPolicyIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o BigqueryDatapolicyDataPolicyIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatapolicyDataPolicyIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryDatapolicyDataPolicyIamPolicyInput)(nil)).Elem(), &BigqueryDatapolicyDataPolicyIamPolicy{})
	pulumi.RegisterOutputType(BigqueryDatapolicyDataPolicyIamPolicyOutput{})
}
