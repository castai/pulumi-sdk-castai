// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataformRepository struct {
	pulumi.CustomResourceState

	DataformRepositoryId pulumi.StringOutput `pulumi:"dataformRepositoryId"`
	// Optional. The repository's user-friendly name.
	DisplayName     pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. If set, configures this repository to be linked to a Git remote.
	GitRemoteSettings DataformRepositoryGitRemoteSettingsPtrOutput `pulumi:"gitRemoteSettings"`
	// Optional. The reference to a KMS encryption key. If provided, it will be used to encrypt user data in the repository and
	// all child resources. It is not possible to add or update the encryption key after the repository is created. Example
	// projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
	KmsKeyName pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	// Optional. Repository user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The repository's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for
	// package installation operations. Must be in the format projects/*/secrets/*/versions/*. The file itself must be in a
	// JSON format.
	NpmrcEnvironmentVariablesSecretVersion pulumi.StringPtrOutput `pulumi:"npmrcEnvironmentVariablesSecretVersion"`
	Project                                pulumi.StringOutput    `pulumi:"project"`
	// A reference to the region
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The service account to run workflow invocations under.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput              `pulumi:"terraformLabels"`
	Timeouts        DataformRepositoryTimeoutsPtrOutput `pulumi:"timeouts"`
	// If set, fields of workspaceCompilationOverrides override the default compilation settings that are specified in
	// dataform.json when creating workspace-scoped compilation results.
	WorkspaceCompilationOverrides DataformRepositoryWorkspaceCompilationOverridesPtrOutput `pulumi:"workspaceCompilationOverrides"`
}

// NewDataformRepository registers a new resource with the given unique name, arguments, and options.
func NewDataformRepository(ctx *pulumi.Context,
	name string, args *DataformRepositoryArgs, opts ...pulumi.ResourceOption) (*DataformRepository, error) {
	if args == nil {
		args = &DataformRepositoryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataformRepository
	err = ctx.RegisterPackageResource("google-beta:index/dataformRepository:DataformRepository", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataformRepository gets an existing DataformRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataformRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataformRepositoryState, opts ...pulumi.ResourceOption) (*DataformRepository, error) {
	var resource DataformRepository
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataformRepository:DataformRepository", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataformRepository resources.
type dataformRepositoryState struct {
	DataformRepositoryId *string `pulumi:"dataformRepositoryId"`
	// Optional. The repository's user-friendly name.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. If set, configures this repository to be linked to a Git remote.
	GitRemoteSettings *DataformRepositoryGitRemoteSettings `pulumi:"gitRemoteSettings"`
	// Optional. The reference to a KMS encryption key. If provided, it will be used to encrypt user data in the repository and
	// all child resources. It is not possible to add or update the encryption key after the repository is created. Example
	// projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Optional. Repository user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The repository's name.
	Name *string `pulumi:"name"`
	// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for
	// package installation operations. Must be in the format projects/*/secrets/*/versions/*. The file itself must be in a
	// JSON format.
	NpmrcEnvironmentVariablesSecretVersion *string `pulumi:"npmrcEnvironmentVariablesSecretVersion"`
	Project                                *string `pulumi:"project"`
	// A reference to the region
	Region *string `pulumi:"region"`
	// The service account to run workflow invocations under.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string           `pulumi:"terraformLabels"`
	Timeouts        *DataformRepositoryTimeouts `pulumi:"timeouts"`
	// If set, fields of workspaceCompilationOverrides override the default compilation settings that are specified in
	// dataform.json when creating workspace-scoped compilation results.
	WorkspaceCompilationOverrides *DataformRepositoryWorkspaceCompilationOverrides `pulumi:"workspaceCompilationOverrides"`
}

type DataformRepositoryState struct {
	DataformRepositoryId pulumi.StringPtrInput
	// Optional. The repository's user-friendly name.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Optional. If set, configures this repository to be linked to a Git remote.
	GitRemoteSettings DataformRepositoryGitRemoteSettingsPtrInput
	// Optional. The reference to a KMS encryption key. If provided, it will be used to encrypt user data in the repository and
	// all child resources. It is not possible to add or update the encryption key after the repository is created. Example
	// projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
	KmsKeyName pulumi.StringPtrInput
	// Optional. Repository user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The repository's name.
	Name pulumi.StringPtrInput
	// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for
	// package installation operations. Must be in the format projects/*/secrets/*/versions/*. The file itself must be in a
	// JSON format.
	NpmrcEnvironmentVariablesSecretVersion pulumi.StringPtrInput
	Project                                pulumi.StringPtrInput
	// A reference to the region
	Region pulumi.StringPtrInput
	// The service account to run workflow invocations under.
	ServiceAccount pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DataformRepositoryTimeoutsPtrInput
	// If set, fields of workspaceCompilationOverrides override the default compilation settings that are specified in
	// dataform.json when creating workspace-scoped compilation results.
	WorkspaceCompilationOverrides DataformRepositoryWorkspaceCompilationOverridesPtrInput
}

func (DataformRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataformRepositoryState)(nil)).Elem()
}

type dataformRepositoryArgs struct {
	DataformRepositoryId *string `pulumi:"dataformRepositoryId"`
	// Optional. The repository's user-friendly name.
	DisplayName *string `pulumi:"displayName"`
	// Optional. If set, configures this repository to be linked to a Git remote.
	GitRemoteSettings *DataformRepositoryGitRemoteSettings `pulumi:"gitRemoteSettings"`
	// Optional. The reference to a KMS encryption key. If provided, it will be used to encrypt user data in the repository and
	// all child resources. It is not possible to add or update the encryption key after the repository is created. Example
	// projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Optional. Repository user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The repository's name.
	Name *string `pulumi:"name"`
	// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for
	// package installation operations. Must be in the format projects/*/secrets/*/versions/*. The file itself must be in a
	// JSON format.
	NpmrcEnvironmentVariablesSecretVersion *string `pulumi:"npmrcEnvironmentVariablesSecretVersion"`
	Project                                *string `pulumi:"project"`
	// A reference to the region
	Region *string `pulumi:"region"`
	// The service account to run workflow invocations under.
	ServiceAccount *string                     `pulumi:"serviceAccount"`
	Timeouts       *DataformRepositoryTimeouts `pulumi:"timeouts"`
	// If set, fields of workspaceCompilationOverrides override the default compilation settings that are specified in
	// dataform.json when creating workspace-scoped compilation results.
	WorkspaceCompilationOverrides *DataformRepositoryWorkspaceCompilationOverrides `pulumi:"workspaceCompilationOverrides"`
}

// The set of arguments for constructing a DataformRepository resource.
type DataformRepositoryArgs struct {
	DataformRepositoryId pulumi.StringPtrInput
	// Optional. The repository's user-friendly name.
	DisplayName pulumi.StringPtrInput
	// Optional. If set, configures this repository to be linked to a Git remote.
	GitRemoteSettings DataformRepositoryGitRemoteSettingsPtrInput
	// Optional. The reference to a KMS encryption key. If provided, it will be used to encrypt user data in the repository and
	// all child resources. It is not possible to add or update the encryption key after the repository is created. Example
	// projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
	KmsKeyName pulumi.StringPtrInput
	// Optional. Repository user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The repository's name.
	Name pulumi.StringPtrInput
	// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for
	// package installation operations. Must be in the format projects/*/secrets/*/versions/*. The file itself must be in a
	// JSON format.
	NpmrcEnvironmentVariablesSecretVersion pulumi.StringPtrInput
	Project                                pulumi.StringPtrInput
	// A reference to the region
	Region pulumi.StringPtrInput
	// The service account to run workflow invocations under.
	ServiceAccount pulumi.StringPtrInput
	Timeouts       DataformRepositoryTimeoutsPtrInput
	// If set, fields of workspaceCompilationOverrides override the default compilation settings that are specified in
	// dataform.json when creating workspace-scoped compilation results.
	WorkspaceCompilationOverrides DataformRepositoryWorkspaceCompilationOverridesPtrInput
}

func (DataformRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataformRepositoryArgs)(nil)).Elem()
}

type DataformRepositoryInput interface {
	pulumi.Input

	ToDataformRepositoryOutput() DataformRepositoryOutput
	ToDataformRepositoryOutputWithContext(ctx context.Context) DataformRepositoryOutput
}

func (*DataformRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**DataformRepository)(nil)).Elem()
}

func (i *DataformRepository) ToDataformRepositoryOutput() DataformRepositoryOutput {
	return i.ToDataformRepositoryOutputWithContext(context.Background())
}

func (i *DataformRepository) ToDataformRepositoryOutputWithContext(ctx context.Context) DataformRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataformRepositoryOutput)
}

type DataformRepositoryOutput struct{ *pulumi.OutputState }

func (DataformRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataformRepository)(nil)).Elem()
}

func (o DataformRepositoryOutput) ToDataformRepositoryOutput() DataformRepositoryOutput {
	return o
}

func (o DataformRepositoryOutput) ToDataformRepositoryOutputWithContext(ctx context.Context) DataformRepositoryOutput {
	return o
}

func (o DataformRepositoryOutput) DataformRepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringOutput { return v.DataformRepositoryId }).(pulumi.StringOutput)
}

// Optional. The repository's user-friendly name.
func (o DataformRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o DataformRepositoryOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. If set, configures this repository to be linked to a Git remote.
func (o DataformRepositoryOutput) GitRemoteSettings() DataformRepositoryGitRemoteSettingsPtrOutput {
	return o.ApplyT(func(v *DataformRepository) DataformRepositoryGitRemoteSettingsPtrOutput { return v.GitRemoteSettings }).(DataformRepositoryGitRemoteSettingsPtrOutput)
}

// Optional. The reference to a KMS encryption key. If provided, it will be used to encrypt user data in the repository and
// all child resources. It is not possible to add or update the encryption key after the repository is created. Example
// projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
func (o DataformRepositoryOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Optional. Repository user labels. An object containing a list of "key": value pairs. Example: { "name": "wrench",
// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o DataformRepositoryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The repository's name.
func (o DataformRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for
// package installation operations. Must be in the format projects/*/secrets/*/versions/*. The file itself must be in a
// JSON format.
func (o DataformRepositoryOutput) NpmrcEnvironmentVariablesSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringPtrOutput { return v.NpmrcEnvironmentVariablesSecretVersion }).(pulumi.StringPtrOutput)
}

func (o DataformRepositoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A reference to the region
func (o DataformRepositoryOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The service account to run workflow invocations under.
func (o DataformRepositoryOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DataformRepositoryOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataformRepository) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DataformRepositoryOutput) Timeouts() DataformRepositoryTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataformRepository) DataformRepositoryTimeoutsPtrOutput { return v.Timeouts }).(DataformRepositoryTimeoutsPtrOutput)
}

// If set, fields of workspaceCompilationOverrides override the default compilation settings that are specified in
// dataform.json when creating workspace-scoped compilation results.
func (o DataformRepositoryOutput) WorkspaceCompilationOverrides() DataformRepositoryWorkspaceCompilationOverridesPtrOutput {
	return o.ApplyT(func(v *DataformRepository) DataformRepositoryWorkspaceCompilationOverridesPtrOutput {
		return v.WorkspaceCompilationOverrides
	}).(DataformRepositoryWorkspaceCompilationOverridesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataformRepositoryInput)(nil)).Elem(), &DataformRepository{})
	pulumi.RegisterOutputType(DataformRepositoryOutput{})
}
