// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerEgressPolicy struct {
	pulumi.CustomResourceState

	AccessContextManagerEgressPolicyId pulumi.StringOutput `pulumi:"accessContextManagerEgressPolicyId"`
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringOutput `pulumi:"accessPolicyId"`
	// The name of the Service Perimeter to add this resource to.
	EgressPolicyName pulumi.StringOutput `pulumi:"egressPolicyName"`
	// A GCP resource that is inside of the service perimeter.
	Resource pulumi.StringOutput                               `pulumi:"resource"`
	Timeouts AccessContextManagerEgressPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAccessContextManagerEgressPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerEgressPolicy(ctx *pulumi.Context,
	name string, args *AccessContextManagerEgressPolicyArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerEgressPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EgressPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'EgressPolicyName'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerEgressPolicy
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerEgressPolicy:AccessContextManagerEgressPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerEgressPolicy gets an existing AccessContextManagerEgressPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerEgressPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerEgressPolicyState, opts ...pulumi.ResourceOption) (*AccessContextManagerEgressPolicy, error) {
	var resource AccessContextManagerEgressPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerEgressPolicy:AccessContextManagerEgressPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerEgressPolicy resources.
type accessContextManagerEgressPolicyState struct {
	AccessContextManagerEgressPolicyId *string `pulumi:"accessContextManagerEgressPolicyId"`
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// The name of the Service Perimeter to add this resource to.
	EgressPolicyName *string `pulumi:"egressPolicyName"`
	// A GCP resource that is inside of the service perimeter.
	Resource *string                                   `pulumi:"resource"`
	Timeouts *AccessContextManagerEgressPolicyTimeouts `pulumi:"timeouts"`
}

type AccessContextManagerEgressPolicyState struct {
	AccessContextManagerEgressPolicyId pulumi.StringPtrInput
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringPtrInput
	// The name of the Service Perimeter to add this resource to.
	EgressPolicyName pulumi.StringPtrInput
	// A GCP resource that is inside of the service perimeter.
	Resource pulumi.StringPtrInput
	Timeouts AccessContextManagerEgressPolicyTimeoutsPtrInput
}

func (AccessContextManagerEgressPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerEgressPolicyState)(nil)).Elem()
}

type accessContextManagerEgressPolicyArgs struct {
	AccessContextManagerEgressPolicyId *string `pulumi:"accessContextManagerEgressPolicyId"`
	// The name of the Service Perimeter to add this resource to.
	EgressPolicyName string `pulumi:"egressPolicyName"`
	// A GCP resource that is inside of the service perimeter.
	Resource string                                    `pulumi:"resource"`
	Timeouts *AccessContextManagerEgressPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessContextManagerEgressPolicy resource.
type AccessContextManagerEgressPolicyArgs struct {
	AccessContextManagerEgressPolicyId pulumi.StringPtrInput
	// The name of the Service Perimeter to add this resource to.
	EgressPolicyName pulumi.StringInput
	// A GCP resource that is inside of the service perimeter.
	Resource pulumi.StringInput
	Timeouts AccessContextManagerEgressPolicyTimeoutsPtrInput
}

func (AccessContextManagerEgressPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerEgressPolicyArgs)(nil)).Elem()
}

type AccessContextManagerEgressPolicyInput interface {
	pulumi.Input

	ToAccessContextManagerEgressPolicyOutput() AccessContextManagerEgressPolicyOutput
	ToAccessContextManagerEgressPolicyOutputWithContext(ctx context.Context) AccessContextManagerEgressPolicyOutput
}

func (*AccessContextManagerEgressPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerEgressPolicy)(nil)).Elem()
}

func (i *AccessContextManagerEgressPolicy) ToAccessContextManagerEgressPolicyOutput() AccessContextManagerEgressPolicyOutput {
	return i.ToAccessContextManagerEgressPolicyOutputWithContext(context.Background())
}

func (i *AccessContextManagerEgressPolicy) ToAccessContextManagerEgressPolicyOutputWithContext(ctx context.Context) AccessContextManagerEgressPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerEgressPolicyOutput)
}

type AccessContextManagerEgressPolicyOutput struct{ *pulumi.OutputState }

func (AccessContextManagerEgressPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerEgressPolicy)(nil)).Elem()
}

func (o AccessContextManagerEgressPolicyOutput) ToAccessContextManagerEgressPolicyOutput() AccessContextManagerEgressPolicyOutput {
	return o
}

func (o AccessContextManagerEgressPolicyOutput) ToAccessContextManagerEgressPolicyOutputWithContext(ctx context.Context) AccessContextManagerEgressPolicyOutput {
	return o
}

func (o AccessContextManagerEgressPolicyOutput) AccessContextManagerEgressPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerEgressPolicy) pulumi.StringOutput {
		return v.AccessContextManagerEgressPolicyId
	}).(pulumi.StringOutput)
}

// The name of the Access Policy this resource belongs to.
func (o AccessContextManagerEgressPolicyOutput) AccessPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerEgressPolicy) pulumi.StringOutput { return v.AccessPolicyId }).(pulumi.StringOutput)
}

// The name of the Service Perimeter to add this resource to.
func (o AccessContextManagerEgressPolicyOutput) EgressPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerEgressPolicy) pulumi.StringOutput { return v.EgressPolicyName }).(pulumi.StringOutput)
}

// A GCP resource that is inside of the service perimeter.
func (o AccessContextManagerEgressPolicyOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerEgressPolicy) pulumi.StringOutput { return v.Resource }).(pulumi.StringOutput)
}

func (o AccessContextManagerEgressPolicyOutput) Timeouts() AccessContextManagerEgressPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerEgressPolicy) AccessContextManagerEgressPolicyTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerEgressPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerEgressPolicyInput)(nil)).Elem(), &AccessContextManagerEgressPolicy{})
	pulumi.RegisterOutputType(AccessContextManagerEgressPolicyOutput{})
}
