// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccV2OrganizationMuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is organizations/{organization}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId}, or projects/{project}/locations/global/muteConfigs/{configId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Mute Config lives in.
	Organization                  pulumi.StringOutput                          `pulumi:"organization"`
	SccV2OrganizationMuteConfigId pulumi.StringOutput                          `pulumi:"sccV2OrganizationMuteConfigId"`
	Timeouts                      SccV2OrganizationMuteConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the mute config.
	Type pulumi.StringOutput `pulumi:"type"`
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSccV2OrganizationMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewSccV2OrganizationMuteConfig(ctx *pulumi.Context,
	name string, args *SccV2OrganizationMuteConfigArgs, opts ...pulumi.ResourceOption) (*SccV2OrganizationMuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccV2OrganizationMuteConfig
	err = ctx.RegisterPackageResource("google-beta:index/sccV2OrganizationMuteConfig:SccV2OrganizationMuteConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccV2OrganizationMuteConfig gets an existing SccV2OrganizationMuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccV2OrganizationMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccV2OrganizationMuteConfigState, opts ...pulumi.ResourceOption) (*SccV2OrganizationMuteConfig, error) {
	var resource SccV2OrganizationMuteConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sccV2OrganizationMuteConfig:SccV2OrganizationMuteConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccV2OrganizationMuteConfig resources.
type sccV2OrganizationMuteConfigState struct {
	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime *string `pulumi:"createTime"`
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter *string `pulumi:"filter"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor *string `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId *string `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is organizations/{organization}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId}, or projects/{project}/locations/global/muteConfigs/{configId}
	Name *string `pulumi:"name"`
	// The organization whose Cloud Security Command Center the Mute Config lives in.
	Organization                  *string                              `pulumi:"organization"`
	SccV2OrganizationMuteConfigId *string                              `pulumi:"sccV2OrganizationMuteConfigId"`
	Timeouts                      *SccV2OrganizationMuteConfigTimeouts `pulumi:"timeouts"`
	// The type of the mute config.
	Type *string `pulumi:"type"`
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime *string `pulumi:"updateTime"`
}

type SccV2OrganizationMuteConfigState struct {
	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime pulumi.StringPtrInput
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringPtrInput
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringPtrInput
	// Name of the mute config. Its format is organizations/{organization}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId}, or projects/{project}/locations/global/muteConfigs/{configId}
	Name pulumi.StringPtrInput
	// The organization whose Cloud Security Command Center the Mute Config lives in.
	Organization                  pulumi.StringPtrInput
	SccV2OrganizationMuteConfigId pulumi.StringPtrInput
	Timeouts                      SccV2OrganizationMuteConfigTimeoutsPtrInput
	// The type of the mute config.
	Type pulumi.StringPtrInput
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime pulumi.StringPtrInput
}

func (SccV2OrganizationMuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccV2OrganizationMuteConfigState)(nil)).Elem()
}

type sccV2OrganizationMuteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter string `pulumi:"filter"`
	// location Id is provided by organization. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId string `pulumi:"muteConfigId"`
	// The organization whose Cloud Security Command Center the Mute Config lives in.
	Organization                  string                               `pulumi:"organization"`
	SccV2OrganizationMuteConfigId *string                              `pulumi:"sccV2OrganizationMuteConfigId"`
	Timeouts                      *SccV2OrganizationMuteConfigTimeouts `pulumi:"timeouts"`
	// The type of the mute config.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SccV2OrganizationMuteConfig resource.
type SccV2OrganizationMuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringInput
	// location Id is provided by organization. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringInput
	// The organization whose Cloud Security Command Center the Mute Config lives in.
	Organization                  pulumi.StringInput
	SccV2OrganizationMuteConfigId pulumi.StringPtrInput
	Timeouts                      SccV2OrganizationMuteConfigTimeoutsPtrInput
	// The type of the mute config.
	Type pulumi.StringInput
}

func (SccV2OrganizationMuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccV2OrganizationMuteConfigArgs)(nil)).Elem()
}

type SccV2OrganizationMuteConfigInput interface {
	pulumi.Input

	ToSccV2OrganizationMuteConfigOutput() SccV2OrganizationMuteConfigOutput
	ToSccV2OrganizationMuteConfigOutputWithContext(ctx context.Context) SccV2OrganizationMuteConfigOutput
}

func (*SccV2OrganizationMuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SccV2OrganizationMuteConfig)(nil)).Elem()
}

func (i *SccV2OrganizationMuteConfig) ToSccV2OrganizationMuteConfigOutput() SccV2OrganizationMuteConfigOutput {
	return i.ToSccV2OrganizationMuteConfigOutputWithContext(context.Background())
}

func (i *SccV2OrganizationMuteConfig) ToSccV2OrganizationMuteConfigOutputWithContext(ctx context.Context) SccV2OrganizationMuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccV2OrganizationMuteConfigOutput)
}

type SccV2OrganizationMuteConfigOutput struct{ *pulumi.OutputState }

func (SccV2OrganizationMuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccV2OrganizationMuteConfig)(nil)).Elem()
}

func (o SccV2OrganizationMuteConfigOutput) ToSccV2OrganizationMuteConfigOutput() SccV2OrganizationMuteConfigOutput {
	return o
}

func (o SccV2OrganizationMuteConfigOutput) ToSccV2OrganizationMuteConfigOutputWithContext(ctx context.Context) SccV2OrganizationMuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
// creation.
func (o SccV2OrganizationMuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o SccV2OrganizationMuteConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
// created under the project = Y scope, it might not match any findings.
func (o SccV2OrganizationMuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// location Id is provided by organization. If not provided, Use global as default.
func (o SccV2OrganizationMuteConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
// provided on config creation or update.
func (o SccV2OrganizationMuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Unique identifier provided by the client within the parent scope.
func (o SccV2OrganizationMuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// Name of the mute config. Its format is organizations/{organization}/locations/global/muteConfigs/{configId},
// folders/{folder}/locations/global/muteConfigs/{configId}, or projects/{project}/locations/global/muteConfigs/{configId}
func (o SccV2OrganizationMuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization whose Cloud Security Command Center the Mute Config lives in.
func (o SccV2OrganizationMuteConfigOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SccV2OrganizationMuteConfigOutput) SccV2OrganizationMuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.SccV2OrganizationMuteConfigId }).(pulumi.StringOutput)
}

func (o SccV2OrganizationMuteConfigOutput) Timeouts() SccV2OrganizationMuteConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) SccV2OrganizationMuteConfigTimeoutsPtrOutput { return v.Timeouts }).(SccV2OrganizationMuteConfigTimeoutsPtrOutput)
}

// The type of the mute config.
func (o SccV2OrganizationMuteConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
// ignored if provided on config creation or update.
func (o SccV2OrganizationMuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2OrganizationMuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccV2OrganizationMuteConfigInput)(nil)).Elem(), &SccV2OrganizationMuteConfig{})
	pulumi.RegisterOutputType(SccV2OrganizationMuteConfigOutput{})
}
