// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeSnapshotIamMember struct {
	pulumi.CustomResourceState

	ComputeSnapshotIamMemberId pulumi.StringOutput                        `pulumi:"computeSnapshotIamMemberId"`
	Condition                  ComputeSnapshotIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                       pulumi.StringOutput                        `pulumi:"etag"`
	Member                     pulumi.StringOutput                        `pulumi:"member"`
	Name                       pulumi.StringOutput                        `pulumi:"name"`
	Project                    pulumi.StringOutput                        `pulumi:"project"`
	Role                       pulumi.StringOutput                        `pulumi:"role"`
}

// NewComputeSnapshotIamMember registers a new resource with the given unique name, arguments, and options.
func NewComputeSnapshotIamMember(ctx *pulumi.Context,
	name string, args *ComputeSnapshotIamMemberArgs, opts ...pulumi.ResourceOption) (*ComputeSnapshotIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeSnapshotIamMember
	err = ctx.RegisterPackageResource("google-beta:index/computeSnapshotIamMember:ComputeSnapshotIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeSnapshotIamMember gets an existing ComputeSnapshotIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeSnapshotIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeSnapshotIamMemberState, opts ...pulumi.ResourceOption) (*ComputeSnapshotIamMember, error) {
	var resource ComputeSnapshotIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeSnapshotIamMember:ComputeSnapshotIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeSnapshotIamMember resources.
type computeSnapshotIamMemberState struct {
	ComputeSnapshotIamMemberId *string                            `pulumi:"computeSnapshotIamMemberId"`
	Condition                  *ComputeSnapshotIamMemberCondition `pulumi:"condition"`
	Etag                       *string                            `pulumi:"etag"`
	Member                     *string                            `pulumi:"member"`
	Name                       *string                            `pulumi:"name"`
	Project                    *string                            `pulumi:"project"`
	Role                       *string                            `pulumi:"role"`
}

type ComputeSnapshotIamMemberState struct {
	ComputeSnapshotIamMemberId pulumi.StringPtrInput
	Condition                  ComputeSnapshotIamMemberConditionPtrInput
	Etag                       pulumi.StringPtrInput
	Member                     pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Project                    pulumi.StringPtrInput
	Role                       pulumi.StringPtrInput
}

func (ComputeSnapshotIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotIamMemberState)(nil)).Elem()
}

type computeSnapshotIamMemberArgs struct {
	ComputeSnapshotIamMemberId *string                            `pulumi:"computeSnapshotIamMemberId"`
	Condition                  *ComputeSnapshotIamMemberCondition `pulumi:"condition"`
	Member                     string                             `pulumi:"member"`
	Name                       *string                            `pulumi:"name"`
	Project                    *string                            `pulumi:"project"`
	Role                       string                             `pulumi:"role"`
}

// The set of arguments for constructing a ComputeSnapshotIamMember resource.
type ComputeSnapshotIamMemberArgs struct {
	ComputeSnapshotIamMemberId pulumi.StringPtrInput
	Condition                  ComputeSnapshotIamMemberConditionPtrInput
	Member                     pulumi.StringInput
	Name                       pulumi.StringPtrInput
	Project                    pulumi.StringPtrInput
	Role                       pulumi.StringInput
}

func (ComputeSnapshotIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotIamMemberArgs)(nil)).Elem()
}

type ComputeSnapshotIamMemberInput interface {
	pulumi.Input

	ToComputeSnapshotIamMemberOutput() ComputeSnapshotIamMemberOutput
	ToComputeSnapshotIamMemberOutputWithContext(ctx context.Context) ComputeSnapshotIamMemberOutput
}

func (*ComputeSnapshotIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshotIamMember)(nil)).Elem()
}

func (i *ComputeSnapshotIamMember) ToComputeSnapshotIamMemberOutput() ComputeSnapshotIamMemberOutput {
	return i.ToComputeSnapshotIamMemberOutputWithContext(context.Background())
}

func (i *ComputeSnapshotIamMember) ToComputeSnapshotIamMemberOutputWithContext(ctx context.Context) ComputeSnapshotIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotIamMemberOutput)
}

type ComputeSnapshotIamMemberOutput struct{ *pulumi.OutputState }

func (ComputeSnapshotIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshotIamMember)(nil)).Elem()
}

func (o ComputeSnapshotIamMemberOutput) ToComputeSnapshotIamMemberOutput() ComputeSnapshotIamMemberOutput {
	return o
}

func (o ComputeSnapshotIamMemberOutput) ToComputeSnapshotIamMemberOutputWithContext(ctx context.Context) ComputeSnapshotIamMemberOutput {
	return o
}

func (o ComputeSnapshotIamMemberOutput) ComputeSnapshotIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) pulumi.StringOutput { return v.ComputeSnapshotIamMemberId }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamMemberOutput) Condition() ComputeSnapshotIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) ComputeSnapshotIamMemberConditionPtrOutput { return v.Condition }).(ComputeSnapshotIamMemberConditionPtrOutput)
}

func (o ComputeSnapshotIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSnapshotIamMemberInput)(nil)).Elem(), &ComputeSnapshotIamMember{})
	pulumi.RegisterOutputType(ComputeSnapshotIamMemberOutput{})
}
