// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpannerInstanceIamPolicy struct {
	pulumi.CustomResourceState

	Etag                       pulumi.StringOutput `pulumi:"etag"`
	Instance                   pulumi.StringOutput `pulumi:"instance"`
	PolicyData                 pulumi.StringOutput `pulumi:"policyData"`
	Project                    pulumi.StringOutput `pulumi:"project"`
	SpannerInstanceIamPolicyId pulumi.StringOutput `pulumi:"spannerInstanceIamPolicyId"`
}

// NewSpannerInstanceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewSpannerInstanceIamPolicy(ctx *pulumi.Context,
	name string, args *SpannerInstanceIamPolicyArgs, opts ...pulumi.ResourceOption) (*SpannerInstanceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SpannerInstanceIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/spannerInstanceIamPolicy:SpannerInstanceIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpannerInstanceIamPolicy gets an existing SpannerInstanceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpannerInstanceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpannerInstanceIamPolicyState, opts ...pulumi.ResourceOption) (*SpannerInstanceIamPolicy, error) {
	var resource SpannerInstanceIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/spannerInstanceIamPolicy:SpannerInstanceIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpannerInstanceIamPolicy resources.
type spannerInstanceIamPolicyState struct {
	Etag                       *string `pulumi:"etag"`
	Instance                   *string `pulumi:"instance"`
	PolicyData                 *string `pulumi:"policyData"`
	Project                    *string `pulumi:"project"`
	SpannerInstanceIamPolicyId *string `pulumi:"spannerInstanceIamPolicyId"`
}

type SpannerInstanceIamPolicyState struct {
	Etag                       pulumi.StringPtrInput
	Instance                   pulumi.StringPtrInput
	PolicyData                 pulumi.StringPtrInput
	Project                    pulumi.StringPtrInput
	SpannerInstanceIamPolicyId pulumi.StringPtrInput
}

func (SpannerInstanceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceIamPolicyState)(nil)).Elem()
}

type spannerInstanceIamPolicyArgs struct {
	Instance                   string  `pulumi:"instance"`
	PolicyData                 string  `pulumi:"policyData"`
	Project                    *string `pulumi:"project"`
	SpannerInstanceIamPolicyId *string `pulumi:"spannerInstanceIamPolicyId"`
}

// The set of arguments for constructing a SpannerInstanceIamPolicy resource.
type SpannerInstanceIamPolicyArgs struct {
	Instance                   pulumi.StringInput
	PolicyData                 pulumi.StringInput
	Project                    pulumi.StringPtrInput
	SpannerInstanceIamPolicyId pulumi.StringPtrInput
}

func (SpannerInstanceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceIamPolicyArgs)(nil)).Elem()
}

type SpannerInstanceIamPolicyInput interface {
	pulumi.Input

	ToSpannerInstanceIamPolicyOutput() SpannerInstanceIamPolicyOutput
	ToSpannerInstanceIamPolicyOutputWithContext(ctx context.Context) SpannerInstanceIamPolicyOutput
}

func (*SpannerInstanceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceIamPolicy)(nil)).Elem()
}

func (i *SpannerInstanceIamPolicy) ToSpannerInstanceIamPolicyOutput() SpannerInstanceIamPolicyOutput {
	return i.ToSpannerInstanceIamPolicyOutputWithContext(context.Background())
}

func (i *SpannerInstanceIamPolicy) ToSpannerInstanceIamPolicyOutputWithContext(ctx context.Context) SpannerInstanceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerInstanceIamPolicyOutput)
}

type SpannerInstanceIamPolicyOutput struct{ *pulumi.OutputState }

func (SpannerInstanceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceIamPolicy)(nil)).Elem()
}

func (o SpannerInstanceIamPolicyOutput) ToSpannerInstanceIamPolicyOutput() SpannerInstanceIamPolicyOutput {
	return o
}

func (o SpannerInstanceIamPolicyOutput) ToSpannerInstanceIamPolicyOutputWithContext(ctx context.Context) SpannerInstanceIamPolicyOutput {
	return o
}

func (o SpannerInstanceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamPolicyOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamPolicy) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamPolicyOutput) SpannerInstanceIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamPolicy) pulumi.StringOutput { return v.SpannerInstanceIamPolicyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerInstanceIamPolicyInput)(nil)).Elem(), &SpannerInstanceIamPolicy{})
	pulumi.RegisterOutputType(SpannerInstanceIamPolicyOutput{})
}
