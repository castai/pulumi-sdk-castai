// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeManagedSslCertificate struct {
	pulumi.CustomResourceState

	// The unique identifier for the resource.
	CertificateId                  pulumi.Float64Output `pulumi:"certificateId"`
	ComputeManagedSslCertificateId pulumi.StringOutput  `pulumi:"computeManagedSslCertificateId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Expire time of the certificate in RFC3339 text format.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed ComputeManagedSslCertificateManagedPtrOutput `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name     pulumi.StringOutput `pulumi:"name"`
	Project  pulumi.StringOutput `pulumi:"project"`
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayOutput                      `pulumi:"subjectAlternativeNames"`
	Timeouts                ComputeManagedSslCertificateTimeoutsPtrOutput `pulumi:"timeouts"`
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewComputeManagedSslCertificate registers a new resource with the given unique name, arguments, and options.
func NewComputeManagedSslCertificate(ctx *pulumi.Context,
	name string, args *ComputeManagedSslCertificateArgs, opts ...pulumi.ResourceOption) (*ComputeManagedSslCertificate, error) {
	if args == nil {
		args = &ComputeManagedSslCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeManagedSslCertificate
	err = ctx.RegisterPackageResource("google-beta:index/computeManagedSslCertificate:ComputeManagedSslCertificate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeManagedSslCertificate gets an existing ComputeManagedSslCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeManagedSslCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeManagedSslCertificateState, opts ...pulumi.ResourceOption) (*ComputeManagedSslCertificate, error) {
	var resource ComputeManagedSslCertificate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeManagedSslCertificate:ComputeManagedSslCertificate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeManagedSslCertificate resources.
type computeManagedSslCertificateState struct {
	// The unique identifier for the resource.
	CertificateId                  *float64 `pulumi:"certificateId"`
	ComputeManagedSslCertificateId *string  `pulumi:"computeManagedSslCertificateId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Expire time of the certificate in RFC3339 text format.
	ExpireTime *string `pulumi:"expireTime"`
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed *ComputeManagedSslCertificateManaged `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name     *string `pulumi:"name"`
	Project  *string `pulumi:"project"`
	SelfLink *string `pulumi:"selfLink"`
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames []string                              `pulumi:"subjectAlternativeNames"`
	Timeouts                *ComputeManagedSslCertificateTimeouts `pulumi:"timeouts"`
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type *string `pulumi:"type"`
}

type ComputeManagedSslCertificateState struct {
	// The unique identifier for the resource.
	CertificateId                  pulumi.Float64PtrInput
	ComputeManagedSslCertificateId pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Expire time of the certificate in RFC3339 text format.
	ExpireTime pulumi.StringPtrInput
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed ComputeManagedSslCertificateManagedPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	SelfLink pulumi.StringPtrInput
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayInput
	Timeouts                ComputeManagedSslCertificateTimeoutsPtrInput
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type pulumi.StringPtrInput
}

func (ComputeManagedSslCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeManagedSslCertificateState)(nil)).Elem()
}

type computeManagedSslCertificateArgs struct {
	ComputeManagedSslCertificateId *string `pulumi:"computeManagedSslCertificateId"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed *ComputeManagedSslCertificateManaged `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name     *string                               `pulumi:"name"`
	Project  *string                               `pulumi:"project"`
	Timeouts *ComputeManagedSslCertificateTimeouts `pulumi:"timeouts"`
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ComputeManagedSslCertificate resource.
type ComputeManagedSslCertificateArgs struct {
	ComputeManagedSslCertificateId pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed ComputeManagedSslCertificateManagedPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts ComputeManagedSslCertificateTimeoutsPtrInput
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type pulumi.StringPtrInput
}

func (ComputeManagedSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeManagedSslCertificateArgs)(nil)).Elem()
}

type ComputeManagedSslCertificateInput interface {
	pulumi.Input

	ToComputeManagedSslCertificateOutput() ComputeManagedSslCertificateOutput
	ToComputeManagedSslCertificateOutputWithContext(ctx context.Context) ComputeManagedSslCertificateOutput
}

func (*ComputeManagedSslCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeManagedSslCertificate)(nil)).Elem()
}

func (i *ComputeManagedSslCertificate) ToComputeManagedSslCertificateOutput() ComputeManagedSslCertificateOutput {
	return i.ToComputeManagedSslCertificateOutputWithContext(context.Background())
}

func (i *ComputeManagedSslCertificate) ToComputeManagedSslCertificateOutputWithContext(ctx context.Context) ComputeManagedSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeManagedSslCertificateOutput)
}

type ComputeManagedSslCertificateOutput struct{ *pulumi.OutputState }

func (ComputeManagedSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeManagedSslCertificate)(nil)).Elem()
}

func (o ComputeManagedSslCertificateOutput) ToComputeManagedSslCertificateOutput() ComputeManagedSslCertificateOutput {
	return o
}

func (o ComputeManagedSslCertificateOutput) ToComputeManagedSslCertificateOutputWithContext(ctx context.Context) ComputeManagedSslCertificateOutput {
	return o
}

// The unique identifier for the resource.
func (o ComputeManagedSslCertificateOutput) CertificateId() pulumi.Float64Output {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.Float64Output { return v.CertificateId }).(pulumi.Float64Output)
}

func (o ComputeManagedSslCertificateOutput) ComputeManagedSslCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringOutput { return v.ComputeManagedSslCertificateId }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeManagedSslCertificateOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o ComputeManagedSslCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Expire time of the certificate in RFC3339 text format.
func (o ComputeManagedSslCertificateOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
// of 'MANAGED' in 'type').
func (o ComputeManagedSslCertificateOutput) Managed() ComputeManagedSslCertificateManagedPtrOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) ComputeManagedSslCertificateManagedPtrOutput { return v.Managed }).(ComputeManagedSslCertificateManagedPtrOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
// certificates.
func (o ComputeManagedSslCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeManagedSslCertificateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeManagedSslCertificateOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Domains associated with the certificate via Subject Alternative Name.
func (o ComputeManagedSslCertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func (o ComputeManagedSslCertificateOutput) Timeouts() ComputeManagedSslCertificateTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) ComputeManagedSslCertificateTimeoutsPtrOutput { return v.Timeouts }).(ComputeManagedSslCertificateTimeoutsPtrOutput)
}

// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
// Possible values: ["MANAGED"]
func (o ComputeManagedSslCertificateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeManagedSslCertificate) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeManagedSslCertificateInput)(nil)).Elem(), &ComputeManagedSslCertificate{})
	pulumi.RegisterOutputType(ComputeManagedSslCertificateOutput{})
}
