// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectIamBinding struct {
	pulumi.CustomResourceState

	Condition           ProjectIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                pulumi.StringOutput                 `pulumi:"etag"`
	Members             pulumi.StringArrayOutput            `pulumi:"members"`
	Project             pulumi.StringOutput                 `pulumi:"project"`
	ProjectIamBindingId pulumi.StringOutput                 `pulumi:"projectIamBindingId"`
	Role                pulumi.StringOutput                 `pulumi:"role"`
}

// NewProjectIamBinding registers a new resource with the given unique name, arguments, and options.
func NewProjectIamBinding(ctx *pulumi.Context,
	name string, args *ProjectIamBindingArgs, opts ...pulumi.ResourceOption) (*ProjectIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/projectIamBinding:ProjectIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIamBinding gets an existing ProjectIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIamBindingState, opts ...pulumi.ResourceOption) (*ProjectIamBinding, error) {
	var resource ProjectIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/projectIamBinding:ProjectIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIamBinding resources.
type projectIamBindingState struct {
	Condition           *ProjectIamBindingCondition `pulumi:"condition"`
	Etag                *string                     `pulumi:"etag"`
	Members             []string                    `pulumi:"members"`
	Project             *string                     `pulumi:"project"`
	ProjectIamBindingId *string                     `pulumi:"projectIamBindingId"`
	Role                *string                     `pulumi:"role"`
}

type ProjectIamBindingState struct {
	Condition           ProjectIamBindingConditionPtrInput
	Etag                pulumi.StringPtrInput
	Members             pulumi.StringArrayInput
	Project             pulumi.StringPtrInput
	ProjectIamBindingId pulumi.StringPtrInput
	Role                pulumi.StringPtrInput
}

func (ProjectIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamBindingState)(nil)).Elem()
}

type projectIamBindingArgs struct {
	Condition           *ProjectIamBindingCondition `pulumi:"condition"`
	Members             []string                    `pulumi:"members"`
	Project             string                      `pulumi:"project"`
	ProjectIamBindingId *string                     `pulumi:"projectIamBindingId"`
	Role                string                      `pulumi:"role"`
}

// The set of arguments for constructing a ProjectIamBinding resource.
type ProjectIamBindingArgs struct {
	Condition           ProjectIamBindingConditionPtrInput
	Members             pulumi.StringArrayInput
	Project             pulumi.StringInput
	ProjectIamBindingId pulumi.StringPtrInput
	Role                pulumi.StringInput
}

func (ProjectIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamBindingArgs)(nil)).Elem()
}

type ProjectIamBindingInput interface {
	pulumi.Input

	ToProjectIamBindingOutput() ProjectIamBindingOutput
	ToProjectIamBindingOutputWithContext(ctx context.Context) ProjectIamBindingOutput
}

func (*ProjectIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamBinding)(nil)).Elem()
}

func (i *ProjectIamBinding) ToProjectIamBindingOutput() ProjectIamBindingOutput {
	return i.ToProjectIamBindingOutputWithContext(context.Background())
}

func (i *ProjectIamBinding) ToProjectIamBindingOutputWithContext(ctx context.Context) ProjectIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIamBindingOutput)
}

type ProjectIamBindingOutput struct{ *pulumi.OutputState }

func (ProjectIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamBinding)(nil)).Elem()
}

func (o ProjectIamBindingOutput) ToProjectIamBindingOutput() ProjectIamBindingOutput {
	return o
}

func (o ProjectIamBindingOutput) ToProjectIamBindingOutputWithContext(ctx context.Context) ProjectIamBindingOutput {
	return o
}

func (o ProjectIamBindingOutput) Condition() ProjectIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ProjectIamBinding) ProjectIamBindingConditionPtrOutput { return v.Condition }).(ProjectIamBindingConditionPtrOutput)
}

func (o ProjectIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ProjectIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ProjectIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectIamBindingOutput) ProjectIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamBinding) pulumi.StringOutput { return v.ProjectIamBindingId }).(pulumi.StringOutput)
}

func (o ProjectIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIamBindingInput)(nil)).Elem(), &ProjectIamBinding{})
	pulumi.RegisterOutputType(ProjectIamBindingOutput{})
}
