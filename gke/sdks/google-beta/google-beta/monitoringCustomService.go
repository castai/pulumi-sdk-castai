// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MonitoringCustomService struct {
	pulumi.CustomResourceState

	// Name used for UI elements listing this Service.
	DisplayName               pulumi.StringPtrOutput `pulumi:"displayName"`
	MonitoringCustomServiceId pulumi.StringOutput    `pulumi:"monitoringCustomServiceId"`
	// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	Telemetry MonitoringCustomServiceTelemetryPtrOutput `pulumi:"telemetry"`
	Timeouts  MonitoringCustomServiceTimeoutsPtrOutput  `pulumi:"timeouts"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapOutput `pulumi:"userLabels"`
}

// NewMonitoringCustomService registers a new resource with the given unique name, arguments, and options.
func NewMonitoringCustomService(ctx *pulumi.Context,
	name string, args *MonitoringCustomServiceArgs, opts ...pulumi.ResourceOption) (*MonitoringCustomService, error) {
	if args == nil {
		args = &MonitoringCustomServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MonitoringCustomService
	err = ctx.RegisterPackageResource("google-beta:index/monitoringCustomService:MonitoringCustomService", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringCustomService gets an existing MonitoringCustomService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringCustomService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringCustomServiceState, opts ...pulumi.ResourceOption) (*MonitoringCustomService, error) {
	var resource MonitoringCustomService
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/monitoringCustomService:MonitoringCustomService", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringCustomService resources.
type monitoringCustomServiceState struct {
	// Name used for UI elements listing this Service.
	DisplayName               *string `pulumi:"displayName"`
	MonitoringCustomServiceId *string `pulumi:"monitoringCustomServiceId"`
	// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId *string `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	Telemetry *MonitoringCustomServiceTelemetry `pulumi:"telemetry"`
	Timeouts  *MonitoringCustomServiceTimeouts  `pulumi:"timeouts"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `pulumi:"userLabels"`
}

type MonitoringCustomServiceState struct {
	// Name used for UI elements listing this Service.
	DisplayName               pulumi.StringPtrInput
	MonitoringCustomServiceId pulumi.StringPtrInput
	// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId pulumi.StringPtrInput
	// Configuration for how to query telemetry on a Service.
	Telemetry MonitoringCustomServiceTelemetryPtrInput
	Timeouts  MonitoringCustomServiceTimeoutsPtrInput
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapInput
}

func (MonitoringCustomServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringCustomServiceState)(nil)).Elem()
}

type monitoringCustomServiceArgs struct {
	// Name used for UI elements listing this Service.
	DisplayName               *string `pulumi:"displayName"`
	MonitoringCustomServiceId *string `pulumi:"monitoringCustomServiceId"`
	Project                   *string `pulumi:"project"`
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId *string `pulumi:"serviceId"`
	// Configuration for how to query telemetry on a Service.
	Telemetry *MonitoringCustomServiceTelemetry `pulumi:"telemetry"`
	Timeouts  *MonitoringCustomServiceTimeouts  `pulumi:"timeouts"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// The set of arguments for constructing a MonitoringCustomService resource.
type MonitoringCustomServiceArgs struct {
	// Name used for UI elements listing this Service.
	DisplayName               pulumi.StringPtrInput
	MonitoringCustomServiceId pulumi.StringPtrInput
	Project                   pulumi.StringPtrInput
	// An optional service ID to use. If not given, the server will generate a service ID.
	ServiceId pulumi.StringPtrInput
	// Configuration for how to query telemetry on a Service.
	Telemetry MonitoringCustomServiceTelemetryPtrInput
	Timeouts  MonitoringCustomServiceTimeoutsPtrInput
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
	// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
	// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
	// a semantic value, the empty string may be supplied for the label value.
	UserLabels pulumi.StringMapInput
}

func (MonitoringCustomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringCustomServiceArgs)(nil)).Elem()
}

type MonitoringCustomServiceInput interface {
	pulumi.Input

	ToMonitoringCustomServiceOutput() MonitoringCustomServiceOutput
	ToMonitoringCustomServiceOutputWithContext(ctx context.Context) MonitoringCustomServiceOutput
}

func (*MonitoringCustomService) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringCustomService)(nil)).Elem()
}

func (i *MonitoringCustomService) ToMonitoringCustomServiceOutput() MonitoringCustomServiceOutput {
	return i.ToMonitoringCustomServiceOutputWithContext(context.Background())
}

func (i *MonitoringCustomService) ToMonitoringCustomServiceOutputWithContext(ctx context.Context) MonitoringCustomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringCustomServiceOutput)
}

type MonitoringCustomServiceOutput struct{ *pulumi.OutputState }

func (MonitoringCustomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringCustomService)(nil)).Elem()
}

func (o MonitoringCustomServiceOutput) ToMonitoringCustomServiceOutput() MonitoringCustomServiceOutput {
	return o
}

func (o MonitoringCustomServiceOutput) ToMonitoringCustomServiceOutputWithContext(ctx context.Context) MonitoringCustomServiceOutput {
	return o
}

// Name used for UI elements listing this Service.
func (o MonitoringCustomServiceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringCustomService) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o MonitoringCustomServiceOutput) MonitoringCustomServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringCustomService) pulumi.StringOutput { return v.MonitoringCustomServiceId }).(pulumi.StringOutput)
}

// The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
func (o MonitoringCustomServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringCustomService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MonitoringCustomServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringCustomService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An optional service ID to use. If not given, the server will generate a service ID.
func (o MonitoringCustomServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringCustomService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Configuration for how to query telemetry on a Service.
func (o MonitoringCustomServiceOutput) Telemetry() MonitoringCustomServiceTelemetryPtrOutput {
	return o.ApplyT(func(v *MonitoringCustomService) MonitoringCustomServiceTelemetryPtrOutput { return v.Telemetry }).(MonitoringCustomServiceTelemetryPtrOutput)
}

func (o MonitoringCustomServiceOutput) Timeouts() MonitoringCustomServiceTimeoutsPtrOutput {
	return o.ApplyT(func(v *MonitoringCustomService) MonitoringCustomServiceTimeoutsPtrOutput { return v.Timeouts }).(MonitoringCustomServiceTimeoutsPtrOutput)
}

// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
// contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
// characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
// a semantic value, the empty string may be supplied for the label value.
func (o MonitoringCustomServiceOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringCustomService) pulumi.StringMapOutput { return v.UserLabels }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringCustomServiceInput)(nil)).Elem(), &MonitoringCustomService{})
	pulumi.RegisterOutputType(MonitoringCustomServiceOutput{})
}
