// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeBackendServiceIamMember struct {
	pulumi.CustomResourceState

	ComputeBackendServiceIamMemberId pulumi.StringOutput                              `pulumi:"computeBackendServiceIamMemberId"`
	Condition                        ComputeBackendServiceIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                             pulumi.StringOutput                              `pulumi:"etag"`
	Member                           pulumi.StringOutput                              `pulumi:"member"`
	Name                             pulumi.StringOutput                              `pulumi:"name"`
	Project                          pulumi.StringOutput                              `pulumi:"project"`
	Role                             pulumi.StringOutput                              `pulumi:"role"`
}

// NewComputeBackendServiceIamMember registers a new resource with the given unique name, arguments, and options.
func NewComputeBackendServiceIamMember(ctx *pulumi.Context,
	name string, args *ComputeBackendServiceIamMemberArgs, opts ...pulumi.ResourceOption) (*ComputeBackendServiceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeBackendServiceIamMember
	err = ctx.RegisterPackageResource("google-beta:index/computeBackendServiceIamMember:ComputeBackendServiceIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeBackendServiceIamMember gets an existing ComputeBackendServiceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeBackendServiceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeBackendServiceIamMemberState, opts ...pulumi.ResourceOption) (*ComputeBackendServiceIamMember, error) {
	var resource ComputeBackendServiceIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeBackendServiceIamMember:ComputeBackendServiceIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeBackendServiceIamMember resources.
type computeBackendServiceIamMemberState struct {
	ComputeBackendServiceIamMemberId *string                                  `pulumi:"computeBackendServiceIamMemberId"`
	Condition                        *ComputeBackendServiceIamMemberCondition `pulumi:"condition"`
	Etag                             *string                                  `pulumi:"etag"`
	Member                           *string                                  `pulumi:"member"`
	Name                             *string                                  `pulumi:"name"`
	Project                          *string                                  `pulumi:"project"`
	Role                             *string                                  `pulumi:"role"`
}

type ComputeBackendServiceIamMemberState struct {
	ComputeBackendServiceIamMemberId pulumi.StringPtrInput
	Condition                        ComputeBackendServiceIamMemberConditionPtrInput
	Etag                             pulumi.StringPtrInput
	Member                           pulumi.StringPtrInput
	Name                             pulumi.StringPtrInput
	Project                          pulumi.StringPtrInput
	Role                             pulumi.StringPtrInput
}

func (ComputeBackendServiceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeBackendServiceIamMemberState)(nil)).Elem()
}

type computeBackendServiceIamMemberArgs struct {
	ComputeBackendServiceIamMemberId *string                                  `pulumi:"computeBackendServiceIamMemberId"`
	Condition                        *ComputeBackendServiceIamMemberCondition `pulumi:"condition"`
	Member                           string                                   `pulumi:"member"`
	Name                             *string                                  `pulumi:"name"`
	Project                          *string                                  `pulumi:"project"`
	Role                             string                                   `pulumi:"role"`
}

// The set of arguments for constructing a ComputeBackendServiceIamMember resource.
type ComputeBackendServiceIamMemberArgs struct {
	ComputeBackendServiceIamMemberId pulumi.StringPtrInput
	Condition                        ComputeBackendServiceIamMemberConditionPtrInput
	Member                           pulumi.StringInput
	Name                             pulumi.StringPtrInput
	Project                          pulumi.StringPtrInput
	Role                             pulumi.StringInput
}

func (ComputeBackendServiceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeBackendServiceIamMemberArgs)(nil)).Elem()
}

type ComputeBackendServiceIamMemberInput interface {
	pulumi.Input

	ToComputeBackendServiceIamMemberOutput() ComputeBackendServiceIamMemberOutput
	ToComputeBackendServiceIamMemberOutputWithContext(ctx context.Context) ComputeBackendServiceIamMemberOutput
}

func (*ComputeBackendServiceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeBackendServiceIamMember)(nil)).Elem()
}

func (i *ComputeBackendServiceIamMember) ToComputeBackendServiceIamMemberOutput() ComputeBackendServiceIamMemberOutput {
	return i.ToComputeBackendServiceIamMemberOutputWithContext(context.Background())
}

func (i *ComputeBackendServiceIamMember) ToComputeBackendServiceIamMemberOutputWithContext(ctx context.Context) ComputeBackendServiceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeBackendServiceIamMemberOutput)
}

type ComputeBackendServiceIamMemberOutput struct{ *pulumi.OutputState }

func (ComputeBackendServiceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeBackendServiceIamMember)(nil)).Elem()
}

func (o ComputeBackendServiceIamMemberOutput) ToComputeBackendServiceIamMemberOutput() ComputeBackendServiceIamMemberOutput {
	return o
}

func (o ComputeBackendServiceIamMemberOutput) ToComputeBackendServiceIamMemberOutputWithContext(ctx context.Context) ComputeBackendServiceIamMemberOutput {
	return o
}

func (o ComputeBackendServiceIamMemberOutput) ComputeBackendServiceIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) pulumi.StringOutput { return v.ComputeBackendServiceIamMemberId }).(pulumi.StringOutput)
}

func (o ComputeBackendServiceIamMemberOutput) Condition() ComputeBackendServiceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) ComputeBackendServiceIamMemberConditionPtrOutput {
		return v.Condition
	}).(ComputeBackendServiceIamMemberConditionPtrOutput)
}

func (o ComputeBackendServiceIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeBackendServiceIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ComputeBackendServiceIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeBackendServiceIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeBackendServiceIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeBackendServiceIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeBackendServiceIamMemberInput)(nil)).Elem(), &ComputeBackendServiceIamMember{})
	pulumi.RegisterOutputType(ComputeBackendServiceIamMemberOutput{})
}
