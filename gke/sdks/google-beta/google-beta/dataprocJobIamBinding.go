// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataprocJobIamBinding struct {
	pulumi.CustomResourceState

	Condition               DataprocJobIamBindingConditionPtrOutput `pulumi:"condition"`
	DataprocJobIamBindingId pulumi.StringOutput                     `pulumi:"dataprocJobIamBindingId"`
	Etag                    pulumi.StringOutput                     `pulumi:"etag"`
	JobId                   pulumi.StringOutput                     `pulumi:"jobId"`
	Members                 pulumi.StringArrayOutput                `pulumi:"members"`
	Project                 pulumi.StringOutput                     `pulumi:"project"`
	Region                  pulumi.StringOutput                     `pulumi:"region"`
	Role                    pulumi.StringOutput                     `pulumi:"role"`
}

// NewDataprocJobIamBinding registers a new resource with the given unique name, arguments, and options.
func NewDataprocJobIamBinding(ctx *pulumi.Context,
	name string, args *DataprocJobIamBindingArgs, opts ...pulumi.ResourceOption) (*DataprocJobIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataprocJobIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/dataprocJobIamBinding:DataprocJobIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataprocJobIamBinding gets an existing DataprocJobIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataprocJobIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataprocJobIamBindingState, opts ...pulumi.ResourceOption) (*DataprocJobIamBinding, error) {
	var resource DataprocJobIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataprocJobIamBinding:DataprocJobIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataprocJobIamBinding resources.
type dataprocJobIamBindingState struct {
	Condition               *DataprocJobIamBindingCondition `pulumi:"condition"`
	DataprocJobIamBindingId *string                         `pulumi:"dataprocJobIamBindingId"`
	Etag                    *string                         `pulumi:"etag"`
	JobId                   *string                         `pulumi:"jobId"`
	Members                 []string                        `pulumi:"members"`
	Project                 *string                         `pulumi:"project"`
	Region                  *string                         `pulumi:"region"`
	Role                    *string                         `pulumi:"role"`
}

type DataprocJobIamBindingState struct {
	Condition               DataprocJobIamBindingConditionPtrInput
	DataprocJobIamBindingId pulumi.StringPtrInput
	Etag                    pulumi.StringPtrInput
	JobId                   pulumi.StringPtrInput
	Members                 pulumi.StringArrayInput
	Project                 pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	Role                    pulumi.StringPtrInput
}

func (DataprocJobIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocJobIamBindingState)(nil)).Elem()
}

type dataprocJobIamBindingArgs struct {
	Condition               *DataprocJobIamBindingCondition `pulumi:"condition"`
	DataprocJobIamBindingId *string                         `pulumi:"dataprocJobIamBindingId"`
	JobId                   string                          `pulumi:"jobId"`
	Members                 []string                        `pulumi:"members"`
	Project                 *string                         `pulumi:"project"`
	Region                  *string                         `pulumi:"region"`
	Role                    string                          `pulumi:"role"`
}

// The set of arguments for constructing a DataprocJobIamBinding resource.
type DataprocJobIamBindingArgs struct {
	Condition               DataprocJobIamBindingConditionPtrInput
	DataprocJobIamBindingId pulumi.StringPtrInput
	JobId                   pulumi.StringInput
	Members                 pulumi.StringArrayInput
	Project                 pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	Role                    pulumi.StringInput
}

func (DataprocJobIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocJobIamBindingArgs)(nil)).Elem()
}

type DataprocJobIamBindingInput interface {
	pulumi.Input

	ToDataprocJobIamBindingOutput() DataprocJobIamBindingOutput
	ToDataprocJobIamBindingOutputWithContext(ctx context.Context) DataprocJobIamBindingOutput
}

func (*DataprocJobIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocJobIamBinding)(nil)).Elem()
}

func (i *DataprocJobIamBinding) ToDataprocJobIamBindingOutput() DataprocJobIamBindingOutput {
	return i.ToDataprocJobIamBindingOutputWithContext(context.Background())
}

func (i *DataprocJobIamBinding) ToDataprocJobIamBindingOutputWithContext(ctx context.Context) DataprocJobIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocJobIamBindingOutput)
}

type DataprocJobIamBindingOutput struct{ *pulumi.OutputState }

func (DataprocJobIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocJobIamBinding)(nil)).Elem()
}

func (o DataprocJobIamBindingOutput) ToDataprocJobIamBindingOutput() DataprocJobIamBindingOutput {
	return o
}

func (o DataprocJobIamBindingOutput) ToDataprocJobIamBindingOutputWithContext(ctx context.Context) DataprocJobIamBindingOutput {
	return o
}

func (o DataprocJobIamBindingOutput) Condition() DataprocJobIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) DataprocJobIamBindingConditionPtrOutput { return v.Condition }).(DataprocJobIamBindingConditionPtrOutput)
}

func (o DataprocJobIamBindingOutput) DataprocJobIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringOutput { return v.DataprocJobIamBindingId }).(pulumi.StringOutput)
}

func (o DataprocJobIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataprocJobIamBindingOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

func (o DataprocJobIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o DataprocJobIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataprocJobIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DataprocJobIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocJobIamBindingInput)(nil)).Elem(), &DataprocJobIamBinding{})
	pulumi.RegisterOutputType(DataprocJobIamBindingOutput{})
}
