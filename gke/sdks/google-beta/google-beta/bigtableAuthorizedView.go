// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigtableAuthorizedView struct {
	pulumi.CustomResourceState

	BigtableAuthorizedViewId pulumi.StringOutput `pulumi:"bigtableAuthorizedViewId"`
	DeletionProtection       pulumi.StringOutput `pulumi:"deletionProtection"`
	// The name of the Bigtable instance in which the authorized view belongs.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters
	// and numbers.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView BigtableAuthorizedViewSubsetViewPtrOutput `pulumi:"subsetView"`
	// The name of the Bigtable table in which the authorized view belongs.
	TableName pulumi.StringOutput                     `pulumi:"tableName"`
	Timeouts  BigtableAuthorizedViewTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewBigtableAuthorizedView registers a new resource with the given unique name, arguments, and options.
func NewBigtableAuthorizedView(ctx *pulumi.Context,
	name string, args *BigtableAuthorizedViewArgs, opts ...pulumi.ResourceOption) (*BigtableAuthorizedView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigtableAuthorizedView
	err = ctx.RegisterPackageResource("google-beta:index/bigtableAuthorizedView:BigtableAuthorizedView", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigtableAuthorizedView gets an existing BigtableAuthorizedView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigtableAuthorizedView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigtableAuthorizedViewState, opts ...pulumi.ResourceOption) (*BigtableAuthorizedView, error) {
	var resource BigtableAuthorizedView
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigtableAuthorizedView:BigtableAuthorizedView", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigtableAuthorizedView resources.
type bigtableAuthorizedViewState struct {
	BigtableAuthorizedViewId *string `pulumi:"bigtableAuthorizedViewId"`
	DeletionProtection       *string `pulumi:"deletionProtection"`
	// The name of the Bigtable instance in which the authorized view belongs.
	InstanceName *string `pulumi:"instanceName"`
	// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters
	// and numbers.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView *BigtableAuthorizedViewSubsetView `pulumi:"subsetView"`
	// The name of the Bigtable table in which the authorized view belongs.
	TableName *string                         `pulumi:"tableName"`
	Timeouts  *BigtableAuthorizedViewTimeouts `pulumi:"timeouts"`
}

type BigtableAuthorizedViewState struct {
	BigtableAuthorizedViewId pulumi.StringPtrInput
	DeletionProtection       pulumi.StringPtrInput
	// The name of the Bigtable instance in which the authorized view belongs.
	InstanceName pulumi.StringPtrInput
	// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters
	// and numbers.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView BigtableAuthorizedViewSubsetViewPtrInput
	// The name of the Bigtable table in which the authorized view belongs.
	TableName pulumi.StringPtrInput
	Timeouts  BigtableAuthorizedViewTimeoutsPtrInput
}

func (BigtableAuthorizedViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableAuthorizedViewState)(nil)).Elem()
}

type bigtableAuthorizedViewArgs struct {
	BigtableAuthorizedViewId *string `pulumi:"bigtableAuthorizedViewId"`
	DeletionProtection       *string `pulumi:"deletionProtection"`
	// The name of the Bigtable instance in which the authorized view belongs.
	InstanceName string `pulumi:"instanceName"`
	// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters
	// and numbers.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView *BigtableAuthorizedViewSubsetView `pulumi:"subsetView"`
	// The name of the Bigtable table in which the authorized view belongs.
	TableName string                          `pulumi:"tableName"`
	Timeouts  *BigtableAuthorizedViewTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a BigtableAuthorizedView resource.
type BigtableAuthorizedViewArgs struct {
	BigtableAuthorizedViewId pulumi.StringPtrInput
	DeletionProtection       pulumi.StringPtrInput
	// The name of the Bigtable instance in which the authorized view belongs.
	InstanceName pulumi.StringInput
	// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters
	// and numbers.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView BigtableAuthorizedViewSubsetViewPtrInput
	// The name of the Bigtable table in which the authorized view belongs.
	TableName pulumi.StringInput
	Timeouts  BigtableAuthorizedViewTimeoutsPtrInput
}

func (BigtableAuthorizedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableAuthorizedViewArgs)(nil)).Elem()
}

type BigtableAuthorizedViewInput interface {
	pulumi.Input

	ToBigtableAuthorizedViewOutput() BigtableAuthorizedViewOutput
	ToBigtableAuthorizedViewOutputWithContext(ctx context.Context) BigtableAuthorizedViewOutput
}

func (*BigtableAuthorizedView) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableAuthorizedView)(nil)).Elem()
}

func (i *BigtableAuthorizedView) ToBigtableAuthorizedViewOutput() BigtableAuthorizedViewOutput {
	return i.ToBigtableAuthorizedViewOutputWithContext(context.Background())
}

func (i *BigtableAuthorizedView) ToBigtableAuthorizedViewOutputWithContext(ctx context.Context) BigtableAuthorizedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableAuthorizedViewOutput)
}

type BigtableAuthorizedViewOutput struct{ *pulumi.OutputState }

func (BigtableAuthorizedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableAuthorizedView)(nil)).Elem()
}

func (o BigtableAuthorizedViewOutput) ToBigtableAuthorizedViewOutput() BigtableAuthorizedViewOutput {
	return o
}

func (o BigtableAuthorizedViewOutput) ToBigtableAuthorizedViewOutputWithContext(ctx context.Context) BigtableAuthorizedViewOutput {
	return o
}

func (o BigtableAuthorizedViewOutput) BigtableAuthorizedViewId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) pulumi.StringOutput { return v.BigtableAuthorizedViewId }).(pulumi.StringOutput)
}

func (o BigtableAuthorizedViewOutput) DeletionProtection() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) pulumi.StringOutput { return v.DeletionProtection }).(pulumi.StringOutput)
}

// The name of the Bigtable instance in which the authorized view belongs.
func (o BigtableAuthorizedViewOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters
// and numbers.
func (o BigtableAuthorizedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (o BigtableAuthorizedViewOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An AuthorizedView permitting access to an explicit subset of a Table.
func (o BigtableAuthorizedViewOutput) SubsetView() BigtableAuthorizedViewSubsetViewPtrOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) BigtableAuthorizedViewSubsetViewPtrOutput { return v.SubsetView }).(BigtableAuthorizedViewSubsetViewPtrOutput)
}

// The name of the Bigtable table in which the authorized view belongs.
func (o BigtableAuthorizedViewOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

func (o BigtableAuthorizedViewOutput) Timeouts() BigtableAuthorizedViewTimeoutsPtrOutput {
	return o.ApplyT(func(v *BigtableAuthorizedView) BigtableAuthorizedViewTimeoutsPtrOutput { return v.Timeouts }).(BigtableAuthorizedViewTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableAuthorizedViewInput)(nil)).Elem(), &BigtableAuthorizedView{})
	pulumi.RegisterOutputType(BigtableAuthorizedViewOutput{})
}
