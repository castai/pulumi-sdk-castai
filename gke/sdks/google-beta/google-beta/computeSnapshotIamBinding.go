// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeSnapshotIamBinding struct {
	pulumi.CustomResourceState

	ComputeSnapshotIamBindingId pulumi.StringOutput                         `pulumi:"computeSnapshotIamBindingId"`
	Condition                   ComputeSnapshotIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                        pulumi.StringOutput                         `pulumi:"etag"`
	Members                     pulumi.StringArrayOutput                    `pulumi:"members"`
	Name                        pulumi.StringOutput                         `pulumi:"name"`
	Project                     pulumi.StringOutput                         `pulumi:"project"`
	Role                        pulumi.StringOutput                         `pulumi:"role"`
}

// NewComputeSnapshotIamBinding registers a new resource with the given unique name, arguments, and options.
func NewComputeSnapshotIamBinding(ctx *pulumi.Context,
	name string, args *ComputeSnapshotIamBindingArgs, opts ...pulumi.ResourceOption) (*ComputeSnapshotIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeSnapshotIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/computeSnapshotIamBinding:ComputeSnapshotIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeSnapshotIamBinding gets an existing ComputeSnapshotIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeSnapshotIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeSnapshotIamBindingState, opts ...pulumi.ResourceOption) (*ComputeSnapshotIamBinding, error) {
	var resource ComputeSnapshotIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeSnapshotIamBinding:ComputeSnapshotIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeSnapshotIamBinding resources.
type computeSnapshotIamBindingState struct {
	ComputeSnapshotIamBindingId *string                             `pulumi:"computeSnapshotIamBindingId"`
	Condition                   *ComputeSnapshotIamBindingCondition `pulumi:"condition"`
	Etag                        *string                             `pulumi:"etag"`
	Members                     []string                            `pulumi:"members"`
	Name                        *string                             `pulumi:"name"`
	Project                     *string                             `pulumi:"project"`
	Role                        *string                             `pulumi:"role"`
}

type ComputeSnapshotIamBindingState struct {
	ComputeSnapshotIamBindingId pulumi.StringPtrInput
	Condition                   ComputeSnapshotIamBindingConditionPtrInput
	Etag                        pulumi.StringPtrInput
	Members                     pulumi.StringArrayInput
	Name                        pulumi.StringPtrInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringPtrInput
}

func (ComputeSnapshotIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotIamBindingState)(nil)).Elem()
}

type computeSnapshotIamBindingArgs struct {
	ComputeSnapshotIamBindingId *string                             `pulumi:"computeSnapshotIamBindingId"`
	Condition                   *ComputeSnapshotIamBindingCondition `pulumi:"condition"`
	Members                     []string                            `pulumi:"members"`
	Name                        *string                             `pulumi:"name"`
	Project                     *string                             `pulumi:"project"`
	Role                        string                              `pulumi:"role"`
}

// The set of arguments for constructing a ComputeSnapshotIamBinding resource.
type ComputeSnapshotIamBindingArgs struct {
	ComputeSnapshotIamBindingId pulumi.StringPtrInput
	Condition                   ComputeSnapshotIamBindingConditionPtrInput
	Members                     pulumi.StringArrayInput
	Name                        pulumi.StringPtrInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringInput
}

func (ComputeSnapshotIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotIamBindingArgs)(nil)).Elem()
}

type ComputeSnapshotIamBindingInput interface {
	pulumi.Input

	ToComputeSnapshotIamBindingOutput() ComputeSnapshotIamBindingOutput
	ToComputeSnapshotIamBindingOutputWithContext(ctx context.Context) ComputeSnapshotIamBindingOutput
}

func (*ComputeSnapshotIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshotIamBinding)(nil)).Elem()
}

func (i *ComputeSnapshotIamBinding) ToComputeSnapshotIamBindingOutput() ComputeSnapshotIamBindingOutput {
	return i.ToComputeSnapshotIamBindingOutputWithContext(context.Background())
}

func (i *ComputeSnapshotIamBinding) ToComputeSnapshotIamBindingOutputWithContext(ctx context.Context) ComputeSnapshotIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotIamBindingOutput)
}

type ComputeSnapshotIamBindingOutput struct{ *pulumi.OutputState }

func (ComputeSnapshotIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshotIamBinding)(nil)).Elem()
}

func (o ComputeSnapshotIamBindingOutput) ToComputeSnapshotIamBindingOutput() ComputeSnapshotIamBindingOutput {
	return o
}

func (o ComputeSnapshotIamBindingOutput) ToComputeSnapshotIamBindingOutputWithContext(ctx context.Context) ComputeSnapshotIamBindingOutput {
	return o
}

func (o ComputeSnapshotIamBindingOutput) ComputeSnapshotIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) pulumi.StringOutput { return v.ComputeSnapshotIamBindingId }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamBindingOutput) Condition() ComputeSnapshotIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) ComputeSnapshotIamBindingConditionPtrOutput { return v.Condition }).(ComputeSnapshotIamBindingConditionPtrOutput)
}

func (o ComputeSnapshotIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ComputeSnapshotIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSnapshotIamBindingInput)(nil)).Elem(), &ComputeSnapshotIamBinding{})
	pulumi.RegisterOutputType(ComputeSnapshotIamBindingOutput{})
}
