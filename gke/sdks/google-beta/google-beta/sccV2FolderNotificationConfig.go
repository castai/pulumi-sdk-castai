// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccV2FolderNotificationConfig struct {
	pulumi.CustomResourceState

	// This must be unique within the organization.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of this notification config, in the format
	// 'folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                     pulumi.StringOutput `pulumi:"pubsubTopic"`
	SccV2FolderNotificationConfigId pulumi.StringOutput `pulumi:"sccV2FolderNotificationConfigId"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig SccV2FolderNotificationConfigStreamingConfigOutput `pulumi:"streamingConfig"`
	Timeouts        SccV2FolderNotificationConfigTimeoutsPtrOutput     `pulumi:"timeouts"`
}

// NewSccV2FolderNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewSccV2FolderNotificationConfig(ctx *pulumi.Context,
	name string, args *SccV2FolderNotificationConfigArgs, opts ...pulumi.ResourceOption) (*SccV2FolderNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.PubsubTopic == nil {
		return nil, errors.New("invalid value for required argument 'PubsubTopic'")
	}
	if args.StreamingConfig == nil {
		return nil, errors.New("invalid value for required argument 'StreamingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccV2FolderNotificationConfig
	err = ctx.RegisterPackageResource("google-beta:index/sccV2FolderNotificationConfig:SccV2FolderNotificationConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccV2FolderNotificationConfig gets an existing SccV2FolderNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccV2FolderNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccV2FolderNotificationConfigState, opts ...pulumi.ResourceOption) (*SccV2FolderNotificationConfig, error) {
	var resource SccV2FolderNotificationConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sccV2FolderNotificationConfig:SccV2FolderNotificationConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccV2FolderNotificationConfig resources.
type sccV2FolderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId *string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder *string `pulumi:"folder"`
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location *string `pulumi:"location"`
	// The resource name of this notification config, in the format
	// 'folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}'.
	Name *string `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                     *string `pulumi:"pubsubTopic"`
	SccV2FolderNotificationConfigId *string `pulumi:"sccV2FolderNotificationConfigId"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig *SccV2FolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
	Timeouts        *SccV2FolderNotificationConfigTimeouts        `pulumi:"timeouts"`
}

type SccV2FolderNotificationConfigState struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringPtrInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringPtrInput
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location pulumi.StringPtrInput
	// The resource name of this notification config, in the format
	// 'folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}'.
	Name pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                     pulumi.StringPtrInput
	SccV2FolderNotificationConfigId pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig SccV2FolderNotificationConfigStreamingConfigPtrInput
	Timeouts        SccV2FolderNotificationConfigTimeoutsPtrInput
}

func (SccV2FolderNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccV2FolderNotificationConfigState)(nil)).Elem()
}

type sccV2FolderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId string `pulumi:"configId"`
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// Numerical ID of the parent folder.
	Folder string `pulumi:"folder"`
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location *string `pulumi:"location"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                     string  `pulumi:"pubsubTopic"`
	SccV2FolderNotificationConfigId *string `pulumi:"sccV2FolderNotificationConfigId"`
	// The config for triggering streaming-based notifications.
	StreamingConfig SccV2FolderNotificationConfigStreamingConfig `pulumi:"streamingConfig"`
	Timeouts        *SccV2FolderNotificationConfigTimeouts       `pulumi:"timeouts"`
}

// The set of arguments for constructing a SccV2FolderNotificationConfig resource.
type SccV2FolderNotificationConfigArgs struct {
	// This must be unique within the organization.
	ConfigId pulumi.StringInput
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// Numerical ID of the parent folder.
	Folder pulumi.StringInput
	// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
	Location pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic                     pulumi.StringInput
	SccV2FolderNotificationConfigId pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig SccV2FolderNotificationConfigStreamingConfigInput
	Timeouts        SccV2FolderNotificationConfigTimeoutsPtrInput
}

func (SccV2FolderNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccV2FolderNotificationConfigArgs)(nil)).Elem()
}

type SccV2FolderNotificationConfigInput interface {
	pulumi.Input

	ToSccV2FolderNotificationConfigOutput() SccV2FolderNotificationConfigOutput
	ToSccV2FolderNotificationConfigOutputWithContext(ctx context.Context) SccV2FolderNotificationConfigOutput
}

func (*SccV2FolderNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SccV2FolderNotificationConfig)(nil)).Elem()
}

func (i *SccV2FolderNotificationConfig) ToSccV2FolderNotificationConfigOutput() SccV2FolderNotificationConfigOutput {
	return i.ToSccV2FolderNotificationConfigOutputWithContext(context.Background())
}

func (i *SccV2FolderNotificationConfig) ToSccV2FolderNotificationConfigOutputWithContext(ctx context.Context) SccV2FolderNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccV2FolderNotificationConfigOutput)
}

type SccV2FolderNotificationConfigOutput struct{ *pulumi.OutputState }

func (SccV2FolderNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccV2FolderNotificationConfig)(nil)).Elem()
}

func (o SccV2FolderNotificationConfigOutput) ToSccV2FolderNotificationConfigOutput() SccV2FolderNotificationConfigOutput {
	return o
}

func (o SccV2FolderNotificationConfigOutput) ToSccV2FolderNotificationConfigOutputWithContext(ctx context.Context) SccV2FolderNotificationConfigOutput {
	return o
}

// This must be unique within the organization.
func (o SccV2FolderNotificationConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The description of the notification config (max of 1024 characters).
func (o SccV2FolderNotificationConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Numerical ID of the parent folder.
func (o SccV2FolderNotificationConfigOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// Location ID of the parent organization. If not provided, 'global' will be used as the default location.
func (o SccV2FolderNotificationConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of this notification config, in the format
// 'folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}'.
func (o SccV2FolderNotificationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
func (o SccV2FolderNotificationConfigOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

func (o SccV2FolderNotificationConfigOutput) SccV2FolderNotificationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringOutput { return v.SccV2FolderNotificationConfigId }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
func (o SccV2FolderNotificationConfigOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
func (o SccV2FolderNotificationConfigOutput) StreamingConfig() SccV2FolderNotificationConfigStreamingConfigOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) SccV2FolderNotificationConfigStreamingConfigOutput {
		return v.StreamingConfig
	}).(SccV2FolderNotificationConfigStreamingConfigOutput)
}

func (o SccV2FolderNotificationConfigOutput) Timeouts() SccV2FolderNotificationConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccV2FolderNotificationConfig) SccV2FolderNotificationConfigTimeoutsPtrOutput {
		return v.Timeouts
	}).(SccV2FolderNotificationConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccV2FolderNotificationConfigInput)(nil)).Elem(), &SccV2FolderNotificationConfig{})
	pulumi.RegisterOutputType(SccV2FolderNotificationConfigOutput{})
}
