// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DialogflowFulfillment struct {
	pulumi.CustomResourceState

	DialogflowFulfillmentId pulumi.StringOutput `pulumi:"dialogflowFulfillmentId"`
	// The human-readable name of the fulfillment, unique within the agent.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Whether fulfillment is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The field defines whether the fulfillment is enabled for certain features.
	Features DialogflowFulfillmentFeatureArrayOutput `pulumi:"features"`
	// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic
	// authentication with username and password. - Authentication with additional authentication headers.
	GenericWebService DialogflowFulfillmentGenericWebServicePtrOutput `pulumi:"genericWebService"`
	// The unique identifier of the fulfillment. Format: projects/<Project ID>/agent/fulfillment - projects/<Project
	// ID>/locations/<Location ID>/agent/fulfillment
	Name     pulumi.StringOutput                    `pulumi:"name"`
	Project  pulumi.StringOutput                    `pulumi:"project"`
	Timeouts DialogflowFulfillmentTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDialogflowFulfillment registers a new resource with the given unique name, arguments, and options.
func NewDialogflowFulfillment(ctx *pulumi.Context,
	name string, args *DialogflowFulfillmentArgs, opts ...pulumi.ResourceOption) (*DialogflowFulfillment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DialogflowFulfillment
	err = ctx.RegisterPackageResource("google-beta:index/dialogflowFulfillment:DialogflowFulfillment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDialogflowFulfillment gets an existing DialogflowFulfillment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDialogflowFulfillment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DialogflowFulfillmentState, opts ...pulumi.ResourceOption) (*DialogflowFulfillment, error) {
	var resource DialogflowFulfillment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dialogflowFulfillment:DialogflowFulfillment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DialogflowFulfillment resources.
type dialogflowFulfillmentState struct {
	DialogflowFulfillmentId *string `pulumi:"dialogflowFulfillmentId"`
	// The human-readable name of the fulfillment, unique within the agent.
	DisplayName *string `pulumi:"displayName"`
	// Whether fulfillment is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The field defines whether the fulfillment is enabled for certain features.
	Features []DialogflowFulfillmentFeature `pulumi:"features"`
	// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic
	// authentication with username and password. - Authentication with additional authentication headers.
	GenericWebService *DialogflowFulfillmentGenericWebService `pulumi:"genericWebService"`
	// The unique identifier of the fulfillment. Format: projects/<Project ID>/agent/fulfillment - projects/<Project
	// ID>/locations/<Location ID>/agent/fulfillment
	Name     *string                        `pulumi:"name"`
	Project  *string                        `pulumi:"project"`
	Timeouts *DialogflowFulfillmentTimeouts `pulumi:"timeouts"`
}

type DialogflowFulfillmentState struct {
	DialogflowFulfillmentId pulumi.StringPtrInput
	// The human-readable name of the fulfillment, unique within the agent.
	DisplayName pulumi.StringPtrInput
	// Whether fulfillment is enabled.
	Enabled pulumi.BoolPtrInput
	// The field defines whether the fulfillment is enabled for certain features.
	Features DialogflowFulfillmentFeatureArrayInput
	// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic
	// authentication with username and password. - Authentication with additional authentication headers.
	GenericWebService DialogflowFulfillmentGenericWebServicePtrInput
	// The unique identifier of the fulfillment. Format: projects/<Project ID>/agent/fulfillment - projects/<Project
	// ID>/locations/<Location ID>/agent/fulfillment
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts DialogflowFulfillmentTimeoutsPtrInput
}

func (DialogflowFulfillmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*dialogflowFulfillmentState)(nil)).Elem()
}

type dialogflowFulfillmentArgs struct {
	DialogflowFulfillmentId *string `pulumi:"dialogflowFulfillmentId"`
	// The human-readable name of the fulfillment, unique within the agent.
	DisplayName string `pulumi:"displayName"`
	// Whether fulfillment is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The field defines whether the fulfillment is enabled for certain features.
	Features []DialogflowFulfillmentFeature `pulumi:"features"`
	// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic
	// authentication with username and password. - Authentication with additional authentication headers.
	GenericWebService *DialogflowFulfillmentGenericWebService `pulumi:"genericWebService"`
	Project           *string                                 `pulumi:"project"`
	Timeouts          *DialogflowFulfillmentTimeouts          `pulumi:"timeouts"`
}

// The set of arguments for constructing a DialogflowFulfillment resource.
type DialogflowFulfillmentArgs struct {
	DialogflowFulfillmentId pulumi.StringPtrInput
	// The human-readable name of the fulfillment, unique within the agent.
	DisplayName pulumi.StringInput
	// Whether fulfillment is enabled.
	Enabled pulumi.BoolPtrInput
	// The field defines whether the fulfillment is enabled for certain features.
	Features DialogflowFulfillmentFeatureArrayInput
	// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic
	// authentication with username and password. - Authentication with additional authentication headers.
	GenericWebService DialogflowFulfillmentGenericWebServicePtrInput
	Project           pulumi.StringPtrInput
	Timeouts          DialogflowFulfillmentTimeoutsPtrInput
}

func (DialogflowFulfillmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dialogflowFulfillmentArgs)(nil)).Elem()
}

type DialogflowFulfillmentInput interface {
	pulumi.Input

	ToDialogflowFulfillmentOutput() DialogflowFulfillmentOutput
	ToDialogflowFulfillmentOutputWithContext(ctx context.Context) DialogflowFulfillmentOutput
}

func (*DialogflowFulfillment) ElementType() reflect.Type {
	return reflect.TypeOf((**DialogflowFulfillment)(nil)).Elem()
}

func (i *DialogflowFulfillment) ToDialogflowFulfillmentOutput() DialogflowFulfillmentOutput {
	return i.ToDialogflowFulfillmentOutputWithContext(context.Background())
}

func (i *DialogflowFulfillment) ToDialogflowFulfillmentOutputWithContext(ctx context.Context) DialogflowFulfillmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DialogflowFulfillmentOutput)
}

type DialogflowFulfillmentOutput struct{ *pulumi.OutputState }

func (DialogflowFulfillmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DialogflowFulfillment)(nil)).Elem()
}

func (o DialogflowFulfillmentOutput) ToDialogflowFulfillmentOutput() DialogflowFulfillmentOutput {
	return o
}

func (o DialogflowFulfillmentOutput) ToDialogflowFulfillmentOutputWithContext(ctx context.Context) DialogflowFulfillmentOutput {
	return o
}

func (o DialogflowFulfillmentOutput) DialogflowFulfillmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) pulumi.StringOutput { return v.DialogflowFulfillmentId }).(pulumi.StringOutput)
}

// The human-readable name of the fulfillment, unique within the agent.
func (o DialogflowFulfillmentOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether fulfillment is enabled.
func (o DialogflowFulfillmentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The field defines whether the fulfillment is enabled for certain features.
func (o DialogflowFulfillmentOutput) Features() DialogflowFulfillmentFeatureArrayOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) DialogflowFulfillmentFeatureArrayOutput { return v.Features }).(DialogflowFulfillmentFeatureArrayOutput)
}

// Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic
// authentication with username and password. - Authentication with additional authentication headers.
func (o DialogflowFulfillmentOutput) GenericWebService() DialogflowFulfillmentGenericWebServicePtrOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) DialogflowFulfillmentGenericWebServicePtrOutput {
		return v.GenericWebService
	}).(DialogflowFulfillmentGenericWebServicePtrOutput)
}

// The unique identifier of the fulfillment. Format: projects/<Project ID>/agent/fulfillment - projects/<Project
// ID>/locations/<Location ID>/agent/fulfillment
func (o DialogflowFulfillmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DialogflowFulfillmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DialogflowFulfillmentOutput) Timeouts() DialogflowFulfillmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *DialogflowFulfillment) DialogflowFulfillmentTimeoutsPtrOutput { return v.Timeouts }).(DialogflowFulfillmentTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DialogflowFulfillmentInput)(nil)).Elem(), &DialogflowFulfillment{})
	pulumi.RegisterOutputType(DialogflowFulfillmentOutput{})
}
