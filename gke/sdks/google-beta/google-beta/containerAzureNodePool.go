// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerAzureNodePool struct {
	pulumi.CustomResourceState

	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// `effective_annotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Autoscaler configuration for this node pool.
	Autoscaling ContainerAzureNodePoolAutoscalingOutput `pulumi:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone pulumi.StringOutput `pulumi:"azureAvailabilityZone"`
	// The azureCluster for the resource
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// The node configuration of the node pool.
	Config                   ContainerAzureNodePoolConfigOutput `pulumi:"config"`
	ContainerAzureNodePoolId pulumi.StringOutput                `pulumi:"containerAzureNodePoolId"`
	// Output only. The time at which this node pool was created.
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
	// and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// The Management configuration for this node pool.
	Management ContainerAzureNodePoolManagementPtrOutput `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint ContainerAzureNodePoolMaxPodsConstraintOutput `pulumi:"maxPodsConstraint"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. If set, there are currently pending changes to the node pool.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
	// STOPPING, ERROR, DEGRADED
	State pulumi.StringOutput `pulumi:"state"`
	// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
	// configuration.
	SubnetId pulumi.StringOutput                     `pulumi:"subnetId"`
	Timeouts ContainerAzureNodePoolTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. A globally unique identifier for the node pool.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The time at which this node pool was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewContainerAzureNodePool registers a new resource with the given unique name, arguments, and options.
func NewContainerAzureNodePool(ctx *pulumi.Context,
	name string, args *ContainerAzureNodePoolArgs, opts ...pulumi.ResourceOption) (*ContainerAzureNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Autoscaling == nil {
		return nil, errors.New("invalid value for required argument 'Autoscaling'")
	}
	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MaxPodsConstraint == nil {
		return nil, errors.New("invalid value for required argument 'MaxPodsConstraint'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ContainerAzureNodePool
	err = ctx.RegisterPackageResource("google-beta:index/containerAzureNodePool:ContainerAzureNodePool", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerAzureNodePool gets an existing ContainerAzureNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerAzureNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerAzureNodePoolState, opts ...pulumi.ResourceOption) (*ContainerAzureNodePool, error) {
	var resource ContainerAzureNodePool
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/containerAzureNodePool:ContainerAzureNodePool", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerAzureNodePool resources.
type containerAzureNodePoolState struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// `effective_annotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Autoscaler configuration for this node pool.
	Autoscaling *ContainerAzureNodePoolAutoscaling `pulumi:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone *string `pulumi:"azureAvailabilityZone"`
	// The azureCluster for the resource
	Cluster *string `pulumi:"cluster"`
	// The node configuration of the node pool.
	Config                   *ContainerAzureNodePoolConfig `pulumi:"config"`
	ContainerAzureNodePoolId *string                       `pulumi:"containerAzureNodePoolId"`
	// Output only. The time at which this node pool was created.
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
	// and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// The Management configuration for this node pool.
	Management *ContainerAzureNodePoolManagement `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *ContainerAzureNodePoolMaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. If set, there are currently pending changes to the node pool.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
	// STOPPING, ERROR, DEGRADED
	State *string `pulumi:"state"`
	// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
	// configuration.
	SubnetId *string                         `pulumi:"subnetId"`
	Timeouts *ContainerAzureNodePoolTimeouts `pulumi:"timeouts"`
	// Output only. A globally unique identifier for the node pool.
	Uid *string `pulumi:"uid"`
	// Output only. The time at which this node pool was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version *string `pulumi:"version"`
}

type ContainerAzureNodePoolState struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// `effective_annotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Autoscaler configuration for this node pool.
	Autoscaling ContainerAzureNodePoolAutoscalingPtrInput
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone pulumi.StringPtrInput
	// The azureCluster for the resource
	Cluster pulumi.StringPtrInput
	// The node configuration of the node pool.
	Config                   ContainerAzureNodePoolConfigPtrInput
	ContainerAzureNodePoolId pulumi.StringPtrInput
	// Output only. The time at which this node pool was created.
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
	// and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// The Management configuration for this node pool.
	Management ContainerAzureNodePoolManagementPtrInput
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint ContainerAzureNodePoolMaxPodsConstraintPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. If set, there are currently pending changes to the node pool.
	Reconciling pulumi.BoolPtrInput
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
	// STOPPING, ERROR, DEGRADED
	State pulumi.StringPtrInput
	// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
	// configuration.
	SubnetId pulumi.StringPtrInput
	Timeouts ContainerAzureNodePoolTimeoutsPtrInput
	// Output only. A globally unique identifier for the node pool.
	Uid pulumi.StringPtrInput
	// Output only. The time at which this node pool was last updated.
	UpdateTime pulumi.StringPtrInput
	// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version pulumi.StringPtrInput
}

func (ContainerAzureNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerAzureNodePoolState)(nil)).Elem()
}

type containerAzureNodePoolArgs struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// `effective_annotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Autoscaler configuration for this node pool.
	Autoscaling ContainerAzureNodePoolAutoscaling `pulumi:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone *string `pulumi:"azureAvailabilityZone"`
	// The azureCluster for the resource
	Cluster string `pulumi:"cluster"`
	// The node configuration of the node pool.
	Config                   ContainerAzureNodePoolConfig `pulumi:"config"`
	ContainerAzureNodePoolId *string                      `pulumi:"containerAzureNodePoolId"`
	// The location for the resource
	Location string `pulumi:"location"`
	// The Management configuration for this node pool.
	Management *ContainerAzureNodePoolManagement `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint ContainerAzureNodePoolMaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
	// configuration.
	SubnetId string                          `pulumi:"subnetId"`
	Timeouts *ContainerAzureNodePoolTimeouts `pulumi:"timeouts"`
	// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a ContainerAzureNodePool resource.
type ContainerAzureNodePoolArgs struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// `effective_annotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Autoscaler configuration for this node pool.
	Autoscaling ContainerAzureNodePoolAutoscalingInput
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone pulumi.StringPtrInput
	// The azureCluster for the resource
	Cluster pulumi.StringInput
	// The node configuration of the node pool.
	Config                   ContainerAzureNodePoolConfigInput
	ContainerAzureNodePoolId pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// The Management configuration for this node pool.
	Management ContainerAzureNodePoolManagementPtrInput
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint ContainerAzureNodePoolMaxPodsConstraintInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
	// configuration.
	SubnetId pulumi.StringInput
	Timeouts ContainerAzureNodePoolTimeoutsPtrInput
	// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version pulumi.StringInput
}

func (ContainerAzureNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerAzureNodePoolArgs)(nil)).Elem()
}

type ContainerAzureNodePoolInput interface {
	pulumi.Input

	ToContainerAzureNodePoolOutput() ContainerAzureNodePoolOutput
	ToContainerAzureNodePoolOutputWithContext(ctx context.Context) ContainerAzureNodePoolOutput
}

func (*ContainerAzureNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAzureNodePool)(nil)).Elem()
}

func (i *ContainerAzureNodePool) ToContainerAzureNodePoolOutput() ContainerAzureNodePoolOutput {
	return i.ToContainerAzureNodePoolOutputWithContext(context.Background())
}

func (i *ContainerAzureNodePool) ToContainerAzureNodePoolOutputWithContext(ctx context.Context) ContainerAzureNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAzureNodePoolOutput)
}

type ContainerAzureNodePoolOutput struct{ *pulumi.OutputState }

func (ContainerAzureNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAzureNodePool)(nil)).Elem()
}

func (o ContainerAzureNodePoolOutput) ToContainerAzureNodePoolOutput() ContainerAzureNodePoolOutput {
	return o
}

func (o ContainerAzureNodePoolOutput) ToContainerAzureNodePoolOutputWithContext(ctx context.Context) ContainerAzureNodePoolOutput {
	return o
}

// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
// of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
// `effective_annotations` for all of the annotations present on the resource.
func (o ContainerAzureNodePoolOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Autoscaler configuration for this node pool.
func (o ContainerAzureNodePoolOutput) Autoscaling() ContainerAzureNodePoolAutoscalingOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) ContainerAzureNodePoolAutoscalingOutput { return v.Autoscaling }).(ContainerAzureNodePoolAutoscalingOutput)
}

// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
func (o ContainerAzureNodePoolOutput) AzureAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.AzureAvailabilityZone }).(pulumi.StringOutput)
}

// The azureCluster for the resource
func (o ContainerAzureNodePoolOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// The node configuration of the node pool.
func (o ContainerAzureNodePoolOutput) Config() ContainerAzureNodePoolConfigOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) ContainerAzureNodePoolConfigOutput { return v.Config }).(ContainerAzureNodePoolConfigOutput)
}

func (o ContainerAzureNodePoolOutput) ContainerAzureNodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.ContainerAzureNodePoolId }).(pulumi.StringOutput)
}

// Output only. The time at which this node pool was created.
func (o ContainerAzureNodePoolOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o ContainerAzureNodePoolOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
// and delete requests to ensure the client has an up-to-date value before proceeding.
func (o ContainerAzureNodePoolOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location for the resource
func (o ContainerAzureNodePoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The Management configuration for this node pool.
func (o ContainerAzureNodePoolOutput) Management() ContainerAzureNodePoolManagementPtrOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) ContainerAzureNodePoolManagementPtrOutput { return v.Management }).(ContainerAzureNodePoolManagementPtrOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o ContainerAzureNodePoolOutput) MaxPodsConstraint() ContainerAzureNodePoolMaxPodsConstraintOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) ContainerAzureNodePoolMaxPodsConstraintOutput {
		return v.MaxPodsConstraint
	}).(ContainerAzureNodePoolMaxPodsConstraintOutput)
}

// The name of this resource.
func (o ContainerAzureNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o ContainerAzureNodePoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. If set, there are currently pending changes to the node pool.
func (o ContainerAzureNodePoolOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
// STOPPING, ERROR, DEGRADED
func (o ContainerAzureNodePoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
// configuration.
func (o ContainerAzureNodePoolOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o ContainerAzureNodePoolOutput) Timeouts() ContainerAzureNodePoolTimeoutsPtrOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) ContainerAzureNodePoolTimeoutsPtrOutput { return v.Timeouts }).(ContainerAzureNodePoolTimeoutsPtrOutput)
}

// Output only. A globally unique identifier for the node pool.
func (o ContainerAzureNodePoolOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The time at which this node pool was last updated.
func (o ContainerAzureNodePoolOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
func (o ContainerAzureNodePoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAzureNodePool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerAzureNodePoolInput)(nil)).Elem(), &ContainerAzureNodePool{})
	pulumi.RegisterOutputType(ContainerAzureNodePoolOutput{})
}
