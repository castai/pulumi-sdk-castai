// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectUsageExportBucket struct {
	pulumi.CustomResourceState

	// The bucket to store reports in.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// A prefix for the reports, for instance, the project name.
	Prefix pulumi.StringPtrOutput `pulumi:"prefix"`
	// The project to set the export bucket on. If it is not provided, the provider project is used.
	Project                    pulumi.StringOutput                       `pulumi:"project"`
	ProjectUsageExportBucketId pulumi.StringOutput                       `pulumi:"projectUsageExportBucketId"`
	Timeouts                   ProjectUsageExportBucketTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewProjectUsageExportBucket registers a new resource with the given unique name, arguments, and options.
func NewProjectUsageExportBucket(ctx *pulumi.Context,
	name string, args *ProjectUsageExportBucketArgs, opts ...pulumi.ResourceOption) (*ProjectUsageExportBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectUsageExportBucket
	err = ctx.RegisterPackageResource("google-beta:index/projectUsageExportBucket:ProjectUsageExportBucket", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectUsageExportBucket gets an existing ProjectUsageExportBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUsageExportBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectUsageExportBucketState, opts ...pulumi.ResourceOption) (*ProjectUsageExportBucket, error) {
	var resource ProjectUsageExportBucket
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/projectUsageExportBucket:ProjectUsageExportBucket", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectUsageExportBucket resources.
type projectUsageExportBucketState struct {
	// The bucket to store reports in.
	BucketName *string `pulumi:"bucketName"`
	// A prefix for the reports, for instance, the project name.
	Prefix *string `pulumi:"prefix"`
	// The project to set the export bucket on. If it is not provided, the provider project is used.
	Project                    *string                           `pulumi:"project"`
	ProjectUsageExportBucketId *string                           `pulumi:"projectUsageExportBucketId"`
	Timeouts                   *ProjectUsageExportBucketTimeouts `pulumi:"timeouts"`
}

type ProjectUsageExportBucketState struct {
	// The bucket to store reports in.
	BucketName pulumi.StringPtrInput
	// A prefix for the reports, for instance, the project name.
	Prefix pulumi.StringPtrInput
	// The project to set the export bucket on. If it is not provided, the provider project is used.
	Project                    pulumi.StringPtrInput
	ProjectUsageExportBucketId pulumi.StringPtrInput
	Timeouts                   ProjectUsageExportBucketTimeoutsPtrInput
}

func (ProjectUsageExportBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUsageExportBucketState)(nil)).Elem()
}

type projectUsageExportBucketArgs struct {
	// The bucket to store reports in.
	BucketName string `pulumi:"bucketName"`
	// A prefix for the reports, for instance, the project name.
	Prefix *string `pulumi:"prefix"`
	// The project to set the export bucket on. If it is not provided, the provider project is used.
	Project                    *string                           `pulumi:"project"`
	ProjectUsageExportBucketId *string                           `pulumi:"projectUsageExportBucketId"`
	Timeouts                   *ProjectUsageExportBucketTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ProjectUsageExportBucket resource.
type ProjectUsageExportBucketArgs struct {
	// The bucket to store reports in.
	BucketName pulumi.StringInput
	// A prefix for the reports, for instance, the project name.
	Prefix pulumi.StringPtrInput
	// The project to set the export bucket on. If it is not provided, the provider project is used.
	Project                    pulumi.StringPtrInput
	ProjectUsageExportBucketId pulumi.StringPtrInput
	Timeouts                   ProjectUsageExportBucketTimeoutsPtrInput
}

func (ProjectUsageExportBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUsageExportBucketArgs)(nil)).Elem()
}

type ProjectUsageExportBucketInput interface {
	pulumi.Input

	ToProjectUsageExportBucketOutput() ProjectUsageExportBucketOutput
	ToProjectUsageExportBucketOutputWithContext(ctx context.Context) ProjectUsageExportBucketOutput
}

func (*ProjectUsageExportBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUsageExportBucket)(nil)).Elem()
}

func (i *ProjectUsageExportBucket) ToProjectUsageExportBucketOutput() ProjectUsageExportBucketOutput {
	return i.ToProjectUsageExportBucketOutputWithContext(context.Background())
}

func (i *ProjectUsageExportBucket) ToProjectUsageExportBucketOutputWithContext(ctx context.Context) ProjectUsageExportBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUsageExportBucketOutput)
}

type ProjectUsageExportBucketOutput struct{ *pulumi.OutputState }

func (ProjectUsageExportBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUsageExportBucket)(nil)).Elem()
}

func (o ProjectUsageExportBucketOutput) ToProjectUsageExportBucketOutput() ProjectUsageExportBucketOutput {
	return o
}

func (o ProjectUsageExportBucketOutput) ToProjectUsageExportBucketOutputWithContext(ctx context.Context) ProjectUsageExportBucketOutput {
	return o
}

// The bucket to store reports in.
func (o ProjectUsageExportBucketOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUsageExportBucket) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// A prefix for the reports, for instance, the project name.
func (o ProjectUsageExportBucketOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectUsageExportBucket) pulumi.StringPtrOutput { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The project to set the export bucket on. If it is not provided, the provider project is used.
func (o ProjectUsageExportBucketOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUsageExportBucket) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectUsageExportBucketOutput) ProjectUsageExportBucketId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUsageExportBucket) pulumi.StringOutput { return v.ProjectUsageExportBucketId }).(pulumi.StringOutput)
}

func (o ProjectUsageExportBucketOutput) Timeouts() ProjectUsageExportBucketTimeoutsPtrOutput {
	return o.ApplyT(func(v *ProjectUsageExportBucket) ProjectUsageExportBucketTimeoutsPtrOutput { return v.Timeouts }).(ProjectUsageExportBucketTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUsageExportBucketInput)(nil)).Elem(), &ProjectUsageExportBucket{})
	pulumi.RegisterOutputType(ProjectUsageExportBucketOutput{})
}
