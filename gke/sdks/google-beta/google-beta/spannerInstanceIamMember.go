// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpannerInstanceIamMember struct {
	pulumi.CustomResourceState

	Condition                  SpannerInstanceIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                       pulumi.StringOutput                        `pulumi:"etag"`
	Instance                   pulumi.StringOutput                        `pulumi:"instance"`
	Member                     pulumi.StringOutput                        `pulumi:"member"`
	Project                    pulumi.StringOutput                        `pulumi:"project"`
	Role                       pulumi.StringOutput                        `pulumi:"role"`
	SpannerInstanceIamMemberId pulumi.StringOutput                        `pulumi:"spannerInstanceIamMemberId"`
}

// NewSpannerInstanceIamMember registers a new resource with the given unique name, arguments, and options.
func NewSpannerInstanceIamMember(ctx *pulumi.Context,
	name string, args *SpannerInstanceIamMemberArgs, opts ...pulumi.ResourceOption) (*SpannerInstanceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SpannerInstanceIamMember
	err = ctx.RegisterPackageResource("google-beta:index/spannerInstanceIamMember:SpannerInstanceIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpannerInstanceIamMember gets an existing SpannerInstanceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpannerInstanceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpannerInstanceIamMemberState, opts ...pulumi.ResourceOption) (*SpannerInstanceIamMember, error) {
	var resource SpannerInstanceIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/spannerInstanceIamMember:SpannerInstanceIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpannerInstanceIamMember resources.
type spannerInstanceIamMemberState struct {
	Condition                  *SpannerInstanceIamMemberCondition `pulumi:"condition"`
	Etag                       *string                            `pulumi:"etag"`
	Instance                   *string                            `pulumi:"instance"`
	Member                     *string                            `pulumi:"member"`
	Project                    *string                            `pulumi:"project"`
	Role                       *string                            `pulumi:"role"`
	SpannerInstanceIamMemberId *string                            `pulumi:"spannerInstanceIamMemberId"`
}

type SpannerInstanceIamMemberState struct {
	Condition                  SpannerInstanceIamMemberConditionPtrInput
	Etag                       pulumi.StringPtrInput
	Instance                   pulumi.StringPtrInput
	Member                     pulumi.StringPtrInput
	Project                    pulumi.StringPtrInput
	Role                       pulumi.StringPtrInput
	SpannerInstanceIamMemberId pulumi.StringPtrInput
}

func (SpannerInstanceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceIamMemberState)(nil)).Elem()
}

type spannerInstanceIamMemberArgs struct {
	Condition                  *SpannerInstanceIamMemberCondition `pulumi:"condition"`
	Instance                   string                             `pulumi:"instance"`
	Member                     string                             `pulumi:"member"`
	Project                    *string                            `pulumi:"project"`
	Role                       string                             `pulumi:"role"`
	SpannerInstanceIamMemberId *string                            `pulumi:"spannerInstanceIamMemberId"`
}

// The set of arguments for constructing a SpannerInstanceIamMember resource.
type SpannerInstanceIamMemberArgs struct {
	Condition                  SpannerInstanceIamMemberConditionPtrInput
	Instance                   pulumi.StringInput
	Member                     pulumi.StringInput
	Project                    pulumi.StringPtrInput
	Role                       pulumi.StringInput
	SpannerInstanceIamMemberId pulumi.StringPtrInput
}

func (SpannerInstanceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceIamMemberArgs)(nil)).Elem()
}

type SpannerInstanceIamMemberInput interface {
	pulumi.Input

	ToSpannerInstanceIamMemberOutput() SpannerInstanceIamMemberOutput
	ToSpannerInstanceIamMemberOutputWithContext(ctx context.Context) SpannerInstanceIamMemberOutput
}

func (*SpannerInstanceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceIamMember)(nil)).Elem()
}

func (i *SpannerInstanceIamMember) ToSpannerInstanceIamMemberOutput() SpannerInstanceIamMemberOutput {
	return i.ToSpannerInstanceIamMemberOutputWithContext(context.Background())
}

func (i *SpannerInstanceIamMember) ToSpannerInstanceIamMemberOutputWithContext(ctx context.Context) SpannerInstanceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerInstanceIamMemberOutput)
}

type SpannerInstanceIamMemberOutput struct{ *pulumi.OutputState }

func (SpannerInstanceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceIamMember)(nil)).Elem()
}

func (o SpannerInstanceIamMemberOutput) ToSpannerInstanceIamMemberOutput() SpannerInstanceIamMemberOutput {
	return o
}

func (o SpannerInstanceIamMemberOutput) ToSpannerInstanceIamMemberOutputWithContext(ctx context.Context) SpannerInstanceIamMemberOutput {
	return o
}

func (o SpannerInstanceIamMemberOutput) Condition() SpannerInstanceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) SpannerInstanceIamMemberConditionPtrOutput { return v.Condition }).(SpannerInstanceIamMemberConditionPtrOutput)
}

func (o SpannerInstanceIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamMemberOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamMemberOutput) SpannerInstanceIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamMember) pulumi.StringOutput { return v.SpannerInstanceIamMemberId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerInstanceIamMemberInput)(nil)).Elem(), &SpannerInstanceIamMember{})
	pulumi.RegisterOutputType(SpannerInstanceIamMemberOutput{})
}
