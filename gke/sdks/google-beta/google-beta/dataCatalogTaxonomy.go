// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataCatalogTaxonomy struct {
	pulumi.CustomResourceState

	// A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
	// ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
	ActivatedPolicyTypes  pulumi.StringArrayOutput `pulumi:"activatedPolicyTypes"`
	DataCatalogTaxonomyId pulumi.StringOutput      `pulumi:"dataCatalogTaxonomyId"`
	// Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
	// breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
	// only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Taxonomy location region.
	Region   pulumi.StringOutput                  `pulumi:"region"`
	Timeouts DataCatalogTaxonomyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDataCatalogTaxonomy registers a new resource with the given unique name, arguments, and options.
func NewDataCatalogTaxonomy(ctx *pulumi.Context,
	name string, args *DataCatalogTaxonomyArgs, opts ...pulumi.ResourceOption) (*DataCatalogTaxonomy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataCatalogTaxonomy
	err = ctx.RegisterPackageResource("google-beta:index/dataCatalogTaxonomy:DataCatalogTaxonomy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalogTaxonomy gets an existing DataCatalogTaxonomy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalogTaxonomy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogTaxonomyState, opts ...pulumi.ResourceOption) (*DataCatalogTaxonomy, error) {
	var resource DataCatalogTaxonomy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataCatalogTaxonomy:DataCatalogTaxonomy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalogTaxonomy resources.
type dataCatalogTaxonomyState struct {
	// A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
	// ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
	ActivatedPolicyTypes  []string `pulumi:"activatedPolicyTypes"`
	DataCatalogTaxonomyId *string  `pulumi:"dataCatalogTaxonomyId"`
	// Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
	// breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
	Description *string `pulumi:"description"`
	// User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
	// only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName *string `pulumi:"displayName"`
	// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Taxonomy location region.
	Region   *string                      `pulumi:"region"`
	Timeouts *DataCatalogTaxonomyTimeouts `pulumi:"timeouts"`
}

type DataCatalogTaxonomyState struct {
	// A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
	// ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
	ActivatedPolicyTypes  pulumi.StringArrayInput
	DataCatalogTaxonomyId pulumi.StringPtrInput
	// Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
	// breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
	Description pulumi.StringPtrInput
	// User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
	// only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName pulumi.StringPtrInput
	// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Taxonomy location region.
	Region   pulumi.StringPtrInput
	Timeouts DataCatalogTaxonomyTimeoutsPtrInput
}

func (DataCatalogTaxonomyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogTaxonomyState)(nil)).Elem()
}

type dataCatalogTaxonomyArgs struct {
	// A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
	// ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
	ActivatedPolicyTypes  []string `pulumi:"activatedPolicyTypes"`
	DataCatalogTaxonomyId *string  `pulumi:"dataCatalogTaxonomyId"`
	// Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
	// breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
	Description *string `pulumi:"description"`
	// User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
	// only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName string  `pulumi:"displayName"`
	Project     *string `pulumi:"project"`
	// Taxonomy location region.
	Region   *string                      `pulumi:"region"`
	Timeouts *DataCatalogTaxonomyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DataCatalogTaxonomy resource.
type DataCatalogTaxonomyArgs struct {
	// A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
	// ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
	ActivatedPolicyTypes  pulumi.StringArrayInput
	DataCatalogTaxonomyId pulumi.StringPtrInput
	// Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
	// breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
	Description pulumi.StringPtrInput
	// User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
	// only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName pulumi.StringInput
	Project     pulumi.StringPtrInput
	// Taxonomy location region.
	Region   pulumi.StringPtrInput
	Timeouts DataCatalogTaxonomyTimeoutsPtrInput
}

func (DataCatalogTaxonomyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogTaxonomyArgs)(nil)).Elem()
}

type DataCatalogTaxonomyInput interface {
	pulumi.Input

	ToDataCatalogTaxonomyOutput() DataCatalogTaxonomyOutput
	ToDataCatalogTaxonomyOutputWithContext(ctx context.Context) DataCatalogTaxonomyOutput
}

func (*DataCatalogTaxonomy) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogTaxonomy)(nil)).Elem()
}

func (i *DataCatalogTaxonomy) ToDataCatalogTaxonomyOutput() DataCatalogTaxonomyOutput {
	return i.ToDataCatalogTaxonomyOutputWithContext(context.Background())
}

func (i *DataCatalogTaxonomy) ToDataCatalogTaxonomyOutputWithContext(ctx context.Context) DataCatalogTaxonomyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogTaxonomyOutput)
}

type DataCatalogTaxonomyOutput struct{ *pulumi.OutputState }

func (DataCatalogTaxonomyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogTaxonomy)(nil)).Elem()
}

func (o DataCatalogTaxonomyOutput) ToDataCatalogTaxonomyOutput() DataCatalogTaxonomyOutput {
	return o
}

func (o DataCatalogTaxonomyOutput) ToDataCatalogTaxonomyOutputWithContext(ctx context.Context) DataCatalogTaxonomyOutput {
	return o
}

// A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
// ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
func (o DataCatalogTaxonomyOutput) ActivatedPolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringArrayOutput { return v.ActivatedPolicyTypes }).(pulumi.StringArrayOutput)
}

func (o DataCatalogTaxonomyOutput) DataCatalogTaxonomyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringOutput { return v.DataCatalogTaxonomyId }).(pulumi.StringOutput)
}

// Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
// breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
func (o DataCatalogTaxonomyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
// only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
// long when encoded in UTF-8.
func (o DataCatalogTaxonomyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
func (o DataCatalogTaxonomyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Taxonomy location region.
func (o DataCatalogTaxonomyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyOutput) Timeouts() DataCatalogTaxonomyTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomy) DataCatalogTaxonomyTimeoutsPtrOutput { return v.Timeouts }).(DataCatalogTaxonomyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogTaxonomyInput)(nil)).Elem(), &DataCatalogTaxonomy{})
	pulumi.RegisterOutputType(DataCatalogTaxonomyOutput{})
}
