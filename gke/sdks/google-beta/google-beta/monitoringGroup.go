// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MonitoringGroup struct {
	pulumi.CustomResourceState

	// A user-assigned name for this group, used only for display purposes.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The filter used to determine which monitored resources belong to this group.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
	// that are clusters.
	IsCluster         pulumi.BoolPtrOutput `pulumi:"isCluster"`
	MonitoringGroupId pulumi.StringOutput  `pulumi:"monitoringGroupId"`
	// A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
	// groups with no parent, parentName is the empty string, "".
	ParentName pulumi.StringPtrOutput           `pulumi:"parentName"`
	Project    pulumi.StringOutput              `pulumi:"project"`
	Timeouts   MonitoringGroupTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewMonitoringGroup registers a new resource with the given unique name, arguments, and options.
func NewMonitoringGroup(ctx *pulumi.Context,
	name string, args *MonitoringGroupArgs, opts ...pulumi.ResourceOption) (*MonitoringGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MonitoringGroup
	err = ctx.RegisterPackageResource("google-beta:index/monitoringGroup:MonitoringGroup", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringGroup gets an existing MonitoringGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringGroupState, opts ...pulumi.ResourceOption) (*MonitoringGroup, error) {
	var resource MonitoringGroup
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/monitoringGroup:MonitoringGroup", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringGroup resources.
type monitoringGroupState struct {
	// A user-assigned name for this group, used only for display purposes.
	DisplayName *string `pulumi:"displayName"`
	// The filter used to determine which monitored resources belong to this group.
	Filter *string `pulumi:"filter"`
	// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
	// that are clusters.
	IsCluster         *bool   `pulumi:"isCluster"`
	MonitoringGroupId *string `pulumi:"monitoringGroupId"`
	// A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
	Name *string `pulumi:"name"`
	// The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
	// groups with no parent, parentName is the empty string, "".
	ParentName *string                  `pulumi:"parentName"`
	Project    *string                  `pulumi:"project"`
	Timeouts   *MonitoringGroupTimeouts `pulumi:"timeouts"`
}

type MonitoringGroupState struct {
	// A user-assigned name for this group, used only for display purposes.
	DisplayName pulumi.StringPtrInput
	// The filter used to determine which monitored resources belong to this group.
	Filter pulumi.StringPtrInput
	// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
	// that are clusters.
	IsCluster         pulumi.BoolPtrInput
	MonitoringGroupId pulumi.StringPtrInput
	// A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
	Name pulumi.StringPtrInput
	// The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
	// groups with no parent, parentName is the empty string, "".
	ParentName pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	Timeouts   MonitoringGroupTimeoutsPtrInput
}

func (MonitoringGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringGroupState)(nil)).Elem()
}

type monitoringGroupArgs struct {
	// A user-assigned name for this group, used only for display purposes.
	DisplayName string `pulumi:"displayName"`
	// The filter used to determine which monitored resources belong to this group.
	Filter string `pulumi:"filter"`
	// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
	// that are clusters.
	IsCluster         *bool   `pulumi:"isCluster"`
	MonitoringGroupId *string `pulumi:"monitoringGroupId"`
	// The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
	// groups with no parent, parentName is the empty string, "".
	ParentName *string                  `pulumi:"parentName"`
	Project    *string                  `pulumi:"project"`
	Timeouts   *MonitoringGroupTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a MonitoringGroup resource.
type MonitoringGroupArgs struct {
	// A user-assigned name for this group, used only for display purposes.
	DisplayName pulumi.StringInput
	// The filter used to determine which monitored resources belong to this group.
	Filter pulumi.StringInput
	// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
	// that are clusters.
	IsCluster         pulumi.BoolPtrInput
	MonitoringGroupId pulumi.StringPtrInput
	// The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
	// groups with no parent, parentName is the empty string, "".
	ParentName pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	Timeouts   MonitoringGroupTimeoutsPtrInput
}

func (MonitoringGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringGroupArgs)(nil)).Elem()
}

type MonitoringGroupInput interface {
	pulumi.Input

	ToMonitoringGroupOutput() MonitoringGroupOutput
	ToMonitoringGroupOutputWithContext(ctx context.Context) MonitoringGroupOutput
}

func (*MonitoringGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringGroup)(nil)).Elem()
}

func (i *MonitoringGroup) ToMonitoringGroupOutput() MonitoringGroupOutput {
	return i.ToMonitoringGroupOutputWithContext(context.Background())
}

func (i *MonitoringGroup) ToMonitoringGroupOutputWithContext(ctx context.Context) MonitoringGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringGroupOutput)
}

type MonitoringGroupOutput struct{ *pulumi.OutputState }

func (MonitoringGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringGroup)(nil)).Elem()
}

func (o MonitoringGroupOutput) ToMonitoringGroupOutput() MonitoringGroupOutput {
	return o
}

func (o MonitoringGroupOutput) ToMonitoringGroupOutputWithContext(ctx context.Context) MonitoringGroupOutput {
	return o
}

// A user-assigned name for this group, used only for display purposes.
func (o MonitoringGroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The filter used to determine which monitored resources belong to this group.
func (o MonitoringGroupOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
// that are clusters.
func (o MonitoringGroupOutput) IsCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.BoolPtrOutput { return v.IsCluster }).(pulumi.BoolPtrOutput)
}

func (o MonitoringGroupOutput) MonitoringGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.StringOutput { return v.MonitoringGroupId }).(pulumi.StringOutput)
}

// A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
func (o MonitoringGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
// groups with no parent, parentName is the empty string, "".
func (o MonitoringGroupOutput) ParentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.StringPtrOutput { return v.ParentName }).(pulumi.StringPtrOutput)
}

func (o MonitoringGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o MonitoringGroupOutput) Timeouts() MonitoringGroupTimeoutsPtrOutput {
	return o.ApplyT(func(v *MonitoringGroup) MonitoringGroupTimeoutsPtrOutput { return v.Timeouts }).(MonitoringGroupTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringGroupInput)(nil)).Elem(), &MonitoringGroup{})
	pulumi.RegisterOutputType(MonitoringGroupOutput{})
}
