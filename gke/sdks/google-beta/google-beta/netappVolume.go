// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetappVolume struct {
	pulumi.CustomResourceState

	// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
	ActiveDirectory pulumi.StringOutput `pulumi:"activeDirectory"`
	// Backup configuration for the volume.
	BackupConfig NetappVolumeBackupConfigPtrOutput `pulumi:"backupConfig"`
	// Capacity of the volume (in GiB).
	CapacityGib pulumi.StringOutput `pulumi:"capacityGib"`
	// Output only. Size of the volume cold tier data in GiB.
	ColdTierSizeGib pulumi.StringOutput `pulumi:"coldTierSizeGib"`
	// Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Policy to determine if the volume should be deleted forcefully. Volumes may have nested snapshot resources. Deleting
	// such a volume will fail. Setting this parameter to FORCE will delete volumes including nested snapshots. Possible
	// values: DEFAULT, FORCE.
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// An optional description of this resource.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
	EncryptionType pulumi.StringOutput `pulumi:"encryptionType"`
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	ExportPolicy NetappVolumeExportPolicyPtrOutput `pulumi:"exportPolicy"`
	// Indicates whether the volume is part of a volume replication relationship.
	HasReplication pulumi.BoolOutput `pulumi:"hasReplication"`
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5,
	// krb5i, krb5p).
	KerberosEnabled pulumi.BoolPtrOutput `pulumi:"kerberosEnabled"`
	// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
	KmsConfig pulumi.StringOutput `pulumi:"kmsConfig"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
	LargeCapacity pulumi.BoolPtrOutput `pulumi:"largeCapacity"`
	// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
	LdapEnabled pulumi.BoolOutput `pulumi:"ldapEnabled"`
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone
	// name.
	Location pulumi.StringOutput `pulumi:"location"`
	// Reports mount instructions for this volume.
	MountOptions NetappVolumeMountOptionArrayOutput `pulumi:"mountOptions"`
	// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
	// Only the volume with largeCapacity will be allowed to have multiple endpoints.
	MultipleEndpoints pulumi.BoolPtrOutput `pulumi:"multipleEndpoints"`
	// The name of the volume. Needs to be unique per location.
	Name           pulumi.StringOutput `pulumi:"name"`
	NetappVolumeId pulumi.StringOutput `pulumi:"netappVolumeId"`
	// VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'. Inherited from storage pool.
	Network pulumi.StringOutput `pulumi:"network"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The protocol of the volume. Allowed combinations are '['NFSV3']', '['NFSV4']', '['SMB']', '['NFSV3', 'NFSV4']', '['SMB',
	// 'NFSV3']' and '['SMB', 'NFSV4']'. Possible values: ["NFSV3", "NFSV4", "SMB"]
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Name of the Private Service Access allocated range. Inherited from storage pool.
	PsaRange pulumi.StringOutput `pulumi:"psaRange"`
	// Specifies the replica zone for regional volume.
	ReplicaZone pulumi.StringOutput `pulumi:"replicaZone"`
	// Used to create this volume from a snapshot (= cloning) or an backup.
	RestoreParameters NetappVolumeRestoreParametersPtrOutput `pulumi:"restoreParameters"`
	// List of actions that are restricted on this volume. Possible values: ["DELETE"]
	RestrictedActions pulumi.StringArrayOutput `pulumi:"restrictedActions"`
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions. Use NTFS to use NTFS ACLs for
	// file permissions. Can only be set for volumes which use SMB together with NFS as protocol. Possible values: ["NTFS",
	// "UNIX"]
	SecurityStyle pulumi.StringOutput `pulumi:"securityStyle"`
	// Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
	ServiceLevel pulumi.StringOutput `pulumi:"serviceLevel"`
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName pulumi.StringOutput `pulumi:"shareName"`
	// Settings for volumes with SMB access. Possible values: ["ENCRYPT_DATA", "BROWSABLE", "CHANGE_NOTIFY", "NON_BROWSABLE",
	// "OPLOCKS", "SHOW_SNAPSHOT", "SHOW_PREVIOUS_VERSIONS", "ACCESS_BASED_ENUMERATION", "CONTINUOUSLY_AVAILABLE"]
	SmbSettings pulumi.StringArrayOutput `pulumi:"smbSettings"`
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's
	// snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory pulumi.BoolPtrOutput `pulumi:"snapshotDirectory"`
	// Snapshot policy defines the schedule for automatic snapshot creation. To disable automatic snapshot creation you have to
	// remove the whole snapshot_policy block.
	SnapshotPolicy NetappVolumeSnapshotPolicyPtrOutput `pulumi:"snapshotPolicy"`
	// State of the volume.
	State pulumi.StringOutput `pulumi:"state"`
	// State details of the volume.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
	StoragePool pulumi.StringOutput `pulumi:"storagePool"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput `pulumi:"terraformLabels"`
	// Tiering policy for the volume.
	TieringPolicy NetappVolumeTieringPolicyPtrOutput `pulumi:"tieringPolicy"`
	Timeouts      NetappVolumeTimeoutsPtrOutput      `pulumi:"timeouts"`
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions pulumi.StringOutput `pulumi:"unixPermissions"`
	// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
	UsedGib pulumi.StringOutput `pulumi:"usedGib"`
	// Specifies the active zone for regional volume.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewNetappVolume registers a new resource with the given unique name, arguments, and options.
func NewNetappVolume(ctx *pulumi.Context,
	name string, args *NetappVolumeArgs, opts ...pulumi.ResourceOption) (*NetappVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityGib == nil {
		return nil, errors.New("invalid value for required argument 'CapacityGib'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	if args.ShareName == nil {
		return nil, errors.New("invalid value for required argument 'ShareName'")
	}
	if args.StoragePool == nil {
		return nil, errors.New("invalid value for required argument 'StoragePool'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetappVolume
	err = ctx.RegisterPackageResource("google-beta:index/netappVolume:NetappVolume", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappVolume gets an existing NetappVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappVolumeState, opts ...pulumi.ResourceOption) (*NetappVolume, error) {
	var resource NetappVolume
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/netappVolume:NetappVolume", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappVolume resources.
type netappVolumeState struct {
	// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
	ActiveDirectory *string `pulumi:"activeDirectory"`
	// Backup configuration for the volume.
	BackupConfig *NetappVolumeBackupConfig `pulumi:"backupConfig"`
	// Capacity of the volume (in GiB).
	CapacityGib *string `pulumi:"capacityGib"`
	// Output only. Size of the volume cold tier data in GiB.
	ColdTierSizeGib *string `pulumi:"coldTierSizeGib"`
	// Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// Policy to determine if the volume should be deleted forcefully. Volumes may have nested snapshot resources. Deleting
	// such a volume will fail. Setting this parameter to FORCE will delete volumes including nested snapshots. Possible
	// values: DEFAULT, FORCE.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// An optional description of this resource.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
	EncryptionType *string `pulumi:"encryptionType"`
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	ExportPolicy *NetappVolumeExportPolicy `pulumi:"exportPolicy"`
	// Indicates whether the volume is part of a volume replication relationship.
	HasReplication *bool `pulumi:"hasReplication"`
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5,
	// krb5i, krb5p).
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
	KmsConfig *string `pulumi:"kmsConfig"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
	LargeCapacity *bool `pulumi:"largeCapacity"`
	// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
	LdapEnabled *bool `pulumi:"ldapEnabled"`
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone
	// name.
	Location *string `pulumi:"location"`
	// Reports mount instructions for this volume.
	MountOptions []NetappVolumeMountOption `pulumi:"mountOptions"`
	// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
	// Only the volume with largeCapacity will be allowed to have multiple endpoints.
	MultipleEndpoints *bool `pulumi:"multipleEndpoints"`
	// The name of the volume. Needs to be unique per location.
	Name           *string `pulumi:"name"`
	NetappVolumeId *string `pulumi:"netappVolumeId"`
	// VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'. Inherited from storage pool.
	Network *string `pulumi:"network"`
	Project *string `pulumi:"project"`
	// The protocol of the volume. Allowed combinations are '['NFSV3']', '['NFSV4']', '['SMB']', '['NFSV3', 'NFSV4']', '['SMB',
	// 'NFSV3']' and '['SMB', 'NFSV4']'. Possible values: ["NFSV3", "NFSV4", "SMB"]
	Protocols []string `pulumi:"protocols"`
	// Name of the Private Service Access allocated range. Inherited from storage pool.
	PsaRange *string `pulumi:"psaRange"`
	// Specifies the replica zone for regional volume.
	ReplicaZone *string `pulumi:"replicaZone"`
	// Used to create this volume from a snapshot (= cloning) or an backup.
	RestoreParameters *NetappVolumeRestoreParameters `pulumi:"restoreParameters"`
	// List of actions that are restricted on this volume. Possible values: ["DELETE"]
	RestrictedActions []string `pulumi:"restrictedActions"`
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions. Use NTFS to use NTFS ACLs for
	// file permissions. Can only be set for volumes which use SMB together with NFS as protocol. Possible values: ["NTFS",
	// "UNIX"]
	SecurityStyle *string `pulumi:"securityStyle"`
	// Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
	ServiceLevel *string `pulumi:"serviceLevel"`
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName *string `pulumi:"shareName"`
	// Settings for volumes with SMB access. Possible values: ["ENCRYPT_DATA", "BROWSABLE", "CHANGE_NOTIFY", "NON_BROWSABLE",
	// "OPLOCKS", "SHOW_SNAPSHOT", "SHOW_PREVIOUS_VERSIONS", "ACCESS_BASED_ENUMERATION", "CONTINUOUSLY_AVAILABLE"]
	SmbSettings []string `pulumi:"smbSettings"`
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's
	// snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory *bool `pulumi:"snapshotDirectory"`
	// Snapshot policy defines the schedule for automatic snapshot creation. To disable automatic snapshot creation you have to
	// remove the whole snapshot_policy block.
	SnapshotPolicy *NetappVolumeSnapshotPolicy `pulumi:"snapshotPolicy"`
	// State of the volume.
	State *string `pulumi:"state"`
	// State details of the volume.
	StateDetails *string `pulumi:"stateDetails"`
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
	StoragePool *string `pulumi:"storagePool"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string `pulumi:"terraformLabels"`
	// Tiering policy for the volume.
	TieringPolicy *NetappVolumeTieringPolicy `pulumi:"tieringPolicy"`
	Timeouts      *NetappVolumeTimeouts      `pulumi:"timeouts"`
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions *string `pulumi:"unixPermissions"`
	// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
	UsedGib *string `pulumi:"usedGib"`
	// Specifies the active zone for regional volume.
	Zone *string `pulumi:"zone"`
}

type NetappVolumeState struct {
	// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
	ActiveDirectory pulumi.StringPtrInput
	// Backup configuration for the volume.
	BackupConfig NetappVolumeBackupConfigPtrInput
	// Capacity of the volume (in GiB).
	CapacityGib pulumi.StringPtrInput
	// Output only. Size of the volume cold tier data in GiB.
	ColdTierSizeGib pulumi.StringPtrInput
	// Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// Policy to determine if the volume should be deleted forcefully. Volumes may have nested snapshot resources. Deleting
	// such a volume will fail. Setting this parameter to FORCE will delete volumes including nested snapshots. Possible
	// values: DEFAULT, FORCE.
	DeletionPolicy pulumi.StringPtrInput
	// An optional description of this resource.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
	EncryptionType pulumi.StringPtrInput
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	ExportPolicy NetappVolumeExportPolicyPtrInput
	// Indicates whether the volume is part of a volume replication relationship.
	HasReplication pulumi.BoolPtrInput
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5,
	// krb5i, krb5p).
	KerberosEnabled pulumi.BoolPtrInput
	// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
	KmsConfig pulumi.StringPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
	LargeCapacity pulumi.BoolPtrInput
	// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
	LdapEnabled pulumi.BoolPtrInput
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone
	// name.
	Location pulumi.StringPtrInput
	// Reports mount instructions for this volume.
	MountOptions NetappVolumeMountOptionArrayInput
	// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
	// Only the volume with largeCapacity will be allowed to have multiple endpoints.
	MultipleEndpoints pulumi.BoolPtrInput
	// The name of the volume. Needs to be unique per location.
	Name           pulumi.StringPtrInput
	NetappVolumeId pulumi.StringPtrInput
	// VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'. Inherited from storage pool.
	Network pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The protocol of the volume. Allowed combinations are '['NFSV3']', '['NFSV4']', '['SMB']', '['NFSV3', 'NFSV4']', '['SMB',
	// 'NFSV3']' and '['SMB', 'NFSV4']'. Possible values: ["NFSV3", "NFSV4", "SMB"]
	Protocols pulumi.StringArrayInput
	// Name of the Private Service Access allocated range. Inherited from storage pool.
	PsaRange pulumi.StringPtrInput
	// Specifies the replica zone for regional volume.
	ReplicaZone pulumi.StringPtrInput
	// Used to create this volume from a snapshot (= cloning) or an backup.
	RestoreParameters NetappVolumeRestoreParametersPtrInput
	// List of actions that are restricted on this volume. Possible values: ["DELETE"]
	RestrictedActions pulumi.StringArrayInput
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions. Use NTFS to use NTFS ACLs for
	// file permissions. Can only be set for volumes which use SMB together with NFS as protocol. Possible values: ["NTFS",
	// "UNIX"]
	SecurityStyle pulumi.StringPtrInput
	// Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
	ServiceLevel pulumi.StringPtrInput
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName pulumi.StringPtrInput
	// Settings for volumes with SMB access. Possible values: ["ENCRYPT_DATA", "BROWSABLE", "CHANGE_NOTIFY", "NON_BROWSABLE",
	// "OPLOCKS", "SHOW_SNAPSHOT", "SHOW_PREVIOUS_VERSIONS", "ACCESS_BASED_ENUMERATION", "CONTINUOUSLY_AVAILABLE"]
	SmbSettings pulumi.StringArrayInput
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's
	// snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory pulumi.BoolPtrInput
	// Snapshot policy defines the schedule for automatic snapshot creation. To disable automatic snapshot creation you have to
	// remove the whole snapshot_policy block.
	SnapshotPolicy NetappVolumeSnapshotPolicyPtrInput
	// State of the volume.
	State pulumi.StringPtrInput
	// State details of the volume.
	StateDetails pulumi.StringPtrInput
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
	StoragePool pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	// Tiering policy for the volume.
	TieringPolicy NetappVolumeTieringPolicyPtrInput
	Timeouts      NetappVolumeTimeoutsPtrInput
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions pulumi.StringPtrInput
	// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
	UsedGib pulumi.StringPtrInput
	// Specifies the active zone for regional volume.
	Zone pulumi.StringPtrInput
}

func (NetappVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeState)(nil)).Elem()
}

type netappVolumeArgs struct {
	// Backup configuration for the volume.
	BackupConfig *NetappVolumeBackupConfig `pulumi:"backupConfig"`
	// Capacity of the volume (in GiB).
	CapacityGib string `pulumi:"capacityGib"`
	// Policy to determine if the volume should be deleted forcefully. Volumes may have nested snapshot resources. Deleting
	// such a volume will fail. Setting this parameter to FORCE will delete volumes including nested snapshots. Possible
	// values: DEFAULT, FORCE.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	ExportPolicy *NetappVolumeExportPolicy `pulumi:"exportPolicy"`
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5,
	// krb5i, krb5p).
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
	LargeCapacity *bool `pulumi:"largeCapacity"`
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone
	// name.
	Location string `pulumi:"location"`
	// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
	// Only the volume with largeCapacity will be allowed to have multiple endpoints.
	MultipleEndpoints *bool `pulumi:"multipleEndpoints"`
	// The name of the volume. Needs to be unique per location.
	Name           *string `pulumi:"name"`
	NetappVolumeId *string `pulumi:"netappVolumeId"`
	Project        *string `pulumi:"project"`
	// The protocol of the volume. Allowed combinations are '['NFSV3']', '['NFSV4']', '['SMB']', '['NFSV3', 'NFSV4']', '['SMB',
	// 'NFSV3']' and '['SMB', 'NFSV4']'. Possible values: ["NFSV3", "NFSV4", "SMB"]
	Protocols []string `pulumi:"protocols"`
	// Used to create this volume from a snapshot (= cloning) or an backup.
	RestoreParameters *NetappVolumeRestoreParameters `pulumi:"restoreParameters"`
	// List of actions that are restricted on this volume. Possible values: ["DELETE"]
	RestrictedActions []string `pulumi:"restrictedActions"`
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions. Use NTFS to use NTFS ACLs for
	// file permissions. Can only be set for volumes which use SMB together with NFS as protocol. Possible values: ["NTFS",
	// "UNIX"]
	SecurityStyle *string `pulumi:"securityStyle"`
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName string `pulumi:"shareName"`
	// Settings for volumes with SMB access. Possible values: ["ENCRYPT_DATA", "BROWSABLE", "CHANGE_NOTIFY", "NON_BROWSABLE",
	// "OPLOCKS", "SHOW_SNAPSHOT", "SHOW_PREVIOUS_VERSIONS", "ACCESS_BASED_ENUMERATION", "CONTINUOUSLY_AVAILABLE"]
	SmbSettings []string `pulumi:"smbSettings"`
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's
	// snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory *bool `pulumi:"snapshotDirectory"`
	// Snapshot policy defines the schedule for automatic snapshot creation. To disable automatic snapshot creation you have to
	// remove the whole snapshot_policy block.
	SnapshotPolicy *NetappVolumeSnapshotPolicy `pulumi:"snapshotPolicy"`
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
	StoragePool string `pulumi:"storagePool"`
	// Tiering policy for the volume.
	TieringPolicy *NetappVolumeTieringPolicy `pulumi:"tieringPolicy"`
	Timeouts      *NetappVolumeTimeouts      `pulumi:"timeouts"`
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions *string `pulumi:"unixPermissions"`
}

// The set of arguments for constructing a NetappVolume resource.
type NetappVolumeArgs struct {
	// Backup configuration for the volume.
	BackupConfig NetappVolumeBackupConfigPtrInput
	// Capacity of the volume (in GiB).
	CapacityGib pulumi.StringInput
	// Policy to determine if the volume should be deleted forcefully. Volumes may have nested snapshot resources. Deleting
	// such a volume will fail. Setting this parameter to FORCE will delete volumes including nested snapshots. Possible
	// values: DEFAULT, FORCE.
	DeletionPolicy pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
	ExportPolicy NetappVolumeExportPolicyPtrInput
	// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5,
	// krb5i, krb5p).
	KerberosEnabled pulumi.BoolPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
	LargeCapacity pulumi.BoolPtrInput
	// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone
	// name.
	Location pulumi.StringInput
	// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
	// Only the volume with largeCapacity will be allowed to have multiple endpoints.
	MultipleEndpoints pulumi.BoolPtrInput
	// The name of the volume. Needs to be unique per location.
	Name           pulumi.StringPtrInput
	NetappVolumeId pulumi.StringPtrInput
	Project        pulumi.StringPtrInput
	// The protocol of the volume. Allowed combinations are '['NFSV3']', '['NFSV4']', '['SMB']', '['NFSV3', 'NFSV4']', '['SMB',
	// 'NFSV3']' and '['SMB', 'NFSV4']'. Possible values: ["NFSV3", "NFSV4", "SMB"]
	Protocols pulumi.StringArrayInput
	// Used to create this volume from a snapshot (= cloning) or an backup.
	RestoreParameters NetappVolumeRestoreParametersPtrInput
	// List of actions that are restricted on this volume. Possible values: ["DELETE"]
	RestrictedActions pulumi.StringArrayInput
	// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions. Use NTFS to use NTFS ACLs for
	// file permissions. Can only be set for volumes which use SMB together with NFS as protocol. Possible values: ["NTFS",
	// "UNIX"]
	SecurityStyle pulumi.StringPtrInput
	// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
	ShareName pulumi.StringInput
	// Settings for volumes with SMB access. Possible values: ["ENCRYPT_DATA", "BROWSABLE", "CHANGE_NOTIFY", "NON_BROWSABLE",
	// "OPLOCKS", "SHOW_SNAPSHOT", "SHOW_PREVIOUS_VERSIONS", "ACCESS_BASED_ENUMERATION", "CONTINUOUSLY_AVAILABLE"]
	SmbSettings pulumi.StringArrayInput
	// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's
	// snapshots. Will enable "Previous Versions" support for SMB.
	SnapshotDirectory pulumi.BoolPtrInput
	// Snapshot policy defines the schedule for automatic snapshot creation. To disable automatic snapshot creation you have to
	// remove the whole snapshot_policy block.
	SnapshotPolicy NetappVolumeSnapshotPolicyPtrInput
	// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
	StoragePool pulumi.StringInput
	// Tiering policy for the volume.
	TieringPolicy NetappVolumeTieringPolicyPtrInput
	Timeouts      NetappVolumeTimeoutsPtrInput
	// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
	UnixPermissions pulumi.StringPtrInput
}

func (NetappVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeArgs)(nil)).Elem()
}

type NetappVolumeInput interface {
	pulumi.Input

	ToNetappVolumeOutput() NetappVolumeOutput
	ToNetappVolumeOutputWithContext(ctx context.Context) NetappVolumeOutput
}

func (*NetappVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolume)(nil)).Elem()
}

func (i *NetappVolume) ToNetappVolumeOutput() NetappVolumeOutput {
	return i.ToNetappVolumeOutputWithContext(context.Background())
}

func (i *NetappVolume) ToNetappVolumeOutputWithContext(ctx context.Context) NetappVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappVolumeOutput)
}

type NetappVolumeOutput struct{ *pulumi.OutputState }

func (NetappVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolume)(nil)).Elem()
}

func (o NetappVolumeOutput) ToNetappVolumeOutput() NetappVolumeOutput {
	return o
}

func (o NetappVolumeOutput) ToNetappVolumeOutputWithContext(ctx context.Context) NetappVolumeOutput {
	return o
}

// Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
func (o NetappVolumeOutput) ActiveDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.ActiveDirectory }).(pulumi.StringOutput)
}

// Backup configuration for the volume.
func (o NetappVolumeOutput) BackupConfig() NetappVolumeBackupConfigPtrOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeBackupConfigPtrOutput { return v.BackupConfig }).(NetappVolumeBackupConfigPtrOutput)
}

// Capacity of the volume (in GiB).
func (o NetappVolumeOutput) CapacityGib() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.CapacityGib }).(pulumi.StringOutput)
}

// Output only. Size of the volume cold tier data in GiB.
func (o NetappVolumeOutput) ColdTierSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.ColdTierSizeGib }).(pulumi.StringOutput)
}

// Create time of the volume. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o NetappVolumeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Policy to determine if the volume should be deleted forcefully. Volumes may have nested snapshot resources. Deleting
// such a volume will fail. Setting this parameter to FORCE will delete volumes including nested snapshots. Possible
// values: DEFAULT, FORCE.
func (o NetappVolumeOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// An optional description of this resource.
func (o NetappVolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetappVolumeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
func (o NetappVolumeOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.EncryptionType }).(pulumi.StringOutput)
}

// Export policy of the volume for NFSV3 and/or NFSV4.1 access.
func (o NetappVolumeOutput) ExportPolicy() NetappVolumeExportPolicyPtrOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeExportPolicyPtrOutput { return v.ExportPolicy }).(NetappVolumeExportPolicyPtrOutput)
}

// Indicates whether the volume is part of a volume replication relationship.
func (o NetappVolumeOutput) HasReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.BoolOutput { return v.HasReplication }).(pulumi.BoolOutput)
}

// Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5,
// krb5i, krb5p).
func (o NetappVolumeOutput) KerberosEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.BoolPtrOutput { return v.KerberosEnabled }).(pulumi.BoolPtrOutput)
}

// Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
func (o NetappVolumeOutput) KmsConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.KmsConfig }).(pulumi.StringOutput)
}

// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o NetappVolumeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Flag indicating if the volume will be a large capacity volume or a regular volume.
func (o NetappVolumeOutput) LargeCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.BoolPtrOutput { return v.LargeCapacity }).(pulumi.BoolPtrOutput)
}

// Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
func (o NetappVolumeOutput) LdapEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.BoolOutput { return v.LdapEnabled }).(pulumi.BoolOutput)
}

// Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone
// name.
func (o NetappVolumeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Reports mount instructions for this volume.
func (o NetappVolumeOutput) MountOptions() NetappVolumeMountOptionArrayOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeMountOptionArrayOutput { return v.MountOptions }).(NetappVolumeMountOptionArrayOutput)
}

// Optional. Flag indicating if the volume will have an IP address per node for volumes supporting multiple IP endpoints.
// Only the volume with largeCapacity will be allowed to have multiple endpoints.
func (o NetappVolumeOutput) MultipleEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.BoolPtrOutput { return v.MultipleEndpoints }).(pulumi.BoolPtrOutput)
}

// The name of the volume. Needs to be unique per location.
func (o NetappVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetappVolumeOutput) NetappVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.NetappVolumeId }).(pulumi.StringOutput)
}

// VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'. Inherited from storage pool.
func (o NetappVolumeOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

func (o NetappVolumeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The protocol of the volume. Allowed combinations are '['NFSV3']', '['NFSV4']', '['SMB']', '['NFSV3', 'NFSV4']', '['SMB',
// 'NFSV3']' and '['SMB', 'NFSV4']'. Possible values: ["NFSV3", "NFSV4", "SMB"]
func (o NetappVolumeOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Name of the Private Service Access allocated range. Inherited from storage pool.
func (o NetappVolumeOutput) PsaRange() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.PsaRange }).(pulumi.StringOutput)
}

// Specifies the replica zone for regional volume.
func (o NetappVolumeOutput) ReplicaZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.ReplicaZone }).(pulumi.StringOutput)
}

// Used to create this volume from a snapshot (= cloning) or an backup.
func (o NetappVolumeOutput) RestoreParameters() NetappVolumeRestoreParametersPtrOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeRestoreParametersPtrOutput { return v.RestoreParameters }).(NetappVolumeRestoreParametersPtrOutput)
}

// List of actions that are restricted on this volume. Possible values: ["DELETE"]
func (o NetappVolumeOutput) RestrictedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringArrayOutput { return v.RestrictedActions }).(pulumi.StringArrayOutput)
}

// Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions. Use NTFS to use NTFS ACLs for
// file permissions. Can only be set for volumes which use SMB together with NFS as protocol. Possible values: ["NTFS",
// "UNIX"]
func (o NetappVolumeOutput) SecurityStyle() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.SecurityStyle }).(pulumi.StringOutput)
}

// Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTREME, STANDARD, FLEX.
func (o NetappVolumeOutput) ServiceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.ServiceLevel }).(pulumi.StringOutput)
}

// Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
func (o NetappVolumeOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.ShareName }).(pulumi.StringOutput)
}

// Settings for volumes with SMB access. Possible values: ["ENCRYPT_DATA", "BROWSABLE", "CHANGE_NOTIFY", "NON_BROWSABLE",
// "OPLOCKS", "SHOW_SNAPSHOT", "SHOW_PREVIOUS_VERSIONS", "ACCESS_BASED_ENUMERATION", "CONTINUOUSLY_AVAILABLE"]
func (o NetappVolumeOutput) SmbSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringArrayOutput { return v.SmbSettings }).(pulumi.StringArrayOutput)
}

// If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume's
// snapshots. Will enable "Previous Versions" support for SMB.
func (o NetappVolumeOutput) SnapshotDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.BoolPtrOutput { return v.SnapshotDirectory }).(pulumi.BoolPtrOutput)
}

// Snapshot policy defines the schedule for automatic snapshot creation. To disable automatic snapshot creation you have to
// remove the whole snapshot_policy block.
func (o NetappVolumeOutput) SnapshotPolicy() NetappVolumeSnapshotPolicyPtrOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeSnapshotPolicyPtrOutput { return v.SnapshotPolicy }).(NetappVolumeSnapshotPolicyPtrOutput)
}

// State of the volume.
func (o NetappVolumeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// State details of the volume.
func (o NetappVolumeOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// Name of the storage pool to create the volume in. Pool needs enough spare capacity to accommodate the volume.
func (o NetappVolumeOutput) StoragePool() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.StoragePool }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetappVolumeOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

// Tiering policy for the volume.
func (o NetappVolumeOutput) TieringPolicy() NetappVolumeTieringPolicyPtrOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeTieringPolicyPtrOutput { return v.TieringPolicy }).(NetappVolumeTieringPolicyPtrOutput)
}

func (o NetappVolumeOutput) Timeouts() NetappVolumeTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetappVolume) NetappVolumeTimeoutsPtrOutput { return v.Timeouts }).(NetappVolumeTimeoutsPtrOutput)
}

// Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
func (o NetappVolumeOutput) UnixPermissions() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.UnixPermissions }).(pulumi.StringOutput)
}

// Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
func (o NetappVolumeOutput) UsedGib() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.UsedGib }).(pulumi.StringOutput)
}

// Specifies the active zone for regional volume.
func (o NetappVolumeOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolume) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappVolumeInput)(nil)).Elem(), &NetappVolume{})
	pulumi.RegisterOutputType(NetappVolumeOutput{})
}
