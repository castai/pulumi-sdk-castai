// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerAnalysisNote struct {
	pulumi.CustomResourceState

	// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one
	// AttestationAuthority for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the
	// attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the
	// ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all
	// attached Attestation Occurrences, even if they don't all live in the same project.
	AttestationAuthority    ContainerAnalysisNoteAttestationAuthorityOutput `pulumi:"attestationAuthority"`
	ContainerAnalysisNoteId pulumi.StringOutput                             `pulumi:"containerAnalysisNoteId"`
	// The time this note was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time of expiration for this note. Leave empty if note does not expire.
	ExpirationTime pulumi.StringPtrOutput `pulumi:"expirationTime"`
	// The type of analysis this note describes
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A detailed description of the note
	LongDescription pulumi.StringPtrOutput `pulumi:"longDescription"`
	// The name of the note.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Names of other notes related to this note.
	RelatedNoteNames pulumi.StringArrayOutput `pulumi:"relatedNoteNames"`
	// URLs associated with this note and related metadata.
	RelatedUrls ContainerAnalysisNoteRelatedUrlArrayOutput `pulumi:"relatedUrls"`
	// A one sentence description of the note.
	ShortDescription pulumi.StringPtrOutput                 `pulumi:"shortDescription"`
	Timeouts         ContainerAnalysisNoteTimeoutsPtrOutput `pulumi:"timeouts"`
	// The time this note was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewContainerAnalysisNote registers a new resource with the given unique name, arguments, and options.
func NewContainerAnalysisNote(ctx *pulumi.Context,
	name string, args *ContainerAnalysisNoteArgs, opts ...pulumi.ResourceOption) (*ContainerAnalysisNote, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttestationAuthority == nil {
		return nil, errors.New("invalid value for required argument 'AttestationAuthority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ContainerAnalysisNote
	err = ctx.RegisterPackageResource("google-beta:index/containerAnalysisNote:ContainerAnalysisNote", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerAnalysisNote gets an existing ContainerAnalysisNote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerAnalysisNote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerAnalysisNoteState, opts ...pulumi.ResourceOption) (*ContainerAnalysisNote, error) {
	var resource ContainerAnalysisNote
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/containerAnalysisNote:ContainerAnalysisNote", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerAnalysisNote resources.
type containerAnalysisNoteState struct {
	// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one
	// AttestationAuthority for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the
	// attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the
	// ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all
	// attached Attestation Occurrences, even if they don't all live in the same project.
	AttestationAuthority    *ContainerAnalysisNoteAttestationAuthority `pulumi:"attestationAuthority"`
	ContainerAnalysisNoteId *string                                    `pulumi:"containerAnalysisNoteId"`
	// The time this note was created.
	CreateTime *string `pulumi:"createTime"`
	// Time of expiration for this note. Leave empty if note does not expire.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of analysis this note describes
	Kind *string `pulumi:"kind"`
	// A detailed description of the note
	LongDescription *string `pulumi:"longDescription"`
	// The name of the note.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Names of other notes related to this note.
	RelatedNoteNames []string `pulumi:"relatedNoteNames"`
	// URLs associated with this note and related metadata.
	RelatedUrls []ContainerAnalysisNoteRelatedUrl `pulumi:"relatedUrls"`
	// A one sentence description of the note.
	ShortDescription *string                        `pulumi:"shortDescription"`
	Timeouts         *ContainerAnalysisNoteTimeouts `pulumi:"timeouts"`
	// The time this note was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ContainerAnalysisNoteState struct {
	// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one
	// AttestationAuthority for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the
	// attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the
	// ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all
	// attached Attestation Occurrences, even if they don't all live in the same project.
	AttestationAuthority    ContainerAnalysisNoteAttestationAuthorityPtrInput
	ContainerAnalysisNoteId pulumi.StringPtrInput
	// The time this note was created.
	CreateTime pulumi.StringPtrInput
	// Time of expiration for this note. Leave empty if note does not expire.
	ExpirationTime pulumi.StringPtrInput
	// The type of analysis this note describes
	Kind pulumi.StringPtrInput
	// A detailed description of the note
	LongDescription pulumi.StringPtrInput
	// The name of the note.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Names of other notes related to this note.
	RelatedNoteNames pulumi.StringArrayInput
	// URLs associated with this note and related metadata.
	RelatedUrls ContainerAnalysisNoteRelatedUrlArrayInput
	// A one sentence description of the note.
	ShortDescription pulumi.StringPtrInput
	Timeouts         ContainerAnalysisNoteTimeoutsPtrInput
	// The time this note was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ContainerAnalysisNoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerAnalysisNoteState)(nil)).Elem()
}

type containerAnalysisNoteArgs struct {
	// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one
	// AttestationAuthority for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the
	// attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the
	// ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all
	// attached Attestation Occurrences, even if they don't all live in the same project.
	AttestationAuthority    ContainerAnalysisNoteAttestationAuthority `pulumi:"attestationAuthority"`
	ContainerAnalysisNoteId *string                                   `pulumi:"containerAnalysisNoteId"`
	// Time of expiration for this note. Leave empty if note does not expire.
	ExpirationTime *string `pulumi:"expirationTime"`
	// A detailed description of the note
	LongDescription *string `pulumi:"longDescription"`
	// The name of the note.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Names of other notes related to this note.
	RelatedNoteNames []string `pulumi:"relatedNoteNames"`
	// URLs associated with this note and related metadata.
	RelatedUrls []ContainerAnalysisNoteRelatedUrl `pulumi:"relatedUrls"`
	// A one sentence description of the note.
	ShortDescription *string                        `pulumi:"shortDescription"`
	Timeouts         *ContainerAnalysisNoteTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ContainerAnalysisNote resource.
type ContainerAnalysisNoteArgs struct {
	// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one
	// AttestationAuthority for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the
	// attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the
	// ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all
	// attached Attestation Occurrences, even if they don't all live in the same project.
	AttestationAuthority    ContainerAnalysisNoteAttestationAuthorityInput
	ContainerAnalysisNoteId pulumi.StringPtrInput
	// Time of expiration for this note. Leave empty if note does not expire.
	ExpirationTime pulumi.StringPtrInput
	// A detailed description of the note
	LongDescription pulumi.StringPtrInput
	// The name of the note.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Names of other notes related to this note.
	RelatedNoteNames pulumi.StringArrayInput
	// URLs associated with this note and related metadata.
	RelatedUrls ContainerAnalysisNoteRelatedUrlArrayInput
	// A one sentence description of the note.
	ShortDescription pulumi.StringPtrInput
	Timeouts         ContainerAnalysisNoteTimeoutsPtrInput
}

func (ContainerAnalysisNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerAnalysisNoteArgs)(nil)).Elem()
}

type ContainerAnalysisNoteInput interface {
	pulumi.Input

	ToContainerAnalysisNoteOutput() ContainerAnalysisNoteOutput
	ToContainerAnalysisNoteOutputWithContext(ctx context.Context) ContainerAnalysisNoteOutput
}

func (*ContainerAnalysisNote) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAnalysisNote)(nil)).Elem()
}

func (i *ContainerAnalysisNote) ToContainerAnalysisNoteOutput() ContainerAnalysisNoteOutput {
	return i.ToContainerAnalysisNoteOutputWithContext(context.Background())
}

func (i *ContainerAnalysisNote) ToContainerAnalysisNoteOutputWithContext(ctx context.Context) ContainerAnalysisNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAnalysisNoteOutput)
}

type ContainerAnalysisNoteOutput struct{ *pulumi.OutputState }

func (ContainerAnalysisNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAnalysisNote)(nil)).Elem()
}

func (o ContainerAnalysisNoteOutput) ToContainerAnalysisNoteOutput() ContainerAnalysisNoteOutput {
	return o
}

func (o ContainerAnalysisNoteOutput) ToContainerAnalysisNoteOutputWithContext(ctx context.Context) ContainerAnalysisNoteOutput {
	return o
}

// Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one
// AttestationAuthority for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the
// attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the
// ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all
// attached Attestation Occurrences, even if they don't all live in the same project.
func (o ContainerAnalysisNoteOutput) AttestationAuthority() ContainerAnalysisNoteAttestationAuthorityOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) ContainerAnalysisNoteAttestationAuthorityOutput {
		return v.AttestationAuthority
	}).(ContainerAnalysisNoteAttestationAuthorityOutput)
}

func (o ContainerAnalysisNoteOutput) ContainerAnalysisNoteId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringOutput { return v.ContainerAnalysisNoteId }).(pulumi.StringOutput)
}

// The time this note was created.
func (o ContainerAnalysisNoteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time of expiration for this note. Leave empty if note does not expire.
func (o ContainerAnalysisNoteOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringPtrOutput { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of analysis this note describes
func (o ContainerAnalysisNoteOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A detailed description of the note
func (o ContainerAnalysisNoteOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringPtrOutput { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// The name of the note.
func (o ContainerAnalysisNoteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerAnalysisNoteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Names of other notes related to this note.
func (o ContainerAnalysisNoteOutput) RelatedNoteNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringArrayOutput { return v.RelatedNoteNames }).(pulumi.StringArrayOutput)
}

// URLs associated with this note and related metadata.
func (o ContainerAnalysisNoteOutput) RelatedUrls() ContainerAnalysisNoteRelatedUrlArrayOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) ContainerAnalysisNoteRelatedUrlArrayOutput { return v.RelatedUrls }).(ContainerAnalysisNoteRelatedUrlArrayOutput)
}

// A one sentence description of the note.
func (o ContainerAnalysisNoteOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringPtrOutput { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

func (o ContainerAnalysisNoteOutput) Timeouts() ContainerAnalysisNoteTimeoutsPtrOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) ContainerAnalysisNoteTimeoutsPtrOutput { return v.Timeouts }).(ContainerAnalysisNoteTimeoutsPtrOutput)
}

// The time this note was last updated.
func (o ContainerAnalysisNoteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisNote) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerAnalysisNoteInput)(nil)).Elem(), &ContainerAnalysisNote{})
	pulumi.RegisterOutputType(ContainerAnalysisNoteOutput{})
}
