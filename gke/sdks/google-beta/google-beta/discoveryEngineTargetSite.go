// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DiscoveryEngineTargetSite struct {
	pulumi.CustomResourceState

	// The unique id of the data store.
	DataStoreId                 pulumi.StringOutput `pulumi:"dataStoreId"`
	DiscoveryEngineTargetSiteId pulumi.StringOutput `pulumi:"discoveryEngineTargetSiteId"`
	// If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set
	// to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page
	// if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch pulumi.BoolPtrOutput `pulumi:"exactMatch"`
	// Site search indexing failure reasons.
	FailureReasons DiscoveryEngineTargetSiteFailureReasonArrayOutput `pulumi:"failureReasons"`
	// This is system-generated based on the 'provided_uri_pattern'.
	GeneratedUriPattern pulumi.StringOutput `pulumi:"generatedUriPattern"`
	// The indexing status.
	IndexingStatus pulumi.StringOutput `pulumi:"indexingStatus"`
	// The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full resource name of the target site. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}'.
	// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The user provided URI pattern from which the 'generated_uri_pattern' is generated.
	ProvidedUriPattern pulumi.StringOutput `pulumi:"providedUriPattern"`
	// Root domain of the 'provided_uri_pattern'.
	RootDomainUri pulumi.StringOutput `pulumi:"rootDomainUri"`
	// Site ownership and validity verification status.
	SiteVerificationInfos DiscoveryEngineTargetSiteSiteVerificationInfoArrayOutput `pulumi:"siteVerificationInfos"`
	// The unique id of the target site.
	TargetSiteId pulumi.StringOutput                        `pulumi:"targetSiteId"`
	Timeouts     DiscoveryEngineTargetSiteTimeoutsPtrOutput `pulumi:"timeouts"`
	// The possible target site types. Possible values: ["INCLUDE", "EXCLUDE"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The target site's last updated time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDiscoveryEngineTargetSite registers a new resource with the given unique name, arguments, and options.
func NewDiscoveryEngineTargetSite(ctx *pulumi.Context,
	name string, args *DiscoveryEngineTargetSiteArgs, opts ...pulumi.ResourceOption) (*DiscoveryEngineTargetSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProvidedUriPattern == nil {
		return nil, errors.New("invalid value for required argument 'ProvidedUriPattern'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DiscoveryEngineTargetSite
	err = ctx.RegisterPackageResource("google-beta:index/discoveryEngineTargetSite:DiscoveryEngineTargetSite", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiscoveryEngineTargetSite gets an existing DiscoveryEngineTargetSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiscoveryEngineTargetSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiscoveryEngineTargetSiteState, opts ...pulumi.ResourceOption) (*DiscoveryEngineTargetSite, error) {
	var resource DiscoveryEngineTargetSite
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/discoveryEngineTargetSite:DiscoveryEngineTargetSite", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiscoveryEngineTargetSite resources.
type discoveryEngineTargetSiteState struct {
	// The unique id of the data store.
	DataStoreId                 *string `pulumi:"dataStoreId"`
	DiscoveryEngineTargetSiteId *string `pulumi:"discoveryEngineTargetSiteId"`
	// If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set
	// to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page
	// if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch *bool `pulumi:"exactMatch"`
	// Site search indexing failure reasons.
	FailureReasons []DiscoveryEngineTargetSiteFailureReason `pulumi:"failureReasons"`
	// This is system-generated based on the 'provided_uri_pattern'.
	GeneratedUriPattern *string `pulumi:"generatedUriPattern"`
	// The indexing status.
	IndexingStatus *string `pulumi:"indexingStatus"`
	// The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
	Location *string `pulumi:"location"`
	// The unique full resource name of the target site. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}'.
	// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The user provided URI pattern from which the 'generated_uri_pattern' is generated.
	ProvidedUriPattern *string `pulumi:"providedUriPattern"`
	// Root domain of the 'provided_uri_pattern'.
	RootDomainUri *string `pulumi:"rootDomainUri"`
	// Site ownership and validity verification status.
	SiteVerificationInfos []DiscoveryEngineTargetSiteSiteVerificationInfo `pulumi:"siteVerificationInfos"`
	// The unique id of the target site.
	TargetSiteId *string                            `pulumi:"targetSiteId"`
	Timeouts     *DiscoveryEngineTargetSiteTimeouts `pulumi:"timeouts"`
	// The possible target site types. Possible values: ["INCLUDE", "EXCLUDE"]
	Type *string `pulumi:"type"`
	// The target site's last updated time.
	UpdateTime *string `pulumi:"updateTime"`
}

type DiscoveryEngineTargetSiteState struct {
	// The unique id of the data store.
	DataStoreId                 pulumi.StringPtrInput
	DiscoveryEngineTargetSiteId pulumi.StringPtrInput
	// If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set
	// to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page
	// if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch pulumi.BoolPtrInput
	// Site search indexing failure reasons.
	FailureReasons DiscoveryEngineTargetSiteFailureReasonArrayInput
	// This is system-generated based on the 'provided_uri_pattern'.
	GeneratedUriPattern pulumi.StringPtrInput
	// The indexing status.
	IndexingStatus pulumi.StringPtrInput
	// The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
	Location pulumi.StringPtrInput
	// The unique full resource name of the target site. Values are of the format
	// 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}'.
	// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The user provided URI pattern from which the 'generated_uri_pattern' is generated.
	ProvidedUriPattern pulumi.StringPtrInput
	// Root domain of the 'provided_uri_pattern'.
	RootDomainUri pulumi.StringPtrInput
	// Site ownership and validity verification status.
	SiteVerificationInfos DiscoveryEngineTargetSiteSiteVerificationInfoArrayInput
	// The unique id of the target site.
	TargetSiteId pulumi.StringPtrInput
	Timeouts     DiscoveryEngineTargetSiteTimeoutsPtrInput
	// The possible target site types. Possible values: ["INCLUDE", "EXCLUDE"]
	Type pulumi.StringPtrInput
	// The target site's last updated time.
	UpdateTime pulumi.StringPtrInput
}

func (DiscoveryEngineTargetSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryEngineTargetSiteState)(nil)).Elem()
}

type discoveryEngineTargetSiteArgs struct {
	// The unique id of the data store.
	DataStoreId                 string  `pulumi:"dataStoreId"`
	DiscoveryEngineTargetSiteId *string `pulumi:"discoveryEngineTargetSiteId"`
	// If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set
	// to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page
	// if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch *bool `pulumi:"exactMatch"`
	// The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The user provided URI pattern from which the 'generated_uri_pattern' is generated.
	ProvidedUriPattern string                             `pulumi:"providedUriPattern"`
	Timeouts           *DiscoveryEngineTargetSiteTimeouts `pulumi:"timeouts"`
	// The possible target site types. Possible values: ["INCLUDE", "EXCLUDE"]
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DiscoveryEngineTargetSite resource.
type DiscoveryEngineTargetSiteArgs struct {
	// The unique id of the data store.
	DataStoreId                 pulumi.StringInput
	DiscoveryEngineTargetSiteId pulumi.StringPtrInput
	// If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set
	// to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page
	// if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to
	// be used by the search engine.
	ExactMatch pulumi.BoolPtrInput
	// The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// The user provided URI pattern from which the 'generated_uri_pattern' is generated.
	ProvidedUriPattern pulumi.StringInput
	Timeouts           DiscoveryEngineTargetSiteTimeoutsPtrInput
	// The possible target site types. Possible values: ["INCLUDE", "EXCLUDE"]
	Type pulumi.StringPtrInput
}

func (DiscoveryEngineTargetSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*discoveryEngineTargetSiteArgs)(nil)).Elem()
}

type DiscoveryEngineTargetSiteInput interface {
	pulumi.Input

	ToDiscoveryEngineTargetSiteOutput() DiscoveryEngineTargetSiteOutput
	ToDiscoveryEngineTargetSiteOutputWithContext(ctx context.Context) DiscoveryEngineTargetSiteOutput
}

func (*DiscoveryEngineTargetSite) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryEngineTargetSite)(nil)).Elem()
}

func (i *DiscoveryEngineTargetSite) ToDiscoveryEngineTargetSiteOutput() DiscoveryEngineTargetSiteOutput {
	return i.ToDiscoveryEngineTargetSiteOutputWithContext(context.Background())
}

func (i *DiscoveryEngineTargetSite) ToDiscoveryEngineTargetSiteOutputWithContext(ctx context.Context) DiscoveryEngineTargetSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryEngineTargetSiteOutput)
}

type DiscoveryEngineTargetSiteOutput struct{ *pulumi.OutputState }

func (DiscoveryEngineTargetSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoveryEngineTargetSite)(nil)).Elem()
}

func (o DiscoveryEngineTargetSiteOutput) ToDiscoveryEngineTargetSiteOutput() DiscoveryEngineTargetSiteOutput {
	return o
}

func (o DiscoveryEngineTargetSiteOutput) ToDiscoveryEngineTargetSiteOutputWithContext(ctx context.Context) DiscoveryEngineTargetSiteOutput {
	return o
}

// The unique id of the data store.
func (o DiscoveryEngineTargetSiteOutput) DataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.DataStoreId }).(pulumi.StringOutput)
}

func (o DiscoveryEngineTargetSiteOutput) DiscoveryEngineTargetSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.DiscoveryEngineTargetSiteId }).(pulumi.StringOutput)
}

// If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set
// to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page
// if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to
// be used by the search engine.
func (o DiscoveryEngineTargetSiteOutput) ExactMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.BoolPtrOutput { return v.ExactMatch }).(pulumi.BoolPtrOutput)
}

// Site search indexing failure reasons.
func (o DiscoveryEngineTargetSiteOutput) FailureReasons() DiscoveryEngineTargetSiteFailureReasonArrayOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) DiscoveryEngineTargetSiteFailureReasonArrayOutput {
		return v.FailureReasons
	}).(DiscoveryEngineTargetSiteFailureReasonArrayOutput)
}

// This is system-generated based on the 'provided_uri_pattern'.
func (o DiscoveryEngineTargetSiteOutput) GeneratedUriPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.GeneratedUriPattern }).(pulumi.StringOutput)
}

// The indexing status.
func (o DiscoveryEngineTargetSiteOutput) IndexingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.IndexingStatus }).(pulumi.StringOutput)
}

// The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
func (o DiscoveryEngineTargetSiteOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full resource name of the target site. Values are of the format
// 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/siteSearchEngine/targetSites/{target_site_id}'.
// This field must be a UTF-8 encoded string with a length limit of 1024 characters.
func (o DiscoveryEngineTargetSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DiscoveryEngineTargetSiteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The user provided URI pattern from which the 'generated_uri_pattern' is generated.
func (o DiscoveryEngineTargetSiteOutput) ProvidedUriPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.ProvidedUriPattern }).(pulumi.StringOutput)
}

// Root domain of the 'provided_uri_pattern'.
func (o DiscoveryEngineTargetSiteOutput) RootDomainUri() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.RootDomainUri }).(pulumi.StringOutput)
}

// Site ownership and validity verification status.
func (o DiscoveryEngineTargetSiteOutput) SiteVerificationInfos() DiscoveryEngineTargetSiteSiteVerificationInfoArrayOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) DiscoveryEngineTargetSiteSiteVerificationInfoArrayOutput {
		return v.SiteVerificationInfos
	}).(DiscoveryEngineTargetSiteSiteVerificationInfoArrayOutput)
}

// The unique id of the target site.
func (o DiscoveryEngineTargetSiteOutput) TargetSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.TargetSiteId }).(pulumi.StringOutput)
}

func (o DiscoveryEngineTargetSiteOutput) Timeouts() DiscoveryEngineTargetSiteTimeoutsPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) DiscoveryEngineTargetSiteTimeoutsPtrOutput { return v.Timeouts }).(DiscoveryEngineTargetSiteTimeoutsPtrOutput)
}

// The possible target site types. Possible values: ["INCLUDE", "EXCLUDE"]
func (o DiscoveryEngineTargetSiteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The target site's last updated time.
func (o DiscoveryEngineTargetSiteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoveryEngineTargetSite) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiscoveryEngineTargetSiteInput)(nil)).Elem(), &DiscoveryEngineTargetSite{})
	pulumi.RegisterOutputType(DiscoveryEngineTargetSiteOutput{})
}
