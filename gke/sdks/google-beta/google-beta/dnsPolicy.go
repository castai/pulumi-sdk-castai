// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsPolicy struct {
	pulumi.CustomResourceState

	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig DnsPolicyAlternativeNameServerConfigPtrOutput `pulumi:"alternativeNameServerConfig"`
	Description                 pulumi.StringPtrOutput                        `pulumi:"description"`
	DnsPolicyId                 pulumi.StringOutput                           `pulumi:"dnsPolicyId"`
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding pulumi.BoolPtrOutput `pulumi:"enableInboundForwarding"`
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging pulumi.BoolPtrOutput `pulumi:"enableLogging"`
	// User assigned name for this policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of network names specifying networks to which this policy is applied.
	Networks DnsPolicyNetworkArrayOutput `pulumi:"networks"`
	Project  pulumi.StringOutput         `pulumi:"project"`
	Timeouts DnsPolicyTimeoutsPtrOutput  `pulumi:"timeouts"`
}

// NewDnsPolicy registers a new resource with the given unique name, arguments, and options.
func NewDnsPolicy(ctx *pulumi.Context,
	name string, args *DnsPolicyArgs, opts ...pulumi.ResourceOption) (*DnsPolicy, error) {
	if args == nil {
		args = &DnsPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DnsPolicy
	err = ctx.RegisterPackageResource("google-beta:index/dnsPolicy:DnsPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsPolicy gets an existing DnsPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsPolicyState, opts ...pulumi.ResourceOption) (*DnsPolicy, error) {
	var resource DnsPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dnsPolicy:DnsPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsPolicy resources.
type dnsPolicyState struct {
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig *DnsPolicyAlternativeNameServerConfig `pulumi:"alternativeNameServerConfig"`
	Description                 *string                               `pulumi:"description"`
	DnsPolicyId                 *string                               `pulumi:"dnsPolicyId"`
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding *bool `pulumi:"enableInboundForwarding"`
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging *bool `pulumi:"enableLogging"`
	// User assigned name for this policy.
	Name *string `pulumi:"name"`
	// List of network names specifying networks to which this policy is applied.
	Networks []DnsPolicyNetwork `pulumi:"networks"`
	Project  *string            `pulumi:"project"`
	Timeouts *DnsPolicyTimeouts `pulumi:"timeouts"`
}

type DnsPolicyState struct {
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig DnsPolicyAlternativeNameServerConfigPtrInput
	Description                 pulumi.StringPtrInput
	DnsPolicyId                 pulumi.StringPtrInput
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding pulumi.BoolPtrInput
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging pulumi.BoolPtrInput
	// User assigned name for this policy.
	Name pulumi.StringPtrInput
	// List of network names specifying networks to which this policy is applied.
	Networks DnsPolicyNetworkArrayInput
	Project  pulumi.StringPtrInput
	Timeouts DnsPolicyTimeoutsPtrInput
}

func (DnsPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsPolicyState)(nil)).Elem()
}

type dnsPolicyArgs struct {
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig *DnsPolicyAlternativeNameServerConfig `pulumi:"alternativeNameServerConfig"`
	Description                 *string                               `pulumi:"description"`
	DnsPolicyId                 *string                               `pulumi:"dnsPolicyId"`
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding *bool `pulumi:"enableInboundForwarding"`
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging *bool `pulumi:"enableLogging"`
	// User assigned name for this policy.
	Name *string `pulumi:"name"`
	// List of network names specifying networks to which this policy is applied.
	Networks []DnsPolicyNetwork `pulumi:"networks"`
	Project  *string            `pulumi:"project"`
	Timeouts *DnsPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DnsPolicy resource.
type DnsPolicyArgs struct {
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig DnsPolicyAlternativeNameServerConfigPtrInput
	Description                 pulumi.StringPtrInput
	DnsPolicyId                 pulumi.StringPtrInput
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding pulumi.BoolPtrInput
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging pulumi.BoolPtrInput
	// User assigned name for this policy.
	Name pulumi.StringPtrInput
	// List of network names specifying networks to which this policy is applied.
	Networks DnsPolicyNetworkArrayInput
	Project  pulumi.StringPtrInput
	Timeouts DnsPolicyTimeoutsPtrInput
}

func (DnsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsPolicyArgs)(nil)).Elem()
}

type DnsPolicyInput interface {
	pulumi.Input

	ToDnsPolicyOutput() DnsPolicyOutput
	ToDnsPolicyOutputWithContext(ctx context.Context) DnsPolicyOutput
}

func (*DnsPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsPolicy)(nil)).Elem()
}

func (i *DnsPolicy) ToDnsPolicyOutput() DnsPolicyOutput {
	return i.ToDnsPolicyOutputWithContext(context.Background())
}

func (i *DnsPolicy) ToDnsPolicyOutputWithContext(ctx context.Context) DnsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsPolicyOutput)
}

type DnsPolicyOutput struct{ *pulumi.OutputState }

func (DnsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsPolicy)(nil)).Elem()
}

func (o DnsPolicyOutput) ToDnsPolicyOutput() DnsPolicyOutput {
	return o
}

func (o DnsPolicyOutput) ToDnsPolicyOutputWithContext(ctx context.Context) DnsPolicyOutput {
	return o
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
// server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (o DnsPolicyOutput) AlternativeNameServerConfig() DnsPolicyAlternativeNameServerConfigPtrOutput {
	return o.ApplyT(func(v *DnsPolicy) DnsPolicyAlternativeNameServerConfigPtrOutput { return v.AlternativeNameServerConfig }).(DnsPolicyAlternativeNameServerConfigPtrOutput)
}

func (o DnsPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DnsPolicyOutput) DnsPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsPolicy) pulumi.StringOutput { return v.DnsPolicyId }).(pulumi.StringOutput)
}

// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
func (o DnsPolicyOutput) EnableInboundForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsPolicy) pulumi.BoolPtrOutput { return v.EnableInboundForwarding }).(pulumi.BoolPtrOutput)
}

// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
func (o DnsPolicyOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsPolicy) pulumi.BoolPtrOutput { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

// User assigned name for this policy.
func (o DnsPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of network names specifying networks to which this policy is applied.
func (o DnsPolicyOutput) Networks() DnsPolicyNetworkArrayOutput {
	return o.ApplyT(func(v *DnsPolicy) DnsPolicyNetworkArrayOutput { return v.Networks }).(DnsPolicyNetworkArrayOutput)
}

func (o DnsPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DnsPolicyOutput) Timeouts() DnsPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *DnsPolicy) DnsPolicyTimeoutsPtrOutput { return v.Timeouts }).(DnsPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsPolicyInput)(nil)).Elem(), &DnsPolicy{})
	pulumi.RegisterOutputType(DnsPolicyOutput{})
}
