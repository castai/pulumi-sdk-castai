// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChronicleDataAccessScope struct {
	pulumi.CustomResourceState

	// Optional. Whether or not the scope allows all labels, allow_all and allowed_data_access_labels are mutually exclusive
	// and one of them must be present. denied_data_access_labels can still be used along with allow_all. When combined with
	// denied_data_access_labels, access will be granted to all data that doesn't have labels mentioned in
	// denied_data_access_labels. E.g.: A customer with scope with denied labels A and B and allow_all will be able to see all
	// data except data labeled with A and data labeled with B and data with labels A and B.
	AllowAll pulumi.BoolPtrOutput `pulumi:"allowAll"`
	// The allowed labels for the scope. There has to be at least one label allowed for the scope to be valid. The logical
	// operator for evaluation of the allowed labels is OR. Either allow_all or allowed_data_access_labels needs to be
	// provided. E.g.: A customer with scope with allowed labels A and B will be able to see data with labeled with A or B or
	// (A and B).
	AllowedDataAccessLabels ChronicleDataAccessScopeAllowedDataAccessLabelArrayOutput `pulumi:"allowedDataAccessLabels"`
	// Output only. The user who created the data access scope.
	Author                     pulumi.StringOutput `pulumi:"author"`
	ChronicleDataAccessScopeId pulumi.StringOutput `pulumi:"chronicleDataAccessScopeId"`
	// Output only. The time at which the data access scope was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The user provided scope id which will become the last part of the name of the scope resource. Needs to be
	// compliant with https://google.aip.dev/122
	DataAccessScopeId pulumi.StringOutput `pulumi:"dataAccessScopeId"`
	// Optional. The denied labels for the scope. The logical operator for evaluation of the denied labels is AND. E.g.: A
	// customer with scope with denied labels A and B won't be able to see data labeled with A and data labeled with B and data
	// with labels A and B.
	DeniedDataAccessLabels ChronicleDataAccessScopeDeniedDataAccessLabelArrayOutput `pulumi:"deniedDataAccessLabels"`
	// Optional. A description of the data access scope for a human reader.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Output only. The name to be used for display to customers of the data access scope.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// Output only. The user who last updated the data access scope.
	LastEditor pulumi.StringOutput `pulumi:"lastEditor"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL
	// parameters. Format: projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
	Name     pulumi.StringOutput                       `pulumi:"name"`
	Project  pulumi.StringOutput                       `pulumi:"project"`
	Timeouts ChronicleDataAccessScopeTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. The time at which the data access scope was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewChronicleDataAccessScope registers a new resource with the given unique name, arguments, and options.
func NewChronicleDataAccessScope(ctx *pulumi.Context,
	name string, args *ChronicleDataAccessScopeArgs, opts ...pulumi.ResourceOption) (*ChronicleDataAccessScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessScopeId == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessScopeId'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ChronicleDataAccessScope
	err = ctx.RegisterPackageResource("google-beta:index/chronicleDataAccessScope:ChronicleDataAccessScope", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChronicleDataAccessScope gets an existing ChronicleDataAccessScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChronicleDataAccessScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChronicleDataAccessScopeState, opts ...pulumi.ResourceOption) (*ChronicleDataAccessScope, error) {
	var resource ChronicleDataAccessScope
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/chronicleDataAccessScope:ChronicleDataAccessScope", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChronicleDataAccessScope resources.
type chronicleDataAccessScopeState struct {
	// Optional. Whether or not the scope allows all labels, allow_all and allowed_data_access_labels are mutually exclusive
	// and one of them must be present. denied_data_access_labels can still be used along with allow_all. When combined with
	// denied_data_access_labels, access will be granted to all data that doesn't have labels mentioned in
	// denied_data_access_labels. E.g.: A customer with scope with denied labels A and B and allow_all will be able to see all
	// data except data labeled with A and data labeled with B and data with labels A and B.
	AllowAll *bool `pulumi:"allowAll"`
	// The allowed labels for the scope. There has to be at least one label allowed for the scope to be valid. The logical
	// operator for evaluation of the allowed labels is OR. Either allow_all or allowed_data_access_labels needs to be
	// provided. E.g.: A customer with scope with allowed labels A and B will be able to see data with labeled with A or B or
	// (A and B).
	AllowedDataAccessLabels []ChronicleDataAccessScopeAllowedDataAccessLabel `pulumi:"allowedDataAccessLabels"`
	// Output only. The user who created the data access scope.
	Author                     *string `pulumi:"author"`
	ChronicleDataAccessScopeId *string `pulumi:"chronicleDataAccessScopeId"`
	// Output only. The time at which the data access scope was created.
	CreateTime *string `pulumi:"createTime"`
	// Required. The user provided scope id which will become the last part of the name of the scope resource. Needs to be
	// compliant with https://google.aip.dev/122
	DataAccessScopeId *string `pulumi:"dataAccessScopeId"`
	// Optional. The denied labels for the scope. The logical operator for evaluation of the denied labels is AND. E.g.: A
	// customer with scope with denied labels A and B won't be able to see data labeled with A and data labeled with B and data
	// with labels A and B.
	DeniedDataAccessLabels []ChronicleDataAccessScopeDeniedDataAccessLabel `pulumi:"deniedDataAccessLabels"`
	// Optional. A description of the data access scope for a human reader.
	Description *string `pulumi:"description"`
	// Output only. The name to be used for display to customers of the data access scope.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance *string `pulumi:"instance"`
	// Output only. The user who last updated the data access scope.
	LastEditor *string `pulumi:"lastEditor"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location *string `pulumi:"location"`
	// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL
	// parameters. Format: projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
	Name     *string                           `pulumi:"name"`
	Project  *string                           `pulumi:"project"`
	Timeouts *ChronicleDataAccessScopeTimeouts `pulumi:"timeouts"`
	// Output only. The time at which the data access scope was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ChronicleDataAccessScopeState struct {
	// Optional. Whether or not the scope allows all labels, allow_all and allowed_data_access_labels are mutually exclusive
	// and one of them must be present. denied_data_access_labels can still be used along with allow_all. When combined with
	// denied_data_access_labels, access will be granted to all data that doesn't have labels mentioned in
	// denied_data_access_labels. E.g.: A customer with scope with denied labels A and B and allow_all will be able to see all
	// data except data labeled with A and data labeled with B and data with labels A and B.
	AllowAll pulumi.BoolPtrInput
	// The allowed labels for the scope. There has to be at least one label allowed for the scope to be valid. The logical
	// operator for evaluation of the allowed labels is OR. Either allow_all or allowed_data_access_labels needs to be
	// provided. E.g.: A customer with scope with allowed labels A and B will be able to see data with labeled with A or B or
	// (A and B).
	AllowedDataAccessLabels ChronicleDataAccessScopeAllowedDataAccessLabelArrayInput
	// Output only. The user who created the data access scope.
	Author                     pulumi.StringPtrInput
	ChronicleDataAccessScopeId pulumi.StringPtrInput
	// Output only. The time at which the data access scope was created.
	CreateTime pulumi.StringPtrInput
	// Required. The user provided scope id which will become the last part of the name of the scope resource. Needs to be
	// compliant with https://google.aip.dev/122
	DataAccessScopeId pulumi.StringPtrInput
	// Optional. The denied labels for the scope. The logical operator for evaluation of the denied labels is AND. E.g.: A
	// customer with scope with denied labels A and B won't be able to see data labeled with A and data labeled with B and data
	// with labels A and B.
	DeniedDataAccessLabels ChronicleDataAccessScopeDeniedDataAccessLabelArrayInput
	// Optional. A description of the data access scope for a human reader.
	Description pulumi.StringPtrInput
	// Output only. The name to be used for display to customers of the data access scope.
	DisplayName pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringPtrInput
	// Output only. The user who last updated the data access scope.
	LastEditor pulumi.StringPtrInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location pulumi.StringPtrInput
	// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL
	// parameters. Format: projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts ChronicleDataAccessScopeTimeoutsPtrInput
	// Output only. The time at which the data access scope was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ChronicleDataAccessScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*chronicleDataAccessScopeState)(nil)).Elem()
}

type chronicleDataAccessScopeArgs struct {
	// Optional. Whether or not the scope allows all labels, allow_all and allowed_data_access_labels are mutually exclusive
	// and one of them must be present. denied_data_access_labels can still be used along with allow_all. When combined with
	// denied_data_access_labels, access will be granted to all data that doesn't have labels mentioned in
	// denied_data_access_labels. E.g.: A customer with scope with denied labels A and B and allow_all will be able to see all
	// data except data labeled with A and data labeled with B and data with labels A and B.
	AllowAll *bool `pulumi:"allowAll"`
	// The allowed labels for the scope. There has to be at least one label allowed for the scope to be valid. The logical
	// operator for evaluation of the allowed labels is OR. Either allow_all or allowed_data_access_labels needs to be
	// provided. E.g.: A customer with scope with allowed labels A and B will be able to see data with labeled with A or B or
	// (A and B).
	AllowedDataAccessLabels    []ChronicleDataAccessScopeAllowedDataAccessLabel `pulumi:"allowedDataAccessLabels"`
	ChronicleDataAccessScopeId *string                                          `pulumi:"chronicleDataAccessScopeId"`
	// Required. The user provided scope id which will become the last part of the name of the scope resource. Needs to be
	// compliant with https://google.aip.dev/122
	DataAccessScopeId string `pulumi:"dataAccessScopeId"`
	// Optional. The denied labels for the scope. The logical operator for evaluation of the denied labels is AND. E.g.: A
	// customer with scope with denied labels A and B won't be able to see data labeled with A and data labeled with B and data
	// with labels A and B.
	DeniedDataAccessLabels []ChronicleDataAccessScopeDeniedDataAccessLabel `pulumi:"deniedDataAccessLabels"`
	// Optional. A description of the data access scope for a human reader.
	Description *string `pulumi:"description"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location string                            `pulumi:"location"`
	Project  *string                           `pulumi:"project"`
	Timeouts *ChronicleDataAccessScopeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ChronicleDataAccessScope resource.
type ChronicleDataAccessScopeArgs struct {
	// Optional. Whether or not the scope allows all labels, allow_all and allowed_data_access_labels are mutually exclusive
	// and one of them must be present. denied_data_access_labels can still be used along with allow_all. When combined with
	// denied_data_access_labels, access will be granted to all data that doesn't have labels mentioned in
	// denied_data_access_labels. E.g.: A customer with scope with denied labels A and B and allow_all will be able to see all
	// data except data labeled with A and data labeled with B and data with labels A and B.
	AllowAll pulumi.BoolPtrInput
	// The allowed labels for the scope. There has to be at least one label allowed for the scope to be valid. The logical
	// operator for evaluation of the allowed labels is OR. Either allow_all or allowed_data_access_labels needs to be
	// provided. E.g.: A customer with scope with allowed labels A and B will be able to see data with labeled with A or B or
	// (A and B).
	AllowedDataAccessLabels    ChronicleDataAccessScopeAllowedDataAccessLabelArrayInput
	ChronicleDataAccessScopeId pulumi.StringPtrInput
	// Required. The user provided scope id which will become the last part of the name of the scope resource. Needs to be
	// compliant with https://google.aip.dev/122
	DataAccessScopeId pulumi.StringInput
	// Optional. The denied labels for the scope. The logical operator for evaluation of the denied labels is AND. E.g.: A
	// customer with scope with denied labels A and B won't be able to see data labeled with A and data labeled with B and data
	// with labels A and B.
	DeniedDataAccessLabels ChronicleDataAccessScopeDeniedDataAccessLabelArrayInput
	// Optional. A description of the data access scope for a human reader.
	Description pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	Timeouts ChronicleDataAccessScopeTimeoutsPtrInput
}

func (ChronicleDataAccessScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chronicleDataAccessScopeArgs)(nil)).Elem()
}

type ChronicleDataAccessScopeInput interface {
	pulumi.Input

	ToChronicleDataAccessScopeOutput() ChronicleDataAccessScopeOutput
	ToChronicleDataAccessScopeOutputWithContext(ctx context.Context) ChronicleDataAccessScopeOutput
}

func (*ChronicleDataAccessScope) ElementType() reflect.Type {
	return reflect.TypeOf((**ChronicleDataAccessScope)(nil)).Elem()
}

func (i *ChronicleDataAccessScope) ToChronicleDataAccessScopeOutput() ChronicleDataAccessScopeOutput {
	return i.ToChronicleDataAccessScopeOutputWithContext(context.Background())
}

func (i *ChronicleDataAccessScope) ToChronicleDataAccessScopeOutputWithContext(ctx context.Context) ChronicleDataAccessScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChronicleDataAccessScopeOutput)
}

type ChronicleDataAccessScopeOutput struct{ *pulumi.OutputState }

func (ChronicleDataAccessScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChronicleDataAccessScope)(nil)).Elem()
}

func (o ChronicleDataAccessScopeOutput) ToChronicleDataAccessScopeOutput() ChronicleDataAccessScopeOutput {
	return o
}

func (o ChronicleDataAccessScopeOutput) ToChronicleDataAccessScopeOutputWithContext(ctx context.Context) ChronicleDataAccessScopeOutput {
	return o
}

// Optional. Whether or not the scope allows all labels, allow_all and allowed_data_access_labels are mutually exclusive
// and one of them must be present. denied_data_access_labels can still be used along with allow_all. When combined with
// denied_data_access_labels, access will be granted to all data that doesn't have labels mentioned in
// denied_data_access_labels. E.g.: A customer with scope with denied labels A and B and allow_all will be able to see all
// data except data labeled with A and data labeled with B and data with labels A and B.
func (o ChronicleDataAccessScopeOutput) AllowAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.BoolPtrOutput { return v.AllowAll }).(pulumi.BoolPtrOutput)
}

// The allowed labels for the scope. There has to be at least one label allowed for the scope to be valid. The logical
// operator for evaluation of the allowed labels is OR. Either allow_all or allowed_data_access_labels needs to be
// provided. E.g.: A customer with scope with allowed labels A and B will be able to see data with labeled with A or B or
// (A and B).
func (o ChronicleDataAccessScopeOutput) AllowedDataAccessLabels() ChronicleDataAccessScopeAllowedDataAccessLabelArrayOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) ChronicleDataAccessScopeAllowedDataAccessLabelArrayOutput {
		return v.AllowedDataAccessLabels
	}).(ChronicleDataAccessScopeAllowedDataAccessLabelArrayOutput)
}

// Output only. The user who created the data access scope.
func (o ChronicleDataAccessScopeOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o ChronicleDataAccessScopeOutput) ChronicleDataAccessScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.ChronicleDataAccessScopeId }).(pulumi.StringOutput)
}

// Output only. The time at which the data access scope was created.
func (o ChronicleDataAccessScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The user provided scope id which will become the last part of the name of the scope resource. Needs to be
// compliant with https://google.aip.dev/122
func (o ChronicleDataAccessScopeOutput) DataAccessScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.DataAccessScopeId }).(pulumi.StringOutput)
}

// Optional. The denied labels for the scope. The logical operator for evaluation of the denied labels is AND. E.g.: A
// customer with scope with denied labels A and B won't be able to see data labeled with A and data labeled with B and data
// with labels A and B.
func (o ChronicleDataAccessScopeOutput) DeniedDataAccessLabels() ChronicleDataAccessScopeDeniedDataAccessLabelArrayOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) ChronicleDataAccessScopeDeniedDataAccessLabelArrayOutput {
		return v.DeniedDataAccessLabels
	}).(ChronicleDataAccessScopeDeniedDataAccessLabelArrayOutput)
}

// Optional. A description of the data access scope for a human reader.
func (o ChronicleDataAccessScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Output only. The name to be used for display to customers of the data access scope.
func (o ChronicleDataAccessScopeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier for the Chronicle instance, which is the same as the customer ID.
func (o ChronicleDataAccessScopeOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// Output only. The user who last updated the data access scope.
func (o ChronicleDataAccessScopeOutput) LastEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.LastEditor }).(pulumi.StringOutput)
}

// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
// "europe-west2".
func (o ChronicleDataAccessScopeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL
// parameters. Format: projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
func (o ChronicleDataAccessScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ChronicleDataAccessScopeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ChronicleDataAccessScopeOutput) Timeouts() ChronicleDataAccessScopeTimeoutsPtrOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) ChronicleDataAccessScopeTimeoutsPtrOutput { return v.Timeouts }).(ChronicleDataAccessScopeTimeoutsPtrOutput)
}

// Output only. The time at which the data access scope was last updated.
func (o ChronicleDataAccessScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleDataAccessScope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChronicleDataAccessScopeInput)(nil)).Elem(), &ChronicleDataAccessScope{})
	pulumi.RegisterOutputType(ChronicleDataAccessScopeOutput{})
}
