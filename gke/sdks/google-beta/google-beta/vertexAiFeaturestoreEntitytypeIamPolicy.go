// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreEntitytypeIamPolicy struct {
	pulumi.CustomResourceState

	Entitytype                                pulumi.StringOutput `pulumi:"entitytype"`
	Etag                                      pulumi.StringOutput `pulumi:"etag"`
	Featurestore                              pulumi.StringOutput `pulumi:"featurestore"`
	PolicyData                                pulumi.StringOutput `pulumi:"policyData"`
	VertexAiFeaturestoreEntitytypeIamPolicyId pulumi.StringOutput `pulumi:"vertexAiFeaturestoreEntitytypeIamPolicyId"`
}

// NewVertexAiFeaturestoreEntitytypeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreEntitytypeIamPolicy(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreEntitytypeIamPolicyArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entitytype == nil {
		return nil, errors.New("invalid value for required argument 'Entitytype'")
	}
	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreEntitytypeIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeIamPolicy:VertexAiFeaturestoreEntitytypeIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreEntitytypeIamPolicy gets an existing VertexAiFeaturestoreEntitytypeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreEntitytypeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreEntitytypeIamPolicyState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeIamPolicy, error) {
	var resource VertexAiFeaturestoreEntitytypeIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeIamPolicy:VertexAiFeaturestoreEntitytypeIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreEntitytypeIamPolicy resources.
type vertexAiFeaturestoreEntitytypeIamPolicyState struct {
	Entitytype                                *string `pulumi:"entitytype"`
	Etag                                      *string `pulumi:"etag"`
	Featurestore                              *string `pulumi:"featurestore"`
	PolicyData                                *string `pulumi:"policyData"`
	VertexAiFeaturestoreEntitytypeIamPolicyId *string `pulumi:"vertexAiFeaturestoreEntitytypeIamPolicyId"`
}

type VertexAiFeaturestoreEntitytypeIamPolicyState struct {
	Entitytype                                pulumi.StringPtrInput
	Etag                                      pulumi.StringPtrInput
	Featurestore                              pulumi.StringPtrInput
	PolicyData                                pulumi.StringPtrInput
	VertexAiFeaturestoreEntitytypeIamPolicyId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeIamPolicyState)(nil)).Elem()
}

type vertexAiFeaturestoreEntitytypeIamPolicyArgs struct {
	Entitytype                                string  `pulumi:"entitytype"`
	Featurestore                              string  `pulumi:"featurestore"`
	PolicyData                                string  `pulumi:"policyData"`
	VertexAiFeaturestoreEntitytypeIamPolicyId *string `pulumi:"vertexAiFeaturestoreEntitytypeIamPolicyId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreEntitytypeIamPolicy resource.
type VertexAiFeaturestoreEntitytypeIamPolicyArgs struct {
	Entitytype                                pulumi.StringInput
	Featurestore                              pulumi.StringInput
	PolicyData                                pulumi.StringInput
	VertexAiFeaturestoreEntitytypeIamPolicyId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeIamPolicyArgs)(nil)).Elem()
}

type VertexAiFeaturestoreEntitytypeIamPolicyInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreEntitytypeIamPolicyOutput() VertexAiFeaturestoreEntitytypeIamPolicyOutput
	ToVertexAiFeaturestoreEntitytypeIamPolicyOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamPolicyOutput
}

func (*VertexAiFeaturestoreEntitytypeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeIamPolicy)(nil)).Elem()
}

func (i *VertexAiFeaturestoreEntitytypeIamPolicy) ToVertexAiFeaturestoreEntitytypeIamPolicyOutput() VertexAiFeaturestoreEntitytypeIamPolicyOutput {
	return i.ToVertexAiFeaturestoreEntitytypeIamPolicyOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreEntitytypeIamPolicy) ToVertexAiFeaturestoreEntitytypeIamPolicyOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreEntitytypeIamPolicyOutput)
}

type VertexAiFeaturestoreEntitytypeIamPolicyOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreEntitytypeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeIamPolicy)(nil)).Elem()
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) ToVertexAiFeaturestoreEntitytypeIamPolicyOutput() VertexAiFeaturestoreEntitytypeIamPolicyOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) ToVertexAiFeaturestoreEntitytypeIamPolicyOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamPolicyOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) Entitytype() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamPolicy) pulumi.StringOutput { return v.Entitytype }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamPolicy) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamPolicyOutput) VertexAiFeaturestoreEntitytypeIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamPolicy) pulumi.StringOutput {
		return v.VertexAiFeaturestoreEntitytypeIamPolicyId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreEntitytypeIamPolicyInput)(nil)).Elem(), &VertexAiFeaturestoreEntitytypeIamPolicy{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreEntitytypeIamPolicyOutput{})
}
