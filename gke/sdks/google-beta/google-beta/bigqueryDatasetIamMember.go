// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryDatasetIamMember struct {
	pulumi.CustomResourceState

	BigqueryDatasetIamMemberId pulumi.StringOutput                        `pulumi:"bigqueryDatasetIamMemberId"`
	Condition                  BigqueryDatasetIamMemberConditionPtrOutput `pulumi:"condition"`
	DatasetId                  pulumi.StringOutput                        `pulumi:"datasetId"`
	Etag                       pulumi.StringOutput                        `pulumi:"etag"`
	Member                     pulumi.StringOutput                        `pulumi:"member"`
	Project                    pulumi.StringOutput                        `pulumi:"project"`
	Role                       pulumi.StringOutput                        `pulumi:"role"`
}

// NewBigqueryDatasetIamMember registers a new resource with the given unique name, arguments, and options.
func NewBigqueryDatasetIamMember(ctx *pulumi.Context,
	name string, args *BigqueryDatasetIamMemberArgs, opts ...pulumi.ResourceOption) (*BigqueryDatasetIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryDatasetIamMember
	err = ctx.RegisterPackageResource("google-beta:index/bigqueryDatasetIamMember:BigqueryDatasetIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryDatasetIamMember gets an existing BigqueryDatasetIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryDatasetIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryDatasetIamMemberState, opts ...pulumi.ResourceOption) (*BigqueryDatasetIamMember, error) {
	var resource BigqueryDatasetIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigqueryDatasetIamMember:BigqueryDatasetIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryDatasetIamMember resources.
type bigqueryDatasetIamMemberState struct {
	BigqueryDatasetIamMemberId *string                            `pulumi:"bigqueryDatasetIamMemberId"`
	Condition                  *BigqueryDatasetIamMemberCondition `pulumi:"condition"`
	DatasetId                  *string                            `pulumi:"datasetId"`
	Etag                       *string                            `pulumi:"etag"`
	Member                     *string                            `pulumi:"member"`
	Project                    *string                            `pulumi:"project"`
	Role                       *string                            `pulumi:"role"`
}

type BigqueryDatasetIamMemberState struct {
	BigqueryDatasetIamMemberId pulumi.StringPtrInput
	Condition                  BigqueryDatasetIamMemberConditionPtrInput
	DatasetId                  pulumi.StringPtrInput
	Etag                       pulumi.StringPtrInput
	Member                     pulumi.StringPtrInput
	Project                    pulumi.StringPtrInput
	Role                       pulumi.StringPtrInput
}

func (BigqueryDatasetIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryDatasetIamMemberState)(nil)).Elem()
}

type bigqueryDatasetIamMemberArgs struct {
	BigqueryDatasetIamMemberId *string                            `pulumi:"bigqueryDatasetIamMemberId"`
	Condition                  *BigqueryDatasetIamMemberCondition `pulumi:"condition"`
	DatasetId                  string                             `pulumi:"datasetId"`
	Member                     string                             `pulumi:"member"`
	Project                    *string                            `pulumi:"project"`
	Role                       string                             `pulumi:"role"`
}

// The set of arguments for constructing a BigqueryDatasetIamMember resource.
type BigqueryDatasetIamMemberArgs struct {
	BigqueryDatasetIamMemberId pulumi.StringPtrInput
	Condition                  BigqueryDatasetIamMemberConditionPtrInput
	DatasetId                  pulumi.StringInput
	Member                     pulumi.StringInput
	Project                    pulumi.StringPtrInput
	Role                       pulumi.StringInput
}

func (BigqueryDatasetIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryDatasetIamMemberArgs)(nil)).Elem()
}

type BigqueryDatasetIamMemberInput interface {
	pulumi.Input

	ToBigqueryDatasetIamMemberOutput() BigqueryDatasetIamMemberOutput
	ToBigqueryDatasetIamMemberOutputWithContext(ctx context.Context) BigqueryDatasetIamMemberOutput
}

func (*BigqueryDatasetIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryDatasetIamMember)(nil)).Elem()
}

func (i *BigqueryDatasetIamMember) ToBigqueryDatasetIamMemberOutput() BigqueryDatasetIamMemberOutput {
	return i.ToBigqueryDatasetIamMemberOutputWithContext(context.Background())
}

func (i *BigqueryDatasetIamMember) ToBigqueryDatasetIamMemberOutputWithContext(ctx context.Context) BigqueryDatasetIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryDatasetIamMemberOutput)
}

type BigqueryDatasetIamMemberOutput struct{ *pulumi.OutputState }

func (BigqueryDatasetIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryDatasetIamMember)(nil)).Elem()
}

func (o BigqueryDatasetIamMemberOutput) ToBigqueryDatasetIamMemberOutput() BigqueryDatasetIamMemberOutput {
	return o
}

func (o BigqueryDatasetIamMemberOutput) ToBigqueryDatasetIamMemberOutputWithContext(ctx context.Context) BigqueryDatasetIamMemberOutput {
	return o
}

func (o BigqueryDatasetIamMemberOutput) BigqueryDatasetIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) pulumi.StringOutput { return v.BigqueryDatasetIamMemberId }).(pulumi.StringOutput)
}

func (o BigqueryDatasetIamMemberOutput) Condition() BigqueryDatasetIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) BigqueryDatasetIamMemberConditionPtrOutput { return v.Condition }).(BigqueryDatasetIamMemberConditionPtrOutput)
}

func (o BigqueryDatasetIamMemberOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

func (o BigqueryDatasetIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigqueryDatasetIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o BigqueryDatasetIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o BigqueryDatasetIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDatasetIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryDatasetIamMemberInput)(nil)).Elem(), &BigqueryDatasetIamMember{})
	pulumi.RegisterOutputType(BigqueryDatasetIamMemberOutput{})
}
