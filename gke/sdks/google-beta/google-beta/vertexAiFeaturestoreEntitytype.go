// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreEntitytype struct {
	pulumi.CustomResourceState

	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Description of the EntityType.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore pulumi.StringOutput `pulumi:"featurestore"`
	// A set of key/value label pairs to assign to this EntityType. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The default monitoring configuration for all Features under this EntityType. If this is populated with
	// [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise,
	// snapshot analysis monitoring is disabled.
	MonitoringConfig VertexAiFeaturestoreEntitytypeMonitoringConfigPtrOutput `pulumi:"monitoringConfig"`
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
	// character cannot be a number.
	Name pulumi.StringOutput `pulumi:"name"`
	// Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
	// storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
	// since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
	OfflineStorageTtlDays pulumi.Float64PtrOutput `pulumi:"offlineStorageTtlDays"`
	// The region of the EntityType.
	Region pulumi.StringOutput `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                          `pulumi:"terraformLabels"`
	Timeouts        VertexAiFeaturestoreEntitytypeTimeoutsPtrOutput `pulumi:"timeouts"`
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime                       pulumi.StringOutput `pulumi:"updateTime"`
	VertexAiFeaturestoreEntitytypeId pulumi.StringOutput `pulumi:"vertexAiFeaturestoreEntitytypeId"`
}

// NewVertexAiFeaturestoreEntitytype registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreEntitytype(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreEntitytypeArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytype, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreEntitytype
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreEntitytype:VertexAiFeaturestoreEntitytype", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreEntitytype gets an existing VertexAiFeaturestoreEntitytype resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreEntitytype(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreEntitytypeState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytype, error) {
	var resource VertexAiFeaturestoreEntitytype
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreEntitytype:VertexAiFeaturestoreEntitytype", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreEntitytype resources.
type vertexAiFeaturestoreEntitytypeState struct {
	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Description of the EntityType.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore *string `pulumi:"featurestore"`
	// A set of key/value label pairs to assign to this EntityType. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The default monitoring configuration for all Features under this EntityType. If this is populated with
	// [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise,
	// snapshot analysis monitoring is disabled.
	MonitoringConfig *VertexAiFeaturestoreEntitytypeMonitoringConfig `pulumi:"monitoringConfig"`
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
	// character cannot be a number.
	Name *string `pulumi:"name"`
	// Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
	// storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
	// since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
	OfflineStorageTtlDays *float64 `pulumi:"offlineStorageTtlDays"`
	// The region of the EntityType.
	Region *string `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                       `pulumi:"terraformLabels"`
	Timeouts        *VertexAiFeaturestoreEntitytypeTimeouts `pulumi:"timeouts"`
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime                       *string `pulumi:"updateTime"`
	VertexAiFeaturestoreEntitytypeId *string `pulumi:"vertexAiFeaturestoreEntitytypeId"`
}

type VertexAiFeaturestoreEntitytypeState struct {
	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// Optional. Description of the EntityType.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore pulumi.StringPtrInput
	// A set of key/value label pairs to assign to this EntityType. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The default monitoring configuration for all Features under this EntityType. If this is populated with
	// [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise,
	// snapshot analysis monitoring is disabled.
	MonitoringConfig VertexAiFeaturestoreEntitytypeMonitoringConfigPtrInput
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
	// character cannot be a number.
	Name pulumi.StringPtrInput
	// Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
	// storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
	// since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
	OfflineStorageTtlDays pulumi.Float64PtrInput
	// The region of the EntityType.
	Region pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        VertexAiFeaturestoreEntitytypeTimeoutsPtrInput
	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime                       pulumi.StringPtrInput
	VertexAiFeaturestoreEntitytypeId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeState)(nil)).Elem()
}

type vertexAiFeaturestoreEntitytypeArgs struct {
	// Optional. Description of the EntityType.
	Description *string `pulumi:"description"`
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore string `pulumi:"featurestore"`
	// A set of key/value label pairs to assign to this EntityType. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The default monitoring configuration for all Features under this EntityType. If this is populated with
	// [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise,
	// snapshot analysis monitoring is disabled.
	MonitoringConfig *VertexAiFeaturestoreEntitytypeMonitoringConfig `pulumi:"monitoringConfig"`
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
	// character cannot be a number.
	Name *string `pulumi:"name"`
	// Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
	// storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
	// since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
	OfflineStorageTtlDays            *float64                                `pulumi:"offlineStorageTtlDays"`
	Timeouts                         *VertexAiFeaturestoreEntitytypeTimeouts `pulumi:"timeouts"`
	VertexAiFeaturestoreEntitytypeId *string                                 `pulumi:"vertexAiFeaturestoreEntitytypeId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreEntitytype resource.
type VertexAiFeaturestoreEntitytypeArgs struct {
	// Optional. Description of the EntityType.
	Description pulumi.StringPtrInput
	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore pulumi.StringInput
	// A set of key/value label pairs to assign to this EntityType. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The default monitoring configuration for all Features under this EntityType. If this is populated with
	// [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise,
	// snapshot analysis monitoring is disabled.
	MonitoringConfig VertexAiFeaturestoreEntitytypeMonitoringConfigPtrInput
	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
	// character cannot be a number.
	Name pulumi.StringPtrInput
	// Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
	// storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
	// since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
	OfflineStorageTtlDays            pulumi.Float64PtrInput
	Timeouts                         VertexAiFeaturestoreEntitytypeTimeoutsPtrInput
	VertexAiFeaturestoreEntitytypeId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeArgs)(nil)).Elem()
}

type VertexAiFeaturestoreEntitytypeInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreEntitytypeOutput() VertexAiFeaturestoreEntitytypeOutput
	ToVertexAiFeaturestoreEntitytypeOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeOutput
}

func (*VertexAiFeaturestoreEntitytype) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytype)(nil)).Elem()
}

func (i *VertexAiFeaturestoreEntitytype) ToVertexAiFeaturestoreEntitytypeOutput() VertexAiFeaturestoreEntitytypeOutput {
	return i.ToVertexAiFeaturestoreEntitytypeOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreEntitytype) ToVertexAiFeaturestoreEntitytypeOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreEntitytypeOutput)
}

type VertexAiFeaturestoreEntitytypeOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreEntitytypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytype)(nil)).Elem()
}

func (o VertexAiFeaturestoreEntitytypeOutput) ToVertexAiFeaturestoreEntitytypeOutput() VertexAiFeaturestoreEntitytypeOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeOutput) ToVertexAiFeaturestoreEntitytypeOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeOutput {
	return o
}

// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
// nine fractional digits.
func (o VertexAiFeaturestoreEntitytypeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of the EntityType.
func (o VertexAiFeaturestoreEntitytypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VertexAiFeaturestoreEntitytypeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Used to perform consistent read-modify-write updates.
func (o VertexAiFeaturestoreEntitytypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
func (o VertexAiFeaturestoreEntitytypeOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

// A set of key/value label pairs to assign to this EntityType. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o VertexAiFeaturestoreEntitytypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The default monitoring configuration for all Features under this EntityType. If this is populated with
// [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise,
// snapshot analysis monitoring is disabled.
func (o VertexAiFeaturestoreEntitytypeOutput) MonitoringConfig() VertexAiFeaturestoreEntitytypeMonitoringConfigPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) VertexAiFeaturestoreEntitytypeMonitoringConfigPtrOutput {
		return v.MonitoringConfig
	}).(VertexAiFeaturestoreEntitytypeMonitoringConfigPtrOutput)
}

// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
// character cannot be a number.
func (o VertexAiFeaturestoreEntitytypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
// storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
// since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
func (o VertexAiFeaturestoreEntitytypeOutput) OfflineStorageTtlDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.Float64PtrOutput { return v.OfflineStorageTtlDays }).(pulumi.Float64PtrOutput)
}

// The region of the EntityType.
func (o VertexAiFeaturestoreEntitytypeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o VertexAiFeaturestoreEntitytypeOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o VertexAiFeaturestoreEntitytypeOutput) Timeouts() VertexAiFeaturestoreEntitytypeTimeoutsPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) VertexAiFeaturestoreEntitytypeTimeoutsPtrOutput {
		return v.Timeouts
	}).(VertexAiFeaturestoreEntitytypeTimeoutsPtrOutput)
}

// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
// to nine fractional digits.
func (o VertexAiFeaturestoreEntitytypeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeOutput) VertexAiFeaturestoreEntitytypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytype) pulumi.StringOutput { return v.VertexAiFeaturestoreEntitytypeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreEntitytypeInput)(nil)).Elem(), &VertexAiFeaturestoreEntitytype{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreEntitytypeOutput{})
}
