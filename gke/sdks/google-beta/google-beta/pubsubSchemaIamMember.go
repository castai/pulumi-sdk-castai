// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubSchemaIamMember struct {
	pulumi.CustomResourceState

	Condition               PubsubSchemaIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                    pulumi.StringOutput                     `pulumi:"etag"`
	Member                  pulumi.StringOutput                     `pulumi:"member"`
	Project                 pulumi.StringOutput                     `pulumi:"project"`
	PubsubSchemaIamMemberId pulumi.StringOutput                     `pulumi:"pubsubSchemaIamMemberId"`
	Role                    pulumi.StringOutput                     `pulumi:"role"`
	Schema                  pulumi.StringOutput                     `pulumi:"schema"`
}

// NewPubsubSchemaIamMember registers a new resource with the given unique name, arguments, and options.
func NewPubsubSchemaIamMember(ctx *pulumi.Context,
	name string, args *PubsubSchemaIamMemberArgs, opts ...pulumi.ResourceOption) (*PubsubSchemaIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubSchemaIamMember
	err = ctx.RegisterPackageResource("google-beta:index/pubsubSchemaIamMember:PubsubSchemaIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubSchemaIamMember gets an existing PubsubSchemaIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubSchemaIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubSchemaIamMemberState, opts ...pulumi.ResourceOption) (*PubsubSchemaIamMember, error) {
	var resource PubsubSchemaIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/pubsubSchemaIamMember:PubsubSchemaIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubSchemaIamMember resources.
type pubsubSchemaIamMemberState struct {
	Condition               *PubsubSchemaIamMemberCondition `pulumi:"condition"`
	Etag                    *string                         `pulumi:"etag"`
	Member                  *string                         `pulumi:"member"`
	Project                 *string                         `pulumi:"project"`
	PubsubSchemaIamMemberId *string                         `pulumi:"pubsubSchemaIamMemberId"`
	Role                    *string                         `pulumi:"role"`
	Schema                  *string                         `pulumi:"schema"`
}

type PubsubSchemaIamMemberState struct {
	Condition               PubsubSchemaIamMemberConditionPtrInput
	Etag                    pulumi.StringPtrInput
	Member                  pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	PubsubSchemaIamMemberId pulumi.StringPtrInput
	Role                    pulumi.StringPtrInput
	Schema                  pulumi.StringPtrInput
}

func (PubsubSchemaIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubSchemaIamMemberState)(nil)).Elem()
}

type pubsubSchemaIamMemberArgs struct {
	Condition               *PubsubSchemaIamMemberCondition `pulumi:"condition"`
	Member                  string                          `pulumi:"member"`
	Project                 *string                         `pulumi:"project"`
	PubsubSchemaIamMemberId *string                         `pulumi:"pubsubSchemaIamMemberId"`
	Role                    string                          `pulumi:"role"`
	Schema                  string                          `pulumi:"schema"`
}

// The set of arguments for constructing a PubsubSchemaIamMember resource.
type PubsubSchemaIamMemberArgs struct {
	Condition               PubsubSchemaIamMemberConditionPtrInput
	Member                  pulumi.StringInput
	Project                 pulumi.StringPtrInput
	PubsubSchemaIamMemberId pulumi.StringPtrInput
	Role                    pulumi.StringInput
	Schema                  pulumi.StringInput
}

func (PubsubSchemaIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubSchemaIamMemberArgs)(nil)).Elem()
}

type PubsubSchemaIamMemberInput interface {
	pulumi.Input

	ToPubsubSchemaIamMemberOutput() PubsubSchemaIamMemberOutput
	ToPubsubSchemaIamMemberOutputWithContext(ctx context.Context) PubsubSchemaIamMemberOutput
}

func (*PubsubSchemaIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubSchemaIamMember)(nil)).Elem()
}

func (i *PubsubSchemaIamMember) ToPubsubSchemaIamMemberOutput() PubsubSchemaIamMemberOutput {
	return i.ToPubsubSchemaIamMemberOutputWithContext(context.Background())
}

func (i *PubsubSchemaIamMember) ToPubsubSchemaIamMemberOutputWithContext(ctx context.Context) PubsubSchemaIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubSchemaIamMemberOutput)
}

type PubsubSchemaIamMemberOutput struct{ *pulumi.OutputState }

func (PubsubSchemaIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubSchemaIamMember)(nil)).Elem()
}

func (o PubsubSchemaIamMemberOutput) ToPubsubSchemaIamMemberOutput() PubsubSchemaIamMemberOutput {
	return o
}

func (o PubsubSchemaIamMemberOutput) ToPubsubSchemaIamMemberOutputWithContext(ctx context.Context) PubsubSchemaIamMemberOutput {
	return o
}

func (o PubsubSchemaIamMemberOutput) Condition() PubsubSchemaIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) PubsubSchemaIamMemberConditionPtrOutput { return v.Condition }).(PubsubSchemaIamMemberConditionPtrOutput)
}

func (o PubsubSchemaIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamMemberOutput) PubsubSchemaIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) pulumi.StringOutput { return v.PubsubSchemaIamMemberId }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o PubsubSchemaIamMemberOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubSchemaIamMember) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubSchemaIamMemberInput)(nil)).Elem(), &PubsubSchemaIamMember{})
	pulumi.RegisterOutputType(PubsubSchemaIamMemberOutput{})
}
