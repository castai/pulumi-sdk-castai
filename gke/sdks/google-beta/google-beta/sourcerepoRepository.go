// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourcerepoRepository struct {
	pulumi.CustomResourceState

	// If set to true, skip repository creation if a repository with the same name already exists.
	CreateIgnoreAlreadyExists pulumi.BoolPtrOutput `pulumi:"createIgnoreAlreadyExists"`
	// Resource name of the repository, of the form '{{repo}}'. The repo name may contain slashes. eg, 'name/with/slash'
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
	PubsubConfigs SourcerepoRepositoryPubsubConfigArrayOutput `pulumi:"pubsubConfigs"`
	// The disk usage of the repo, in bytes.
	Size                   pulumi.Float64Output                  `pulumi:"size"`
	SourcerepoRepositoryId pulumi.StringOutput                   `pulumi:"sourcerepoRepositoryId"`
	Timeouts               SourcerepoRepositoryTimeoutsPtrOutput `pulumi:"timeouts"`
	// URL to clone the repository from Google Cloud Source Repositories.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSourcerepoRepository registers a new resource with the given unique name, arguments, and options.
func NewSourcerepoRepository(ctx *pulumi.Context,
	name string, args *SourcerepoRepositoryArgs, opts ...pulumi.ResourceOption) (*SourcerepoRepository, error) {
	if args == nil {
		args = &SourcerepoRepositoryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SourcerepoRepository
	err = ctx.RegisterPackageResource("google-beta:index/sourcerepoRepository:SourcerepoRepository", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourcerepoRepository gets an existing SourcerepoRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourcerepoRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourcerepoRepositoryState, opts ...pulumi.ResourceOption) (*SourcerepoRepository, error) {
	var resource SourcerepoRepository
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sourcerepoRepository:SourcerepoRepository", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourcerepoRepository resources.
type sourcerepoRepositoryState struct {
	// If set to true, skip repository creation if a repository with the same name already exists.
	CreateIgnoreAlreadyExists *bool `pulumi:"createIgnoreAlreadyExists"`
	// Resource name of the repository, of the form '{{repo}}'. The repo name may contain slashes. eg, 'name/with/slash'
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
	PubsubConfigs []SourcerepoRepositoryPubsubConfig `pulumi:"pubsubConfigs"`
	// The disk usage of the repo, in bytes.
	Size                   *float64                      `pulumi:"size"`
	SourcerepoRepositoryId *string                       `pulumi:"sourcerepoRepositoryId"`
	Timeouts               *SourcerepoRepositoryTimeouts `pulumi:"timeouts"`
	// URL to clone the repository from Google Cloud Source Repositories.
	Url *string `pulumi:"url"`
}

type SourcerepoRepositoryState struct {
	// If set to true, skip repository creation if a repository with the same name already exists.
	CreateIgnoreAlreadyExists pulumi.BoolPtrInput
	// Resource name of the repository, of the form '{{repo}}'. The repo name may contain slashes. eg, 'name/with/slash'
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
	PubsubConfigs SourcerepoRepositoryPubsubConfigArrayInput
	// The disk usage of the repo, in bytes.
	Size                   pulumi.Float64PtrInput
	SourcerepoRepositoryId pulumi.StringPtrInput
	Timeouts               SourcerepoRepositoryTimeoutsPtrInput
	// URL to clone the repository from Google Cloud Source Repositories.
	Url pulumi.StringPtrInput
}

func (SourcerepoRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcerepoRepositoryState)(nil)).Elem()
}

type sourcerepoRepositoryArgs struct {
	// If set to true, skip repository creation if a repository with the same name already exists.
	CreateIgnoreAlreadyExists *bool `pulumi:"createIgnoreAlreadyExists"`
	// Resource name of the repository, of the form '{{repo}}'. The repo name may contain slashes. eg, 'name/with/slash'
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
	PubsubConfigs          []SourcerepoRepositoryPubsubConfig `pulumi:"pubsubConfigs"`
	SourcerepoRepositoryId *string                            `pulumi:"sourcerepoRepositoryId"`
	Timeouts               *SourcerepoRepositoryTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a SourcerepoRepository resource.
type SourcerepoRepositoryArgs struct {
	// If set to true, skip repository creation if a repository with the same name already exists.
	CreateIgnoreAlreadyExists pulumi.BoolPtrInput
	// Resource name of the repository, of the form '{{repo}}'. The repo name may contain slashes. eg, 'name/with/slash'
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
	PubsubConfigs          SourcerepoRepositoryPubsubConfigArrayInput
	SourcerepoRepositoryId pulumi.StringPtrInput
	Timeouts               SourcerepoRepositoryTimeoutsPtrInput
}

func (SourcerepoRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcerepoRepositoryArgs)(nil)).Elem()
}

type SourcerepoRepositoryInput interface {
	pulumi.Input

	ToSourcerepoRepositoryOutput() SourcerepoRepositoryOutput
	ToSourcerepoRepositoryOutputWithContext(ctx context.Context) SourcerepoRepositoryOutput
}

func (*SourcerepoRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcerepoRepository)(nil)).Elem()
}

func (i *SourcerepoRepository) ToSourcerepoRepositoryOutput() SourcerepoRepositoryOutput {
	return i.ToSourcerepoRepositoryOutputWithContext(context.Background())
}

func (i *SourcerepoRepository) ToSourcerepoRepositoryOutputWithContext(ctx context.Context) SourcerepoRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcerepoRepositoryOutput)
}

type SourcerepoRepositoryOutput struct{ *pulumi.OutputState }

func (SourcerepoRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcerepoRepository)(nil)).Elem()
}

func (o SourcerepoRepositoryOutput) ToSourcerepoRepositoryOutput() SourcerepoRepositoryOutput {
	return o
}

func (o SourcerepoRepositoryOutput) ToSourcerepoRepositoryOutputWithContext(ctx context.Context) SourcerepoRepositoryOutput {
	return o
}

// If set to true, skip repository creation if a repository with the same name already exists.
func (o SourcerepoRepositoryOutput) CreateIgnoreAlreadyExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourcerepoRepository) pulumi.BoolPtrOutput { return v.CreateIgnoreAlreadyExists }).(pulumi.BoolPtrOutput)
}

// Resource name of the repository, of the form '{{repo}}'. The repo name may contain slashes. eg, 'name/with/slash'
func (o SourcerepoRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepository) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
func (o SourcerepoRepositoryOutput) PubsubConfigs() SourcerepoRepositoryPubsubConfigArrayOutput {
	return o.ApplyT(func(v *SourcerepoRepository) SourcerepoRepositoryPubsubConfigArrayOutput { return v.PubsubConfigs }).(SourcerepoRepositoryPubsubConfigArrayOutput)
}

// The disk usage of the repo, in bytes.
func (o SourcerepoRepositoryOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *SourcerepoRepository) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

func (o SourcerepoRepositoryOutput) SourcerepoRepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepository) pulumi.StringOutput { return v.SourcerepoRepositoryId }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryOutput) Timeouts() SourcerepoRepositoryTimeoutsPtrOutput {
	return o.ApplyT(func(v *SourcerepoRepository) SourcerepoRepositoryTimeoutsPtrOutput { return v.Timeouts }).(SourcerepoRepositoryTimeoutsPtrOutput)
}

// URL to clone the repository from Google Cloud Source Repositories.
func (o SourcerepoRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepository) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourcerepoRepositoryInput)(nil)).Elem(), &SourcerepoRepository{})
	pulumi.RegisterOutputType(SourcerepoRepositoryOutput{})
}
