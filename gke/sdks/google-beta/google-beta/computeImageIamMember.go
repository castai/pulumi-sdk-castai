// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeImageIamMember struct {
	pulumi.CustomResourceState

	ComputeImageIamMemberId pulumi.StringOutput                     `pulumi:"computeImageIamMemberId"`
	Condition               ComputeImageIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                    pulumi.StringOutput                     `pulumi:"etag"`
	Image                   pulumi.StringOutput                     `pulumi:"image"`
	Member                  pulumi.StringOutput                     `pulumi:"member"`
	Project                 pulumi.StringOutput                     `pulumi:"project"`
	Role                    pulumi.StringOutput                     `pulumi:"role"`
}

// NewComputeImageIamMember registers a new resource with the given unique name, arguments, and options.
func NewComputeImageIamMember(ctx *pulumi.Context,
	name string, args *ComputeImageIamMemberArgs, opts ...pulumi.ResourceOption) (*ComputeImageIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeImageIamMember
	err = ctx.RegisterPackageResource("google-beta:index/computeImageIamMember:ComputeImageIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeImageIamMember gets an existing ComputeImageIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeImageIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeImageIamMemberState, opts ...pulumi.ResourceOption) (*ComputeImageIamMember, error) {
	var resource ComputeImageIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeImageIamMember:ComputeImageIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeImageIamMember resources.
type computeImageIamMemberState struct {
	ComputeImageIamMemberId *string                         `pulumi:"computeImageIamMemberId"`
	Condition               *ComputeImageIamMemberCondition `pulumi:"condition"`
	Etag                    *string                         `pulumi:"etag"`
	Image                   *string                         `pulumi:"image"`
	Member                  *string                         `pulumi:"member"`
	Project                 *string                         `pulumi:"project"`
	Role                    *string                         `pulumi:"role"`
}

type ComputeImageIamMemberState struct {
	ComputeImageIamMemberId pulumi.StringPtrInput
	Condition               ComputeImageIamMemberConditionPtrInput
	Etag                    pulumi.StringPtrInput
	Image                   pulumi.StringPtrInput
	Member                  pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Role                    pulumi.StringPtrInput
}

func (ComputeImageIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeImageIamMemberState)(nil)).Elem()
}

type computeImageIamMemberArgs struct {
	ComputeImageIamMemberId *string                         `pulumi:"computeImageIamMemberId"`
	Condition               *ComputeImageIamMemberCondition `pulumi:"condition"`
	Image                   string                          `pulumi:"image"`
	Member                  string                          `pulumi:"member"`
	Project                 *string                         `pulumi:"project"`
	Role                    string                          `pulumi:"role"`
}

// The set of arguments for constructing a ComputeImageIamMember resource.
type ComputeImageIamMemberArgs struct {
	ComputeImageIamMemberId pulumi.StringPtrInput
	Condition               ComputeImageIamMemberConditionPtrInput
	Image                   pulumi.StringInput
	Member                  pulumi.StringInput
	Project                 pulumi.StringPtrInput
	Role                    pulumi.StringInput
}

func (ComputeImageIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeImageIamMemberArgs)(nil)).Elem()
}

type ComputeImageIamMemberInput interface {
	pulumi.Input

	ToComputeImageIamMemberOutput() ComputeImageIamMemberOutput
	ToComputeImageIamMemberOutputWithContext(ctx context.Context) ComputeImageIamMemberOutput
}

func (*ComputeImageIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeImageIamMember)(nil)).Elem()
}

func (i *ComputeImageIamMember) ToComputeImageIamMemberOutput() ComputeImageIamMemberOutput {
	return i.ToComputeImageIamMemberOutputWithContext(context.Background())
}

func (i *ComputeImageIamMember) ToComputeImageIamMemberOutputWithContext(ctx context.Context) ComputeImageIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeImageIamMemberOutput)
}

type ComputeImageIamMemberOutput struct{ *pulumi.OutputState }

func (ComputeImageIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeImageIamMember)(nil)).Elem()
}

func (o ComputeImageIamMemberOutput) ToComputeImageIamMemberOutput() ComputeImageIamMemberOutput {
	return o
}

func (o ComputeImageIamMemberOutput) ToComputeImageIamMemberOutputWithContext(ctx context.Context) ComputeImageIamMemberOutput {
	return o
}

func (o ComputeImageIamMemberOutput) ComputeImageIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) pulumi.StringOutput { return v.ComputeImageIamMemberId }).(pulumi.StringOutput)
}

func (o ComputeImageIamMemberOutput) Condition() ComputeImageIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) ComputeImageIamMemberConditionPtrOutput { return v.Condition }).(ComputeImageIamMemberConditionPtrOutput)
}

func (o ComputeImageIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeImageIamMemberOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

func (o ComputeImageIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ComputeImageIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeImageIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeImageIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeImageIamMemberInput)(nil)).Elem(), &ComputeImageIamMember{})
	pulumi.RegisterOutputType(ComputeImageIamMemberOutput{})
}
