// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataprocGdcServiceInstance struct {
	pulumi.CustomResourceState

	// The timestamp when the resource was created.
	CreateTime                   pulumi.StringOutput `pulumi:"createTime"`
	DataprocGdcServiceInstanceId pulumi.StringOutput `pulumi:"dataprocGdcServiceInstanceId"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName     pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it
	// will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings
	// applied.
	EffectiveServiceAccount pulumi.StringOutput `pulumi:"effectiveServiceAccount"`
	// Gdce cluster information.
	GdceCluster DataprocGdcServiceInstanceGdceClusterPtrOutput `pulumi:"gdceCluster"`
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking. **Note**:
	// This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the
	// field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The name of the service instance.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Whether the service instance is currently reconciling. True if the current state of the resource does not match the
	// intended state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The intended state to which the service instance is reconciling. Possible values: * 'CREATING' * 'ACTIVE' *
	// 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' * 'STARTING' * 'UPDATING' * 'FAILED'
	RequestedState pulumi.StringOutput `pulumi:"requestedState"`
	// Requested service account to associate with ServiceInstance.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// Id of the service instance.
	ServiceInstanceId pulumi.StringOutput `pulumi:"serviceInstanceId"`
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig DataprocGdcServiceInstanceSparkServiceInstanceConfigPtrOutput `pulumi:"sparkServiceInstanceConfig"`
	// The current state. Possible values: * 'CREATING' * 'ACTIVE' * 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' *
	// 'STARTING' * 'UPDATING' * 'FAILED'
	State pulumi.StringOutput `pulumi:"state"`
	// A message explaining the current state.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                      `pulumi:"terraformLabels"`
	Timeouts        DataprocGdcServiceInstanceTimeoutsPtrOutput `pulumi:"timeouts"`
	// System generated unique identifier for this service instance, formatted as UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataprocGdcServiceInstance registers a new resource with the given unique name, arguments, and options.
func NewDataprocGdcServiceInstance(ctx *pulumi.Context,
	name string, args *DataprocGdcServiceInstanceArgs, opts ...pulumi.ResourceOption) (*DataprocGdcServiceInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceInstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataprocGdcServiceInstance
	err = ctx.RegisterPackageResource("google-beta:index/dataprocGdcServiceInstance:DataprocGdcServiceInstance", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataprocGdcServiceInstance gets an existing DataprocGdcServiceInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataprocGdcServiceInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataprocGdcServiceInstanceState, opts ...pulumi.ResourceOption) (*DataprocGdcServiceInstance, error) {
	var resource DataprocGdcServiceInstance
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataprocGdcServiceInstance:DataprocGdcServiceInstance", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataprocGdcServiceInstance resources.
type dataprocGdcServiceInstanceState struct {
	// The timestamp when the resource was created.
	CreateTime                   *string `pulumi:"createTime"`
	DataprocGdcServiceInstanceId *string `pulumi:"dataprocGdcServiceInstanceId"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it
	// will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings
	// applied.
	EffectiveServiceAccount *string `pulumi:"effectiveServiceAccount"`
	// Gdce cluster information.
	GdceCluster *DataprocGdcServiceInstanceGdceCluster `pulumi:"gdceCluster"`
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking. **Note**:
	// This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the
	// field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of the resource.
	Location *string `pulumi:"location"`
	// Identifier. The name of the service instance.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Whether the service instance is currently reconciling. True if the current state of the resource does not match the
	// intended state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling *bool `pulumi:"reconciling"`
	// The intended state to which the service instance is reconciling. Possible values: * 'CREATING' * 'ACTIVE' *
	// 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' * 'STARTING' * 'UPDATING' * 'FAILED'
	RequestedState *string `pulumi:"requestedState"`
	// Requested service account to associate with ServiceInstance.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Id of the service instance.
	ServiceInstanceId *string `pulumi:"serviceInstanceId"`
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig *DataprocGdcServiceInstanceSparkServiceInstanceConfig `pulumi:"sparkServiceInstanceConfig"`
	// The current state. Possible values: * 'CREATING' * 'ACTIVE' * 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' *
	// 'STARTING' * 'UPDATING' * 'FAILED'
	State *string `pulumi:"state"`
	// A message explaining the current state.
	StateMessage *string `pulumi:"stateMessage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                   `pulumi:"terraformLabels"`
	Timeouts        *DataprocGdcServiceInstanceTimeouts `pulumi:"timeouts"`
	// System generated unique identifier for this service instance, formatted as UUID4.
	Uid *string `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DataprocGdcServiceInstanceState struct {
	// The timestamp when the resource was created.
	CreateTime                   pulumi.StringPtrInput
	DataprocGdcServiceInstanceId pulumi.StringPtrInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it
	// will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings
	// applied.
	EffectiveServiceAccount pulumi.StringPtrInput
	// Gdce cluster information.
	GdceCluster DataprocGdcServiceInstanceGdceClusterPtrInput
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking. **Note**:
	// This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the
	// field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of the resource.
	Location pulumi.StringPtrInput
	// Identifier. The name of the service instance.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Whether the service instance is currently reconciling. True if the current state of the resource does not match the
	// intended state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling pulumi.BoolPtrInput
	// The intended state to which the service instance is reconciling. Possible values: * 'CREATING' * 'ACTIVE' *
	// 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' * 'STARTING' * 'UPDATING' * 'FAILED'
	RequestedState pulumi.StringPtrInput
	// Requested service account to associate with ServiceInstance.
	ServiceAccount pulumi.StringPtrInput
	// Id of the service instance.
	ServiceInstanceId pulumi.StringPtrInput
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig DataprocGdcServiceInstanceSparkServiceInstanceConfigPtrInput
	// The current state. Possible values: * 'CREATING' * 'ACTIVE' * 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' *
	// 'STARTING' * 'UPDATING' * 'FAILED'
	State pulumi.StringPtrInput
	// A message explaining the current state.
	StateMessage pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DataprocGdcServiceInstanceTimeoutsPtrInput
	// System generated unique identifier for this service instance, formatted as UUID4.
	Uid pulumi.StringPtrInput
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (DataprocGdcServiceInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocGdcServiceInstanceState)(nil)).Elem()
}

type dataprocGdcServiceInstanceArgs struct {
	DataprocGdcServiceInstanceId *string `pulumi:"dataprocGdcServiceInstanceId"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName *string `pulumi:"displayName"`
	// Gdce cluster information.
	GdceCluster *DataprocGdcServiceInstanceGdceCluster `pulumi:"gdceCluster"`
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking. **Note**:
	// This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the
	// field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location of the resource.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Requested service account to associate with ServiceInstance.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Id of the service instance.
	ServiceInstanceId string `pulumi:"serviceInstanceId"`
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig *DataprocGdcServiceInstanceSparkServiceInstanceConfig `pulumi:"sparkServiceInstanceConfig"`
	Timeouts                   *DataprocGdcServiceInstanceTimeouts                   `pulumi:"timeouts"`
}

// The set of arguments for constructing a DataprocGdcServiceInstance resource.
type DataprocGdcServiceInstanceArgs struct {
	DataprocGdcServiceInstanceId pulumi.StringPtrInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName pulumi.StringPtrInput
	// Gdce cluster information.
	GdceCluster DataprocGdcServiceInstanceGdceClusterPtrInput
	// The labels to associate with this service instance. Labels may be used for filtering and billing tracking. **Note**:
	// This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the
	// field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location of the resource.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// Requested service account to associate with ServiceInstance.
	ServiceAccount pulumi.StringPtrInput
	// Id of the service instance.
	ServiceInstanceId pulumi.StringInput
	// Spark-specific service instance configuration.
	SparkServiceInstanceConfig DataprocGdcServiceInstanceSparkServiceInstanceConfigPtrInput
	Timeouts                   DataprocGdcServiceInstanceTimeoutsPtrInput
}

func (DataprocGdcServiceInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocGdcServiceInstanceArgs)(nil)).Elem()
}

type DataprocGdcServiceInstanceInput interface {
	pulumi.Input

	ToDataprocGdcServiceInstanceOutput() DataprocGdcServiceInstanceOutput
	ToDataprocGdcServiceInstanceOutputWithContext(ctx context.Context) DataprocGdcServiceInstanceOutput
}

func (*DataprocGdcServiceInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocGdcServiceInstance)(nil)).Elem()
}

func (i *DataprocGdcServiceInstance) ToDataprocGdcServiceInstanceOutput() DataprocGdcServiceInstanceOutput {
	return i.ToDataprocGdcServiceInstanceOutputWithContext(context.Background())
}

func (i *DataprocGdcServiceInstance) ToDataprocGdcServiceInstanceOutputWithContext(ctx context.Context) DataprocGdcServiceInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocGdcServiceInstanceOutput)
}

type DataprocGdcServiceInstanceOutput struct{ *pulumi.OutputState }

func (DataprocGdcServiceInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocGdcServiceInstance)(nil)).Elem()
}

func (o DataprocGdcServiceInstanceOutput) ToDataprocGdcServiceInstanceOutput() DataprocGdcServiceInstanceOutput {
	return o
}

func (o DataprocGdcServiceInstanceOutput) ToDataprocGdcServiceInstanceOutputWithContext(ctx context.Context) DataprocGdcServiceInstanceOutput {
	return o
}

// The timestamp when the resource was created.
func (o DataprocGdcServiceInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DataprocGdcServiceInstanceOutput) DataprocGdcServiceInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.DataprocGdcServiceInstanceId }).(pulumi.StringOutput)
}

// User-provided human-readable name to be used in user interfaces.
func (o DataprocGdcServiceInstanceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o DataprocGdcServiceInstanceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it
// will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings
// applied.
func (o DataprocGdcServiceInstanceOutput) EffectiveServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.EffectiveServiceAccount }).(pulumi.StringOutput)
}

// Gdce cluster information.
func (o DataprocGdcServiceInstanceOutput) GdceCluster() DataprocGdcServiceInstanceGdceClusterPtrOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) DataprocGdcServiceInstanceGdceClusterPtrOutput {
		return v.GdceCluster
	}).(DataprocGdcServiceInstanceGdceClusterPtrOutput)
}

// The labels to associate with this service instance. Labels may be used for filtering and billing tracking. **Note**:
// This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the
// field 'effective_labels' for all of the labels present on the resource.
func (o DataprocGdcServiceInstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location of the resource.
func (o DataprocGdcServiceInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The name of the service instance.
func (o DataprocGdcServiceInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataprocGdcServiceInstanceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Whether the service instance is currently reconciling. True if the current state of the resource does not match the
// intended state, and the system is working to reconcile them, whether or not the change was user initiated.
func (o DataprocGdcServiceInstanceOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The intended state to which the service instance is reconciling. Possible values: * 'CREATING' * 'ACTIVE' *
// 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' * 'STARTING' * 'UPDATING' * 'FAILED'
func (o DataprocGdcServiceInstanceOutput) RequestedState() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.RequestedState }).(pulumi.StringOutput)
}

// Requested service account to associate with ServiceInstance.
func (o DataprocGdcServiceInstanceOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Id of the service instance.
func (o DataprocGdcServiceInstanceOutput) ServiceInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.ServiceInstanceId }).(pulumi.StringOutput)
}

// Spark-specific service instance configuration.
func (o DataprocGdcServiceInstanceOutput) SparkServiceInstanceConfig() DataprocGdcServiceInstanceSparkServiceInstanceConfigPtrOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) DataprocGdcServiceInstanceSparkServiceInstanceConfigPtrOutput {
		return v.SparkServiceInstanceConfig
	}).(DataprocGdcServiceInstanceSparkServiceInstanceConfigPtrOutput)
}

// The current state. Possible values: * 'CREATING' * 'ACTIVE' * 'DISCONNECTED' * 'DELETING' * 'STOPPING' * 'STOPPED' *
// 'STARTING' * 'UPDATING' * 'FAILED'
func (o DataprocGdcServiceInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A message explaining the current state.
func (o DataprocGdcServiceInstanceOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DataprocGdcServiceInstanceOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DataprocGdcServiceInstanceOutput) Timeouts() DataprocGdcServiceInstanceTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) DataprocGdcServiceInstanceTimeoutsPtrOutput { return v.Timeouts }).(DataprocGdcServiceInstanceTimeoutsPtrOutput)
}

// System generated unique identifier for this service instance, formatted as UUID4.
func (o DataprocGdcServiceInstanceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when the resource was most recently updated.
func (o DataprocGdcServiceInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcServiceInstance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocGdcServiceInstanceInput)(nil)).Elem(), &DataprocGdcServiceInstance{})
	pulumi.RegisterOutputType(DataprocGdcServiceInstanceOutput{})
}
