// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoggingLogView struct {
	pulumi.CustomResourceState

	// The bucket of the resource
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Output only. The creation timestamp of the view.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes this view.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND
	// of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id
	// For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1,
	// europe-west1.
	Location         pulumi.StringOutput `pulumi:"location"`
	LoggingLogViewId pulumi.StringOutput `pulumi:"loggingLogViewId"`
	// The resource name of the view. For example: \'projects/my-project/locations/global/buckets/my-bucket/views/my-view\'
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the resource.
	Parent   pulumi.StringOutput             `pulumi:"parent"`
	Timeouts LoggingLogViewTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. The last update timestamp of the view.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewLoggingLogView registers a new resource with the given unique name, arguments, and options.
func NewLoggingLogView(ctx *pulumi.Context,
	name string, args *LoggingLogViewArgs, opts ...pulumi.ResourceOption) (*LoggingLogView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource LoggingLogView
	err = ctx.RegisterPackageResource("google-beta:index/loggingLogView:LoggingLogView", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingLogView gets an existing LoggingLogView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingLogView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingLogViewState, opts ...pulumi.ResourceOption) (*LoggingLogView, error) {
	var resource LoggingLogView
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/loggingLogView:LoggingLogView", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingLogView resources.
type loggingLogViewState struct {
	// The bucket of the resource
	Bucket *string `pulumi:"bucket"`
	// Output only. The creation timestamp of the view.
	CreateTime *string `pulumi:"createTime"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND
	// of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id
	// For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter *string `pulumi:"filter"`
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1,
	// europe-west1.
	Location         *string `pulumi:"location"`
	LoggingLogViewId *string `pulumi:"loggingLogViewId"`
	// The resource name of the view. For example: \'projects/my-project/locations/global/buckets/my-bucket/views/my-view\'
	Name *string `pulumi:"name"`
	// The parent of the resource.
	Parent   *string                 `pulumi:"parent"`
	Timeouts *LoggingLogViewTimeouts `pulumi:"timeouts"`
	// Output only. The last update timestamp of the view.
	UpdateTime *string `pulumi:"updateTime"`
}

type LoggingLogViewState struct {
	// The bucket of the resource
	Bucket pulumi.StringPtrInput
	// Output only. The creation timestamp of the view.
	CreateTime pulumi.StringPtrInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND
	// of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id
	// For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringPtrInput
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1,
	// europe-west1.
	Location         pulumi.StringPtrInput
	LoggingLogViewId pulumi.StringPtrInput
	// The resource name of the view. For example: \'projects/my-project/locations/global/buckets/my-bucket/views/my-view\'
	Name pulumi.StringPtrInput
	// The parent of the resource.
	Parent   pulumi.StringPtrInput
	Timeouts LoggingLogViewTimeoutsPtrInput
	// Output only. The last update timestamp of the view.
	UpdateTime pulumi.StringPtrInput
}

func (LoggingLogViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingLogViewState)(nil)).Elem()
}

type loggingLogViewArgs struct {
	// The bucket of the resource
	Bucket string `pulumi:"bucket"`
	// Describes this view.
	Description *string `pulumi:"description"`
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND
	// of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id
	// For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter *string `pulumi:"filter"`
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1,
	// europe-west1.
	Location         *string `pulumi:"location"`
	LoggingLogViewId *string `pulumi:"loggingLogViewId"`
	// The resource name of the view. For example: \'projects/my-project/locations/global/buckets/my-bucket/views/my-view\'
	Name *string `pulumi:"name"`
	// The parent of the resource.
	Parent   *string                 `pulumi:"parent"`
	Timeouts *LoggingLogViewTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a LoggingLogView resource.
type LoggingLogViewArgs struct {
	// The bucket of the resource
	Bucket pulumi.StringInput
	// Describes this view.
	Description pulumi.StringPtrInput
	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND
	// of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id
	// For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	Filter pulumi.StringPtrInput
	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1,
	// europe-west1.
	Location         pulumi.StringPtrInput
	LoggingLogViewId pulumi.StringPtrInput
	// The resource name of the view. For example: \'projects/my-project/locations/global/buckets/my-bucket/views/my-view\'
	Name pulumi.StringPtrInput
	// The parent of the resource.
	Parent   pulumi.StringPtrInput
	Timeouts LoggingLogViewTimeoutsPtrInput
}

func (LoggingLogViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingLogViewArgs)(nil)).Elem()
}

type LoggingLogViewInput interface {
	pulumi.Input

	ToLoggingLogViewOutput() LoggingLogViewOutput
	ToLoggingLogViewOutputWithContext(ctx context.Context) LoggingLogViewOutput
}

func (*LoggingLogView) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingLogView)(nil)).Elem()
}

func (i *LoggingLogView) ToLoggingLogViewOutput() LoggingLogViewOutput {
	return i.ToLoggingLogViewOutputWithContext(context.Background())
}

func (i *LoggingLogView) ToLoggingLogViewOutputWithContext(ctx context.Context) LoggingLogViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingLogViewOutput)
}

type LoggingLogViewOutput struct{ *pulumi.OutputState }

func (LoggingLogViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingLogView)(nil)).Elem()
}

func (o LoggingLogViewOutput) ToLoggingLogViewOutput() LoggingLogViewOutput {
	return o
}

func (o LoggingLogViewOutput) ToLoggingLogViewOutputWithContext(ctx context.Context) LoggingLogViewOutput {
	return o
}

// The bucket of the resource
func (o LoggingLogViewOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Output only. The creation timestamp of the view.
func (o LoggingLogViewOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Describes this view.
func (o LoggingLogViewOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND
// of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id
// For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
func (o LoggingLogViewOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1,
// europe-west1.
func (o LoggingLogViewOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LoggingLogViewOutput) LoggingLogViewId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.LoggingLogViewId }).(pulumi.StringOutput)
}

// The resource name of the view. For example: \'projects/my-project/locations/global/buckets/my-bucket/views/my-view\'
func (o LoggingLogViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the resource.
func (o LoggingLogViewOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

func (o LoggingLogViewOutput) Timeouts() LoggingLogViewTimeoutsPtrOutput {
	return o.ApplyT(func(v *LoggingLogView) LoggingLogViewTimeoutsPtrOutput { return v.Timeouts }).(LoggingLogViewTimeoutsPtrOutput)
}

// Output only. The last update timestamp of the view.
func (o LoggingLogViewOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingLogView) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingLogViewInput)(nil)).Elem(), &LoggingLogView{})
	pulumi.RegisterOutputType(LoggingLogViewOutput{})
}
