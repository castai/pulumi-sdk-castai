// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpannerInstanceConfig struct {
	pulumi.CustomResourceState

	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig pulumi.StringOutput `pulumi:"baseConfig"`
	// Output only. Whether this instance config is a Google or User Managed Configuration.
	ConfigType pulumi.StringOutput `pulumi:"configType"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName     pulumi.StringOutput    `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// A unique identifier for the instance configuration. Values are of the form
	// projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas                SpannerInstanceConfigReplicaArrayOutput `pulumi:"replicas"`
	SpannerInstanceConfigId pulumi.StringOutput                     `pulumi:"spannerInstanceConfigId"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                 `pulumi:"terraformLabels"`
	Timeouts        SpannerInstanceConfigTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewSpannerInstanceConfig registers a new resource with the given unique name, arguments, and options.
func NewSpannerInstanceConfig(ctx *pulumi.Context,
	name string, args *SpannerInstanceConfigArgs, opts ...pulumi.ResourceOption) (*SpannerInstanceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SpannerInstanceConfig
	err = ctx.RegisterPackageResource("google-beta:index/spannerInstanceConfig:SpannerInstanceConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpannerInstanceConfig gets an existing SpannerInstanceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpannerInstanceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpannerInstanceConfigState, opts ...pulumi.ResourceOption) (*SpannerInstanceConfig, error) {
	var resource SpannerInstanceConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/spannerInstanceConfig:SpannerInstanceConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpannerInstanceConfig resources.
type spannerInstanceConfigState struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig *string `pulumi:"baseConfig"`
	// Output only. Whether this instance config is a Google or User Managed Configuration.
	ConfigType *string `pulumi:"configType"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// A unique identifier for the instance configuration. Values are of the form
	// projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas                []SpannerInstanceConfigReplica `pulumi:"replicas"`
	SpannerInstanceConfigId *string                        `pulumi:"spannerInstanceConfigId"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string              `pulumi:"terraformLabels"`
	Timeouts        *SpannerInstanceConfigTimeouts `pulumi:"timeouts"`
}

type SpannerInstanceConfigState struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig pulumi.StringPtrInput
	// Output only. Whether this instance config is a Google or User Managed Configuration.
	ConfigType pulumi.StringPtrInput
	// The name of this instance configuration as it appears in UIs.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// A unique identifier for the instance configuration. Values are of the form
	// projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas                SpannerInstanceConfigReplicaArrayInput
	SpannerInstanceConfigId pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        SpannerInstanceConfigTimeoutsPtrInput
}

func (SpannerInstanceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceConfigState)(nil)).Elem()
}

type spannerInstanceConfigArgs struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig *string `pulumi:"baseConfig"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName string `pulumi:"displayName"`
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// A unique identifier for the instance configuration. Values are of the form
	// projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas                []SpannerInstanceConfigReplica `pulumi:"replicas"`
	SpannerInstanceConfigId *string                        `pulumi:"spannerInstanceConfigId"`
	Timeouts                *SpannerInstanceConfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SpannerInstanceConfig resource.
type SpannerInstanceConfigArgs struct {
	// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
	// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
	// configuration.
	BaseConfig pulumi.StringPtrInput
	// The name of this instance configuration as it appears in UIs.
	DisplayName pulumi.StringInput
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
	// to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// A unique identifier for the instance configuration. Values are of the form
	// projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas                SpannerInstanceConfigReplicaArrayInput
	SpannerInstanceConfigId pulumi.StringPtrInput
	Timeouts                SpannerInstanceConfigTimeoutsPtrInput
}

func (SpannerInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceConfigArgs)(nil)).Elem()
}

type SpannerInstanceConfigInput interface {
	pulumi.Input

	ToSpannerInstanceConfigOutput() SpannerInstanceConfigOutput
	ToSpannerInstanceConfigOutputWithContext(ctx context.Context) SpannerInstanceConfigOutput
}

func (*SpannerInstanceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceConfig)(nil)).Elem()
}

func (i *SpannerInstanceConfig) ToSpannerInstanceConfigOutput() SpannerInstanceConfigOutput {
	return i.ToSpannerInstanceConfigOutputWithContext(context.Background())
}

func (i *SpannerInstanceConfig) ToSpannerInstanceConfigOutputWithContext(ctx context.Context) SpannerInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerInstanceConfigOutput)
}

type SpannerInstanceConfigOutput struct{ *pulumi.OutputState }

func (SpannerInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceConfig)(nil)).Elem()
}

func (o SpannerInstanceConfigOutput) ToSpannerInstanceConfigOutput() SpannerInstanceConfigOutput {
	return o
}

func (o SpannerInstanceConfigOutput) ToSpannerInstanceConfigOutputWithContext(ctx context.Context) SpannerInstanceConfigOutput {
	return o
}

// Base configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
// configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
// configuration.
func (o SpannerInstanceConfigOutput) BaseConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringOutput { return v.BaseConfig }).(pulumi.StringOutput)
}

// Output only. Whether this instance config is a Google or User Managed Configuration.
func (o SpannerInstanceConfigOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringOutput { return v.ConfigType }).(pulumi.StringOutput)
}

// The name of this instance configuration as it appears in UIs.
func (o SpannerInstanceConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o SpannerInstanceConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
// to the field 'effective_labels' for all of the labels present on the resource.
func (o SpannerInstanceConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// A unique identifier for the instance configuration. Values are of the form
// projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
func (o SpannerInstanceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SpannerInstanceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The geographic placement of nodes in this instance configuration and their replication properties.
func (o SpannerInstanceConfigOutput) Replicas() SpannerInstanceConfigReplicaArrayOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) SpannerInstanceConfigReplicaArrayOutput { return v.Replicas }).(SpannerInstanceConfigReplicaArrayOutput)
}

func (o SpannerInstanceConfigOutput) SpannerInstanceConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringOutput { return v.SpannerInstanceConfigId }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o SpannerInstanceConfigOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o SpannerInstanceConfigOutput) Timeouts() SpannerInstanceConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SpannerInstanceConfig) SpannerInstanceConfigTimeoutsPtrOutput { return v.Timeouts }).(SpannerInstanceConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerInstanceConfigInput)(nil)).Elem(), &SpannerInstanceConfig{})
	pulumi.RegisterOutputType(SpannerInstanceConfigOutput{})
}
