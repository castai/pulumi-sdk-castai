// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventarcChannel struct {
	pulumi.CustomResourceState

	// Output only. The activation token for the channel. The token must be used by the provider to register the channel for
	// publishing.
	ActivationToken pulumi.StringOutput `pulumi:"activationToken"`
	// Output only. The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName     pulumi.StringPtrOutput `pulumi:"cryptoKeyName"`
	EventarcChannelId pulumi.StringOutput    `pulumi:"eventarcChannelId"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The resource name of the channel. Must be unique within the location on the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery.
	// Format: `projects/{project}/topics/{topic_id}`.
	PubsubTopic pulumi.StringOutput `pulumi:"pubsubTopic"`
	// Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
	State pulumi.StringOutput `pulumi:"state"`
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
	// permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	ThirdPartyProvider pulumi.StringPtrOutput           `pulumi:"thirdPartyProvider"`
	Timeouts           EventarcChannelTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain
	// unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEventarcChannel registers a new resource with the given unique name, arguments, and options.
func NewEventarcChannel(ctx *pulumi.Context,
	name string, args *EventarcChannelArgs, opts ...pulumi.ResourceOption) (*EventarcChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EventarcChannel
	err = ctx.RegisterPackageResource("google-beta:index/eventarcChannel:EventarcChannel", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventarcChannel gets an existing EventarcChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventarcChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventarcChannelState, opts ...pulumi.ResourceOption) (*EventarcChannel, error) {
	var resource EventarcChannel
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/eventarcChannel:EventarcChannel", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventarcChannel resources.
type eventarcChannelState struct {
	// Output only. The activation token for the channel. The token must be used by the provider to register the channel for
	// publishing.
	ActivationToken *string `pulumi:"activationToken"`
	// Output only. The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName     *string `pulumi:"cryptoKeyName"`
	EventarcChannelId *string `pulumi:"eventarcChannelId"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. The resource name of the channel. Must be unique within the location on the project.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery.
	// Format: `projects/{project}/topics/{topic_id}`.
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
	State *string `pulumi:"state"`
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
	// permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	ThirdPartyProvider *string                  `pulumi:"thirdPartyProvider"`
	Timeouts           *EventarcChannelTimeouts `pulumi:"timeouts"`
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain
	// unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type EventarcChannelState struct {
	// Output only. The activation token for the channel. The token must be used by the provider to register the channel for
	// publishing.
	ActivationToken pulumi.StringPtrInput
	// Output only. The creation time.
	CreateTime pulumi.StringPtrInput
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName     pulumi.StringPtrInput
	EventarcChannelId pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. The resource name of the channel. Must be unique within the location on the project.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery.
	// Format: `projects/{project}/topics/{topic_id}`.
	PubsubTopic pulumi.StringPtrInput
	// Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
	State pulumi.StringPtrInput
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
	// permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	ThirdPartyProvider pulumi.StringPtrInput
	Timeouts           EventarcChannelTimeoutsPtrInput
	// Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain
	// unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (EventarcChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventarcChannelState)(nil)).Elem()
}

type eventarcChannelArgs struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName     *string `pulumi:"cryptoKeyName"`
	EventarcChannelId *string `pulumi:"eventarcChannelId"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. The resource name of the channel. Must be unique within the location on the project.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
	// permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	ThirdPartyProvider *string                  `pulumi:"thirdPartyProvider"`
	Timeouts           *EventarcChannelTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a EventarcChannel resource.
type EventarcChannelArgs struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName     pulumi.StringPtrInput
	EventarcChannelId pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. The resource name of the channel. Must be unique within the location on the project.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
	// permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	ThirdPartyProvider pulumi.StringPtrInput
	Timeouts           EventarcChannelTimeoutsPtrInput
}

func (EventarcChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventarcChannelArgs)(nil)).Elem()
}

type EventarcChannelInput interface {
	pulumi.Input

	ToEventarcChannelOutput() EventarcChannelOutput
	ToEventarcChannelOutputWithContext(ctx context.Context) EventarcChannelOutput
}

func (*EventarcChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**EventarcChannel)(nil)).Elem()
}

func (i *EventarcChannel) ToEventarcChannelOutput() EventarcChannelOutput {
	return i.ToEventarcChannelOutputWithContext(context.Background())
}

func (i *EventarcChannel) ToEventarcChannelOutputWithContext(ctx context.Context) EventarcChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventarcChannelOutput)
}

type EventarcChannelOutput struct{ *pulumi.OutputState }

func (EventarcChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventarcChannel)(nil)).Elem()
}

func (o EventarcChannelOutput) ToEventarcChannelOutput() EventarcChannelOutput {
	return o
}

func (o EventarcChannelOutput) ToEventarcChannelOutputWithContext(ctx context.Context) EventarcChannelOutput {
	return o
}

// Output only. The activation token for the channel. The token must be used by the provider to register the channel for
// publishing.
func (o EventarcChannelOutput) ActivationToken() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.ActivationToken }).(pulumi.StringOutput)
}

// Output only. The creation time.
func (o EventarcChannelOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o EventarcChannelOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringPtrOutput { return v.CryptoKeyName }).(pulumi.StringPtrOutput)
}

func (o EventarcChannelOutput) EventarcChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.EventarcChannelId }).(pulumi.StringOutput)
}

// The location for the resource
func (o EventarcChannelOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The resource name of the channel. Must be unique within the location on the project.
func (o EventarcChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o EventarcChannelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery.
// Format: `projects/{project}/topics/{topic_id}`.
func (o EventarcChannelOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.PubsubTopic }).(pulumi.StringOutput)
}

// Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
func (o EventarcChannelOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
// permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
func (o EventarcChannelOutput) ThirdPartyProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringPtrOutput { return v.ThirdPartyProvider }).(pulumi.StringPtrOutput)
}

func (o EventarcChannelOutput) Timeouts() EventarcChannelTimeoutsPtrOutput {
	return o.ApplyT(func(v *EventarcChannel) EventarcChannelTimeoutsPtrOutput { return v.Timeouts }).(EventarcChannelTimeoutsPtrOutput)
}

// Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain
// unchanged until the resource is deleted.
func (o EventarcChannelOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The last-modified time.
func (o EventarcChannelOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcChannel) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventarcChannelInput)(nil)).Elem(), &EventarcChannel{})
	pulumi.RegisterOutputType(EventarcChannelOutput{})
}
