// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeRegionSslCertificate struct {
	pulumi.CustomResourceState

	// The certificate in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
	// least one intermediate cert.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The unique identifier for the resource.
	CertificateId                 pulumi.Float64Output `pulumi:"certificateId"`
	ComputeRegionSslCertificateId pulumi.StringOutput  `pulumi:"computeRegionSslCertificateId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Expire time of the certificate in RFC3339 text format.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// The write-only private key in PEM format.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	Project    pulumi.StringOutput `pulumi:"project"`
	// The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is
	// used.
	Region   pulumi.StringOutput                          `pulumi:"region"`
	SelfLink pulumi.StringOutput                          `pulumi:"selfLink"`
	Timeouts ComputeRegionSslCertificateTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewComputeRegionSslCertificate registers a new resource with the given unique name, arguments, and options.
func NewComputeRegionSslCertificate(ctx *pulumi.Context,
	name string, args *ComputeRegionSslCertificateArgs, opts ...pulumi.ResourceOption) (*ComputeRegionSslCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.Certificate != nil {
		args.Certificate = pulumi.ToSecret(args.Certificate).(pulumi.StringInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"certificate",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeRegionSslCertificate
	err = ctx.RegisterPackageResource("google-beta:index/computeRegionSslCertificate:ComputeRegionSslCertificate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeRegionSslCertificate gets an existing ComputeRegionSslCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeRegionSslCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeRegionSslCertificateState, opts ...pulumi.ResourceOption) (*ComputeRegionSslCertificate, error) {
	var resource ComputeRegionSslCertificate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeRegionSslCertificate:ComputeRegionSslCertificate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeRegionSslCertificate resources.
type computeRegionSslCertificateState struct {
	// The certificate in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
	// least one intermediate cert.
	Certificate *string `pulumi:"certificate"`
	// The unique identifier for the resource.
	CertificateId                 *float64 `pulumi:"certificateId"`
	ComputeRegionSslCertificateId *string  `pulumi:"computeRegionSslCertificateId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Expire time of the certificate in RFC3339 text format.
	ExpireTime *string `pulumi:"expireTime"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	NamePrefix *string `pulumi:"namePrefix"`
	// The write-only private key in PEM format.
	PrivateKey *string `pulumi:"privateKey"`
	Project    *string `pulumi:"project"`
	// The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is
	// used.
	Region   *string                              `pulumi:"region"`
	SelfLink *string                              `pulumi:"selfLink"`
	Timeouts *ComputeRegionSslCertificateTimeouts `pulumi:"timeouts"`
}

type ComputeRegionSslCertificateState struct {
	// The certificate in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
	// least one intermediate cert.
	Certificate pulumi.StringPtrInput
	// The unique identifier for the resource.
	CertificateId                 pulumi.Float64PtrInput
	ComputeRegionSslCertificateId pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Expire time of the certificate in RFC3339 text format.
	ExpireTime pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	NamePrefix pulumi.StringPtrInput
	// The write-only private key in PEM format.
	PrivateKey pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	// The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is
	// used.
	Region   pulumi.StringPtrInput
	SelfLink pulumi.StringPtrInput
	Timeouts ComputeRegionSslCertificateTimeoutsPtrInput
}

func (ComputeRegionSslCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeRegionSslCertificateState)(nil)).Elem()
}

type computeRegionSslCertificateArgs struct {
	// The certificate in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
	// least one intermediate cert.
	Certificate                   string  `pulumi:"certificate"`
	ComputeRegionSslCertificateId *string `pulumi:"computeRegionSslCertificateId"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	NamePrefix *string `pulumi:"namePrefix"`
	// The write-only private key in PEM format.
	PrivateKey string  `pulumi:"privateKey"`
	Project    *string `pulumi:"project"`
	// The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is
	// used.
	Region   *string                              `pulumi:"region"`
	Timeouts *ComputeRegionSslCertificateTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeRegionSslCertificate resource.
type ComputeRegionSslCertificateArgs struct {
	// The certificate in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
	// least one intermediate cert.
	Certificate                   pulumi.StringInput
	ComputeRegionSslCertificateId pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
	// certificates.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with name.
	NamePrefix pulumi.StringPtrInput
	// The write-only private key in PEM format.
	PrivateKey pulumi.StringInput
	Project    pulumi.StringPtrInput
	// The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is
	// used.
	Region   pulumi.StringPtrInput
	Timeouts ComputeRegionSslCertificateTimeoutsPtrInput
}

func (ComputeRegionSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeRegionSslCertificateArgs)(nil)).Elem()
}

type ComputeRegionSslCertificateInput interface {
	pulumi.Input

	ToComputeRegionSslCertificateOutput() ComputeRegionSslCertificateOutput
	ToComputeRegionSslCertificateOutputWithContext(ctx context.Context) ComputeRegionSslCertificateOutput
}

func (*ComputeRegionSslCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRegionSslCertificate)(nil)).Elem()
}

func (i *ComputeRegionSslCertificate) ToComputeRegionSslCertificateOutput() ComputeRegionSslCertificateOutput {
	return i.ToComputeRegionSslCertificateOutputWithContext(context.Background())
}

func (i *ComputeRegionSslCertificate) ToComputeRegionSslCertificateOutputWithContext(ctx context.Context) ComputeRegionSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRegionSslCertificateOutput)
}

type ComputeRegionSslCertificateOutput struct{ *pulumi.OutputState }

func (ComputeRegionSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRegionSslCertificate)(nil)).Elem()
}

func (o ComputeRegionSslCertificateOutput) ToComputeRegionSslCertificateOutput() ComputeRegionSslCertificateOutput {
	return o
}

func (o ComputeRegionSslCertificateOutput) ToComputeRegionSslCertificateOutputWithContext(ctx context.Context) ComputeRegionSslCertificateOutput {
	return o
}

// The certificate in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
// least one intermediate cert.
func (o ComputeRegionSslCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The unique identifier for the resource.
func (o ComputeRegionSslCertificateOutput) CertificateId() pulumi.Float64Output {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.Float64Output { return v.CertificateId }).(pulumi.Float64Output)
}

func (o ComputeRegionSslCertificateOutput) ComputeRegionSslCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.ComputeRegionSslCertificateId }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeRegionSslCertificateOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o ComputeRegionSslCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Expire time of the certificate in RFC3339 text format.
func (o ComputeRegionSslCertificateOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
// digit, except the last character, which cannot be a dash. These are in the same namespace as the managed SSL
// certificates.
func (o ComputeRegionSslCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with name.
func (o ComputeRegionSslCertificateOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// The write-only private key in PEM format.
func (o ComputeRegionSslCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

func (o ComputeRegionSslCertificateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is
// used.
func (o ComputeRegionSslCertificateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ComputeRegionSslCertificateOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o ComputeRegionSslCertificateOutput) Timeouts() ComputeRegionSslCertificateTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeRegionSslCertificate) ComputeRegionSslCertificateTimeoutsPtrOutput { return v.Timeouts }).(ComputeRegionSslCertificateTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeRegionSslCertificateInput)(nil)).Elem(), &ComputeRegionSslCertificate{})
	pulumi.RegisterOutputType(ComputeRegionSslCertificateOutput{})
}
