// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreEntitytypeFeature struct {
	pulumi.CustomResourceState

	// The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the feature.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The name of the Featurestore to use, in the format
	// projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
	Entitytype pulumi.StringOutput `pulumi:"entitytype"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A set of key/value label pairs to assign to the feature. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and
	// a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region of the feature
	Region pulumi.StringOutput `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                                 `pulumi:"terraformLabels"`
	Timeouts        VertexAiFeaturestoreEntitytypeFeatureTimeoutsPtrOutput `pulumi:"timeouts"`
	// The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
	// and up to nine fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Type of Feature value. Immutable.
	// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
	ValueType                               pulumi.StringOutput `pulumi:"valueType"`
	VertexAiFeaturestoreEntitytypeFeatureId pulumi.StringOutput `pulumi:"vertexAiFeaturestoreEntitytypeFeatureId"`
}

// NewVertexAiFeaturestoreEntitytypeFeature registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreEntitytypeFeature(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreEntitytypeFeatureArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entitytype == nil {
		return nil, errors.New("invalid value for required argument 'Entitytype'")
	}
	if args.ValueType == nil {
		return nil, errors.New("invalid value for required argument 'ValueType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreEntitytypeFeature
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeFeature:VertexAiFeaturestoreEntitytypeFeature", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreEntitytypeFeature gets an existing VertexAiFeaturestoreEntitytypeFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreEntitytypeFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreEntitytypeFeatureState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeFeature, error) {
	var resource VertexAiFeaturestoreEntitytypeFeature
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeFeature:VertexAiFeaturestoreEntitytypeFeature", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreEntitytypeFeature resources.
type vertexAiFeaturestoreEntitytypeFeatureState struct {
	// The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// Description of the feature.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The name of the Featurestore to use, in the format
	// projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
	Entitytype *string `pulumi:"entitytype"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// A set of key/value label pairs to assign to the feature. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and
	// a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
	Name *string `pulumi:"name"`
	// The region of the feature
	Region *string `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                              `pulumi:"terraformLabels"`
	Timeouts        *VertexAiFeaturestoreEntitytypeFeatureTimeouts `pulumi:"timeouts"`
	// The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
	// and up to nine fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
	// Type of Feature value. Immutable.
	// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
	ValueType                               *string `pulumi:"valueType"`
	VertexAiFeaturestoreEntitytypeFeatureId *string `pulumi:"vertexAiFeaturestoreEntitytypeFeatureId"`
}

type VertexAiFeaturestoreEntitytypeFeatureState struct {
	// The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// Description of the feature.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The name of the Featurestore to use, in the format
	// projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
	Entitytype pulumi.StringPtrInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the feature. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapInput
	// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and
	// a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
	Name pulumi.StringPtrInput
	// The region of the feature
	Region pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        VertexAiFeaturestoreEntitytypeFeatureTimeoutsPtrInput
	// The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
	// and up to nine fractional digits.
	UpdateTime pulumi.StringPtrInput
	// Type of Feature value. Immutable.
	// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
	ValueType                               pulumi.StringPtrInput
	VertexAiFeaturestoreEntitytypeFeatureId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeFeatureState)(nil)).Elem()
}

type vertexAiFeaturestoreEntitytypeFeatureArgs struct {
	// Description of the feature.
	Description *string `pulumi:"description"`
	// The name of the Featurestore to use, in the format
	// projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
	Entitytype string `pulumi:"entitytype"`
	// A set of key/value label pairs to assign to the feature. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and
	// a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
	Name     *string                                        `pulumi:"name"`
	Timeouts *VertexAiFeaturestoreEntitytypeFeatureTimeouts `pulumi:"timeouts"`
	// Type of Feature value. Immutable.
	// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
	ValueType                               string  `pulumi:"valueType"`
	VertexAiFeaturestoreEntitytypeFeatureId *string `pulumi:"vertexAiFeaturestoreEntitytypeFeatureId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreEntitytypeFeature resource.
type VertexAiFeaturestoreEntitytypeFeatureArgs struct {
	// Description of the feature.
	Description pulumi.StringPtrInput
	// The name of the Featurestore to use, in the format
	// projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
	Entitytype pulumi.StringInput
	// A set of key/value label pairs to assign to the feature. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapInput
	// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and
	// a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
	Name     pulumi.StringPtrInput
	Timeouts VertexAiFeaturestoreEntitytypeFeatureTimeoutsPtrInput
	// Type of Feature value. Immutable.
	// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
	ValueType                               pulumi.StringInput
	VertexAiFeaturestoreEntitytypeFeatureId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeFeatureArgs)(nil)).Elem()
}

type VertexAiFeaturestoreEntitytypeFeatureInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreEntitytypeFeatureOutput() VertexAiFeaturestoreEntitytypeFeatureOutput
	ToVertexAiFeaturestoreEntitytypeFeatureOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeFeatureOutput
}

func (*VertexAiFeaturestoreEntitytypeFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeFeature)(nil)).Elem()
}

func (i *VertexAiFeaturestoreEntitytypeFeature) ToVertexAiFeaturestoreEntitytypeFeatureOutput() VertexAiFeaturestoreEntitytypeFeatureOutput {
	return i.ToVertexAiFeaturestoreEntitytypeFeatureOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreEntitytypeFeature) ToVertexAiFeaturestoreEntitytypeFeatureOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreEntitytypeFeatureOutput)
}

type VertexAiFeaturestoreEntitytypeFeatureOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreEntitytypeFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeFeature)(nil)).Elem()
}

func (o VertexAiFeaturestoreEntitytypeFeatureOutput) ToVertexAiFeaturestoreEntitytypeFeatureOutput() VertexAiFeaturestoreEntitytypeFeatureOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeFeatureOutput) ToVertexAiFeaturestoreEntitytypeFeatureOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeFeatureOutput {
	return o
}

// The timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
// nine fractional digits.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the feature.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VertexAiFeaturestoreEntitytypeFeatureOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The name of the Featurestore to use, in the format
// projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Entitytype() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.Entitytype }).(pulumi.StringOutput)
}

// Used to perform consistent read-modify-write updates.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A set of key/value label pairs to assign to the feature. **Note**: This field is non-authoritative, and will only manage
// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
// the resource.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and
// a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region of the feature
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o VertexAiFeaturestoreEntitytypeFeatureOutput) Timeouts() VertexAiFeaturestoreEntitytypeFeatureTimeoutsPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) VertexAiFeaturestoreEntitytypeFeatureTimeoutsPtrOutput {
		return v.Timeouts
	}).(VertexAiFeaturestoreEntitytypeFeatureTimeoutsPtrOutput)
}

// The timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
// and up to nine fractional digits.
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Type of Feature value. Immutable.
// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
func (o VertexAiFeaturestoreEntitytypeFeatureOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput { return v.ValueType }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeFeatureOutput) VertexAiFeaturestoreEntitytypeFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeFeature) pulumi.StringOutput {
		return v.VertexAiFeaturestoreEntitytypeFeatureId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreEntitytypeFeatureInput)(nil)).Elem(), &VertexAiFeaturestoreEntitytypeFeature{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreEntitytypeFeatureOutput{})
}
