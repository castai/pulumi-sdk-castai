// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryAnalyticsHubDataExchangeIamPolicy struct {
	pulumi.CustomResourceState

	BigqueryAnalyticsHubDataExchangeIamPolicyId pulumi.StringOutput `pulumi:"bigqueryAnalyticsHubDataExchangeIamPolicyId"`
	DataExchangeId                              pulumi.StringOutput `pulumi:"dataExchangeId"`
	Etag                                        pulumi.StringOutput `pulumi:"etag"`
	Location                                    pulumi.StringOutput `pulumi:"location"`
	PolicyData                                  pulumi.StringOutput `pulumi:"policyData"`
	Project                                     pulumi.StringOutput `pulumi:"project"`
}

// NewBigqueryAnalyticsHubDataExchangeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewBigqueryAnalyticsHubDataExchangeIamPolicy(ctx *pulumi.Context,
	name string, args *BigqueryAnalyticsHubDataExchangeIamPolicyArgs, opts ...pulumi.ResourceOption) (*BigqueryAnalyticsHubDataExchangeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryAnalyticsHubDataExchangeIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/bigqueryAnalyticsHubDataExchangeIamPolicy:BigqueryAnalyticsHubDataExchangeIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryAnalyticsHubDataExchangeIamPolicy gets an existing BigqueryAnalyticsHubDataExchangeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryAnalyticsHubDataExchangeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryAnalyticsHubDataExchangeIamPolicyState, opts ...pulumi.ResourceOption) (*BigqueryAnalyticsHubDataExchangeIamPolicy, error) {
	var resource BigqueryAnalyticsHubDataExchangeIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigqueryAnalyticsHubDataExchangeIamPolicy:BigqueryAnalyticsHubDataExchangeIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryAnalyticsHubDataExchangeIamPolicy resources.
type bigqueryAnalyticsHubDataExchangeIamPolicyState struct {
	BigqueryAnalyticsHubDataExchangeIamPolicyId *string `pulumi:"bigqueryAnalyticsHubDataExchangeIamPolicyId"`
	DataExchangeId                              *string `pulumi:"dataExchangeId"`
	Etag                                        *string `pulumi:"etag"`
	Location                                    *string `pulumi:"location"`
	PolicyData                                  *string `pulumi:"policyData"`
	Project                                     *string `pulumi:"project"`
}

type BigqueryAnalyticsHubDataExchangeIamPolicyState struct {
	BigqueryAnalyticsHubDataExchangeIamPolicyId pulumi.StringPtrInput
	DataExchangeId                              pulumi.StringPtrInput
	Etag                                        pulumi.StringPtrInput
	Location                                    pulumi.StringPtrInput
	PolicyData                                  pulumi.StringPtrInput
	Project                                     pulumi.StringPtrInput
}

func (BigqueryAnalyticsHubDataExchangeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryAnalyticsHubDataExchangeIamPolicyState)(nil)).Elem()
}

type bigqueryAnalyticsHubDataExchangeIamPolicyArgs struct {
	BigqueryAnalyticsHubDataExchangeIamPolicyId *string `pulumi:"bigqueryAnalyticsHubDataExchangeIamPolicyId"`
	DataExchangeId                              string  `pulumi:"dataExchangeId"`
	Location                                    *string `pulumi:"location"`
	PolicyData                                  string  `pulumi:"policyData"`
	Project                                     *string `pulumi:"project"`
}

// The set of arguments for constructing a BigqueryAnalyticsHubDataExchangeIamPolicy resource.
type BigqueryAnalyticsHubDataExchangeIamPolicyArgs struct {
	BigqueryAnalyticsHubDataExchangeIamPolicyId pulumi.StringPtrInput
	DataExchangeId                              pulumi.StringInput
	Location                                    pulumi.StringPtrInput
	PolicyData                                  pulumi.StringInput
	Project                                     pulumi.StringPtrInput
}

func (BigqueryAnalyticsHubDataExchangeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryAnalyticsHubDataExchangeIamPolicyArgs)(nil)).Elem()
}

type BigqueryAnalyticsHubDataExchangeIamPolicyInput interface {
	pulumi.Input

	ToBigqueryAnalyticsHubDataExchangeIamPolicyOutput() BigqueryAnalyticsHubDataExchangeIamPolicyOutput
	ToBigqueryAnalyticsHubDataExchangeIamPolicyOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamPolicyOutput
}

func (*BigqueryAnalyticsHubDataExchangeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryAnalyticsHubDataExchangeIamPolicy)(nil)).Elem()
}

func (i *BigqueryAnalyticsHubDataExchangeIamPolicy) ToBigqueryAnalyticsHubDataExchangeIamPolicyOutput() BigqueryAnalyticsHubDataExchangeIamPolicyOutput {
	return i.ToBigqueryAnalyticsHubDataExchangeIamPolicyOutputWithContext(context.Background())
}

func (i *BigqueryAnalyticsHubDataExchangeIamPolicy) ToBigqueryAnalyticsHubDataExchangeIamPolicyOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryAnalyticsHubDataExchangeIamPolicyOutput)
}

type BigqueryAnalyticsHubDataExchangeIamPolicyOutput struct{ *pulumi.OutputState }

func (BigqueryAnalyticsHubDataExchangeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryAnalyticsHubDataExchangeIamPolicy)(nil)).Elem()
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) ToBigqueryAnalyticsHubDataExchangeIamPolicyOutput() BigqueryAnalyticsHubDataExchangeIamPolicyOutput {
	return o
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) ToBigqueryAnalyticsHubDataExchangeIamPolicyOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamPolicyOutput {
	return o
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) BigqueryAnalyticsHubDataExchangeIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamPolicy) pulumi.StringOutput {
		return v.BigqueryAnalyticsHubDataExchangeIamPolicyId
	}).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamPolicy) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryAnalyticsHubDataExchangeIamPolicyInput)(nil)).Elem(), &BigqueryAnalyticsHubDataExchangeIamPolicy{})
	pulumi.RegisterOutputType(BigqueryAnalyticsHubDataExchangeIamPolicyOutput{})
}
