// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryDataTransferConfig struct {
	pulumi.CustomResourceState

	BigqueryDataTransferConfigId pulumi.StringOutput `pulumi:"bigqueryDataTransferConfigId"`
	// The number of days to look back to automatically refresh the data. For example, if dataRefreshWindowDays = 10, then
	// every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if
	// the data source supports the feature. Set the value to 0 to use the default value.
	DataRefreshWindowDays pulumi.Float64PtrOutput `pulumi:"dataRefreshWindowDays"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// The BigQuery target dataset id.
	DestinationDatasetId pulumi.StringPtrOutput `pulumi:"destinationDatasetId"`
	// When set to true, no runs are scheduled for a given transfer.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer
	// config.
	EmailPreferences BigqueryDataTransferConfigEmailPreferencesPtrOutput `pulumi:"emailPreferences"`
	// Represents the encryption configuration for a transfer.
	EncryptionConfiguration BigqueryDataTransferConfigEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	// The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
	// US.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the transfer config. Transfer config names have the form
	// projects/{projectId}/locations/{location}/transferConfigs/{configId} or projects/{projectId}/transferConfigs/{configId},
	// where configId is usually a uuid, but this is not required. The name is ignored when creating a transfer config.
	Name pulumi.StringOutput `pulumi:"name"`
	// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
	NotificationPubsubTopic pulumi.StringPtrOutput `pulumi:"notificationPubsubTopic"`
	Params                  pulumi.StringMapOutput `pulumi:"params"`
	Project                 pulumi.StringOutput    `pulumi:"project"`
	// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the
	// default value for the data source will be used. The specified times are in UTC. Examples of valid format: 1st,3rd monday
	// of month 15:30, every wed,fri of jan, jun 13:15, and first sunday of quarter 00:00. See more explanation about the
	// format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for
	// your data source.
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	ScheduleOptions BigqueryDataTransferConfigScheduleOptionsPtrOutput `pulumi:"scheduleOptions"`
	// Different parameters are configured primarily using the the 'params' field on this resource. This block contains the
	// parameters which contain secrets or passwords so that they can be marked sensitive and hidden from plan output. The name
	// of the field, eg: secret_access_key, will be the key in the 'params' map in the api request. Credentials may not be
	// specified in both locations and will cause an error. Changing from one location to a different credential configuration
	// in the config will require an apply to update state.
	SensitiveParams BigqueryDataTransferConfigSensitiveParamsPtrOutput `pulumi:"sensitiveParams"`
	// Service account email. If this field is set, transfer config will be created with this service account credentials. It
	// requires that requesting user calling this API has permissions to act as this service account.
	ServiceAccountName pulumi.StringPtrOutput                      `pulumi:"serviceAccountName"`
	Timeouts           BigqueryDataTransferConfigTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewBigqueryDataTransferConfig registers a new resource with the given unique name, arguments, and options.
func NewBigqueryDataTransferConfig(ctx *pulumi.Context,
	name string, args *BigqueryDataTransferConfigArgs, opts ...pulumi.ResourceOption) (*BigqueryDataTransferConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceId == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Params == nil {
		return nil, errors.New("invalid value for required argument 'Params'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryDataTransferConfig
	err = ctx.RegisterPackageResource("google-beta:index/bigqueryDataTransferConfig:BigqueryDataTransferConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryDataTransferConfig gets an existing BigqueryDataTransferConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryDataTransferConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryDataTransferConfigState, opts ...pulumi.ResourceOption) (*BigqueryDataTransferConfig, error) {
	var resource BigqueryDataTransferConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigqueryDataTransferConfig:BigqueryDataTransferConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryDataTransferConfig resources.
type bigqueryDataTransferConfigState struct {
	BigqueryDataTransferConfigId *string `pulumi:"bigqueryDataTransferConfigId"`
	// The number of days to look back to automatically refresh the data. For example, if dataRefreshWindowDays = 10, then
	// every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if
	// the data source supports the feature. Set the value to 0 to use the default value.
	DataRefreshWindowDays *float64 `pulumi:"dataRefreshWindowDays"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId *string `pulumi:"dataSourceId"`
	// The BigQuery target dataset id.
	DestinationDatasetId *string `pulumi:"destinationDatasetId"`
	// When set to true, no runs are scheduled for a given transfer.
	Disabled *bool `pulumi:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName *string `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer
	// config.
	EmailPreferences *BigqueryDataTransferConfigEmailPreferences `pulumi:"emailPreferences"`
	// Represents the encryption configuration for a transfer.
	EncryptionConfiguration *BigqueryDataTransferConfigEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
	// US.
	Location *string `pulumi:"location"`
	// The resource name of the transfer config. Transfer config names have the form
	// projects/{projectId}/locations/{location}/transferConfigs/{configId} or projects/{projectId}/transferConfigs/{configId},
	// where configId is usually a uuid, but this is not required. The name is ignored when creating a transfer config.
	Name *string `pulumi:"name"`
	// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
	NotificationPubsubTopic *string           `pulumi:"notificationPubsubTopic"`
	Params                  map[string]string `pulumi:"params"`
	Project                 *string           `pulumi:"project"`
	// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the
	// default value for the data source will be used. The specified times are in UTC. Examples of valid format: 1st,3rd monday
	// of month 15:30, every wed,fri of jan, jun 13:15, and first sunday of quarter 00:00. See more explanation about the
	// format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for
	// your data source.
	Schedule *string `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	ScheduleOptions *BigqueryDataTransferConfigScheduleOptions `pulumi:"scheduleOptions"`
	// Different parameters are configured primarily using the the 'params' field on this resource. This block contains the
	// parameters which contain secrets or passwords so that they can be marked sensitive and hidden from plan output. The name
	// of the field, eg: secret_access_key, will be the key in the 'params' map in the api request. Credentials may not be
	// specified in both locations and will cause an error. Changing from one location to a different credential configuration
	// in the config will require an apply to update state.
	SensitiveParams *BigqueryDataTransferConfigSensitiveParams `pulumi:"sensitiveParams"`
	// Service account email. If this field is set, transfer config will be created with this service account credentials. It
	// requires that requesting user calling this API has permissions to act as this service account.
	ServiceAccountName *string                             `pulumi:"serviceAccountName"`
	Timeouts           *BigqueryDataTransferConfigTimeouts `pulumi:"timeouts"`
}

type BigqueryDataTransferConfigState struct {
	BigqueryDataTransferConfigId pulumi.StringPtrInput
	// The number of days to look back to automatically refresh the data. For example, if dataRefreshWindowDays = 10, then
	// every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if
	// the data source supports the feature. Set the value to 0 to use the default value.
	DataRefreshWindowDays pulumi.Float64PtrInput
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId pulumi.StringPtrInput
	// The BigQuery target dataset id.
	DestinationDatasetId pulumi.StringPtrInput
	// When set to true, no runs are scheduled for a given transfer.
	Disabled pulumi.BoolPtrInput
	// The user specified display name for the transfer config.
	DisplayName pulumi.StringPtrInput
	// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer
	// config.
	EmailPreferences BigqueryDataTransferConfigEmailPreferencesPtrInput
	// Represents the encryption configuration for a transfer.
	EncryptionConfiguration BigqueryDataTransferConfigEncryptionConfigurationPtrInput
	// The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
	// US.
	Location pulumi.StringPtrInput
	// The resource name of the transfer config. Transfer config names have the form
	// projects/{projectId}/locations/{location}/transferConfigs/{configId} or projects/{projectId}/transferConfigs/{configId},
	// where configId is usually a uuid, but this is not required. The name is ignored when creating a transfer config.
	Name pulumi.StringPtrInput
	// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
	NotificationPubsubTopic pulumi.StringPtrInput
	Params                  pulumi.StringMapInput
	Project                 pulumi.StringPtrInput
	// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the
	// default value for the data source will be used. The specified times are in UTC. Examples of valid format: 1st,3rd monday
	// of month 15:30, every wed,fri of jan, jun 13:15, and first sunday of quarter 00:00. See more explanation about the
	// format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for
	// your data source.
	Schedule pulumi.StringPtrInput
	// Options customizing the data transfer schedule.
	ScheduleOptions BigqueryDataTransferConfigScheduleOptionsPtrInput
	// Different parameters are configured primarily using the the 'params' field on this resource. This block contains the
	// parameters which contain secrets or passwords so that they can be marked sensitive and hidden from plan output. The name
	// of the field, eg: secret_access_key, will be the key in the 'params' map in the api request. Credentials may not be
	// specified in both locations and will cause an error. Changing from one location to a different credential configuration
	// in the config will require an apply to update state.
	SensitiveParams BigqueryDataTransferConfigSensitiveParamsPtrInput
	// Service account email. If this field is set, transfer config will be created with this service account credentials. It
	// requires that requesting user calling this API has permissions to act as this service account.
	ServiceAccountName pulumi.StringPtrInput
	Timeouts           BigqueryDataTransferConfigTimeoutsPtrInput
}

func (BigqueryDataTransferConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryDataTransferConfigState)(nil)).Elem()
}

type bigqueryDataTransferConfigArgs struct {
	BigqueryDataTransferConfigId *string `pulumi:"bigqueryDataTransferConfigId"`
	// The number of days to look back to automatically refresh the data. For example, if dataRefreshWindowDays = 10, then
	// every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if
	// the data source supports the feature. Set the value to 0 to use the default value.
	DataRefreshWindowDays *float64 `pulumi:"dataRefreshWindowDays"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId string `pulumi:"dataSourceId"`
	// The BigQuery target dataset id.
	DestinationDatasetId *string `pulumi:"destinationDatasetId"`
	// When set to true, no runs are scheduled for a given transfer.
	Disabled *bool `pulumi:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName string `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer
	// config.
	EmailPreferences *BigqueryDataTransferConfigEmailPreferences `pulumi:"emailPreferences"`
	// Represents the encryption configuration for a transfer.
	EncryptionConfiguration *BigqueryDataTransferConfigEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
	// US.
	Location *string `pulumi:"location"`
	// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
	NotificationPubsubTopic *string           `pulumi:"notificationPubsubTopic"`
	Params                  map[string]string `pulumi:"params"`
	Project                 *string           `pulumi:"project"`
	// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the
	// default value for the data source will be used. The specified times are in UTC. Examples of valid format: 1st,3rd monday
	// of month 15:30, every wed,fri of jan, jun 13:15, and first sunday of quarter 00:00. See more explanation about the
	// format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for
	// your data source.
	Schedule *string `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	ScheduleOptions *BigqueryDataTransferConfigScheduleOptions `pulumi:"scheduleOptions"`
	// Different parameters are configured primarily using the the 'params' field on this resource. This block contains the
	// parameters which contain secrets or passwords so that they can be marked sensitive and hidden from plan output. The name
	// of the field, eg: secret_access_key, will be the key in the 'params' map in the api request. Credentials may not be
	// specified in both locations and will cause an error. Changing from one location to a different credential configuration
	// in the config will require an apply to update state.
	SensitiveParams *BigqueryDataTransferConfigSensitiveParams `pulumi:"sensitiveParams"`
	// Service account email. If this field is set, transfer config will be created with this service account credentials. It
	// requires that requesting user calling this API has permissions to act as this service account.
	ServiceAccountName *string                             `pulumi:"serviceAccountName"`
	Timeouts           *BigqueryDataTransferConfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a BigqueryDataTransferConfig resource.
type BigqueryDataTransferConfigArgs struct {
	BigqueryDataTransferConfigId pulumi.StringPtrInput
	// The number of days to look back to automatically refresh the data. For example, if dataRefreshWindowDays = 10, then
	// every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if
	// the data source supports the feature. Set the value to 0 to use the default value.
	DataRefreshWindowDays pulumi.Float64PtrInput
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId pulumi.StringInput
	// The BigQuery target dataset id.
	DestinationDatasetId pulumi.StringPtrInput
	// When set to true, no runs are scheduled for a given transfer.
	Disabled pulumi.BoolPtrInput
	// The user specified display name for the transfer config.
	DisplayName pulumi.StringInput
	// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer
	// config.
	EmailPreferences BigqueryDataTransferConfigEmailPreferencesPtrInput
	// Represents the encryption configuration for a transfer.
	EncryptionConfiguration BigqueryDataTransferConfigEncryptionConfigurationPtrInput
	// The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
	// US.
	Location pulumi.StringPtrInput
	// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
	NotificationPubsubTopic pulumi.StringPtrInput
	Params                  pulumi.StringMapInput
	Project                 pulumi.StringPtrInput
	// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the
	// default value for the data source will be used. The specified times are in UTC. Examples of valid format: 1st,3rd monday
	// of month 15:30, every wed,fri of jan, jun 13:15, and first sunday of quarter 00:00. See more explanation about the
	// format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for
	// your data source.
	Schedule pulumi.StringPtrInput
	// Options customizing the data transfer schedule.
	ScheduleOptions BigqueryDataTransferConfigScheduleOptionsPtrInput
	// Different parameters are configured primarily using the the 'params' field on this resource. This block contains the
	// parameters which contain secrets or passwords so that they can be marked sensitive and hidden from plan output. The name
	// of the field, eg: secret_access_key, will be the key in the 'params' map in the api request. Credentials may not be
	// specified in both locations and will cause an error. Changing from one location to a different credential configuration
	// in the config will require an apply to update state.
	SensitiveParams BigqueryDataTransferConfigSensitiveParamsPtrInput
	// Service account email. If this field is set, transfer config will be created with this service account credentials. It
	// requires that requesting user calling this API has permissions to act as this service account.
	ServiceAccountName pulumi.StringPtrInput
	Timeouts           BigqueryDataTransferConfigTimeoutsPtrInput
}

func (BigqueryDataTransferConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryDataTransferConfigArgs)(nil)).Elem()
}

type BigqueryDataTransferConfigInput interface {
	pulumi.Input

	ToBigqueryDataTransferConfigOutput() BigqueryDataTransferConfigOutput
	ToBigqueryDataTransferConfigOutputWithContext(ctx context.Context) BigqueryDataTransferConfigOutput
}

func (*BigqueryDataTransferConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryDataTransferConfig)(nil)).Elem()
}

func (i *BigqueryDataTransferConfig) ToBigqueryDataTransferConfigOutput() BigqueryDataTransferConfigOutput {
	return i.ToBigqueryDataTransferConfigOutputWithContext(context.Background())
}

func (i *BigqueryDataTransferConfig) ToBigqueryDataTransferConfigOutputWithContext(ctx context.Context) BigqueryDataTransferConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryDataTransferConfigOutput)
}

type BigqueryDataTransferConfigOutput struct{ *pulumi.OutputState }

func (BigqueryDataTransferConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryDataTransferConfig)(nil)).Elem()
}

func (o BigqueryDataTransferConfigOutput) ToBigqueryDataTransferConfigOutput() BigqueryDataTransferConfigOutput {
	return o
}

func (o BigqueryDataTransferConfigOutput) ToBigqueryDataTransferConfigOutputWithContext(ctx context.Context) BigqueryDataTransferConfigOutput {
	return o
}

func (o BigqueryDataTransferConfigOutput) BigqueryDataTransferConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringOutput { return v.BigqueryDataTransferConfigId }).(pulumi.StringOutput)
}

// The number of days to look back to automatically refresh the data. For example, if dataRefreshWindowDays = 10, then
// every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if
// the data source supports the feature. Set the value to 0 to use the default value.
func (o BigqueryDataTransferConfigOutput) DataRefreshWindowDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.Float64PtrOutput { return v.DataRefreshWindowDays }).(pulumi.Float64PtrOutput)
}

// The data source id. Cannot be changed once the transfer config is created.
func (o BigqueryDataTransferConfigOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// The BigQuery target dataset id.
func (o BigqueryDataTransferConfigOutput) DestinationDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringPtrOutput { return v.DestinationDatasetId }).(pulumi.StringPtrOutput)
}

// When set to true, no runs are scheduled for a given transfer.
func (o BigqueryDataTransferConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The user specified display name for the transfer config.
func (o BigqueryDataTransferConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer
// config.
func (o BigqueryDataTransferConfigOutput) EmailPreferences() BigqueryDataTransferConfigEmailPreferencesPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) BigqueryDataTransferConfigEmailPreferencesPtrOutput {
		return v.EmailPreferences
	}).(BigqueryDataTransferConfigEmailPreferencesPtrOutput)
}

// Represents the encryption configuration for a transfer.
func (o BigqueryDataTransferConfigOutput) EncryptionConfiguration() BigqueryDataTransferConfigEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) BigqueryDataTransferConfigEncryptionConfigurationPtrOutput {
		return v.EncryptionConfiguration
	}).(BigqueryDataTransferConfigEncryptionConfigurationPtrOutput)
}

// The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
// US.
func (o BigqueryDataTransferConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the transfer config. Transfer config names have the form
// projects/{projectId}/locations/{location}/transferConfigs/{configId} or projects/{projectId}/transferConfigs/{configId},
// where configId is usually a uuid, but this is not required. The name is ignored when creating a transfer config.
func (o BigqueryDataTransferConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
func (o BigqueryDataTransferConfigOutput) NotificationPubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringPtrOutput { return v.NotificationPubsubTopic }).(pulumi.StringPtrOutput)
}

func (o BigqueryDataTransferConfigOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringMapOutput { return v.Params }).(pulumi.StringMapOutput)
}

func (o BigqueryDataTransferConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the
// default value for the data source will be used. The specified times are in UTC. Examples of valid format: 1st,3rd monday
// of month 15:30, every wed,fri of jan, jun 13:15, and first sunday of quarter 00:00. See more explanation about the
// format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
// NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for
// your data source.
func (o BigqueryDataTransferConfigOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Options customizing the data transfer schedule.
func (o BigqueryDataTransferConfigOutput) ScheduleOptions() BigqueryDataTransferConfigScheduleOptionsPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) BigqueryDataTransferConfigScheduleOptionsPtrOutput {
		return v.ScheduleOptions
	}).(BigqueryDataTransferConfigScheduleOptionsPtrOutput)
}

// Different parameters are configured primarily using the the 'params' field on this resource. This block contains the
// parameters which contain secrets or passwords so that they can be marked sensitive and hidden from plan output. The name
// of the field, eg: secret_access_key, will be the key in the 'params' map in the api request. Credentials may not be
// specified in both locations and will cause an error. Changing from one location to a different credential configuration
// in the config will require an apply to update state.
func (o BigqueryDataTransferConfigOutput) SensitiveParams() BigqueryDataTransferConfigSensitiveParamsPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) BigqueryDataTransferConfigSensitiveParamsPtrOutput {
		return v.SensitiveParams
	}).(BigqueryDataTransferConfigSensitiveParamsPtrOutput)
}

// Service account email. If this field is set, transfer config will be created with this service account credentials. It
// requires that requesting user calling this API has permissions to act as this service account.
func (o BigqueryDataTransferConfigOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) pulumi.StringPtrOutput { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

func (o BigqueryDataTransferConfigOutput) Timeouts() BigqueryDataTransferConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *BigqueryDataTransferConfig) BigqueryDataTransferConfigTimeoutsPtrOutput { return v.Timeouts }).(BigqueryDataTransferConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryDataTransferConfigInput)(nil)).Elem(), &BigqueryDataTransferConfig{})
	pulumi.RegisterOutputType(BigqueryDataTransferConfigOutput{})
}
