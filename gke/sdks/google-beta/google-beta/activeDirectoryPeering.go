// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActiveDirectoryPeering struct {
	pulumi.CustomResourceState

	ActiveDirectoryPeeringId pulumi.StringOutput `pulumi:"activeDirectoryPeeringId"`
	// The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
	// CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork pulumi.StringOutput `pulumi:"authorizedNetwork"`
	// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
	// projects/{projectId}/locations/global/domains/{domainName}
	DomainResource  pulumi.StringOutput    `pulumi:"domainResource"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Unique name of the peering in this scope including projects and location using the form:
	// projects/{projectId}/locations/global/peerings/{peeringId}.
	Name      pulumi.StringOutput `pulumi:"name"`
	PeeringId pulumi.StringOutput `pulumi:"peeringId"`
	Project   pulumi.StringOutput `pulumi:"project"`
	// The current state of this Peering.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Additional information about the current status of this peering, if available.
	StatusMessage pulumi.StringPtrOutput `pulumi:"statusMessage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                  `pulumi:"terraformLabels"`
	Timeouts        ActiveDirectoryPeeringTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewActiveDirectoryPeering registers a new resource with the given unique name, arguments, and options.
func NewActiveDirectoryPeering(ctx *pulumi.Context,
	name string, args *ActiveDirectoryPeeringArgs, opts ...pulumi.ResourceOption) (*ActiveDirectoryPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizedNetwork == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizedNetwork'")
	}
	if args.DomainResource == nil {
		return nil, errors.New("invalid value for required argument 'DomainResource'")
	}
	if args.PeeringId == nil {
		return nil, errors.New("invalid value for required argument 'PeeringId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ActiveDirectoryPeering
	err = ctx.RegisterPackageResource("google-beta:index/activeDirectoryPeering:ActiveDirectoryPeering", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveDirectoryPeering gets an existing ActiveDirectoryPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveDirectoryPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveDirectoryPeeringState, opts ...pulumi.ResourceOption) (*ActiveDirectoryPeering, error) {
	var resource ActiveDirectoryPeering
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/activeDirectoryPeering:ActiveDirectoryPeering", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveDirectoryPeering resources.
type activeDirectoryPeeringState struct {
	ActiveDirectoryPeeringId *string `pulumi:"activeDirectoryPeeringId"`
	// The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
	// CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
	// projects/{projectId}/locations/global/domains/{domainName}
	DomainResource  *string           `pulumi:"domainResource"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels map[string]string `pulumi:"labels"`
	// Unique name of the peering in this scope including projects and location using the form:
	// projects/{projectId}/locations/global/peerings/{peeringId}.
	Name      *string `pulumi:"name"`
	PeeringId *string `pulumi:"peeringId"`
	Project   *string `pulumi:"project"`
	// The current state of this Peering.
	Status *string `pulumi:"status"`
	// Additional information about the current status of this peering, if available.
	StatusMessage *string `pulumi:"statusMessage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string               `pulumi:"terraformLabels"`
	Timeouts        *ActiveDirectoryPeeringTimeouts `pulumi:"timeouts"`
}

type ActiveDirectoryPeeringState struct {
	ActiveDirectoryPeeringId pulumi.StringPtrInput
	// The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
	// CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork pulumi.StringPtrInput
	// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
	// projects/{projectId}/locations/global/domains/{domainName}
	DomainResource  pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapInput
	// Unique name of the peering in this scope including projects and location using the form:
	// projects/{projectId}/locations/global/peerings/{peeringId}.
	Name      pulumi.StringPtrInput
	PeeringId pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	// The current state of this Peering.
	Status pulumi.StringPtrInput
	// Additional information about the current status of this peering, if available.
	StatusMessage pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        ActiveDirectoryPeeringTimeoutsPtrInput
}

func (ActiveDirectoryPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryPeeringState)(nil)).Elem()
}

type activeDirectoryPeeringArgs struct {
	ActiveDirectoryPeeringId *string `pulumi:"activeDirectoryPeeringId"`
	// The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
	// CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork string `pulumi:"authorizedNetwork"`
	// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
	// projects/{projectId}/locations/global/domains/{domainName}
	DomainResource string `pulumi:"domainResource"`
	// Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels    map[string]string `pulumi:"labels"`
	PeeringId string            `pulumi:"peeringId"`
	Project   *string           `pulumi:"project"`
	// The current state of this Peering.
	Status *string `pulumi:"status"`
	// Additional information about the current status of this peering, if available.
	StatusMessage *string                         `pulumi:"statusMessage"`
	Timeouts      *ActiveDirectoryPeeringTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ActiveDirectoryPeering resource.
type ActiveDirectoryPeeringArgs struct {
	ActiveDirectoryPeeringId pulumi.StringPtrInput
	// The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
	// CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork pulumi.StringInput
	// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
	// projects/{projectId}/locations/global/domains/{domainName}
	DomainResource pulumi.StringInput
	// Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels    pulumi.StringMapInput
	PeeringId pulumi.StringInput
	Project   pulumi.StringPtrInput
	// The current state of this Peering.
	Status pulumi.StringPtrInput
	// Additional information about the current status of this peering, if available.
	StatusMessage pulumi.StringPtrInput
	Timeouts      ActiveDirectoryPeeringTimeoutsPtrInput
}

func (ActiveDirectoryPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryPeeringArgs)(nil)).Elem()
}

type ActiveDirectoryPeeringInput interface {
	pulumi.Input

	ToActiveDirectoryPeeringOutput() ActiveDirectoryPeeringOutput
	ToActiveDirectoryPeeringOutputWithContext(ctx context.Context) ActiveDirectoryPeeringOutput
}

func (*ActiveDirectoryPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectoryPeering)(nil)).Elem()
}

func (i *ActiveDirectoryPeering) ToActiveDirectoryPeeringOutput() ActiveDirectoryPeeringOutput {
	return i.ToActiveDirectoryPeeringOutputWithContext(context.Background())
}

func (i *ActiveDirectoryPeering) ToActiveDirectoryPeeringOutputWithContext(ctx context.Context) ActiveDirectoryPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryPeeringOutput)
}

type ActiveDirectoryPeeringOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectoryPeering)(nil)).Elem()
}

func (o ActiveDirectoryPeeringOutput) ToActiveDirectoryPeeringOutput() ActiveDirectoryPeeringOutput {
	return o
}

func (o ActiveDirectoryPeeringOutput) ToActiveDirectoryPeeringOutputWithContext(ctx context.Context) ActiveDirectoryPeeringOutput {
	return o
}

func (o ActiveDirectoryPeeringOutput) ActiveDirectoryPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringOutput { return v.ActiveDirectoryPeeringId }).(pulumi.StringOutput)
}

// The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
// CIDR subnets do not overlap between networks, else peering creation will fail.
func (o ActiveDirectoryPeeringOutput) AuthorizedNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringOutput { return v.AuthorizedNetwork }).(pulumi.StringOutput)
}

// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
// projects/{projectId}/locations/global/domains/{domainName}
func (o ActiveDirectoryPeeringOutput) DomainResource() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringOutput { return v.DomainResource }).(pulumi.StringOutput)
}

func (o ActiveDirectoryPeeringOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
// the resource.
func (o ActiveDirectoryPeeringOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Unique name of the peering in this scope including projects and location using the form:
// projects/{projectId}/locations/global/peerings/{peeringId}.
func (o ActiveDirectoryPeeringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ActiveDirectoryPeeringOutput) PeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringOutput { return v.PeeringId }).(pulumi.StringOutput)
}

func (o ActiveDirectoryPeeringOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The current state of this Peering.
func (o ActiveDirectoryPeeringOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Additional information about the current status of this peering, if available.
func (o ActiveDirectoryPeeringOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringPtrOutput { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o ActiveDirectoryPeeringOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o ActiveDirectoryPeeringOutput) Timeouts() ActiveDirectoryPeeringTimeoutsPtrOutput {
	return o.ApplyT(func(v *ActiveDirectoryPeering) ActiveDirectoryPeeringTimeoutsPtrOutput { return v.Timeouts }).(ActiveDirectoryPeeringTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryPeeringInput)(nil)).Elem(), &ActiveDirectoryPeering{})
	pulumi.RegisterOutputType(ActiveDirectoryPeeringOutput{})
}
