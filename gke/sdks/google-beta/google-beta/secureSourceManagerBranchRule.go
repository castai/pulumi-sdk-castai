// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecureSourceManagerBranchRule struct {
	pulumi.CustomResourceState

	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews pulumi.BoolPtrOutput `pulumi:"allowStaleReviews"`
	// The ID for the BranchRule.
	BranchRuleId pulumi.StringOutput `pulumi:"branchRuleId"`
	// Time the BranchRule was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Determines if the branch rule is disabled or not.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern pulumi.StringOutput `pulumi:"includePattern"`
	// The location for the Repository.
	Location pulumi.StringOutput `pulumi:"location"`
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount pulumi.Float64PtrOutput `pulumi:"minimumApprovalsCount"`
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount pulumi.Float64PtrOutput `pulumi:"minimumReviewsCount"`
	// The resource name for the BranchRule.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved pulumi.BoolPtrOutput `pulumi:"requireCommentsResolved"`
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory pulumi.BoolPtrOutput `pulumi:"requireLinearHistory"`
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest              pulumi.BoolPtrOutput                           `pulumi:"requirePullRequest"`
	SecureSourceManagerBranchRuleId pulumi.StringOutput                            `pulumi:"secureSourceManagerBranchRuleId"`
	Timeouts                        SecureSourceManagerBranchRuleTimeoutsPtrOutput `pulumi:"timeouts"`
	// Unique identifier of the BranchRule.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the BranchRule was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSecureSourceManagerBranchRule registers a new resource with the given unique name, arguments, and options.
func NewSecureSourceManagerBranchRule(ctx *pulumi.Context,
	name string, args *SecureSourceManagerBranchRuleArgs, opts ...pulumi.ResourceOption) (*SecureSourceManagerBranchRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BranchRuleId == nil {
		return nil, errors.New("invalid value for required argument 'BranchRuleId'")
	}
	if args.IncludePattern == nil {
		return nil, errors.New("invalid value for required argument 'IncludePattern'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SecureSourceManagerBranchRule
	err = ctx.RegisterPackageResource("google-beta:index/secureSourceManagerBranchRule:SecureSourceManagerBranchRule", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecureSourceManagerBranchRule gets an existing SecureSourceManagerBranchRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecureSourceManagerBranchRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecureSourceManagerBranchRuleState, opts ...pulumi.ResourceOption) (*SecureSourceManagerBranchRule, error) {
	var resource SecureSourceManagerBranchRule
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/secureSourceManagerBranchRule:SecureSourceManagerBranchRule", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecureSourceManagerBranchRule resources.
type secureSourceManagerBranchRuleState struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews *bool `pulumi:"allowStaleReviews"`
	// The ID for the BranchRule.
	BranchRuleId *string `pulumi:"branchRuleId"`
	// Time the BranchRule was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Determines if the branch rule is disabled or not.
	Disabled *bool `pulumi:"disabled"`
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern *string `pulumi:"includePattern"`
	// The location for the Repository.
	Location *string `pulumi:"location"`
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount *float64 `pulumi:"minimumApprovalsCount"`
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount *float64 `pulumi:"minimumReviewsCount"`
	// The resource name for the BranchRule.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved *bool `pulumi:"requireCommentsResolved"`
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory *bool `pulumi:"requireLinearHistory"`
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest              *bool                                  `pulumi:"requirePullRequest"`
	SecureSourceManagerBranchRuleId *string                                `pulumi:"secureSourceManagerBranchRuleId"`
	Timeouts                        *SecureSourceManagerBranchRuleTimeouts `pulumi:"timeouts"`
	// Unique identifier of the BranchRule.
	Uid *string `pulumi:"uid"`
	// Time the BranchRule was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type SecureSourceManagerBranchRuleState struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews pulumi.BoolPtrInput
	// The ID for the BranchRule.
	BranchRuleId pulumi.StringPtrInput
	// Time the BranchRule was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Determines if the branch rule is disabled or not.
	Disabled pulumi.BoolPtrInput
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern pulumi.StringPtrInput
	// The location for the Repository.
	Location pulumi.StringPtrInput
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount pulumi.Float64PtrInput
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount pulumi.Float64PtrInput
	// The resource name for the BranchRule.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringPtrInput
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved pulumi.BoolPtrInput
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory pulumi.BoolPtrInput
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest              pulumi.BoolPtrInput
	SecureSourceManagerBranchRuleId pulumi.StringPtrInput
	Timeouts                        SecureSourceManagerBranchRuleTimeoutsPtrInput
	// Unique identifier of the BranchRule.
	Uid pulumi.StringPtrInput
	// Time the BranchRule was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (SecureSourceManagerBranchRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secureSourceManagerBranchRuleState)(nil)).Elem()
}

type secureSourceManagerBranchRuleArgs struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews *bool `pulumi:"allowStaleReviews"`
	// The ID for the BranchRule.
	BranchRuleId string `pulumi:"branchRuleId"`
	// Determines if the branch rule is disabled or not.
	Disabled *bool `pulumi:"disabled"`
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern string `pulumi:"includePattern"`
	// The location for the Repository.
	Location string `pulumi:"location"`
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount *float64 `pulumi:"minimumApprovalsCount"`
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount *float64 `pulumi:"minimumReviewsCount"`
	Project             *string  `pulumi:"project"`
	// The ID for the Repository.
	RepositoryId string `pulumi:"repositoryId"`
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved *bool `pulumi:"requireCommentsResolved"`
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory *bool `pulumi:"requireLinearHistory"`
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest              *bool                                  `pulumi:"requirePullRequest"`
	SecureSourceManagerBranchRuleId *string                                `pulumi:"secureSourceManagerBranchRuleId"`
	Timeouts                        *SecureSourceManagerBranchRuleTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SecureSourceManagerBranchRule resource.
type SecureSourceManagerBranchRuleArgs struct {
	// Determines if allow stale reviews or approvals before merging to the branch.
	AllowStaleReviews pulumi.BoolPtrInput
	// The ID for the BranchRule.
	BranchRuleId pulumi.StringInput
	// Determines if the branch rule is disabled or not.
	Disabled pulumi.BoolPtrInput
	// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
	IncludePattern pulumi.StringInput
	// The location for the Repository.
	Location pulumi.StringInput
	// The minimum number of approvals required for the branch rule to be matched.
	MinimumApprovalsCount pulumi.Float64PtrInput
	// The minimum number of reviews required for the branch rule to be matched.
	MinimumReviewsCount pulumi.Float64PtrInput
	Project             pulumi.StringPtrInput
	// The ID for the Repository.
	RepositoryId pulumi.StringInput
	// Determines if require comments resolved before merging to the branch.
	RequireCommentsResolved pulumi.BoolPtrInput
	// Determines if require linear history before merging to the branch.
	RequireLinearHistory pulumi.BoolPtrInput
	// Determines if the branch rule requires a pull request or not.
	RequirePullRequest              pulumi.BoolPtrInput
	SecureSourceManagerBranchRuleId pulumi.StringPtrInput
	Timeouts                        SecureSourceManagerBranchRuleTimeoutsPtrInput
}

func (SecureSourceManagerBranchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secureSourceManagerBranchRuleArgs)(nil)).Elem()
}

type SecureSourceManagerBranchRuleInput interface {
	pulumi.Input

	ToSecureSourceManagerBranchRuleOutput() SecureSourceManagerBranchRuleOutput
	ToSecureSourceManagerBranchRuleOutputWithContext(ctx context.Context) SecureSourceManagerBranchRuleOutput
}

func (*SecureSourceManagerBranchRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureSourceManagerBranchRule)(nil)).Elem()
}

func (i *SecureSourceManagerBranchRule) ToSecureSourceManagerBranchRuleOutput() SecureSourceManagerBranchRuleOutput {
	return i.ToSecureSourceManagerBranchRuleOutputWithContext(context.Background())
}

func (i *SecureSourceManagerBranchRule) ToSecureSourceManagerBranchRuleOutputWithContext(ctx context.Context) SecureSourceManagerBranchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureSourceManagerBranchRuleOutput)
}

type SecureSourceManagerBranchRuleOutput struct{ *pulumi.OutputState }

func (SecureSourceManagerBranchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureSourceManagerBranchRule)(nil)).Elem()
}

func (o SecureSourceManagerBranchRuleOutput) ToSecureSourceManagerBranchRuleOutput() SecureSourceManagerBranchRuleOutput {
	return o
}

func (o SecureSourceManagerBranchRuleOutput) ToSecureSourceManagerBranchRuleOutputWithContext(ctx context.Context) SecureSourceManagerBranchRuleOutput {
	return o
}

// Determines if allow stale reviews or approvals before merging to the branch.
func (o SecureSourceManagerBranchRuleOutput) AllowStaleReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.BoolPtrOutput { return v.AllowStaleReviews }).(pulumi.BoolPtrOutput)
}

// The ID for the BranchRule.
func (o SecureSourceManagerBranchRuleOutput) BranchRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.BranchRuleId }).(pulumi.StringOutput)
}

// Time the BranchRule was created in UTC.
func (o SecureSourceManagerBranchRuleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Determines if the branch rule is disabled or not.
func (o SecureSourceManagerBranchRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
func (o SecureSourceManagerBranchRuleOutput) IncludePattern() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.IncludePattern }).(pulumi.StringOutput)
}

// The location for the Repository.
func (o SecureSourceManagerBranchRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The minimum number of approvals required for the branch rule to be matched.
func (o SecureSourceManagerBranchRuleOutput) MinimumApprovalsCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.Float64PtrOutput { return v.MinimumApprovalsCount }).(pulumi.Float64PtrOutput)
}

// The minimum number of reviews required for the branch rule to be matched.
func (o SecureSourceManagerBranchRuleOutput) MinimumReviewsCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.Float64PtrOutput { return v.MinimumReviewsCount }).(pulumi.Float64PtrOutput)
}

// The resource name for the BranchRule.
func (o SecureSourceManagerBranchRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SecureSourceManagerBranchRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID for the Repository.
func (o SecureSourceManagerBranchRuleOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// Determines if require comments resolved before merging to the branch.
func (o SecureSourceManagerBranchRuleOutput) RequireCommentsResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.BoolPtrOutput { return v.RequireCommentsResolved }).(pulumi.BoolPtrOutput)
}

// Determines if require linear history before merging to the branch.
func (o SecureSourceManagerBranchRuleOutput) RequireLinearHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.BoolPtrOutput { return v.RequireLinearHistory }).(pulumi.BoolPtrOutput)
}

// Determines if the branch rule requires a pull request or not.
func (o SecureSourceManagerBranchRuleOutput) RequirePullRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.BoolPtrOutput { return v.RequirePullRequest }).(pulumi.BoolPtrOutput)
}

func (o SecureSourceManagerBranchRuleOutput) SecureSourceManagerBranchRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.SecureSourceManagerBranchRuleId }).(pulumi.StringOutput)
}

func (o SecureSourceManagerBranchRuleOutput) Timeouts() SecureSourceManagerBranchRuleTimeoutsPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) SecureSourceManagerBranchRuleTimeoutsPtrOutput {
		return v.Timeouts
	}).(SecureSourceManagerBranchRuleTimeoutsPtrOutput)
}

// Unique identifier of the BranchRule.
func (o SecureSourceManagerBranchRuleOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the BranchRule was updated in UTC.
func (o SecureSourceManagerBranchRuleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerBranchRule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecureSourceManagerBranchRuleInput)(nil)).Elem(), &SecureSourceManagerBranchRule{})
	pulumi.RegisterOutputType(SecureSourceManagerBranchRuleOutput{})
}
