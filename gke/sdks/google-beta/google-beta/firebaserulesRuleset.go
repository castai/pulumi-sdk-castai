// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaserulesRuleset struct {
	pulumi.CustomResourceState

	// Output only. Time the `Ruleset` was created.
	CreateTime             pulumi.StringOutput `pulumi:"createTime"`
	FirebaserulesRulesetId pulumi.StringOutput `pulumi:"firebaserulesRulesetId"`
	// Output only. The metadata for this ruleset.
	Metadatas FirebaserulesRulesetMetadataArrayOutput `pulumi:"metadatas"`
	// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format:
	// `projects/{project_id}/rulesets/{ruleset_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// `Source` for the `Ruleset`.
	Source   FirebaserulesRulesetSourceOutput      `pulumi:"source"`
	Timeouts FirebaserulesRulesetTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFirebaserulesRuleset registers a new resource with the given unique name, arguments, and options.
func NewFirebaserulesRuleset(ctx *pulumi.Context,
	name string, args *FirebaserulesRulesetArgs, opts ...pulumi.ResourceOption) (*FirebaserulesRuleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaserulesRuleset
	err = ctx.RegisterPackageResource("google-beta:index/firebaserulesRuleset:FirebaserulesRuleset", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaserulesRuleset gets an existing FirebaserulesRuleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaserulesRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaserulesRulesetState, opts ...pulumi.ResourceOption) (*FirebaserulesRuleset, error) {
	var resource FirebaserulesRuleset
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaserulesRuleset:FirebaserulesRuleset", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaserulesRuleset resources.
type firebaserulesRulesetState struct {
	// Output only. Time the `Ruleset` was created.
	CreateTime             *string `pulumi:"createTime"`
	FirebaserulesRulesetId *string `pulumi:"firebaserulesRulesetId"`
	// Output only. The metadata for this ruleset.
	Metadatas []FirebaserulesRulesetMetadata `pulumi:"metadatas"`
	// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format:
	// `projects/{project_id}/rulesets/{ruleset_id}`
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// `Source` for the `Ruleset`.
	Source   *FirebaserulesRulesetSource   `pulumi:"source"`
	Timeouts *FirebaserulesRulesetTimeouts `pulumi:"timeouts"`
}

type FirebaserulesRulesetState struct {
	// Output only. Time the `Ruleset` was created.
	CreateTime             pulumi.StringPtrInput
	FirebaserulesRulesetId pulumi.StringPtrInput
	// Output only. The metadata for this ruleset.
	Metadatas FirebaserulesRulesetMetadataArrayInput
	// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format:
	// `projects/{project_id}/rulesets/{ruleset_id}`
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// `Source` for the `Ruleset`.
	Source   FirebaserulesRulesetSourcePtrInput
	Timeouts FirebaserulesRulesetTimeoutsPtrInput
}

func (FirebaserulesRulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaserulesRulesetState)(nil)).Elem()
}

type firebaserulesRulesetArgs struct {
	FirebaserulesRulesetId *string `pulumi:"firebaserulesRulesetId"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// `Source` for the `Ruleset`.
	Source   FirebaserulesRulesetSource    `pulumi:"source"`
	Timeouts *FirebaserulesRulesetTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaserulesRuleset resource.
type FirebaserulesRulesetArgs struct {
	FirebaserulesRulesetId pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// `Source` for the `Ruleset`.
	Source   FirebaserulesRulesetSourceInput
	Timeouts FirebaserulesRulesetTimeoutsPtrInput
}

func (FirebaserulesRulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaserulesRulesetArgs)(nil)).Elem()
}

type FirebaserulesRulesetInput interface {
	pulumi.Input

	ToFirebaserulesRulesetOutput() FirebaserulesRulesetOutput
	ToFirebaserulesRulesetOutputWithContext(ctx context.Context) FirebaserulesRulesetOutput
}

func (*FirebaserulesRuleset) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaserulesRuleset)(nil)).Elem()
}

func (i *FirebaserulesRuleset) ToFirebaserulesRulesetOutput() FirebaserulesRulesetOutput {
	return i.ToFirebaserulesRulesetOutputWithContext(context.Background())
}

func (i *FirebaserulesRuleset) ToFirebaserulesRulesetOutputWithContext(ctx context.Context) FirebaserulesRulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaserulesRulesetOutput)
}

type FirebaserulesRulesetOutput struct{ *pulumi.OutputState }

func (FirebaserulesRulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaserulesRuleset)(nil)).Elem()
}

func (o FirebaserulesRulesetOutput) ToFirebaserulesRulesetOutput() FirebaserulesRulesetOutput {
	return o
}

func (o FirebaserulesRulesetOutput) ToFirebaserulesRulesetOutputWithContext(ctx context.Context) FirebaserulesRulesetOutput {
	return o
}

// Output only. Time the `Ruleset` was created.
func (o FirebaserulesRulesetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o FirebaserulesRulesetOutput) FirebaserulesRulesetId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) pulumi.StringOutput { return v.FirebaserulesRulesetId }).(pulumi.StringOutput)
}

// Output only. The metadata for this ruleset.
func (o FirebaserulesRulesetOutput) Metadatas() FirebaserulesRulesetMetadataArrayOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) FirebaserulesRulesetMetadataArrayOutput { return v.Metadatas }).(FirebaserulesRulesetMetadataArrayOutput)
}

// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format:
// `projects/{project_id}/rulesets/{ruleset_id}`
func (o FirebaserulesRulesetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o FirebaserulesRulesetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// `Source` for the `Ruleset`.
func (o FirebaserulesRulesetOutput) Source() FirebaserulesRulesetSourceOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) FirebaserulesRulesetSourceOutput { return v.Source }).(FirebaserulesRulesetSourceOutput)
}

func (o FirebaserulesRulesetOutput) Timeouts() FirebaserulesRulesetTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaserulesRuleset) FirebaserulesRulesetTimeoutsPtrOutput { return v.Timeouts }).(FirebaserulesRulesetTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaserulesRulesetInput)(nil)).Elem(), &FirebaserulesRuleset{})
	pulumi.RegisterOutputType(FirebaserulesRulesetOutput{})
}
