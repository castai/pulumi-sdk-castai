// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DialogflowCxVersion struct {
	pulumi.CustomResourceState

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description           pulumi.StringPtrOutput `pulumi:"description"`
	DialogflowCxVersionId pulumi.StringOutput    `pulumi:"dialogflowCxVersionId"`
	// The human-readable name of the version. Limit of 64 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
	// upon version creation.
	Name pulumi.StringOutput `pulumi:"name"`
	// The NLU settings of the flow at version creation.
	NluSettings DialogflowCxVersionNluSettingArrayOutput `pulumi:"nluSettings"`
	// The Flow to create an Version for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
	// The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
	// has succeeded and this version is ready to serve. * FAILED: Version training failed.
	State    pulumi.StringOutput                  `pulumi:"state"`
	Timeouts DialogflowCxVersionTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDialogflowCxVersion registers a new resource with the given unique name, arguments, and options.
func NewDialogflowCxVersion(ctx *pulumi.Context,
	name string, args *DialogflowCxVersionArgs, opts ...pulumi.ResourceOption) (*DialogflowCxVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DialogflowCxVersion
	err = ctx.RegisterPackageResource("google-beta:index/dialogflowCxVersion:DialogflowCxVersion", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDialogflowCxVersion gets an existing DialogflowCxVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDialogflowCxVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DialogflowCxVersionState, opts ...pulumi.ResourceOption) (*DialogflowCxVersion, error) {
	var resource DialogflowCxVersion
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dialogflowCxVersion:DialogflowCxVersion", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DialogflowCxVersion resources.
type dialogflowCxVersionState struct {
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description           *string `pulumi:"description"`
	DialogflowCxVersionId *string `pulumi:"dialogflowCxVersionId"`
	// The human-readable name of the version. Limit of 64 characters.
	DisplayName *string `pulumi:"displayName"`
	// Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
	// upon version creation.
	Name *string `pulumi:"name"`
	// The NLU settings of the flow at version creation.
	NluSettings []DialogflowCxVersionNluSetting `pulumi:"nluSettings"`
	// The Flow to create an Version for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	Parent *string `pulumi:"parent"`
	// The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
	// has succeeded and this version is ready to serve. * FAILED: Version training failed.
	State    *string                      `pulumi:"state"`
	Timeouts *DialogflowCxVersionTimeouts `pulumi:"timeouts"`
}

type DialogflowCxVersionState struct {
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description           pulumi.StringPtrInput
	DialogflowCxVersionId pulumi.StringPtrInput
	// The human-readable name of the version. Limit of 64 characters.
	DisplayName pulumi.StringPtrInput
	// Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
	// upon version creation.
	Name pulumi.StringPtrInput
	// The NLU settings of the flow at version creation.
	NluSettings DialogflowCxVersionNluSettingArrayInput
	// The Flow to create an Version for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	Parent pulumi.StringPtrInput
	// The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
	// has succeeded and this version is ready to serve. * FAILED: Version training failed.
	State    pulumi.StringPtrInput
	Timeouts DialogflowCxVersionTimeoutsPtrInput
}

func (DialogflowCxVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dialogflowCxVersionState)(nil)).Elem()
}

type dialogflowCxVersionArgs struct {
	// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description           *string `pulumi:"description"`
	DialogflowCxVersionId *string `pulumi:"dialogflowCxVersionId"`
	// The human-readable name of the version. Limit of 64 characters.
	DisplayName string `pulumi:"displayName"`
	// The Flow to create an Version for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	Parent   *string                      `pulumi:"parent"`
	Timeouts *DialogflowCxVersionTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DialogflowCxVersion resource.
type DialogflowCxVersionArgs struct {
	// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
	Description           pulumi.StringPtrInput
	DialogflowCxVersionId pulumi.StringPtrInput
	// The human-readable name of the version. Limit of 64 characters.
	DisplayName pulumi.StringInput
	// The Flow to create an Version for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
	// ID>.
	Parent   pulumi.StringPtrInput
	Timeouts DialogflowCxVersionTimeoutsPtrInput
}

func (DialogflowCxVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dialogflowCxVersionArgs)(nil)).Elem()
}

type DialogflowCxVersionInput interface {
	pulumi.Input

	ToDialogflowCxVersionOutput() DialogflowCxVersionOutput
	ToDialogflowCxVersionOutputWithContext(ctx context.Context) DialogflowCxVersionOutput
}

func (*DialogflowCxVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**DialogflowCxVersion)(nil)).Elem()
}

func (i *DialogflowCxVersion) ToDialogflowCxVersionOutput() DialogflowCxVersionOutput {
	return i.ToDialogflowCxVersionOutputWithContext(context.Background())
}

func (i *DialogflowCxVersion) ToDialogflowCxVersionOutputWithContext(ctx context.Context) DialogflowCxVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DialogflowCxVersionOutput)
}

type DialogflowCxVersionOutput struct{ *pulumi.OutputState }

func (DialogflowCxVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DialogflowCxVersion)(nil)).Elem()
}

func (o DialogflowCxVersionOutput) ToDialogflowCxVersionOutput() DialogflowCxVersionOutput {
	return o
}

func (o DialogflowCxVersionOutput) ToDialogflowCxVersionOutputWithContext(ctx context.Context) DialogflowCxVersionOutput {
	return o
}

// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples:
// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o DialogflowCxVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
func (o DialogflowCxVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DialogflowCxVersionOutput) DialogflowCxVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringOutput { return v.DialogflowCxVersionId }).(pulumi.StringOutput)
}

// The human-readable name of the version. Limit of 64 characters.
func (o DialogflowCxVersionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
// upon version creation.
func (o DialogflowCxVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The NLU settings of the flow at version creation.
func (o DialogflowCxVersionOutput) NluSettings() DialogflowCxVersionNluSettingArrayOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) DialogflowCxVersionNluSettingArrayOutput { return v.NluSettings }).(DialogflowCxVersionNluSettingArrayOutput)
}

// The Flow to create an Version for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow
// ID>.
func (o DialogflowCxVersionOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

// The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
// has succeeded and this version is ready to serve. * FAILED: Version training failed.
func (o DialogflowCxVersionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o DialogflowCxVersionOutput) Timeouts() DialogflowCxVersionTimeoutsPtrOutput {
	return o.ApplyT(func(v *DialogflowCxVersion) DialogflowCxVersionTimeoutsPtrOutput { return v.Timeouts }).(DialogflowCxVersionTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DialogflowCxVersionInput)(nil)).Elem(), &DialogflowCxVersion{})
	pulumi.RegisterOutputType(DialogflowCxVersionOutput{})
}
