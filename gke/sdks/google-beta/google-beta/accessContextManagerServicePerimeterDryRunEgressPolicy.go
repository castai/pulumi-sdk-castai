// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerServicePerimeterDryRunEgressPolicy struct {
	pulumi.CustomResourceState

	AccessContextManagerServicePerimeterDryRunEgressPolicyId pulumi.StringOutput `pulumi:"accessContextManagerServicePerimeterDryRunEgressPolicyId"`
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringOutput `pulumi:"accessPolicyId"`
	// Defines conditions on the source of a request causing this 'EgressPolicy' to apply.
	EgressFrom AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFromPtrOutput `pulumi:"egressFrom"`
	// Defines the conditions on the 'ApiOperation' and destination resources that cause this 'EgressPolicy' to apply.
	EgressTo AccessContextManagerServicePerimeterDryRunEgressPolicyEgressToPtrOutput `pulumi:"egressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringOutput                                                     `pulumi:"perimeter"`
	Timeouts  AccessContextManagerServicePerimeterDryRunEgressPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAccessContextManagerServicePerimeterDryRunEgressPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerServicePerimeterDryRunEgressPolicy(ctx *pulumi.Context,
	name string, args *AccessContextManagerServicePerimeterDryRunEgressPolicyArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeterDryRunEgressPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Perimeter == nil {
		return nil, errors.New("invalid value for required argument 'Perimeter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerServicePerimeterDryRunEgressPolicy
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerServicePerimeterDryRunEgressPolicy:AccessContextManagerServicePerimeterDryRunEgressPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerServicePerimeterDryRunEgressPolicy gets an existing AccessContextManagerServicePerimeterDryRunEgressPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerServicePerimeterDryRunEgressPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerServicePerimeterDryRunEgressPolicyState, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeterDryRunEgressPolicy, error) {
	var resource AccessContextManagerServicePerimeterDryRunEgressPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerServicePerimeterDryRunEgressPolicy:AccessContextManagerServicePerimeterDryRunEgressPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerServicePerimeterDryRunEgressPolicy resources.
type accessContextManagerServicePerimeterDryRunEgressPolicyState struct {
	AccessContextManagerServicePerimeterDryRunEgressPolicyId *string `pulumi:"accessContextManagerServicePerimeterDryRunEgressPolicyId"`
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// Defines conditions on the source of a request causing this 'EgressPolicy' to apply.
	EgressFrom *AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFrom `pulumi:"egressFrom"`
	// Defines the conditions on the 'ApiOperation' and destination resources that cause this 'EgressPolicy' to apply.
	EgressTo *AccessContextManagerServicePerimeterDryRunEgressPolicyEgressTo `pulumi:"egressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter *string                                                         `pulumi:"perimeter"`
	Timeouts  *AccessContextManagerServicePerimeterDryRunEgressPolicyTimeouts `pulumi:"timeouts"`
}

type AccessContextManagerServicePerimeterDryRunEgressPolicyState struct {
	AccessContextManagerServicePerimeterDryRunEgressPolicyId pulumi.StringPtrInput
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringPtrInput
	// Defines conditions on the source of a request causing this 'EgressPolicy' to apply.
	EgressFrom AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFromPtrInput
	// Defines the conditions on the 'ApiOperation' and destination resources that cause this 'EgressPolicy' to apply.
	EgressTo AccessContextManagerServicePerimeterDryRunEgressPolicyEgressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringPtrInput
	Timeouts  AccessContextManagerServicePerimeterDryRunEgressPolicyTimeoutsPtrInput
}

func (AccessContextManagerServicePerimeterDryRunEgressPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimeterDryRunEgressPolicyState)(nil)).Elem()
}

type accessContextManagerServicePerimeterDryRunEgressPolicyArgs struct {
	AccessContextManagerServicePerimeterDryRunEgressPolicyId *string `pulumi:"accessContextManagerServicePerimeterDryRunEgressPolicyId"`
	// Defines conditions on the source of a request causing this 'EgressPolicy' to apply.
	EgressFrom *AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFrom `pulumi:"egressFrom"`
	// Defines the conditions on the 'ApiOperation' and destination resources that cause this 'EgressPolicy' to apply.
	EgressTo *AccessContextManagerServicePerimeterDryRunEgressPolicyEgressTo `pulumi:"egressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter string                                                          `pulumi:"perimeter"`
	Timeouts  *AccessContextManagerServicePerimeterDryRunEgressPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessContextManagerServicePerimeterDryRunEgressPolicy resource.
type AccessContextManagerServicePerimeterDryRunEgressPolicyArgs struct {
	AccessContextManagerServicePerimeterDryRunEgressPolicyId pulumi.StringPtrInput
	// Defines conditions on the source of a request causing this 'EgressPolicy' to apply.
	EgressFrom AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFromPtrInput
	// Defines the conditions on the 'ApiOperation' and destination resources that cause this 'EgressPolicy' to apply.
	EgressTo AccessContextManagerServicePerimeterDryRunEgressPolicyEgressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringInput
	Timeouts  AccessContextManagerServicePerimeterDryRunEgressPolicyTimeoutsPtrInput
}

func (AccessContextManagerServicePerimeterDryRunEgressPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimeterDryRunEgressPolicyArgs)(nil)).Elem()
}

type AccessContextManagerServicePerimeterDryRunEgressPolicyInput interface {
	pulumi.Input

	ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutput() AccessContextManagerServicePerimeterDryRunEgressPolicyOutput
	ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterDryRunEgressPolicyOutput
}

func (*AccessContextManagerServicePerimeterDryRunEgressPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (i *AccessContextManagerServicePerimeterDryRunEgressPolicy) ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutput() AccessContextManagerServicePerimeterDryRunEgressPolicyOutput {
	return i.ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutputWithContext(context.Background())
}

func (i *AccessContextManagerServicePerimeterDryRunEgressPolicy) ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterDryRunEgressPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerServicePerimeterDryRunEgressPolicyOutput)
}

type AccessContextManagerServicePerimeterDryRunEgressPolicyOutput struct{ *pulumi.OutputState }

func (AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeterDryRunEgressPolicy)(nil)).Elem()
}

func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutput() AccessContextManagerServicePerimeterDryRunEgressPolicyOutput {
	return o
}

func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) ToAccessContextManagerServicePerimeterDryRunEgressPolicyOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterDryRunEgressPolicyOutput {
	return o
}

func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) AccessContextManagerServicePerimeterDryRunEgressPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunEgressPolicy) pulumi.StringOutput {
		return v.AccessContextManagerServicePerimeterDryRunEgressPolicyId
	}).(pulumi.StringOutput)
}

// The name of the Access Policy this resource belongs to.
func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) AccessPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunEgressPolicy) pulumi.StringOutput {
		return v.AccessPolicyId
	}).(pulumi.StringOutput)
}

// Defines conditions on the source of a request causing this 'EgressPolicy' to apply.
func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) EgressFrom() AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFromPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunEgressPolicy) AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFromPtrOutput {
		return v.EgressFrom
	}).(AccessContextManagerServicePerimeterDryRunEgressPolicyEgressFromPtrOutput)
}

// Defines the conditions on the 'ApiOperation' and destination resources that cause this 'EgressPolicy' to apply.
func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) EgressTo() AccessContextManagerServicePerimeterDryRunEgressPolicyEgressToPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunEgressPolicy) AccessContextManagerServicePerimeterDryRunEgressPolicyEgressToPtrOutput {
		return v.EgressTo
	}).(AccessContextManagerServicePerimeterDryRunEgressPolicyEgressToPtrOutput)
}

// The name of the Service Perimeter to add this resource to.
func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) Perimeter() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunEgressPolicy) pulumi.StringOutput {
		return v.Perimeter
	}).(pulumi.StringOutput)
}

func (o AccessContextManagerServicePerimeterDryRunEgressPolicyOutput) Timeouts() AccessContextManagerServicePerimeterDryRunEgressPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunEgressPolicy) AccessContextManagerServicePerimeterDryRunEgressPolicyTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerServicePerimeterDryRunEgressPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerServicePerimeterDryRunEgressPolicyInput)(nil)).Elem(), &AccessContextManagerServicePerimeterDryRunEgressPolicy{})
	pulumi.RegisterOutputType(AccessContextManagerServicePerimeterDryRunEgressPolicyOutput{})
}
