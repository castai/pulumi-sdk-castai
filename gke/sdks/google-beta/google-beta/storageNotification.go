// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StorageNotification struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription
	CustomAttributes pulumi.StringMapOutput `pulumi:"customAttributes"`
	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all
	// event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// The ID of the created notification.
	NotificationId pulumi.StringOutput `pulumi:"notificationId"`
	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in
	// this bucket whose names begin with the specified prefix.
	ObjectNamePrefix pulumi.StringPtrOutput `pulumi:"objectNamePrefix"`
	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	PayloadFormat pulumi.StringOutput `pulumi:"payloadFormat"`
	// The URI of the created resource.
	SelfLink              pulumi.StringOutput `pulumi:"selfLink"`
	StorageNotificationId pulumi.StringOutput `pulumi:"storageNotificationId"`
	// The Cloud Pub/Sub topic to which this subscription publishes. Expects either the topic name, assumed to belong to the
	// default GCP provider project, or the project-level name, i.e. projects/my-gcp-project/topics/my-topic or my-topic. If
	// the project is not set in the provider, you will need to use the project-level name.
	Topic pulumi.StringOutput `pulumi:"topic"`
}

// NewStorageNotification registers a new resource with the given unique name, arguments, and options.
func NewStorageNotification(ctx *pulumi.Context,
	name string, args *StorageNotificationArgs, opts ...pulumi.ResourceOption) (*StorageNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.PayloadFormat == nil {
		return nil, errors.New("invalid value for required argument 'PayloadFormat'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource StorageNotification
	err = ctx.RegisterPackageResource("google-beta:index/storageNotification:StorageNotification", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageNotification gets an existing StorageNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageNotificationState, opts ...pulumi.ResourceOption) (*StorageNotification, error) {
	var resource StorageNotification
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/storageNotification:StorageNotification", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageNotification resources.
type storageNotificationState struct {
	// The name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all
	// event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	EventTypes []string `pulumi:"eventTypes"`
	// The ID of the created notification.
	NotificationId *string `pulumi:"notificationId"`
	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in
	// this bucket whose names begin with the specified prefix.
	ObjectNamePrefix *string `pulumi:"objectNamePrefix"`
	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	PayloadFormat *string `pulumi:"payloadFormat"`
	// The URI of the created resource.
	SelfLink              *string `pulumi:"selfLink"`
	StorageNotificationId *string `pulumi:"storageNotificationId"`
	// The Cloud Pub/Sub topic to which this subscription publishes. Expects either the topic name, assumed to belong to the
	// default GCP provider project, or the project-level name, i.e. projects/my-gcp-project/topics/my-topic or my-topic. If
	// the project is not set in the provider, you will need to use the project-level name.
	Topic *string `pulumi:"topic"`
}

type StorageNotificationState struct {
	// The name of the bucket.
	Bucket pulumi.StringPtrInput
	// A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription
	CustomAttributes pulumi.StringMapInput
	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all
	// event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	EventTypes pulumi.StringArrayInput
	// The ID of the created notification.
	NotificationId pulumi.StringPtrInput
	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in
	// this bucket whose names begin with the specified prefix.
	ObjectNamePrefix pulumi.StringPtrInput
	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	PayloadFormat pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink              pulumi.StringPtrInput
	StorageNotificationId pulumi.StringPtrInput
	// The Cloud Pub/Sub topic to which this subscription publishes. Expects either the topic name, assumed to belong to the
	// default GCP provider project, or the project-level name, i.e. projects/my-gcp-project/topics/my-topic or my-topic. If
	// the project is not set in the provider, you will need to use the project-level name.
	Topic pulumi.StringPtrInput
}

func (StorageNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageNotificationState)(nil)).Elem()
}

type storageNotificationArgs struct {
	// The name of the bucket.
	Bucket string `pulumi:"bucket"`
	// A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription
	CustomAttributes map[string]string `pulumi:"customAttributes"`
	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all
	// event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	EventTypes []string `pulumi:"eventTypes"`
	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in
	// this bucket whose names begin with the specified prefix.
	ObjectNamePrefix *string `pulumi:"objectNamePrefix"`
	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	PayloadFormat         string  `pulumi:"payloadFormat"`
	StorageNotificationId *string `pulumi:"storageNotificationId"`
	// The Cloud Pub/Sub topic to which this subscription publishes. Expects either the topic name, assumed to belong to the
	// default GCP provider project, or the project-level name, i.e. projects/my-gcp-project/topics/my-topic or my-topic. If
	// the project is not set in the provider, you will need to use the project-level name.
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a StorageNotification resource.
type StorageNotificationArgs struct {
	// The name of the bucket.
	Bucket pulumi.StringInput
	// A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription
	CustomAttributes pulumi.StringMapInput
	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all
	// event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	EventTypes pulumi.StringArrayInput
	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in
	// this bucket whose names begin with the specified prefix.
	ObjectNamePrefix pulumi.StringPtrInput
	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	PayloadFormat         pulumi.StringInput
	StorageNotificationId pulumi.StringPtrInput
	// The Cloud Pub/Sub topic to which this subscription publishes. Expects either the topic name, assumed to belong to the
	// default GCP provider project, or the project-level name, i.e. projects/my-gcp-project/topics/my-topic or my-topic. If
	// the project is not set in the provider, you will need to use the project-level name.
	Topic pulumi.StringInput
}

func (StorageNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageNotificationArgs)(nil)).Elem()
}

type StorageNotificationInput interface {
	pulumi.Input

	ToStorageNotificationOutput() StorageNotificationOutput
	ToStorageNotificationOutputWithContext(ctx context.Context) StorageNotificationOutput
}

func (*StorageNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageNotification)(nil)).Elem()
}

func (i *StorageNotification) ToStorageNotificationOutput() StorageNotificationOutput {
	return i.ToStorageNotificationOutputWithContext(context.Background())
}

func (i *StorageNotification) ToStorageNotificationOutputWithContext(ctx context.Context) StorageNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageNotificationOutput)
}

type StorageNotificationOutput struct{ *pulumi.OutputState }

func (StorageNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageNotification)(nil)).Elem()
}

func (o StorageNotificationOutput) ToStorageNotificationOutput() StorageNotificationOutput {
	return o
}

func (o StorageNotificationOutput) ToStorageNotificationOutputWithContext(ctx context.Context) StorageNotificationOutput {
	return o
}

// The name of the bucket.
func (o StorageNotificationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription
func (o StorageNotificationOutput) CustomAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringMapOutput { return v.CustomAttributes }).(pulumi.StringMapOutput)
}

// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all
// event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
func (o StorageNotificationOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// The ID of the created notification.
func (o StorageNotificationOutput) NotificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringOutput { return v.NotificationId }).(pulumi.StringOutput)
}

// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in
// this bucket whose names begin with the specified prefix.
func (o StorageNotificationOutput) ObjectNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringPtrOutput { return v.ObjectNamePrefix }).(pulumi.StringPtrOutput)
}

// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
func (o StorageNotificationOutput) PayloadFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringOutput { return v.PayloadFormat }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o StorageNotificationOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func (o StorageNotificationOutput) StorageNotificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringOutput { return v.StorageNotificationId }).(pulumi.StringOutput)
}

// The Cloud Pub/Sub topic to which this subscription publishes. Expects either the topic name, assumed to belong to the
// default GCP provider project, or the project-level name, i.e. projects/my-gcp-project/topics/my-topic or my-topic. If
// the project is not set in the provider, you will need to use the project-level name.
func (o StorageNotificationOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageNotification) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageNotificationInput)(nil)).Elem(), &StorageNotification{})
	pulumi.RegisterOutputType(StorageNotificationOutput{})
}
