// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActiveDirectoryDomainTrust struct {
	pulumi.CustomResourceState

	ActiveDirectoryDomainTrustId pulumi.StringOutput `pulumi:"activeDirectoryDomainTrustId"`
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain  pulumi.StringOutput `pulumi:"domain"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication pulumi.BoolPtrOutput `pulumi:"selectiveAuthentication"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses pulumi.StringArrayOutput `pulumi:"targetDnsIpAddresses"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName pulumi.StringOutput                         `pulumi:"targetDomainName"`
	Timeouts         ActiveDirectoryDomainTrustTimeoutsPtrOutput `pulumi:"timeouts"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
	// "OUTBOUND", "BIDIRECTIONAL"]
	TrustDirection pulumi.StringOutput `pulumi:"trustDirection"`
	// The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret pulumi.StringOutput `pulumi:"trustHandshakeSecret"`
	// The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
	TrustType pulumi.StringOutput `pulumi:"trustType"`
}

// NewActiveDirectoryDomainTrust registers a new resource with the given unique name, arguments, and options.
func NewActiveDirectoryDomainTrust(ctx *pulumi.Context,
	name string, args *ActiveDirectoryDomainTrustArgs, opts ...pulumi.ResourceOption) (*ActiveDirectoryDomainTrust, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.TargetDnsIpAddresses == nil {
		return nil, errors.New("invalid value for required argument 'TargetDnsIpAddresses'")
	}
	if args.TargetDomainName == nil {
		return nil, errors.New("invalid value for required argument 'TargetDomainName'")
	}
	if args.TrustDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrustDirection'")
	}
	if args.TrustHandshakeSecret == nil {
		return nil, errors.New("invalid value for required argument 'TrustHandshakeSecret'")
	}
	if args.TrustType == nil {
		return nil, errors.New("invalid value for required argument 'TrustType'")
	}
	if args.TrustHandshakeSecret != nil {
		args.TrustHandshakeSecret = pulumi.ToSecret(args.TrustHandshakeSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"trustHandshakeSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ActiveDirectoryDomainTrust
	err = ctx.RegisterPackageResource("google-beta:index/activeDirectoryDomainTrust:ActiveDirectoryDomainTrust", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveDirectoryDomainTrust gets an existing ActiveDirectoryDomainTrust resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveDirectoryDomainTrust(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveDirectoryDomainTrustState, opts ...pulumi.ResourceOption) (*ActiveDirectoryDomainTrust, error) {
	var resource ActiveDirectoryDomainTrust
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/activeDirectoryDomainTrust:ActiveDirectoryDomainTrust", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveDirectoryDomainTrust resources.
type activeDirectoryDomainTrustState struct {
	ActiveDirectoryDomainTrustId *string `pulumi:"activeDirectoryDomainTrustId"`
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain  *string `pulumi:"domain"`
	Project *string `pulumi:"project"`
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `pulumi:"selectiveAuthentication"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses []string `pulumi:"targetDnsIpAddresses"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName *string                             `pulumi:"targetDomainName"`
	Timeouts         *ActiveDirectoryDomainTrustTimeouts `pulumi:"timeouts"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
	// "OUTBOUND", "BIDIRECTIONAL"]
	TrustDirection *string `pulumi:"trustDirection"`
	// The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret *string `pulumi:"trustHandshakeSecret"`
	// The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
	TrustType *string `pulumi:"trustType"`
}

type ActiveDirectoryDomainTrustState struct {
	ActiveDirectoryDomainTrustId pulumi.StringPtrInput
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain  pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication pulumi.BoolPtrInput
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses pulumi.StringArrayInput
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName pulumi.StringPtrInput
	Timeouts         ActiveDirectoryDomainTrustTimeoutsPtrInput
	// The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
	// "OUTBOUND", "BIDIRECTIONAL"]
	TrustDirection pulumi.StringPtrInput
	// The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret pulumi.StringPtrInput
	// The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
	TrustType pulumi.StringPtrInput
}

func (ActiveDirectoryDomainTrustState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryDomainTrustState)(nil)).Elem()
}

type activeDirectoryDomainTrustArgs struct {
	ActiveDirectoryDomainTrustId *string `pulumi:"activeDirectoryDomainTrustId"`
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain  string  `pulumi:"domain"`
	Project *string `pulumi:"project"`
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `pulumi:"selectiveAuthentication"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses []string `pulumi:"targetDnsIpAddresses"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName string                              `pulumi:"targetDomainName"`
	Timeouts         *ActiveDirectoryDomainTrustTimeouts `pulumi:"timeouts"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
	// "OUTBOUND", "BIDIRECTIONAL"]
	TrustDirection string `pulumi:"trustDirection"`
	// The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret string `pulumi:"trustHandshakeSecret"`
	// The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
	TrustType string `pulumi:"trustType"`
}

// The set of arguments for constructing a ActiveDirectoryDomainTrust resource.
type ActiveDirectoryDomainTrustArgs struct {
	ActiveDirectoryDomainTrustId pulumi.StringPtrInput
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain  pulumi.StringInput
	Project pulumi.StringPtrInput
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication pulumi.BoolPtrInput
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses pulumi.StringArrayInput
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName pulumi.StringInput
	Timeouts         ActiveDirectoryDomainTrustTimeoutsPtrInput
	// The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
	// "OUTBOUND", "BIDIRECTIONAL"]
	TrustDirection pulumi.StringInput
	// The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret pulumi.StringInput
	// The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
	TrustType pulumi.StringInput
}

func (ActiveDirectoryDomainTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeDirectoryDomainTrustArgs)(nil)).Elem()
}

type ActiveDirectoryDomainTrustInput interface {
	pulumi.Input

	ToActiveDirectoryDomainTrustOutput() ActiveDirectoryDomainTrustOutput
	ToActiveDirectoryDomainTrustOutputWithContext(ctx context.Context) ActiveDirectoryDomainTrustOutput
}

func (*ActiveDirectoryDomainTrust) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectoryDomainTrust)(nil)).Elem()
}

func (i *ActiveDirectoryDomainTrust) ToActiveDirectoryDomainTrustOutput() ActiveDirectoryDomainTrustOutput {
	return i.ToActiveDirectoryDomainTrustOutputWithContext(context.Background())
}

func (i *ActiveDirectoryDomainTrust) ToActiveDirectoryDomainTrustOutputWithContext(ctx context.Context) ActiveDirectoryDomainTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryDomainTrustOutput)
}

type ActiveDirectoryDomainTrustOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryDomainTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveDirectoryDomainTrust)(nil)).Elem()
}

func (o ActiveDirectoryDomainTrustOutput) ToActiveDirectoryDomainTrustOutput() ActiveDirectoryDomainTrustOutput {
	return o
}

func (o ActiveDirectoryDomainTrustOutput) ToActiveDirectoryDomainTrustOutputWithContext(ctx context.Context) ActiveDirectoryDomainTrustOutput {
	return o
}

func (o ActiveDirectoryDomainTrustOutput) ActiveDirectoryDomainTrustId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.ActiveDirectoryDomainTrustId }).(pulumi.StringOutput)
}

// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
func (o ActiveDirectoryDomainTrustOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o ActiveDirectoryDomainTrustOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
func (o ActiveDirectoryDomainTrustOutput) SelectiveAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.BoolPtrOutput { return v.SelectiveAuthentication }).(pulumi.BoolPtrOutput)
}

// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
func (o ActiveDirectoryDomainTrustOutput) TargetDnsIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringArrayOutput { return v.TargetDnsIpAddresses }).(pulumi.StringArrayOutput)
}

// The fully qualified target domain name which will be in trust with the current domain.
func (o ActiveDirectoryDomainTrustOutput) TargetDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.TargetDomainName }).(pulumi.StringOutput)
}

func (o ActiveDirectoryDomainTrustOutput) Timeouts() ActiveDirectoryDomainTrustTimeoutsPtrOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) ActiveDirectoryDomainTrustTimeoutsPtrOutput { return v.Timeouts }).(ActiveDirectoryDomainTrustTimeoutsPtrOutput)
}

// The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
// "OUTBOUND", "BIDIRECTIONAL"]
func (o ActiveDirectoryDomainTrustOutput) TrustDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.TrustDirection }).(pulumi.StringOutput)
}

// The trust secret used for the handshake with the target domain. This will not be stored.
func (o ActiveDirectoryDomainTrustOutput) TrustHandshakeSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.TrustHandshakeSecret }).(pulumi.StringOutput)
}

// The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
func (o ActiveDirectoryDomainTrustOutput) TrustType() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveDirectoryDomainTrust) pulumi.StringOutput { return v.TrustType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveDirectoryDomainTrustInput)(nil)).Elem(), &ActiveDirectoryDomainTrust{})
	pulumi.RegisterOutputType(ActiveDirectoryDomainTrustOutput{})
}
