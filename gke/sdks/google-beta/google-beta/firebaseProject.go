// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseProject struct {
	pulumi.CustomResourceState

	// The GCP project display name
	DisplayName       pulumi.StringOutput `pulumi:"displayName"`
	FirebaseProjectId pulumi.StringOutput `pulumi:"firebaseProjectId"`
	Project           pulumi.StringOutput `pulumi:"project"`
	// The number of the Google Project that Firebase is enabled on.
	ProjectNumber pulumi.StringOutput              `pulumi:"projectNumber"`
	Timeouts      FirebaseProjectTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFirebaseProject registers a new resource with the given unique name, arguments, and options.
func NewFirebaseProject(ctx *pulumi.Context,
	name string, args *FirebaseProjectArgs, opts ...pulumi.ResourceOption) (*FirebaseProject, error) {
	if args == nil {
		args = &FirebaseProjectArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseProject
	err = ctx.RegisterPackageResource("google-beta:index/firebaseProject:FirebaseProject", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseProject gets an existing FirebaseProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseProjectState, opts ...pulumi.ResourceOption) (*FirebaseProject, error) {
	var resource FirebaseProject
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaseProject:FirebaseProject", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseProject resources.
type firebaseProjectState struct {
	// The GCP project display name
	DisplayName       *string `pulumi:"displayName"`
	FirebaseProjectId *string `pulumi:"firebaseProjectId"`
	Project           *string `pulumi:"project"`
	// The number of the Google Project that Firebase is enabled on.
	ProjectNumber *string                  `pulumi:"projectNumber"`
	Timeouts      *FirebaseProjectTimeouts `pulumi:"timeouts"`
}

type FirebaseProjectState struct {
	// The GCP project display name
	DisplayName       pulumi.StringPtrInput
	FirebaseProjectId pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	// The number of the Google Project that Firebase is enabled on.
	ProjectNumber pulumi.StringPtrInput
	Timeouts      FirebaseProjectTimeoutsPtrInput
}

func (FirebaseProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseProjectState)(nil)).Elem()
}

type firebaseProjectArgs struct {
	FirebaseProjectId *string                  `pulumi:"firebaseProjectId"`
	Project           *string                  `pulumi:"project"`
	Timeouts          *FirebaseProjectTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaseProject resource.
type FirebaseProjectArgs struct {
	FirebaseProjectId pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	Timeouts          FirebaseProjectTimeoutsPtrInput
}

func (FirebaseProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseProjectArgs)(nil)).Elem()
}

type FirebaseProjectInput interface {
	pulumi.Input

	ToFirebaseProjectOutput() FirebaseProjectOutput
	ToFirebaseProjectOutputWithContext(ctx context.Context) FirebaseProjectOutput
}

func (*FirebaseProject) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseProject)(nil)).Elem()
}

func (i *FirebaseProject) ToFirebaseProjectOutput() FirebaseProjectOutput {
	return i.ToFirebaseProjectOutputWithContext(context.Background())
}

func (i *FirebaseProject) ToFirebaseProjectOutputWithContext(ctx context.Context) FirebaseProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseProjectOutput)
}

type FirebaseProjectOutput struct{ *pulumi.OutputState }

func (FirebaseProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseProject)(nil)).Elem()
}

func (o FirebaseProjectOutput) ToFirebaseProjectOutput() FirebaseProjectOutput {
	return o
}

func (o FirebaseProjectOutput) ToFirebaseProjectOutputWithContext(ctx context.Context) FirebaseProjectOutput {
	return o
}

// The GCP project display name
func (o FirebaseProjectOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseProject) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o FirebaseProjectOutput) FirebaseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseProject) pulumi.StringOutput { return v.FirebaseProjectId }).(pulumi.StringOutput)
}

func (o FirebaseProjectOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseProject) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The number of the Google Project that Firebase is enabled on.
func (o FirebaseProjectOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseProject) pulumi.StringOutput { return v.ProjectNumber }).(pulumi.StringOutput)
}

func (o FirebaseProjectOutput) Timeouts() FirebaseProjectTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseProject) FirebaseProjectTimeoutsPtrOutput { return v.Timeouts }).(FirebaseProjectTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseProjectInput)(nil)).Elem(), &FirebaseProject{})
	pulumi.RegisterOutputType(FirebaseProjectOutput{})
}
