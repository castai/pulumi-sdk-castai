// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ArtifactRegistryVpcscConfig struct {
	pulumi.CustomResourceState

	ArtifactRegistryVpcscConfigId pulumi.StringOutput `pulumi:"artifactRegistryVpcscConfigId"`
	// The name of the location this config is located in.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the project's VPC SC Config. Always of the form: projects/{project}/location/{location}/vpcscConfig
	Name     pulumi.StringOutput                          `pulumi:"name"`
	Project  pulumi.StringOutput                          `pulumi:"project"`
	Timeouts ArtifactRegistryVpcscConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
	VpcscPolicy pulumi.StringPtrOutput `pulumi:"vpcscPolicy"`
}

// NewArtifactRegistryVpcscConfig registers a new resource with the given unique name, arguments, and options.
func NewArtifactRegistryVpcscConfig(ctx *pulumi.Context,
	name string, args *ArtifactRegistryVpcscConfigArgs, opts ...pulumi.ResourceOption) (*ArtifactRegistryVpcscConfig, error) {
	if args == nil {
		args = &ArtifactRegistryVpcscConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ArtifactRegistryVpcscConfig
	err = ctx.RegisterPackageResource("google-beta:index/artifactRegistryVpcscConfig:ArtifactRegistryVpcscConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactRegistryVpcscConfig gets an existing ArtifactRegistryVpcscConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactRegistryVpcscConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactRegistryVpcscConfigState, opts ...pulumi.ResourceOption) (*ArtifactRegistryVpcscConfig, error) {
	var resource ArtifactRegistryVpcscConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/artifactRegistryVpcscConfig:ArtifactRegistryVpcscConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactRegistryVpcscConfig resources.
type artifactRegistryVpcscConfigState struct {
	ArtifactRegistryVpcscConfigId *string `pulumi:"artifactRegistryVpcscConfigId"`
	// The name of the location this config is located in.
	Location *string `pulumi:"location"`
	// The name of the project's VPC SC Config. Always of the form: projects/{project}/location/{location}/vpcscConfig
	Name     *string                              `pulumi:"name"`
	Project  *string                              `pulumi:"project"`
	Timeouts *ArtifactRegistryVpcscConfigTimeouts `pulumi:"timeouts"`
	// The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
	VpcscPolicy *string `pulumi:"vpcscPolicy"`
}

type ArtifactRegistryVpcscConfigState struct {
	ArtifactRegistryVpcscConfigId pulumi.StringPtrInput
	// The name of the location this config is located in.
	Location pulumi.StringPtrInput
	// The name of the project's VPC SC Config. Always of the form: projects/{project}/location/{location}/vpcscConfig
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts ArtifactRegistryVpcscConfigTimeoutsPtrInput
	// The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
	VpcscPolicy pulumi.StringPtrInput
}

func (ArtifactRegistryVpcscConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactRegistryVpcscConfigState)(nil)).Elem()
}

type artifactRegistryVpcscConfigArgs struct {
	ArtifactRegistryVpcscConfigId *string `pulumi:"artifactRegistryVpcscConfigId"`
	// The name of the location this config is located in.
	Location *string                              `pulumi:"location"`
	Project  *string                              `pulumi:"project"`
	Timeouts *ArtifactRegistryVpcscConfigTimeouts `pulumi:"timeouts"`
	// The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
	VpcscPolicy *string `pulumi:"vpcscPolicy"`
}

// The set of arguments for constructing a ArtifactRegistryVpcscConfig resource.
type ArtifactRegistryVpcscConfigArgs struct {
	ArtifactRegistryVpcscConfigId pulumi.StringPtrInput
	// The name of the location this config is located in.
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts ArtifactRegistryVpcscConfigTimeoutsPtrInput
	// The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
	VpcscPolicy pulumi.StringPtrInput
}

func (ArtifactRegistryVpcscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactRegistryVpcscConfigArgs)(nil)).Elem()
}

type ArtifactRegistryVpcscConfigInput interface {
	pulumi.Input

	ToArtifactRegistryVpcscConfigOutput() ArtifactRegistryVpcscConfigOutput
	ToArtifactRegistryVpcscConfigOutputWithContext(ctx context.Context) ArtifactRegistryVpcscConfigOutput
}

func (*ArtifactRegistryVpcscConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactRegistryVpcscConfig)(nil)).Elem()
}

func (i *ArtifactRegistryVpcscConfig) ToArtifactRegistryVpcscConfigOutput() ArtifactRegistryVpcscConfigOutput {
	return i.ToArtifactRegistryVpcscConfigOutputWithContext(context.Background())
}

func (i *ArtifactRegistryVpcscConfig) ToArtifactRegistryVpcscConfigOutputWithContext(ctx context.Context) ArtifactRegistryVpcscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRegistryVpcscConfigOutput)
}

type ArtifactRegistryVpcscConfigOutput struct{ *pulumi.OutputState }

func (ArtifactRegistryVpcscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactRegistryVpcscConfig)(nil)).Elem()
}

func (o ArtifactRegistryVpcscConfigOutput) ToArtifactRegistryVpcscConfigOutput() ArtifactRegistryVpcscConfigOutput {
	return o
}

func (o ArtifactRegistryVpcscConfigOutput) ToArtifactRegistryVpcscConfigOutputWithContext(ctx context.Context) ArtifactRegistryVpcscConfigOutput {
	return o
}

func (o ArtifactRegistryVpcscConfigOutput) ArtifactRegistryVpcscConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryVpcscConfig) pulumi.StringOutput { return v.ArtifactRegistryVpcscConfigId }).(pulumi.StringOutput)
}

// The name of the location this config is located in.
func (o ArtifactRegistryVpcscConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryVpcscConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the project's VPC SC Config. Always of the form: projects/{project}/location/{location}/vpcscConfig
func (o ArtifactRegistryVpcscConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryVpcscConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ArtifactRegistryVpcscConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryVpcscConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ArtifactRegistryVpcscConfigOutput) Timeouts() ArtifactRegistryVpcscConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *ArtifactRegistryVpcscConfig) ArtifactRegistryVpcscConfigTimeoutsPtrOutput { return v.Timeouts }).(ArtifactRegistryVpcscConfigTimeoutsPtrOutput)
}

// The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
func (o ArtifactRegistryVpcscConfigOutput) VpcscPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactRegistryVpcscConfig) pulumi.StringPtrOutput { return v.VpcscPolicy }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactRegistryVpcscConfigInput)(nil)).Elem(), &ArtifactRegistryVpcscConfig{})
	pulumi.RegisterOutputType(ArtifactRegistryVpcscConfigOutput{})
}
