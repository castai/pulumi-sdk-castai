// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeTargetPool struct {
	pulumi.CustomResourceState

	// URL to the backup target pool. Must also set failover_ratio.
	BackupPool          pulumi.StringPtrOutput `pulumi:"backupPool"`
	ComputeTargetPoolId pulumi.StringOutput    `pulumi:"computeTargetPoolId"`
	// Textual description field.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).
	FailoverRatio pulumi.Float64PtrOutput `pulumi:"failoverRatio"`
	// List of zero or one health check name or self_link. Only legacy google-beta.ComputeHttpHealthCheck is supported.
	HealthChecks pulumi.StringArrayOutput `pulumi:"healthChecks"`
	Instances    pulumi.StringArrayOutput `pulumi:"instances"`
	// A unique name for the resource, required by GCE. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Where the target pool resides. Defaults to project region.
	Region pulumi.StringOutput `pulumi:"region"`
	// The resource URL for the security policy associated with this target pool.
	SecurityPolicy pulumi.StringPtrOutput `pulumi:"securityPolicy"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// How to distribute load. Options are "NONE" (no affinity). "CLIENT_IP" (hash of the source/dest addresses / ports), and
	// "CLIENT_IP_PROTO" also includes the protocol (default "NONE").
	SessionAffinity pulumi.StringPtrOutput             `pulumi:"sessionAffinity"`
	Timeouts        ComputeTargetPoolTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewComputeTargetPool registers a new resource with the given unique name, arguments, and options.
func NewComputeTargetPool(ctx *pulumi.Context,
	name string, args *ComputeTargetPoolArgs, opts ...pulumi.ResourceOption) (*ComputeTargetPool, error) {
	if args == nil {
		args = &ComputeTargetPoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeTargetPool
	err = ctx.RegisterPackageResource("google-beta:index/computeTargetPool:ComputeTargetPool", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeTargetPool gets an existing ComputeTargetPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeTargetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeTargetPoolState, opts ...pulumi.ResourceOption) (*ComputeTargetPool, error) {
	var resource ComputeTargetPool
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeTargetPool:ComputeTargetPool", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeTargetPool resources.
type computeTargetPoolState struct {
	// URL to the backup target pool. Must also set failover_ratio.
	BackupPool          *string `pulumi:"backupPool"`
	ComputeTargetPoolId *string `pulumi:"computeTargetPoolId"`
	// Textual description field.
	Description *string `pulumi:"description"`
	// Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).
	FailoverRatio *float64 `pulumi:"failoverRatio"`
	// List of zero or one health check name or self_link. Only legacy google-beta.ComputeHttpHealthCheck is supported.
	HealthChecks []string `pulumi:"healthChecks"`
	Instances    []string `pulumi:"instances"`
	// A unique name for the resource, required by GCE. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Where the target pool resides. Defaults to project region.
	Region *string `pulumi:"region"`
	// The resource URL for the security policy associated with this target pool.
	SecurityPolicy *string `pulumi:"securityPolicy"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// How to distribute load. Options are "NONE" (no affinity). "CLIENT_IP" (hash of the source/dest addresses / ports), and
	// "CLIENT_IP_PROTO" also includes the protocol (default "NONE").
	SessionAffinity *string                    `pulumi:"sessionAffinity"`
	Timeouts        *ComputeTargetPoolTimeouts `pulumi:"timeouts"`
}

type ComputeTargetPoolState struct {
	// URL to the backup target pool. Must also set failover_ratio.
	BackupPool          pulumi.StringPtrInput
	ComputeTargetPoolId pulumi.StringPtrInput
	// Textual description field.
	Description pulumi.StringPtrInput
	// Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).
	FailoverRatio pulumi.Float64PtrInput
	// List of zero or one health check name or self_link. Only legacy google-beta.ComputeHttpHealthCheck is supported.
	HealthChecks pulumi.StringArrayInput
	Instances    pulumi.StringArrayInput
	// A unique name for the resource, required by GCE. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Where the target pool resides. Defaults to project region.
	Region pulumi.StringPtrInput
	// The resource URL for the security policy associated with this target pool.
	SecurityPolicy pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// How to distribute load. Options are "NONE" (no affinity). "CLIENT_IP" (hash of the source/dest addresses / ports), and
	// "CLIENT_IP_PROTO" also includes the protocol (default "NONE").
	SessionAffinity pulumi.StringPtrInput
	Timeouts        ComputeTargetPoolTimeoutsPtrInput
}

func (ComputeTargetPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeTargetPoolState)(nil)).Elem()
}

type computeTargetPoolArgs struct {
	// URL to the backup target pool. Must also set failover_ratio.
	BackupPool          *string `pulumi:"backupPool"`
	ComputeTargetPoolId *string `pulumi:"computeTargetPoolId"`
	// Textual description field.
	Description *string `pulumi:"description"`
	// Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).
	FailoverRatio *float64 `pulumi:"failoverRatio"`
	// List of zero or one health check name or self_link. Only legacy google-beta.ComputeHttpHealthCheck is supported.
	HealthChecks []string `pulumi:"healthChecks"`
	Instances    []string `pulumi:"instances"`
	// A unique name for the resource, required by GCE. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Where the target pool resides. Defaults to project region.
	Region *string `pulumi:"region"`
	// The resource URL for the security policy associated with this target pool.
	SecurityPolicy *string `pulumi:"securityPolicy"`
	// How to distribute load. Options are "NONE" (no affinity). "CLIENT_IP" (hash of the source/dest addresses / ports), and
	// "CLIENT_IP_PROTO" also includes the protocol (default "NONE").
	SessionAffinity *string                    `pulumi:"sessionAffinity"`
	Timeouts        *ComputeTargetPoolTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeTargetPool resource.
type ComputeTargetPoolArgs struct {
	// URL to the backup target pool. Must also set failover_ratio.
	BackupPool          pulumi.StringPtrInput
	ComputeTargetPoolId pulumi.StringPtrInput
	// Textual description field.
	Description pulumi.StringPtrInput
	// Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).
	FailoverRatio pulumi.Float64PtrInput
	// List of zero or one health check name or self_link. Only legacy google-beta.ComputeHttpHealthCheck is supported.
	HealthChecks pulumi.StringArrayInput
	Instances    pulumi.StringArrayInput
	// A unique name for the resource, required by GCE. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Where the target pool resides. Defaults to project region.
	Region pulumi.StringPtrInput
	// The resource URL for the security policy associated with this target pool.
	SecurityPolicy pulumi.StringPtrInput
	// How to distribute load. Options are "NONE" (no affinity). "CLIENT_IP" (hash of the source/dest addresses / ports), and
	// "CLIENT_IP_PROTO" also includes the protocol (default "NONE").
	SessionAffinity pulumi.StringPtrInput
	Timeouts        ComputeTargetPoolTimeoutsPtrInput
}

func (ComputeTargetPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeTargetPoolArgs)(nil)).Elem()
}

type ComputeTargetPoolInput interface {
	pulumi.Input

	ToComputeTargetPoolOutput() ComputeTargetPoolOutput
	ToComputeTargetPoolOutputWithContext(ctx context.Context) ComputeTargetPoolOutput
}

func (*ComputeTargetPool) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeTargetPool)(nil)).Elem()
}

func (i *ComputeTargetPool) ToComputeTargetPoolOutput() ComputeTargetPoolOutput {
	return i.ToComputeTargetPoolOutputWithContext(context.Background())
}

func (i *ComputeTargetPool) ToComputeTargetPoolOutputWithContext(ctx context.Context) ComputeTargetPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeTargetPoolOutput)
}

type ComputeTargetPoolOutput struct{ *pulumi.OutputState }

func (ComputeTargetPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeTargetPool)(nil)).Elem()
}

func (o ComputeTargetPoolOutput) ToComputeTargetPoolOutput() ComputeTargetPoolOutput {
	return o
}

func (o ComputeTargetPoolOutput) ToComputeTargetPoolOutputWithContext(ctx context.Context) ComputeTargetPoolOutput {
	return o
}

// URL to the backup target pool. Must also set failover_ratio.
func (o ComputeTargetPoolOutput) BackupPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringPtrOutput { return v.BackupPool }).(pulumi.StringPtrOutput)
}

func (o ComputeTargetPoolOutput) ComputeTargetPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringOutput { return v.ComputeTargetPoolId }).(pulumi.StringOutput)
}

// Textual description field.
func (o ComputeTargetPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).
func (o ComputeTargetPoolOutput) FailoverRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.Float64PtrOutput { return v.FailoverRatio }).(pulumi.Float64PtrOutput)
}

// List of zero or one health check name or self_link. Only legacy google-beta.ComputeHttpHealthCheck is supported.
func (o ComputeTargetPoolOutput) HealthChecks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringArrayOutput { return v.HealthChecks }).(pulumi.StringArrayOutput)
}

func (o ComputeTargetPoolOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringArrayOutput { return v.Instances }).(pulumi.StringArrayOutput)
}

// A unique name for the resource, required by GCE. Changing this forces a new resource to be created.
func (o ComputeTargetPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (o ComputeTargetPoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Where the target pool resides. Defaults to project region.
func (o ComputeTargetPoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The resource URL for the security policy associated with this target pool.
func (o ComputeTargetPoolOutput) SecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringPtrOutput { return v.SecurityPolicy }).(pulumi.StringPtrOutput)
}

// The URI of the created resource.
func (o ComputeTargetPoolOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// How to distribute load. Options are "NONE" (no affinity). "CLIENT_IP" (hash of the source/dest addresses / ports), and
// "CLIENT_IP_PROTO" also includes the protocol (default "NONE").
func (o ComputeTargetPoolOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeTargetPool) pulumi.StringPtrOutput { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o ComputeTargetPoolOutput) Timeouts() ComputeTargetPoolTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeTargetPool) ComputeTargetPoolTimeoutsPtrOutput { return v.Timeouts }).(ComputeTargetPoolTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeTargetPoolInput)(nil)).Elem(), &ComputeTargetPool{})
	pulumi.RegisterOutputType(ComputeTargetPoolOutput{})
}
