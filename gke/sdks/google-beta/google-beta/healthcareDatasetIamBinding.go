// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HealthcareDatasetIamBinding struct {
	pulumi.CustomResourceState

	Condition                     HealthcareDatasetIamBindingConditionPtrOutput `pulumi:"condition"`
	DatasetId                     pulumi.StringOutput                           `pulumi:"datasetId"`
	Etag                          pulumi.StringOutput                           `pulumi:"etag"`
	HealthcareDatasetIamBindingId pulumi.StringOutput                           `pulumi:"healthcareDatasetIamBindingId"`
	Members                       pulumi.StringArrayOutput                      `pulumi:"members"`
	Role                          pulumi.StringOutput                           `pulumi:"role"`
}

// NewHealthcareDatasetIamBinding registers a new resource with the given unique name, arguments, and options.
func NewHealthcareDatasetIamBinding(ctx *pulumi.Context,
	name string, args *HealthcareDatasetIamBindingArgs, opts ...pulumi.ResourceOption) (*HealthcareDatasetIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HealthcareDatasetIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/healthcareDatasetIamBinding:HealthcareDatasetIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcareDatasetIamBinding gets an existing HealthcareDatasetIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcareDatasetIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcareDatasetIamBindingState, opts ...pulumi.ResourceOption) (*HealthcareDatasetIamBinding, error) {
	var resource HealthcareDatasetIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/healthcareDatasetIamBinding:HealthcareDatasetIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthcareDatasetIamBinding resources.
type healthcareDatasetIamBindingState struct {
	Condition                     *HealthcareDatasetIamBindingCondition `pulumi:"condition"`
	DatasetId                     *string                               `pulumi:"datasetId"`
	Etag                          *string                               `pulumi:"etag"`
	HealthcareDatasetIamBindingId *string                               `pulumi:"healthcareDatasetIamBindingId"`
	Members                       []string                              `pulumi:"members"`
	Role                          *string                               `pulumi:"role"`
}

type HealthcareDatasetIamBindingState struct {
	Condition                     HealthcareDatasetIamBindingConditionPtrInput
	DatasetId                     pulumi.StringPtrInput
	Etag                          pulumi.StringPtrInput
	HealthcareDatasetIamBindingId pulumi.StringPtrInput
	Members                       pulumi.StringArrayInput
	Role                          pulumi.StringPtrInput
}

func (HealthcareDatasetIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareDatasetIamBindingState)(nil)).Elem()
}

type healthcareDatasetIamBindingArgs struct {
	Condition                     *HealthcareDatasetIamBindingCondition `pulumi:"condition"`
	DatasetId                     string                                `pulumi:"datasetId"`
	HealthcareDatasetIamBindingId *string                               `pulumi:"healthcareDatasetIamBindingId"`
	Members                       []string                              `pulumi:"members"`
	Role                          string                                `pulumi:"role"`
}

// The set of arguments for constructing a HealthcareDatasetIamBinding resource.
type HealthcareDatasetIamBindingArgs struct {
	Condition                     HealthcareDatasetIamBindingConditionPtrInput
	DatasetId                     pulumi.StringInput
	HealthcareDatasetIamBindingId pulumi.StringPtrInput
	Members                       pulumi.StringArrayInput
	Role                          pulumi.StringInput
}

func (HealthcareDatasetIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareDatasetIamBindingArgs)(nil)).Elem()
}

type HealthcareDatasetIamBindingInput interface {
	pulumi.Input

	ToHealthcareDatasetIamBindingOutput() HealthcareDatasetIamBindingOutput
	ToHealthcareDatasetIamBindingOutputWithContext(ctx context.Context) HealthcareDatasetIamBindingOutput
}

func (*HealthcareDatasetIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareDatasetIamBinding)(nil)).Elem()
}

func (i *HealthcareDatasetIamBinding) ToHealthcareDatasetIamBindingOutput() HealthcareDatasetIamBindingOutput {
	return i.ToHealthcareDatasetIamBindingOutputWithContext(context.Background())
}

func (i *HealthcareDatasetIamBinding) ToHealthcareDatasetIamBindingOutputWithContext(ctx context.Context) HealthcareDatasetIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcareDatasetIamBindingOutput)
}

type HealthcareDatasetIamBindingOutput struct{ *pulumi.OutputState }

func (HealthcareDatasetIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareDatasetIamBinding)(nil)).Elem()
}

func (o HealthcareDatasetIamBindingOutput) ToHealthcareDatasetIamBindingOutput() HealthcareDatasetIamBindingOutput {
	return o
}

func (o HealthcareDatasetIamBindingOutput) ToHealthcareDatasetIamBindingOutputWithContext(ctx context.Context) HealthcareDatasetIamBindingOutput {
	return o
}

func (o HealthcareDatasetIamBindingOutput) Condition() HealthcareDatasetIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamBinding) HealthcareDatasetIamBindingConditionPtrOutput { return v.Condition }).(HealthcareDatasetIamBindingConditionPtrOutput)
}

func (o HealthcareDatasetIamBindingOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamBinding) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamBindingOutput) HealthcareDatasetIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamBinding) pulumi.StringOutput { return v.HealthcareDatasetIamBindingId }).(pulumi.StringOutput)
}

func (o HealthcareDatasetIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o HealthcareDatasetIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareDatasetIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcareDatasetIamBindingInput)(nil)).Elem(), &HealthcareDatasetIamBinding{})
	pulumi.RegisterOutputType(HealthcareDatasetIamBindingOutput{})
}
