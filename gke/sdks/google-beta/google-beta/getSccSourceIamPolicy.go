// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSccSourceIamPolicy(ctx *pulumi.Context, args *LookupSccSourceIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupSccSourceIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupSccSourceIamPolicyResult
	err = ctx.InvokePackage("google-beta:index/getSccSourceIamPolicy:getSccSourceIamPolicy", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSccSourceIamPolicy.
type LookupSccSourceIamPolicyArgs struct {
	Id           *string `pulumi:"id"`
	Organization string  `pulumi:"organization"`
	Source       string  `pulumi:"source"`
}

// A collection of values returned by getSccSourceIamPolicy.
type LookupSccSourceIamPolicyResult struct {
	Etag         string `pulumi:"etag"`
	Id           string `pulumi:"id"`
	Organization string `pulumi:"organization"`
	PolicyData   string `pulumi:"policyData"`
	Source       string `pulumi:"source"`
}

func LookupSccSourceIamPolicyOutput(ctx *pulumi.Context, args LookupSccSourceIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupSccSourceIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSccSourceIamPolicyResultOutput, error) {
			args := v.(LookupSccSourceIamPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupSccSourceIamPolicyResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google-beta:index/getSccSourceIamPolicy:getSccSourceIamPolicy", args, LookupSccSourceIamPolicyResultOutput{}, options).(LookupSccSourceIamPolicyResultOutput), nil
		}).(LookupSccSourceIamPolicyResultOutput)
}

// A collection of arguments for invoking getSccSourceIamPolicy.
type LookupSccSourceIamPolicyOutputArgs struct {
	Id           pulumi.StringPtrInput `pulumi:"id"`
	Organization pulumi.StringInput    `pulumi:"organization"`
	Source       pulumi.StringInput    `pulumi:"source"`
}

func (LookupSccSourceIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSccSourceIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getSccSourceIamPolicy.
type LookupSccSourceIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupSccSourceIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSccSourceIamPolicyResult)(nil)).Elem()
}

func (o LookupSccSourceIamPolicyResultOutput) ToLookupSccSourceIamPolicyResultOutput() LookupSccSourceIamPolicyResultOutput {
	return o
}

func (o LookupSccSourceIamPolicyResultOutput) ToLookupSccSourceIamPolicyResultOutputWithContext(ctx context.Context) LookupSccSourceIamPolicyResultOutput {
	return o
}

func (o LookupSccSourceIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSccSourceIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupSccSourceIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSccSourceIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSccSourceIamPolicyResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSccSourceIamPolicyResult) string { return v.Organization }).(pulumi.StringOutput)
}

func (o LookupSccSourceIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSccSourceIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupSccSourceIamPolicyResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSccSourceIamPolicyResult) string { return v.Source }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSccSourceIamPolicyResultOutput{})
}
