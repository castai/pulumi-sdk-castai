// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RedisClusterUserCreatedConnections struct {
	pulumi.CustomResourceState

	// A list of cluster endpoints
	ClusterEndpoints RedisClusterUserCreatedConnectionsClusterEndpointArrayOutput `pulumi:"clusterEndpoints"`
	// The name of the Redis cluster these endpoints should be added to.
	Name                                 pulumi.StringOutput `pulumi:"name"`
	Project                              pulumi.StringOutput `pulumi:"project"`
	RedisClusterUserCreatedConnectionsId pulumi.StringOutput `pulumi:"redisClusterUserCreatedConnectionsId"`
	// The name of the region of the Redis cluster these endpoints should be added to.
	Region   pulumi.StringOutput                                 `pulumi:"region"`
	Timeouts RedisClusterUserCreatedConnectionsTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewRedisClusterUserCreatedConnections registers a new resource with the given unique name, arguments, and options.
func NewRedisClusterUserCreatedConnections(ctx *pulumi.Context,
	name string, args *RedisClusterUserCreatedConnectionsArgs, opts ...pulumi.ResourceOption) (*RedisClusterUserCreatedConnections, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource RedisClusterUserCreatedConnections
	err = ctx.RegisterPackageResource("google-beta:index/redisClusterUserCreatedConnections:RedisClusterUserCreatedConnections", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisClusterUserCreatedConnections gets an existing RedisClusterUserCreatedConnections resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisClusterUserCreatedConnections(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisClusterUserCreatedConnectionsState, opts ...pulumi.ResourceOption) (*RedisClusterUserCreatedConnections, error) {
	var resource RedisClusterUserCreatedConnections
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/redisClusterUserCreatedConnections:RedisClusterUserCreatedConnections", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisClusterUserCreatedConnections resources.
type redisClusterUserCreatedConnectionsState struct {
	// A list of cluster endpoints
	ClusterEndpoints []RedisClusterUserCreatedConnectionsClusterEndpoint `pulumi:"clusterEndpoints"`
	// The name of the Redis cluster these endpoints should be added to.
	Name                                 *string `pulumi:"name"`
	Project                              *string `pulumi:"project"`
	RedisClusterUserCreatedConnectionsId *string `pulumi:"redisClusterUserCreatedConnectionsId"`
	// The name of the region of the Redis cluster these endpoints should be added to.
	Region   *string                                     `pulumi:"region"`
	Timeouts *RedisClusterUserCreatedConnectionsTimeouts `pulumi:"timeouts"`
}

type RedisClusterUserCreatedConnectionsState struct {
	// A list of cluster endpoints
	ClusterEndpoints RedisClusterUserCreatedConnectionsClusterEndpointArrayInput
	// The name of the Redis cluster these endpoints should be added to.
	Name                                 pulumi.StringPtrInput
	Project                              pulumi.StringPtrInput
	RedisClusterUserCreatedConnectionsId pulumi.StringPtrInput
	// The name of the region of the Redis cluster these endpoints should be added to.
	Region   pulumi.StringPtrInput
	Timeouts RedisClusterUserCreatedConnectionsTimeoutsPtrInput
}

func (RedisClusterUserCreatedConnectionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterUserCreatedConnectionsState)(nil)).Elem()
}

type redisClusterUserCreatedConnectionsArgs struct {
	// A list of cluster endpoints
	ClusterEndpoints []RedisClusterUserCreatedConnectionsClusterEndpoint `pulumi:"clusterEndpoints"`
	// The name of the Redis cluster these endpoints should be added to.
	Name                                 *string `pulumi:"name"`
	Project                              *string `pulumi:"project"`
	RedisClusterUserCreatedConnectionsId *string `pulumi:"redisClusterUserCreatedConnectionsId"`
	// The name of the region of the Redis cluster these endpoints should be added to.
	Region   string                                      `pulumi:"region"`
	Timeouts *RedisClusterUserCreatedConnectionsTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a RedisClusterUserCreatedConnections resource.
type RedisClusterUserCreatedConnectionsArgs struct {
	// A list of cluster endpoints
	ClusterEndpoints RedisClusterUserCreatedConnectionsClusterEndpointArrayInput
	// The name of the Redis cluster these endpoints should be added to.
	Name                                 pulumi.StringPtrInput
	Project                              pulumi.StringPtrInput
	RedisClusterUserCreatedConnectionsId pulumi.StringPtrInput
	// The name of the region of the Redis cluster these endpoints should be added to.
	Region   pulumi.StringInput
	Timeouts RedisClusterUserCreatedConnectionsTimeoutsPtrInput
}

func (RedisClusterUserCreatedConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterUserCreatedConnectionsArgs)(nil)).Elem()
}

type RedisClusterUserCreatedConnectionsInput interface {
	pulumi.Input

	ToRedisClusterUserCreatedConnectionsOutput() RedisClusterUserCreatedConnectionsOutput
	ToRedisClusterUserCreatedConnectionsOutputWithContext(ctx context.Context) RedisClusterUserCreatedConnectionsOutput
}

func (*RedisClusterUserCreatedConnections) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterUserCreatedConnections)(nil)).Elem()
}

func (i *RedisClusterUserCreatedConnections) ToRedisClusterUserCreatedConnectionsOutput() RedisClusterUserCreatedConnectionsOutput {
	return i.ToRedisClusterUserCreatedConnectionsOutputWithContext(context.Background())
}

func (i *RedisClusterUserCreatedConnections) ToRedisClusterUserCreatedConnectionsOutputWithContext(ctx context.Context) RedisClusterUserCreatedConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterUserCreatedConnectionsOutput)
}

type RedisClusterUserCreatedConnectionsOutput struct{ *pulumi.OutputState }

func (RedisClusterUserCreatedConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterUserCreatedConnections)(nil)).Elem()
}

func (o RedisClusterUserCreatedConnectionsOutput) ToRedisClusterUserCreatedConnectionsOutput() RedisClusterUserCreatedConnectionsOutput {
	return o
}

func (o RedisClusterUserCreatedConnectionsOutput) ToRedisClusterUserCreatedConnectionsOutputWithContext(ctx context.Context) RedisClusterUserCreatedConnectionsOutput {
	return o
}

// A list of cluster endpoints
func (o RedisClusterUserCreatedConnectionsOutput) ClusterEndpoints() RedisClusterUserCreatedConnectionsClusterEndpointArrayOutput {
	return o.ApplyT(func(v *RedisClusterUserCreatedConnections) RedisClusterUserCreatedConnectionsClusterEndpointArrayOutput {
		return v.ClusterEndpoints
	}).(RedisClusterUserCreatedConnectionsClusterEndpointArrayOutput)
}

// The name of the Redis cluster these endpoints should be added to.
func (o RedisClusterUserCreatedConnectionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterUserCreatedConnections) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RedisClusterUserCreatedConnectionsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterUserCreatedConnections) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RedisClusterUserCreatedConnectionsOutput) RedisClusterUserCreatedConnectionsId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterUserCreatedConnections) pulumi.StringOutput {
		return v.RedisClusterUserCreatedConnectionsId
	}).(pulumi.StringOutput)
}

// The name of the region of the Redis cluster these endpoints should be added to.
func (o RedisClusterUserCreatedConnectionsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterUserCreatedConnections) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o RedisClusterUserCreatedConnectionsOutput) Timeouts() RedisClusterUserCreatedConnectionsTimeoutsPtrOutput {
	return o.ApplyT(func(v *RedisClusterUserCreatedConnections) RedisClusterUserCreatedConnectionsTimeoutsPtrOutput {
		return v.Timeouts
	}).(RedisClusterUserCreatedConnectionsTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterUserCreatedConnectionsInput)(nil)).Elem(), &RedisClusterUserCreatedConnections{})
	pulumi.RegisterOutputType(RedisClusterUserCreatedConnectionsOutput{})
}
