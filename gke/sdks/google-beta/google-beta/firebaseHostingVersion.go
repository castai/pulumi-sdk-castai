// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseHostingVersion struct {
	pulumi.CustomResourceState

	// The configuration for the behavior of the site. This configuration exists in the 'firebase.json' file.
	Config                   FirebaseHostingVersionConfigPtrOutput `pulumi:"config"`
	FirebaseHostingVersionId pulumi.StringOutput                   `pulumi:"firebaseHostingVersionId"`
	// The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The ID of the site in which to create this Version.
	SiteId   pulumi.StringOutput                     `pulumi:"siteId"`
	Timeouts FirebaseHostingVersionTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewFirebaseHostingVersion registers a new resource with the given unique name, arguments, and options.
func NewFirebaseHostingVersion(ctx *pulumi.Context,
	name string, args *FirebaseHostingVersionArgs, opts ...pulumi.ResourceOption) (*FirebaseHostingVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseHostingVersion
	err = ctx.RegisterPackageResource("google-beta:index/firebaseHostingVersion:FirebaseHostingVersion", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseHostingVersion gets an existing FirebaseHostingVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseHostingVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseHostingVersionState, opts ...pulumi.ResourceOption) (*FirebaseHostingVersion, error) {
	var resource FirebaseHostingVersion
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaseHostingVersion:FirebaseHostingVersion", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseHostingVersion resources.
type firebaseHostingVersionState struct {
	// The configuration for the behavior of the site. This configuration exists in the 'firebase.json' file.
	Config                   *FirebaseHostingVersionConfig `pulumi:"config"`
	FirebaseHostingVersionId *string                       `pulumi:"firebaseHostingVersionId"`
	// The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID
	Name *string `pulumi:"name"`
	// Required. The ID of the site in which to create this Version.
	SiteId   *string                         `pulumi:"siteId"`
	Timeouts *FirebaseHostingVersionTimeouts `pulumi:"timeouts"`
	// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
	VersionId *string `pulumi:"versionId"`
}

type FirebaseHostingVersionState struct {
	// The configuration for the behavior of the site. This configuration exists in the 'firebase.json' file.
	Config                   FirebaseHostingVersionConfigPtrInput
	FirebaseHostingVersionId pulumi.StringPtrInput
	// The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID
	Name pulumi.StringPtrInput
	// Required. The ID of the site in which to create this Version.
	SiteId   pulumi.StringPtrInput
	Timeouts FirebaseHostingVersionTimeoutsPtrInput
	// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
	VersionId pulumi.StringPtrInput
}

func (FirebaseHostingVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseHostingVersionState)(nil)).Elem()
}

type firebaseHostingVersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the 'firebase.json' file.
	Config                   *FirebaseHostingVersionConfig `pulumi:"config"`
	FirebaseHostingVersionId *string                       `pulumi:"firebaseHostingVersionId"`
	// Required. The ID of the site in which to create this Version.
	SiteId   string                          `pulumi:"siteId"`
	Timeouts *FirebaseHostingVersionTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaseHostingVersion resource.
type FirebaseHostingVersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the 'firebase.json' file.
	Config                   FirebaseHostingVersionConfigPtrInput
	FirebaseHostingVersionId pulumi.StringPtrInput
	// Required. The ID of the site in which to create this Version.
	SiteId   pulumi.StringInput
	Timeouts FirebaseHostingVersionTimeoutsPtrInput
}

func (FirebaseHostingVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseHostingVersionArgs)(nil)).Elem()
}

type FirebaseHostingVersionInput interface {
	pulumi.Input

	ToFirebaseHostingVersionOutput() FirebaseHostingVersionOutput
	ToFirebaseHostingVersionOutputWithContext(ctx context.Context) FirebaseHostingVersionOutput
}

func (*FirebaseHostingVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseHostingVersion)(nil)).Elem()
}

func (i *FirebaseHostingVersion) ToFirebaseHostingVersionOutput() FirebaseHostingVersionOutput {
	return i.ToFirebaseHostingVersionOutputWithContext(context.Background())
}

func (i *FirebaseHostingVersion) ToFirebaseHostingVersionOutputWithContext(ctx context.Context) FirebaseHostingVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseHostingVersionOutput)
}

type FirebaseHostingVersionOutput struct{ *pulumi.OutputState }

func (FirebaseHostingVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseHostingVersion)(nil)).Elem()
}

func (o FirebaseHostingVersionOutput) ToFirebaseHostingVersionOutput() FirebaseHostingVersionOutput {
	return o
}

func (o FirebaseHostingVersionOutput) ToFirebaseHostingVersionOutputWithContext(ctx context.Context) FirebaseHostingVersionOutput {
	return o
}

// The configuration for the behavior of the site. This configuration exists in the 'firebase.json' file.
func (o FirebaseHostingVersionOutput) Config() FirebaseHostingVersionConfigPtrOutput {
	return o.ApplyT(func(v *FirebaseHostingVersion) FirebaseHostingVersionConfigPtrOutput { return v.Config }).(FirebaseHostingVersionConfigPtrOutput)
}

func (o FirebaseHostingVersionOutput) FirebaseHostingVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingVersion) pulumi.StringOutput { return v.FirebaseHostingVersionId }).(pulumi.StringOutput)
}

// The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID
func (o FirebaseHostingVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. The ID of the site in which to create this Version.
func (o FirebaseHostingVersionOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingVersion) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

func (o FirebaseHostingVersionOutput) Timeouts() FirebaseHostingVersionTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseHostingVersion) FirebaseHostingVersionTimeoutsPtrOutput { return v.Timeouts }).(FirebaseHostingVersionTimeoutsPtrOutput)
}

// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
func (o FirebaseHostingVersionOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingVersion) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseHostingVersionInput)(nil)).Elem(), &FirebaseHostingVersion{})
	pulumi.RegisterOutputType(FirebaseHostingVersionOutput{})
}
