// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudbuildTrigger struct {
	pulumi.CustomResourceState

	// Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
	// require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
	ApprovalConfig CloudbuildTriggerApprovalConfigPtrOutput `pulumi:"approvalConfig"`
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
	// event is received.
	BitbucketServerTriggerConfig CloudbuildTriggerBitbucketServerTriggerConfigPtrOutput `pulumi:"bitbucketServerTriggerConfig"`
	// Contents of the build template. Either a filename or build template must be provided.
	Build               CloudbuildTriggerBuildPtrOutput `pulumi:"build"`
	CloudbuildTriggerId pulumi.StringOutput             `pulumi:"cloudbuildTriggerId"`
	// Time when the trigger was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Human-readable description of the trigger.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
	// be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
	// name using git_file_source instead.
	Filename pulumi.StringPtrOutput `pulumi:"filename"`
	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// The file source describing the local or remote Build template.
	GitFileSource CloudbuildTriggerGitFileSourcePtrOutput `pulumi:"gitFileSource"`
	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
	// 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
	Github CloudbuildTriggerGithubPtrOutput `pulumi:"github"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
	// to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
	// the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles pulumi.StringArrayOutput `pulumi:"ignoredFiles"`
	// Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
	IncludeBuildLogs pulumi.StringPtrOutput `pulumi:"includeBuildLogs"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
	// then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
	// ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
	// includedFiles glob. If not, then we do not trigger a build.
	IncludedFiles pulumi.StringArrayOutput `pulumi:"includedFiles"`
	// The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
	// used.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the trigger. Must be unique within the project.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
	// of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
	PubsubConfig CloudbuildTriggerPubsubConfigPtrOutput `pulumi:"pubsubConfig"`
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig CloudbuildTriggerRepositoryEventConfigPtrOutput `pulumi:"repositoryEventConfig"`
	// The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
	// builds.cancel. If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
	// projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
	// to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
	// currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
	// 'webhook_config' or 'source_to_build' must be provided.
	SourceToBuild CloudbuildTriggerSourceToBuildPtrOutput `pulumi:"sourceToBuild"`
	// Substitutions data for Build resource.
	Substitutions pulumi.StringMapOutput `pulumi:"substitutions"`
	// Tags for annotation of a BuildTrigger
	Tags     pulumi.StringArrayOutput           `pulumi:"tags"`
	Timeouts CloudbuildTriggerTimeoutsPtrOutput `pulumi:"timeouts"`
	// The unique identifier for the trigger.
	TriggerId pulumi.StringOutput `pulumi:"triggerId"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
	// interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
	// One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
	TriggerTemplate CloudbuildTriggerTriggerTemplatePtrOutput `pulumi:"triggerTemplate"`
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
	// webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
	// provided.
	WebhookConfig CloudbuildTriggerWebhookConfigPtrOutput `pulumi:"webhookConfig"`
}

// NewCloudbuildTrigger registers a new resource with the given unique name, arguments, and options.
func NewCloudbuildTrigger(ctx *pulumi.Context,
	name string, args *CloudbuildTriggerArgs, opts ...pulumi.ResourceOption) (*CloudbuildTrigger, error) {
	if args == nil {
		args = &CloudbuildTriggerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CloudbuildTrigger
	err = ctx.RegisterPackageResource("google-beta:index/cloudbuildTrigger:CloudbuildTrigger", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudbuildTrigger gets an existing CloudbuildTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudbuildTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudbuildTriggerState, opts ...pulumi.ResourceOption) (*CloudbuildTrigger, error) {
	var resource CloudbuildTrigger
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/cloudbuildTrigger:CloudbuildTrigger", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudbuildTrigger resources.
type cloudbuildTriggerState struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
	// require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
	ApprovalConfig *CloudbuildTriggerApprovalConfig `pulumi:"approvalConfig"`
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
	// event is received.
	BitbucketServerTriggerConfig *CloudbuildTriggerBitbucketServerTriggerConfig `pulumi:"bitbucketServerTriggerConfig"`
	// Contents of the build template. Either a filename or build template must be provided.
	Build               *CloudbuildTriggerBuild `pulumi:"build"`
	CloudbuildTriggerId *string                 `pulumi:"cloudbuildTriggerId"`
	// Time when the trigger was created.
	CreateTime *string `pulumi:"createTime"`
	// Human-readable description of the trigger.
	Description *string `pulumi:"description"`
	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled *bool `pulumi:"disabled"`
	// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
	// be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
	// name using git_file_source instead.
	Filename *string `pulumi:"filename"`
	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter *string `pulumi:"filter"`
	// The file source describing the local or remote Build template.
	GitFileSource *CloudbuildTriggerGitFileSource `pulumi:"gitFileSource"`
	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
	// 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
	Github *CloudbuildTriggerGithub `pulumi:"github"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
	// to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
	// the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles []string `pulumi:"ignoredFiles"`
	// Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
	IncludeBuildLogs *string `pulumi:"includeBuildLogs"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
	// then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
	// ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
	// includedFiles glob. If not, then we do not trigger a build.
	IncludedFiles []string `pulumi:"includedFiles"`
	// The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
	// used.
	Location *string `pulumi:"location"`
	// Name of the trigger. Must be unique within the project.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
	// of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
	PubsubConfig *CloudbuildTriggerPubsubConfig `pulumi:"pubsubConfig"`
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig *CloudbuildTriggerRepositoryEventConfig `pulumi:"repositoryEventConfig"`
	// The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
	// builds.cancel. If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
	// projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
	// to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
	// currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
	// 'webhook_config' or 'source_to_build' must be provided.
	SourceToBuild *CloudbuildTriggerSourceToBuild `pulumi:"sourceToBuild"`
	// Substitutions data for Build resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a BuildTrigger
	Tags     []string                   `pulumi:"tags"`
	Timeouts *CloudbuildTriggerTimeouts `pulumi:"timeouts"`
	// The unique identifier for the trigger.
	TriggerId *string `pulumi:"triggerId"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
	// interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
	// One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
	TriggerTemplate *CloudbuildTriggerTriggerTemplate `pulumi:"triggerTemplate"`
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
	// webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
	// provided.
	WebhookConfig *CloudbuildTriggerWebhookConfig `pulumi:"webhookConfig"`
}

type CloudbuildTriggerState struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
	// require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
	ApprovalConfig CloudbuildTriggerApprovalConfigPtrInput
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
	// event is received.
	BitbucketServerTriggerConfig CloudbuildTriggerBitbucketServerTriggerConfigPtrInput
	// Contents of the build template. Either a filename or build template must be provided.
	Build               CloudbuildTriggerBuildPtrInput
	CloudbuildTriggerId pulumi.StringPtrInput
	// Time when the trigger was created.
	CreateTime pulumi.StringPtrInput
	// Human-readable description of the trigger.
	Description pulumi.StringPtrInput
	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled pulumi.BoolPtrInput
	// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
	// be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
	// name using git_file_source instead.
	Filename pulumi.StringPtrInput
	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter pulumi.StringPtrInput
	// The file source describing the local or remote Build template.
	GitFileSource CloudbuildTriggerGitFileSourcePtrInput
	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
	// 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
	Github CloudbuildTriggerGithubPtrInput
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
	// to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
	// the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles pulumi.StringArrayInput
	// Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
	IncludeBuildLogs pulumi.StringPtrInput
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
	// then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
	// ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
	// includedFiles glob. If not, then we do not trigger a build.
	IncludedFiles pulumi.StringArrayInput
	// The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
	// used.
	Location pulumi.StringPtrInput
	// Name of the trigger. Must be unique within the project.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
	// of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
	PubsubConfig CloudbuildTriggerPubsubConfigPtrInput
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig CloudbuildTriggerRepositoryEventConfigPtrInput
	// The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
	// builds.cancel. If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
	// projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	ServiceAccount pulumi.StringPtrInput
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
	// to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
	// currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
	// 'webhook_config' or 'source_to_build' must be provided.
	SourceToBuild CloudbuildTriggerSourceToBuildPtrInput
	// Substitutions data for Build resource.
	Substitutions pulumi.StringMapInput
	// Tags for annotation of a BuildTrigger
	Tags     pulumi.StringArrayInput
	Timeouts CloudbuildTriggerTimeoutsPtrInput
	// The unique identifier for the trigger.
	TriggerId pulumi.StringPtrInput
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
	// interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
	// One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
	TriggerTemplate CloudbuildTriggerTriggerTemplatePtrInput
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
	// webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
	// provided.
	WebhookConfig CloudbuildTriggerWebhookConfigPtrInput
}

func (CloudbuildTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudbuildTriggerState)(nil)).Elem()
}

type cloudbuildTriggerArgs struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
	// require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
	ApprovalConfig *CloudbuildTriggerApprovalConfig `pulumi:"approvalConfig"`
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
	// event is received.
	BitbucketServerTriggerConfig *CloudbuildTriggerBitbucketServerTriggerConfig `pulumi:"bitbucketServerTriggerConfig"`
	// Contents of the build template. Either a filename or build template must be provided.
	Build               *CloudbuildTriggerBuild `pulumi:"build"`
	CloudbuildTriggerId *string                 `pulumi:"cloudbuildTriggerId"`
	// Human-readable description of the trigger.
	Description *string `pulumi:"description"`
	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled *bool `pulumi:"disabled"`
	// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
	// be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
	// name using git_file_source instead.
	Filename *string `pulumi:"filename"`
	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter *string `pulumi:"filter"`
	// The file source describing the local or remote Build template.
	GitFileSource *CloudbuildTriggerGitFileSource `pulumi:"gitFileSource"`
	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
	// 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
	Github *CloudbuildTriggerGithub `pulumi:"github"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
	// to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
	// the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles []string `pulumi:"ignoredFiles"`
	// Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
	IncludeBuildLogs *string `pulumi:"includeBuildLogs"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
	// then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
	// ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
	// includedFiles glob. If not, then we do not trigger a build.
	IncludedFiles []string `pulumi:"includedFiles"`
	// The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
	// used.
	Location *string `pulumi:"location"`
	// Name of the trigger. Must be unique within the project.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
	// of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
	PubsubConfig *CloudbuildTriggerPubsubConfig `pulumi:"pubsubConfig"`
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig *CloudbuildTriggerRepositoryEventConfig `pulumi:"repositoryEventConfig"`
	// The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
	// builds.cancel. If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
	// projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
	// to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
	// currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
	// 'webhook_config' or 'source_to_build' must be provided.
	SourceToBuild *CloudbuildTriggerSourceToBuild `pulumi:"sourceToBuild"`
	// Substitutions data for Build resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a BuildTrigger
	Tags     []string                   `pulumi:"tags"`
	Timeouts *CloudbuildTriggerTimeouts `pulumi:"timeouts"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
	// interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
	// One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
	TriggerTemplate *CloudbuildTriggerTriggerTemplate `pulumi:"triggerTemplate"`
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
	// webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
	// provided.
	WebhookConfig *CloudbuildTriggerWebhookConfig `pulumi:"webhookConfig"`
}

// The set of arguments for constructing a CloudbuildTrigger resource.
type CloudbuildTriggerArgs struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
	// require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
	ApprovalConfig CloudbuildTriggerApprovalConfigPtrInput
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
	// event is received.
	BitbucketServerTriggerConfig CloudbuildTriggerBitbucketServerTriggerConfigPtrInput
	// Contents of the build template. Either a filename or build template must be provided.
	Build               CloudbuildTriggerBuildPtrInput
	CloudbuildTriggerId pulumi.StringPtrInput
	// Human-readable description of the trigger.
	Description pulumi.StringPtrInput
	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled pulumi.BoolPtrInput
	// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
	// be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
	// name using git_file_source instead.
	Filename pulumi.StringPtrInput
	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter pulumi.StringPtrInput
	// The file source describing the local or remote Build template.
	GitFileSource CloudbuildTriggerGitFileSourcePtrInput
	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
	// 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
	Github CloudbuildTriggerGithubPtrInput
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
	// to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
	// the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles pulumi.StringArrayInput
	// Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
	IncludeBuildLogs pulumi.StringPtrInput
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
	// support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
	// then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
	// ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
	// includedFiles glob. If not, then we do not trigger a build.
	IncludedFiles pulumi.StringArrayInput
	// The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
	// used.
	Location pulumi.StringPtrInput
	// Name of the trigger. Must be unique within the project.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
	// of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
	PubsubConfig CloudbuildTriggerPubsubConfigPtrInput
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig CloudbuildTriggerRepositoryEventConfigPtrInput
	// The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
	// builds.cancel. If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
	// projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	ServiceAccount pulumi.StringPtrInput
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
	// to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
	// currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
	// 'webhook_config' or 'source_to_build' must be provided.
	SourceToBuild CloudbuildTriggerSourceToBuildPtrInput
	// Substitutions data for Build resource.
	Substitutions pulumi.StringMapInput
	// Tags for annotation of a BuildTrigger
	Tags     pulumi.StringArrayInput
	Timeouts CloudbuildTriggerTimeoutsPtrInput
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
	// interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
	// One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
	TriggerTemplate CloudbuildTriggerTriggerTemplatePtrInput
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
	// webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
	// provided.
	WebhookConfig CloudbuildTriggerWebhookConfigPtrInput
}

func (CloudbuildTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudbuildTriggerArgs)(nil)).Elem()
}

type CloudbuildTriggerInput interface {
	pulumi.Input

	ToCloudbuildTriggerOutput() CloudbuildTriggerOutput
	ToCloudbuildTriggerOutputWithContext(ctx context.Context) CloudbuildTriggerOutput
}

func (*CloudbuildTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudbuildTrigger)(nil)).Elem()
}

func (i *CloudbuildTrigger) ToCloudbuildTriggerOutput() CloudbuildTriggerOutput {
	return i.ToCloudbuildTriggerOutputWithContext(context.Background())
}

func (i *CloudbuildTrigger) ToCloudbuildTriggerOutputWithContext(ctx context.Context) CloudbuildTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudbuildTriggerOutput)
}

type CloudbuildTriggerOutput struct{ *pulumi.OutputState }

func (CloudbuildTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudbuildTrigger)(nil)).Elem()
}

func (o CloudbuildTriggerOutput) ToCloudbuildTriggerOutput() CloudbuildTriggerOutput {
	return o
}

func (o CloudbuildTriggerOutput) ToCloudbuildTriggerOutputWithContext(ctx context.Context) CloudbuildTriggerOutput {
	return o
}

// Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
// require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
func (o CloudbuildTriggerOutput) ApprovalConfig() CloudbuildTriggerApprovalConfigPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerApprovalConfigPtrOutput { return v.ApprovalConfig }).(CloudbuildTriggerApprovalConfigPtrOutput)
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
// event is received.
func (o CloudbuildTriggerOutput) BitbucketServerTriggerConfig() CloudbuildTriggerBitbucketServerTriggerConfigPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerBitbucketServerTriggerConfigPtrOutput {
		return v.BitbucketServerTriggerConfig
	}).(CloudbuildTriggerBitbucketServerTriggerConfigPtrOutput)
}

// Contents of the build template. Either a filename or build template must be provided.
func (o CloudbuildTriggerOutput) Build() CloudbuildTriggerBuildPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerBuildPtrOutput { return v.Build }).(CloudbuildTriggerBuildPtrOutput)
}

func (o CloudbuildTriggerOutput) CloudbuildTriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringOutput { return v.CloudbuildTriggerId }).(pulumi.StringOutput)
}

// Time when the trigger was created.
func (o CloudbuildTriggerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Human-readable description of the trigger.
func (o CloudbuildTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
func (o CloudbuildTriggerOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
// be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
// name using git_file_source instead.
func (o CloudbuildTriggerOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringPtrOutput { return v.Filename }).(pulumi.StringPtrOutput)
}

// A Common Expression Language string. Used only with Pub/Sub and Webhook.
func (o CloudbuildTriggerOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// The file source describing the local or remote Build template.
func (o CloudbuildTriggerOutput) GitFileSource() CloudbuildTriggerGitFileSourcePtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerGitFileSourcePtrOutput { return v.GitFileSource }).(CloudbuildTriggerGitFileSourcePtrOutput)
}

// Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
// 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
func (o CloudbuildTriggerOutput) Github() CloudbuildTriggerGithubPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerGithubPtrOutput { return v.Github }).(CloudbuildTriggerGithubPtrOutput)
}

// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
// support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
// to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
// the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
func (o CloudbuildTriggerOutput) IgnoredFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringArrayOutput { return v.IgnoredFiles }).(pulumi.StringArrayOutput)
}

// Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
// INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
func (o CloudbuildTriggerOutput) IncludeBuildLogs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringPtrOutput { return v.IncludeBuildLogs }).(pulumi.StringPtrOutput)
}

// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
// support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
// then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
// ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
// includedFiles glob. If not, then we do not trigger a build.
func (o CloudbuildTriggerOutput) IncludedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringArrayOutput { return v.IncludedFiles }).(pulumi.StringArrayOutput)
}

// The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
// used.
func (o CloudbuildTriggerOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the trigger. Must be unique within the project.
func (o CloudbuildTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloudbuildTriggerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
// of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
func (o CloudbuildTriggerOutput) PubsubConfig() CloudbuildTriggerPubsubConfigPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerPubsubConfigPtrOutput { return v.PubsubConfig }).(CloudbuildTriggerPubsubConfigPtrOutput)
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
func (o CloudbuildTriggerOutput) RepositoryEventConfig() CloudbuildTriggerRepositoryEventConfigPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerRepositoryEventConfigPtrOutput {
		return v.RepositoryEventConfig
	}).(CloudbuildTriggerRepositoryEventConfigPtrOutput)
}

// The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
// builds.cancel. If no service account is set, then the standard Cloud Build service account
// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
// projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
func (o CloudbuildTriggerOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
// to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
// currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
// 'webhook_config' or 'source_to_build' must be provided.
func (o CloudbuildTriggerOutput) SourceToBuild() CloudbuildTriggerSourceToBuildPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerSourceToBuildPtrOutput { return v.SourceToBuild }).(CloudbuildTriggerSourceToBuildPtrOutput)
}

// Substitutions data for Build resource.
func (o CloudbuildTriggerOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringMapOutput { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a BuildTrigger
func (o CloudbuildTriggerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o CloudbuildTriggerOutput) Timeouts() CloudbuildTriggerTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerTimeoutsPtrOutput { return v.Timeouts }).(CloudbuildTriggerTimeoutsPtrOutput)
}

// The unique identifier for the trigger.
func (o CloudbuildTriggerOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) pulumi.StringOutput { return v.TriggerId }).(pulumi.StringOutput)
}

// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
// interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
// One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
func (o CloudbuildTriggerOutput) TriggerTemplate() CloudbuildTriggerTriggerTemplatePtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerTriggerTemplatePtrOutput { return v.TriggerTemplate }).(CloudbuildTriggerTriggerTemplatePtrOutput)
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
// webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
// provided.
func (o CloudbuildTriggerOutput) WebhookConfig() CloudbuildTriggerWebhookConfigPtrOutput {
	return o.ApplyT(func(v *CloudbuildTrigger) CloudbuildTriggerWebhookConfigPtrOutput { return v.WebhookConfig }).(CloudbuildTriggerWebhookConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudbuildTriggerInput)(nil)).Elem(), &CloudbuildTrigger{})
	pulumi.RegisterOutputType(CloudbuildTriggerOutput{})
}
