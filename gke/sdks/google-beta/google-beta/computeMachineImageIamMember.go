// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeMachineImageIamMember struct {
	pulumi.CustomResourceState

	ComputeMachineImageIamMemberId pulumi.StringOutput                            `pulumi:"computeMachineImageIamMemberId"`
	Condition                      ComputeMachineImageIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                           pulumi.StringOutput                            `pulumi:"etag"`
	MachineImage                   pulumi.StringOutput                            `pulumi:"machineImage"`
	Member                         pulumi.StringOutput                            `pulumi:"member"`
	Project                        pulumi.StringOutput                            `pulumi:"project"`
	Role                           pulumi.StringOutput                            `pulumi:"role"`
}

// NewComputeMachineImageIamMember registers a new resource with the given unique name, arguments, and options.
func NewComputeMachineImageIamMember(ctx *pulumi.Context,
	name string, args *ComputeMachineImageIamMemberArgs, opts ...pulumi.ResourceOption) (*ComputeMachineImageIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MachineImage == nil {
		return nil, errors.New("invalid value for required argument 'MachineImage'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeMachineImageIamMember
	err = ctx.RegisterPackageResource("google-beta:index/computeMachineImageIamMember:ComputeMachineImageIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeMachineImageIamMember gets an existing ComputeMachineImageIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeMachineImageIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeMachineImageIamMemberState, opts ...pulumi.ResourceOption) (*ComputeMachineImageIamMember, error) {
	var resource ComputeMachineImageIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeMachineImageIamMember:ComputeMachineImageIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeMachineImageIamMember resources.
type computeMachineImageIamMemberState struct {
	ComputeMachineImageIamMemberId *string                                `pulumi:"computeMachineImageIamMemberId"`
	Condition                      *ComputeMachineImageIamMemberCondition `pulumi:"condition"`
	Etag                           *string                                `pulumi:"etag"`
	MachineImage                   *string                                `pulumi:"machineImage"`
	Member                         *string                                `pulumi:"member"`
	Project                        *string                                `pulumi:"project"`
	Role                           *string                                `pulumi:"role"`
}

type ComputeMachineImageIamMemberState struct {
	ComputeMachineImageIamMemberId pulumi.StringPtrInput
	Condition                      ComputeMachineImageIamMemberConditionPtrInput
	Etag                           pulumi.StringPtrInput
	MachineImage                   pulumi.StringPtrInput
	Member                         pulumi.StringPtrInput
	Project                        pulumi.StringPtrInput
	Role                           pulumi.StringPtrInput
}

func (ComputeMachineImageIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeMachineImageIamMemberState)(nil)).Elem()
}

type computeMachineImageIamMemberArgs struct {
	ComputeMachineImageIamMemberId *string                                `pulumi:"computeMachineImageIamMemberId"`
	Condition                      *ComputeMachineImageIamMemberCondition `pulumi:"condition"`
	MachineImage                   string                                 `pulumi:"machineImage"`
	Member                         string                                 `pulumi:"member"`
	Project                        *string                                `pulumi:"project"`
	Role                           string                                 `pulumi:"role"`
}

// The set of arguments for constructing a ComputeMachineImageIamMember resource.
type ComputeMachineImageIamMemberArgs struct {
	ComputeMachineImageIamMemberId pulumi.StringPtrInput
	Condition                      ComputeMachineImageIamMemberConditionPtrInput
	MachineImage                   pulumi.StringInput
	Member                         pulumi.StringInput
	Project                        pulumi.StringPtrInput
	Role                           pulumi.StringInput
}

func (ComputeMachineImageIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeMachineImageIamMemberArgs)(nil)).Elem()
}

type ComputeMachineImageIamMemberInput interface {
	pulumi.Input

	ToComputeMachineImageIamMemberOutput() ComputeMachineImageIamMemberOutput
	ToComputeMachineImageIamMemberOutputWithContext(ctx context.Context) ComputeMachineImageIamMemberOutput
}

func (*ComputeMachineImageIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeMachineImageIamMember)(nil)).Elem()
}

func (i *ComputeMachineImageIamMember) ToComputeMachineImageIamMemberOutput() ComputeMachineImageIamMemberOutput {
	return i.ToComputeMachineImageIamMemberOutputWithContext(context.Background())
}

func (i *ComputeMachineImageIamMember) ToComputeMachineImageIamMemberOutputWithContext(ctx context.Context) ComputeMachineImageIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeMachineImageIamMemberOutput)
}

type ComputeMachineImageIamMemberOutput struct{ *pulumi.OutputState }

func (ComputeMachineImageIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeMachineImageIamMember)(nil)).Elem()
}

func (o ComputeMachineImageIamMemberOutput) ToComputeMachineImageIamMemberOutput() ComputeMachineImageIamMemberOutput {
	return o
}

func (o ComputeMachineImageIamMemberOutput) ToComputeMachineImageIamMemberOutputWithContext(ctx context.Context) ComputeMachineImageIamMemberOutput {
	return o
}

func (o ComputeMachineImageIamMemberOutput) ComputeMachineImageIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) pulumi.StringOutput { return v.ComputeMachineImageIamMemberId }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamMemberOutput) Condition() ComputeMachineImageIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) ComputeMachineImageIamMemberConditionPtrOutput {
		return v.Condition
	}).(ComputeMachineImageIamMemberConditionPtrOutput)
}

func (o ComputeMachineImageIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamMemberOutput) MachineImage() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) pulumi.StringOutput { return v.MachineImage }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeMachineImageIamMemberInput)(nil)).Elem(), &ComputeMachineImageIamMember{})
	pulumi.RegisterOutputType(ComputeMachineImageIamMemberOutput{})
}
