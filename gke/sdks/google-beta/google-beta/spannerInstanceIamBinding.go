// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpannerInstanceIamBinding struct {
	pulumi.CustomResourceState

	Condition                   SpannerInstanceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                        pulumi.StringOutput                         `pulumi:"etag"`
	Instance                    pulumi.StringOutput                         `pulumi:"instance"`
	Members                     pulumi.StringArrayOutput                    `pulumi:"members"`
	Project                     pulumi.StringOutput                         `pulumi:"project"`
	Role                        pulumi.StringOutput                         `pulumi:"role"`
	SpannerInstanceIamBindingId pulumi.StringOutput                         `pulumi:"spannerInstanceIamBindingId"`
}

// NewSpannerInstanceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSpannerInstanceIamBinding(ctx *pulumi.Context,
	name string, args *SpannerInstanceIamBindingArgs, opts ...pulumi.ResourceOption) (*SpannerInstanceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SpannerInstanceIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/spannerInstanceIamBinding:SpannerInstanceIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpannerInstanceIamBinding gets an existing SpannerInstanceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpannerInstanceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpannerInstanceIamBindingState, opts ...pulumi.ResourceOption) (*SpannerInstanceIamBinding, error) {
	var resource SpannerInstanceIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/spannerInstanceIamBinding:SpannerInstanceIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpannerInstanceIamBinding resources.
type spannerInstanceIamBindingState struct {
	Condition                   *SpannerInstanceIamBindingCondition `pulumi:"condition"`
	Etag                        *string                             `pulumi:"etag"`
	Instance                    *string                             `pulumi:"instance"`
	Members                     []string                            `pulumi:"members"`
	Project                     *string                             `pulumi:"project"`
	Role                        *string                             `pulumi:"role"`
	SpannerInstanceIamBindingId *string                             `pulumi:"spannerInstanceIamBindingId"`
}

type SpannerInstanceIamBindingState struct {
	Condition                   SpannerInstanceIamBindingConditionPtrInput
	Etag                        pulumi.StringPtrInput
	Instance                    pulumi.StringPtrInput
	Members                     pulumi.StringArrayInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringPtrInput
	SpannerInstanceIamBindingId pulumi.StringPtrInput
}

func (SpannerInstanceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceIamBindingState)(nil)).Elem()
}

type spannerInstanceIamBindingArgs struct {
	Condition                   *SpannerInstanceIamBindingCondition `pulumi:"condition"`
	Instance                    string                              `pulumi:"instance"`
	Members                     []string                            `pulumi:"members"`
	Project                     *string                             `pulumi:"project"`
	Role                        string                              `pulumi:"role"`
	SpannerInstanceIamBindingId *string                             `pulumi:"spannerInstanceIamBindingId"`
}

// The set of arguments for constructing a SpannerInstanceIamBinding resource.
type SpannerInstanceIamBindingArgs struct {
	Condition                   SpannerInstanceIamBindingConditionPtrInput
	Instance                    pulumi.StringInput
	Members                     pulumi.StringArrayInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringInput
	SpannerInstanceIamBindingId pulumi.StringPtrInput
}

func (SpannerInstanceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerInstanceIamBindingArgs)(nil)).Elem()
}

type SpannerInstanceIamBindingInput interface {
	pulumi.Input

	ToSpannerInstanceIamBindingOutput() SpannerInstanceIamBindingOutput
	ToSpannerInstanceIamBindingOutputWithContext(ctx context.Context) SpannerInstanceIamBindingOutput
}

func (*SpannerInstanceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceIamBinding)(nil)).Elem()
}

func (i *SpannerInstanceIamBinding) ToSpannerInstanceIamBindingOutput() SpannerInstanceIamBindingOutput {
	return i.ToSpannerInstanceIamBindingOutputWithContext(context.Background())
}

func (i *SpannerInstanceIamBinding) ToSpannerInstanceIamBindingOutputWithContext(ctx context.Context) SpannerInstanceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerInstanceIamBindingOutput)
}

type SpannerInstanceIamBindingOutput struct{ *pulumi.OutputState }

func (SpannerInstanceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerInstanceIamBinding)(nil)).Elem()
}

func (o SpannerInstanceIamBindingOutput) ToSpannerInstanceIamBindingOutput() SpannerInstanceIamBindingOutput {
	return o
}

func (o SpannerInstanceIamBindingOutput) ToSpannerInstanceIamBindingOutputWithContext(ctx context.Context) SpannerInstanceIamBindingOutput {
	return o
}

func (o SpannerInstanceIamBindingOutput) Condition() SpannerInstanceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) SpannerInstanceIamBindingConditionPtrOutput { return v.Condition }).(SpannerInstanceIamBindingConditionPtrOutput)
}

func (o SpannerInstanceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamBindingOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o SpannerInstanceIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SpannerInstanceIamBindingOutput) SpannerInstanceIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerInstanceIamBinding) pulumi.StringOutput { return v.SpannerInstanceIamBindingId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerInstanceIamBindingInput)(nil)).Elem(), &SpannerInstanceIamBinding{})
	pulumi.RegisterOutputType(SpannerInstanceIamBindingOutput{})
}
