// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeSnapshotIamPolicy struct {
	pulumi.CustomResourceState

	ComputeSnapshotIamPolicyId pulumi.StringOutput `pulumi:"computeSnapshotIamPolicyId"`
	Etag                       pulumi.StringOutput `pulumi:"etag"`
	Name                       pulumi.StringOutput `pulumi:"name"`
	PolicyData                 pulumi.StringOutput `pulumi:"policyData"`
	Project                    pulumi.StringOutput `pulumi:"project"`
}

// NewComputeSnapshotIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewComputeSnapshotIamPolicy(ctx *pulumi.Context,
	name string, args *ComputeSnapshotIamPolicyArgs, opts ...pulumi.ResourceOption) (*ComputeSnapshotIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeSnapshotIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/computeSnapshotIamPolicy:ComputeSnapshotIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeSnapshotIamPolicy gets an existing ComputeSnapshotIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeSnapshotIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeSnapshotIamPolicyState, opts ...pulumi.ResourceOption) (*ComputeSnapshotIamPolicy, error) {
	var resource ComputeSnapshotIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeSnapshotIamPolicy:ComputeSnapshotIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeSnapshotIamPolicy resources.
type computeSnapshotIamPolicyState struct {
	ComputeSnapshotIamPolicyId *string `pulumi:"computeSnapshotIamPolicyId"`
	Etag                       *string `pulumi:"etag"`
	Name                       *string `pulumi:"name"`
	PolicyData                 *string `pulumi:"policyData"`
	Project                    *string `pulumi:"project"`
}

type ComputeSnapshotIamPolicyState struct {
	ComputeSnapshotIamPolicyId pulumi.StringPtrInput
	Etag                       pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	PolicyData                 pulumi.StringPtrInput
	Project                    pulumi.StringPtrInput
}

func (ComputeSnapshotIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotIamPolicyState)(nil)).Elem()
}

type computeSnapshotIamPolicyArgs struct {
	ComputeSnapshotIamPolicyId *string `pulumi:"computeSnapshotIamPolicyId"`
	Name                       *string `pulumi:"name"`
	PolicyData                 string  `pulumi:"policyData"`
	Project                    *string `pulumi:"project"`
}

// The set of arguments for constructing a ComputeSnapshotIamPolicy resource.
type ComputeSnapshotIamPolicyArgs struct {
	ComputeSnapshotIamPolicyId pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	PolicyData                 pulumi.StringInput
	Project                    pulumi.StringPtrInput
}

func (ComputeSnapshotIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotIamPolicyArgs)(nil)).Elem()
}

type ComputeSnapshotIamPolicyInput interface {
	pulumi.Input

	ToComputeSnapshotIamPolicyOutput() ComputeSnapshotIamPolicyOutput
	ToComputeSnapshotIamPolicyOutputWithContext(ctx context.Context) ComputeSnapshotIamPolicyOutput
}

func (*ComputeSnapshotIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshotIamPolicy)(nil)).Elem()
}

func (i *ComputeSnapshotIamPolicy) ToComputeSnapshotIamPolicyOutput() ComputeSnapshotIamPolicyOutput {
	return i.ToComputeSnapshotIamPolicyOutputWithContext(context.Background())
}

func (i *ComputeSnapshotIamPolicy) ToComputeSnapshotIamPolicyOutputWithContext(ctx context.Context) ComputeSnapshotIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotIamPolicyOutput)
}

type ComputeSnapshotIamPolicyOutput struct{ *pulumi.OutputState }

func (ComputeSnapshotIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshotIamPolicy)(nil)).Elem()
}

func (o ComputeSnapshotIamPolicyOutput) ToComputeSnapshotIamPolicyOutput() ComputeSnapshotIamPolicyOutput {
	return o
}

func (o ComputeSnapshotIamPolicyOutput) ToComputeSnapshotIamPolicyOutputWithContext(ctx context.Context) ComputeSnapshotIamPolicyOutput {
	return o
}

func (o ComputeSnapshotIamPolicyOutput) ComputeSnapshotIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamPolicy) pulumi.StringOutput { return v.ComputeSnapshotIamPolicyId }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ComputeSnapshotIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshotIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSnapshotIamPolicyInput)(nil)).Elem(), &ComputeSnapshotIamPolicy{})
	pulumi.RegisterOutputType(ComputeSnapshotIamPolicyOutput{})
}
