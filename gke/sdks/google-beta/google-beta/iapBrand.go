// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IapBrand struct {
	pulumi.CustomResourceState

	// Application name displayed on OAuth consent screen.
	ApplicationTitle pulumi.StringOutput `pulumi:"applicationTitle"`
	IapBrandId       pulumi.StringOutput `pulumi:"iapBrandId"`
	// Output only. Identifier of the brand, in the format 'projects/{project_number}/brands/{brand_id}' NOTE: The name can
	// also be expressed as 'projects/{project_id}/brands/{brand_id}', e.g. when importing. NOTE: The brand identification
	// corresponds to the project number as only one brand can be created per project.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the brand is only intended for usage inside the GSuite organization only.
	OrgInternalOnly pulumi.BoolOutput   `pulumi:"orgInternalOnly"`
	Project         pulumi.StringOutput `pulumi:"project"`
	// Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
	// specified, the caller must be the user with the associated email address. When a group email is specified, the caller
	// can be either a user or a service account which is an owner of the specified group in Cloud Identity.
	SupportEmail pulumi.StringOutput       `pulumi:"supportEmail"`
	Timeouts     IapBrandTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewIapBrand registers a new resource with the given unique name, arguments, and options.
func NewIapBrand(ctx *pulumi.Context,
	name string, args *IapBrandArgs, opts ...pulumi.ResourceOption) (*IapBrand, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationTitle == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationTitle'")
	}
	if args.SupportEmail == nil {
		return nil, errors.New("invalid value for required argument 'SupportEmail'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IapBrand
	err = ctx.RegisterPackageResource("google-beta:index/iapBrand:IapBrand", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIapBrand gets an existing IapBrand resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIapBrand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IapBrandState, opts ...pulumi.ResourceOption) (*IapBrand, error) {
	var resource IapBrand
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/iapBrand:IapBrand", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IapBrand resources.
type iapBrandState struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle *string `pulumi:"applicationTitle"`
	IapBrandId       *string `pulumi:"iapBrandId"`
	// Output only. Identifier of the brand, in the format 'projects/{project_number}/brands/{brand_id}' NOTE: The name can
	// also be expressed as 'projects/{project_id}/brands/{brand_id}', e.g. when importing. NOTE: The brand identification
	// corresponds to the project number as only one brand can be created per project.
	Name *string `pulumi:"name"`
	// Whether the brand is only intended for usage inside the GSuite organization only.
	OrgInternalOnly *bool   `pulumi:"orgInternalOnly"`
	Project         *string `pulumi:"project"`
	// Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
	// specified, the caller must be the user with the associated email address. When a group email is specified, the caller
	// can be either a user or a service account which is an owner of the specified group in Cloud Identity.
	SupportEmail *string           `pulumi:"supportEmail"`
	Timeouts     *IapBrandTimeouts `pulumi:"timeouts"`
}

type IapBrandState struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle pulumi.StringPtrInput
	IapBrandId       pulumi.StringPtrInput
	// Output only. Identifier of the brand, in the format 'projects/{project_number}/brands/{brand_id}' NOTE: The name can
	// also be expressed as 'projects/{project_id}/brands/{brand_id}', e.g. when importing. NOTE: The brand identification
	// corresponds to the project number as only one brand can be created per project.
	Name pulumi.StringPtrInput
	// Whether the brand is only intended for usage inside the GSuite organization only.
	OrgInternalOnly pulumi.BoolPtrInput
	Project         pulumi.StringPtrInput
	// Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
	// specified, the caller must be the user with the associated email address. When a group email is specified, the caller
	// can be either a user or a service account which is an owner of the specified group in Cloud Identity.
	SupportEmail pulumi.StringPtrInput
	Timeouts     IapBrandTimeoutsPtrInput
}

func (IapBrandState) ElementType() reflect.Type {
	return reflect.TypeOf((*iapBrandState)(nil)).Elem()
}

type iapBrandArgs struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle string  `pulumi:"applicationTitle"`
	IapBrandId       *string `pulumi:"iapBrandId"`
	Project          *string `pulumi:"project"`
	// Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
	// specified, the caller must be the user with the associated email address. When a group email is specified, the caller
	// can be either a user or a service account which is an owner of the specified group in Cloud Identity.
	SupportEmail string            `pulumi:"supportEmail"`
	Timeouts     *IapBrandTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a IapBrand resource.
type IapBrandArgs struct {
	// Application name displayed on OAuth consent screen.
	ApplicationTitle pulumi.StringInput
	IapBrandId       pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	// Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
	// specified, the caller must be the user with the associated email address. When a group email is specified, the caller
	// can be either a user or a service account which is an owner of the specified group in Cloud Identity.
	SupportEmail pulumi.StringInput
	Timeouts     IapBrandTimeoutsPtrInput
}

func (IapBrandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iapBrandArgs)(nil)).Elem()
}

type IapBrandInput interface {
	pulumi.Input

	ToIapBrandOutput() IapBrandOutput
	ToIapBrandOutputWithContext(ctx context.Context) IapBrandOutput
}

func (*IapBrand) ElementType() reflect.Type {
	return reflect.TypeOf((**IapBrand)(nil)).Elem()
}

func (i *IapBrand) ToIapBrandOutput() IapBrandOutput {
	return i.ToIapBrandOutputWithContext(context.Background())
}

func (i *IapBrand) ToIapBrandOutputWithContext(ctx context.Context) IapBrandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IapBrandOutput)
}

type IapBrandOutput struct{ *pulumi.OutputState }

func (IapBrandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IapBrand)(nil)).Elem()
}

func (o IapBrandOutput) ToIapBrandOutput() IapBrandOutput {
	return o
}

func (o IapBrandOutput) ToIapBrandOutputWithContext(ctx context.Context) IapBrandOutput {
	return o
}

// Application name displayed on OAuth consent screen.
func (o IapBrandOutput) ApplicationTitle() pulumi.StringOutput {
	return o.ApplyT(func(v *IapBrand) pulumi.StringOutput { return v.ApplicationTitle }).(pulumi.StringOutput)
}

func (o IapBrandOutput) IapBrandId() pulumi.StringOutput {
	return o.ApplyT(func(v *IapBrand) pulumi.StringOutput { return v.IapBrandId }).(pulumi.StringOutput)
}

// Output only. Identifier of the brand, in the format 'projects/{project_number}/brands/{brand_id}' NOTE: The name can
// also be expressed as 'projects/{project_id}/brands/{brand_id}', e.g. when importing. NOTE: The brand identification
// corresponds to the project number as only one brand can be created per project.
func (o IapBrandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IapBrand) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the brand is only intended for usage inside the GSuite organization only.
func (o IapBrandOutput) OrgInternalOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *IapBrand) pulumi.BoolOutput { return v.OrgInternalOnly }).(pulumi.BoolOutput)
}

func (o IapBrandOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IapBrand) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
// specified, the caller must be the user with the associated email address. When a group email is specified, the caller
// can be either a user or a service account which is an owner of the specified group in Cloud Identity.
func (o IapBrandOutput) SupportEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *IapBrand) pulumi.StringOutput { return v.SupportEmail }).(pulumi.StringOutput)
}

func (o IapBrandOutput) Timeouts() IapBrandTimeoutsPtrOutput {
	return o.ApplyT(func(v *IapBrand) IapBrandTimeoutsPtrOutput { return v.Timeouts }).(IapBrandTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IapBrandInput)(nil)).Elem(), &IapBrand{})
	pulumi.RegisterOutputType(IapBrandOutput{})
}
