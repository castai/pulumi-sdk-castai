// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccV2ProjectMuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// location Id is provided by project. If not provided, Use global as default.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is projects/{project}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId}, or
	// organizations/{organization}/locations/global/muteConfigs/{configId}
	Name                     pulumi.StringOutput                     `pulumi:"name"`
	Project                  pulumi.StringOutput                     `pulumi:"project"`
	SccV2ProjectMuteConfigId pulumi.StringOutput                     `pulumi:"sccV2ProjectMuteConfigId"`
	Timeouts                 SccV2ProjectMuteConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of the mute config.
	Type pulumi.StringOutput `pulumi:"type"`
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSccV2ProjectMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewSccV2ProjectMuteConfig(ctx *pulumi.Context,
	name string, args *SccV2ProjectMuteConfigArgs, opts ...pulumi.ResourceOption) (*SccV2ProjectMuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccV2ProjectMuteConfig
	err = ctx.RegisterPackageResource("google-beta:index/sccV2ProjectMuteConfig:SccV2ProjectMuteConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccV2ProjectMuteConfig gets an existing SccV2ProjectMuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccV2ProjectMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccV2ProjectMuteConfigState, opts ...pulumi.ResourceOption) (*SccV2ProjectMuteConfig, error) {
	var resource SccV2ProjectMuteConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sccV2ProjectMuteConfig:SccV2ProjectMuteConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccV2ProjectMuteConfig resources.
type sccV2ProjectMuteConfigState struct {
	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime *string `pulumi:"createTime"`
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter *string `pulumi:"filter"`
	// location Id is provided by project. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor *string `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId *string `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is projects/{project}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId}, or
	// organizations/{organization}/locations/global/muteConfigs/{configId}
	Name                     *string                         `pulumi:"name"`
	Project                  *string                         `pulumi:"project"`
	SccV2ProjectMuteConfigId *string                         `pulumi:"sccV2ProjectMuteConfigId"`
	Timeouts                 *SccV2ProjectMuteConfigTimeouts `pulumi:"timeouts"`
	// The type of the mute config.
	Type *string `pulumi:"type"`
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime *string `pulumi:"updateTime"`
}

type SccV2ProjectMuteConfigState struct {
	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime pulumi.StringPtrInput
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringPtrInput
	// location Id is provided by project. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringPtrInput
	// Name of the mute config. Its format is projects/{project}/locations/global/muteConfigs/{configId},
	// folders/{folder}/locations/global/muteConfigs/{configId}, or
	// organizations/{organization}/locations/global/muteConfigs/{configId}
	Name                     pulumi.StringPtrInput
	Project                  pulumi.StringPtrInput
	SccV2ProjectMuteConfigId pulumi.StringPtrInput
	Timeouts                 SccV2ProjectMuteConfigTimeoutsPtrInput
	// The type of the mute config.
	Type pulumi.StringPtrInput
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime pulumi.StringPtrInput
}

func (SccV2ProjectMuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccV2ProjectMuteConfigState)(nil)).Elem()
}

type sccV2ProjectMuteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter string `pulumi:"filter"`
	// location Id is provided by project. If not provided, Use global as default.
	Location *string `pulumi:"location"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId             string                          `pulumi:"muteConfigId"`
	Project                  *string                         `pulumi:"project"`
	SccV2ProjectMuteConfigId *string                         `pulumi:"sccV2ProjectMuteConfigId"`
	Timeouts                 *SccV2ProjectMuteConfigTimeouts `pulumi:"timeouts"`
	// The type of the mute config.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SccV2ProjectMuteConfig resource.
type SccV2ProjectMuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringInput
	// location Id is provided by project. If not provided, Use global as default.
	Location pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId             pulumi.StringInput
	Project                  pulumi.StringPtrInput
	SccV2ProjectMuteConfigId pulumi.StringPtrInput
	Timeouts                 SccV2ProjectMuteConfigTimeoutsPtrInput
	// The type of the mute config.
	Type pulumi.StringInput
}

func (SccV2ProjectMuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccV2ProjectMuteConfigArgs)(nil)).Elem()
}

type SccV2ProjectMuteConfigInput interface {
	pulumi.Input

	ToSccV2ProjectMuteConfigOutput() SccV2ProjectMuteConfigOutput
	ToSccV2ProjectMuteConfigOutputWithContext(ctx context.Context) SccV2ProjectMuteConfigOutput
}

func (*SccV2ProjectMuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SccV2ProjectMuteConfig)(nil)).Elem()
}

func (i *SccV2ProjectMuteConfig) ToSccV2ProjectMuteConfigOutput() SccV2ProjectMuteConfigOutput {
	return i.ToSccV2ProjectMuteConfigOutputWithContext(context.Background())
}

func (i *SccV2ProjectMuteConfig) ToSccV2ProjectMuteConfigOutputWithContext(ctx context.Context) SccV2ProjectMuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccV2ProjectMuteConfigOutput)
}

type SccV2ProjectMuteConfigOutput struct{ *pulumi.OutputState }

func (SccV2ProjectMuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccV2ProjectMuteConfig)(nil)).Elem()
}

func (o SccV2ProjectMuteConfigOutput) ToSccV2ProjectMuteConfigOutput() SccV2ProjectMuteConfigOutput {
	return o
}

func (o SccV2ProjectMuteConfigOutput) ToSccV2ProjectMuteConfigOutputWithContext(ctx context.Context) SccV2ProjectMuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
// creation.
func (o SccV2ProjectMuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o SccV2ProjectMuteConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
// created under the project = Y scope, it might not match any findings.
func (o SccV2ProjectMuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// location Id is provided by project. If not provided, Use global as default.
func (o SccV2ProjectMuteConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
// provided on config creation or update.
func (o SccV2ProjectMuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Unique identifier provided by the client within the parent scope.
func (o SccV2ProjectMuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// Name of the mute config. Its format is projects/{project}/locations/global/muteConfigs/{configId},
// folders/{folder}/locations/global/muteConfigs/{configId}, or
// organizations/{organization}/locations/global/muteConfigs/{configId}
func (o SccV2ProjectMuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SccV2ProjectMuteConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SccV2ProjectMuteConfigOutput) SccV2ProjectMuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.SccV2ProjectMuteConfigId }).(pulumi.StringOutput)
}

func (o SccV2ProjectMuteConfigOutput) Timeouts() SccV2ProjectMuteConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) SccV2ProjectMuteConfigTimeoutsPtrOutput { return v.Timeouts }).(SccV2ProjectMuteConfigTimeoutsPtrOutput)
}

// The type of the mute config.
func (o SccV2ProjectMuteConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
// ignored if provided on config creation or update.
func (o SccV2ProjectMuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SccV2ProjectMuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccV2ProjectMuteConfigInput)(nil)).Elem(), &SccV2ProjectMuteConfig{})
	pulumi.RegisterOutputType(SccV2ProjectMuteConfigOutput{})
}
