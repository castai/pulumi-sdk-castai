// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupPubsubTopicIamPolicy(ctx *pulumi.Context, args *LookupPubsubTopicIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPubsubTopicIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupPubsubTopicIamPolicyResult
	err = ctx.InvokePackage("google-beta:index/getPubsubTopicIamPolicy:getPubsubTopicIamPolicy", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPubsubTopicIamPolicy.
type LookupPubsubTopicIamPolicyArgs struct {
	Id      *string `pulumi:"id"`
	Project *string `pulumi:"project"`
	Topic   string  `pulumi:"topic"`
}

// A collection of values returned by getPubsubTopicIamPolicy.
type LookupPubsubTopicIamPolicyResult struct {
	Etag       string `pulumi:"etag"`
	Id         string `pulumi:"id"`
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	Topic      string `pulumi:"topic"`
}

func LookupPubsubTopicIamPolicyOutput(ctx *pulumi.Context, args LookupPubsubTopicIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPubsubTopicIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPubsubTopicIamPolicyResultOutput, error) {
			args := v.(LookupPubsubTopicIamPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupPubsubTopicIamPolicyResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google-beta:index/getPubsubTopicIamPolicy:getPubsubTopicIamPolicy", args, LookupPubsubTopicIamPolicyResultOutput{}, options).(LookupPubsubTopicIamPolicyResultOutput), nil
		}).(LookupPubsubTopicIamPolicyResultOutput)
}

// A collection of arguments for invoking getPubsubTopicIamPolicy.
type LookupPubsubTopicIamPolicyOutputArgs struct {
	Id      pulumi.StringPtrInput `pulumi:"id"`
	Project pulumi.StringPtrInput `pulumi:"project"`
	Topic   pulumi.StringInput    `pulumi:"topic"`
}

func (LookupPubsubTopicIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPubsubTopicIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getPubsubTopicIamPolicy.
type LookupPubsubTopicIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPubsubTopicIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPubsubTopicIamPolicyResult)(nil)).Elem()
}

func (o LookupPubsubTopicIamPolicyResultOutput) ToLookupPubsubTopicIamPolicyResultOutput() LookupPubsubTopicIamPolicyResultOutput {
	return o
}

func (o LookupPubsubTopicIamPolicyResultOutput) ToLookupPubsubTopicIamPolicyResultOutputWithContext(ctx context.Context) LookupPubsubTopicIamPolicyResultOutput {
	return o
}

func (o LookupPubsubTopicIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupPubsubTopicIamPolicyResultOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubTopicIamPolicyResult) string { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPubsubTopicIamPolicyResultOutput{})
}
