// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecureSourceManagerRepositoryIamMember struct {
	pulumi.CustomResourceState

	Condition                                SecureSourceManagerRepositoryIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                                     pulumi.StringOutput                                      `pulumi:"etag"`
	Location                                 pulumi.StringOutput                                      `pulumi:"location"`
	Member                                   pulumi.StringOutput                                      `pulumi:"member"`
	Project                                  pulumi.StringOutput                                      `pulumi:"project"`
	RepositoryId                             pulumi.StringOutput                                      `pulumi:"repositoryId"`
	Role                                     pulumi.StringOutput                                      `pulumi:"role"`
	SecureSourceManagerRepositoryIamMemberId pulumi.StringOutput                                      `pulumi:"secureSourceManagerRepositoryIamMemberId"`
}

// NewSecureSourceManagerRepositoryIamMember registers a new resource with the given unique name, arguments, and options.
func NewSecureSourceManagerRepositoryIamMember(ctx *pulumi.Context,
	name string, args *SecureSourceManagerRepositoryIamMemberArgs, opts ...pulumi.ResourceOption) (*SecureSourceManagerRepositoryIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SecureSourceManagerRepositoryIamMember
	err = ctx.RegisterPackageResource("google-beta:index/secureSourceManagerRepositoryIamMember:SecureSourceManagerRepositoryIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecureSourceManagerRepositoryIamMember gets an existing SecureSourceManagerRepositoryIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecureSourceManagerRepositoryIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecureSourceManagerRepositoryIamMemberState, opts ...pulumi.ResourceOption) (*SecureSourceManagerRepositoryIamMember, error) {
	var resource SecureSourceManagerRepositoryIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/secureSourceManagerRepositoryIamMember:SecureSourceManagerRepositoryIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecureSourceManagerRepositoryIamMember resources.
type secureSourceManagerRepositoryIamMemberState struct {
	Condition                                *SecureSourceManagerRepositoryIamMemberCondition `pulumi:"condition"`
	Etag                                     *string                                          `pulumi:"etag"`
	Location                                 *string                                          `pulumi:"location"`
	Member                                   *string                                          `pulumi:"member"`
	Project                                  *string                                          `pulumi:"project"`
	RepositoryId                             *string                                          `pulumi:"repositoryId"`
	Role                                     *string                                          `pulumi:"role"`
	SecureSourceManagerRepositoryIamMemberId *string                                          `pulumi:"secureSourceManagerRepositoryIamMemberId"`
}

type SecureSourceManagerRepositoryIamMemberState struct {
	Condition                                SecureSourceManagerRepositoryIamMemberConditionPtrInput
	Etag                                     pulumi.StringPtrInput
	Location                                 pulumi.StringPtrInput
	Member                                   pulumi.StringPtrInput
	Project                                  pulumi.StringPtrInput
	RepositoryId                             pulumi.StringPtrInput
	Role                                     pulumi.StringPtrInput
	SecureSourceManagerRepositoryIamMemberId pulumi.StringPtrInput
}

func (SecureSourceManagerRepositoryIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*secureSourceManagerRepositoryIamMemberState)(nil)).Elem()
}

type secureSourceManagerRepositoryIamMemberArgs struct {
	Condition                                *SecureSourceManagerRepositoryIamMemberCondition `pulumi:"condition"`
	Location                                 *string                                          `pulumi:"location"`
	Member                                   string                                           `pulumi:"member"`
	Project                                  *string                                          `pulumi:"project"`
	RepositoryId                             string                                           `pulumi:"repositoryId"`
	Role                                     string                                           `pulumi:"role"`
	SecureSourceManagerRepositoryIamMemberId *string                                          `pulumi:"secureSourceManagerRepositoryIamMemberId"`
}

// The set of arguments for constructing a SecureSourceManagerRepositoryIamMember resource.
type SecureSourceManagerRepositoryIamMemberArgs struct {
	Condition                                SecureSourceManagerRepositoryIamMemberConditionPtrInput
	Location                                 pulumi.StringPtrInput
	Member                                   pulumi.StringInput
	Project                                  pulumi.StringPtrInput
	RepositoryId                             pulumi.StringInput
	Role                                     pulumi.StringInput
	SecureSourceManagerRepositoryIamMemberId pulumi.StringPtrInput
}

func (SecureSourceManagerRepositoryIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secureSourceManagerRepositoryIamMemberArgs)(nil)).Elem()
}

type SecureSourceManagerRepositoryIamMemberInput interface {
	pulumi.Input

	ToSecureSourceManagerRepositoryIamMemberOutput() SecureSourceManagerRepositoryIamMemberOutput
	ToSecureSourceManagerRepositoryIamMemberOutputWithContext(ctx context.Context) SecureSourceManagerRepositoryIamMemberOutput
}

func (*SecureSourceManagerRepositoryIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureSourceManagerRepositoryIamMember)(nil)).Elem()
}

func (i *SecureSourceManagerRepositoryIamMember) ToSecureSourceManagerRepositoryIamMemberOutput() SecureSourceManagerRepositoryIamMemberOutput {
	return i.ToSecureSourceManagerRepositoryIamMemberOutputWithContext(context.Background())
}

func (i *SecureSourceManagerRepositoryIamMember) ToSecureSourceManagerRepositoryIamMemberOutputWithContext(ctx context.Context) SecureSourceManagerRepositoryIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureSourceManagerRepositoryIamMemberOutput)
}

type SecureSourceManagerRepositoryIamMemberOutput struct{ *pulumi.OutputState }

func (SecureSourceManagerRepositoryIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureSourceManagerRepositoryIamMember)(nil)).Elem()
}

func (o SecureSourceManagerRepositoryIamMemberOutput) ToSecureSourceManagerRepositoryIamMemberOutput() SecureSourceManagerRepositoryIamMemberOutput {
	return o
}

func (o SecureSourceManagerRepositoryIamMemberOutput) ToSecureSourceManagerRepositoryIamMemberOutputWithContext(ctx context.Context) SecureSourceManagerRepositoryIamMemberOutput {
	return o
}

func (o SecureSourceManagerRepositoryIamMemberOutput) Condition() SecureSourceManagerRepositoryIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) SecureSourceManagerRepositoryIamMemberConditionPtrOutput {
		return v.Condition
	}).(SecureSourceManagerRepositoryIamMemberConditionPtrOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SecureSourceManagerRepositoryIamMemberOutput) SecureSourceManagerRepositoryIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecureSourceManagerRepositoryIamMember) pulumi.StringOutput {
		return v.SecureSourceManagerRepositoryIamMemberId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecureSourceManagerRepositoryIamMemberInput)(nil)).Elem(), &SecureSourceManagerRepositoryIamMember{})
	pulumi.RegisterOutputType(SecureSourceManagerRepositoryIamMemberOutput{})
}
