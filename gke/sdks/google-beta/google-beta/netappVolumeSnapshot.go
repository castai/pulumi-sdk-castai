// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetappVolumeSnapshot struct {
	pulumi.CustomResourceState

	// Description for the snapshot.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the snapshot.
	Name                   pulumi.StringOutput `pulumi:"name"`
	NetappVolumeSnapshotId pulumi.StringOutput `pulumi:"netappVolumeSnapshotId"`
	Project                pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                `pulumi:"terraformLabels"`
	Timeouts        NetappVolumeSnapshotTimeoutsPtrOutput `pulumi:"timeouts"`
	// Storage used to store blocks unique to this snapshot.
	UsedBytes pulumi.Float64Output `pulumi:"usedBytes"`
	// The name of the volume to create the snapshot in.
	VolumeName pulumi.StringOutput `pulumi:"volumeName"`
}

// NewNetappVolumeSnapshot registers a new resource with the given unique name, arguments, and options.
func NewNetappVolumeSnapshot(ctx *pulumi.Context,
	name string, args *NetappVolumeSnapshotArgs, opts ...pulumi.ResourceOption) (*NetappVolumeSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetappVolumeSnapshot
	err = ctx.RegisterPackageResource("google-beta:index/netappVolumeSnapshot:NetappVolumeSnapshot", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappVolumeSnapshot gets an existing NetappVolumeSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappVolumeSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappVolumeSnapshotState, opts ...pulumi.ResourceOption) (*NetappVolumeSnapshot, error) {
	var resource NetappVolumeSnapshot
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/netappVolumeSnapshot:NetappVolumeSnapshot", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappVolumeSnapshot resources.
type netappVolumeSnapshotState struct {
	// Description for the snapshot.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
	Location *string `pulumi:"location"`
	// The name of the snapshot.
	Name                   *string `pulumi:"name"`
	NetappVolumeSnapshotId *string `pulumi:"netappVolumeSnapshotId"`
	Project                *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string             `pulumi:"terraformLabels"`
	Timeouts        *NetappVolumeSnapshotTimeouts `pulumi:"timeouts"`
	// Storage used to store blocks unique to this snapshot.
	UsedBytes *float64 `pulumi:"usedBytes"`
	// The name of the volume to create the snapshot in.
	VolumeName *string `pulumi:"volumeName"`
}

type NetappVolumeSnapshotState struct {
	// Description for the snapshot.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
	Location pulumi.StringPtrInput
	// The name of the snapshot.
	Name                   pulumi.StringPtrInput
	NetappVolumeSnapshotId pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetappVolumeSnapshotTimeoutsPtrInput
	// Storage used to store blocks unique to this snapshot.
	UsedBytes pulumi.Float64PtrInput
	// The name of the volume to create the snapshot in.
	VolumeName pulumi.StringPtrInput
}

func (NetappVolumeSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeSnapshotState)(nil)).Elem()
}

type netappVolumeSnapshotArgs struct {
	// Description for the snapshot.
	Description *string `pulumi:"description"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
	Location string `pulumi:"location"`
	// The name of the snapshot.
	Name                   *string                       `pulumi:"name"`
	NetappVolumeSnapshotId *string                       `pulumi:"netappVolumeSnapshotId"`
	Project                *string                       `pulumi:"project"`
	Timeouts               *NetappVolumeSnapshotTimeouts `pulumi:"timeouts"`
	// The name of the volume to create the snapshot in.
	VolumeName string `pulumi:"volumeName"`
}

// The set of arguments for constructing a NetappVolumeSnapshot resource.
type NetappVolumeSnapshotArgs struct {
	// Description for the snapshot.
	Description pulumi.StringPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
	Location pulumi.StringInput
	// The name of the snapshot.
	Name                   pulumi.StringPtrInput
	NetappVolumeSnapshotId pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	Timeouts               NetappVolumeSnapshotTimeoutsPtrInput
	// The name of the volume to create the snapshot in.
	VolumeName pulumi.StringInput
}

func (NetappVolumeSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeSnapshotArgs)(nil)).Elem()
}

type NetappVolumeSnapshotInput interface {
	pulumi.Input

	ToNetappVolumeSnapshotOutput() NetappVolumeSnapshotOutput
	ToNetappVolumeSnapshotOutputWithContext(ctx context.Context) NetappVolumeSnapshotOutput
}

func (*NetappVolumeSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolumeSnapshot)(nil)).Elem()
}

func (i *NetappVolumeSnapshot) ToNetappVolumeSnapshotOutput() NetappVolumeSnapshotOutput {
	return i.ToNetappVolumeSnapshotOutputWithContext(context.Background())
}

func (i *NetappVolumeSnapshot) ToNetappVolumeSnapshotOutputWithContext(ctx context.Context) NetappVolumeSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappVolumeSnapshotOutput)
}

type NetappVolumeSnapshotOutput struct{ *pulumi.OutputState }

func (NetappVolumeSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolumeSnapshot)(nil)).Elem()
}

func (o NetappVolumeSnapshotOutput) ToNetappVolumeSnapshotOutput() NetappVolumeSnapshotOutput {
	return o
}

func (o NetappVolumeSnapshotOutput) ToNetappVolumeSnapshotOutputWithContext(ctx context.Context) NetappVolumeSnapshotOutput {
	return o
}

// Description for the snapshot.
func (o NetappVolumeSnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetappVolumeSnapshotOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o NetappVolumeSnapshotOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the snapshot location. Snapshots are child resources of volumes and live in the same location.
func (o NetappVolumeSnapshotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the snapshot.
func (o NetappVolumeSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetappVolumeSnapshotOutput) NetappVolumeSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringOutput { return v.NetappVolumeSnapshotId }).(pulumi.StringOutput)
}

func (o NetappVolumeSnapshotOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetappVolumeSnapshotOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetappVolumeSnapshotOutput) Timeouts() NetappVolumeSnapshotTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) NetappVolumeSnapshotTimeoutsPtrOutput { return v.Timeouts }).(NetappVolumeSnapshotTimeoutsPtrOutput)
}

// Storage used to store blocks unique to this snapshot.
func (o NetappVolumeSnapshotOutput) UsedBytes() pulumi.Float64Output {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.Float64Output { return v.UsedBytes }).(pulumi.Float64Output)
}

// The name of the volume to create the snapshot in.
func (o NetappVolumeSnapshotOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeSnapshot) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappVolumeSnapshotInput)(nil)).Elem(), &NetappVolumeSnapshot{})
	pulumi.RegisterOutputType(NetappVolumeSnapshotOutput{})
}
