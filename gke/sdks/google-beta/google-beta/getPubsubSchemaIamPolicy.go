// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupPubsubSchemaIamPolicy(ctx *pulumi.Context, args *LookupPubsubSchemaIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPubsubSchemaIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupPubsubSchemaIamPolicyResult
	err = ctx.InvokePackage("google-beta:index/getPubsubSchemaIamPolicy:getPubsubSchemaIamPolicy", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPubsubSchemaIamPolicy.
type LookupPubsubSchemaIamPolicyArgs struct {
	Id      *string `pulumi:"id"`
	Project *string `pulumi:"project"`
	Schema  string  `pulumi:"schema"`
}

// A collection of values returned by getPubsubSchemaIamPolicy.
type LookupPubsubSchemaIamPolicyResult struct {
	Etag       string `pulumi:"etag"`
	Id         string `pulumi:"id"`
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	Schema     string `pulumi:"schema"`
}

func LookupPubsubSchemaIamPolicyOutput(ctx *pulumi.Context, args LookupPubsubSchemaIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPubsubSchemaIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPubsubSchemaIamPolicyResultOutput, error) {
			args := v.(LookupPubsubSchemaIamPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupPubsubSchemaIamPolicyResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google-beta:index/getPubsubSchemaIamPolicy:getPubsubSchemaIamPolicy", args, LookupPubsubSchemaIamPolicyResultOutput{}, options).(LookupPubsubSchemaIamPolicyResultOutput), nil
		}).(LookupPubsubSchemaIamPolicyResultOutput)
}

// A collection of arguments for invoking getPubsubSchemaIamPolicy.
type LookupPubsubSchemaIamPolicyOutputArgs struct {
	Id      pulumi.StringPtrInput `pulumi:"id"`
	Project pulumi.StringPtrInput `pulumi:"project"`
	Schema  pulumi.StringInput    `pulumi:"schema"`
}

func (LookupPubsubSchemaIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPubsubSchemaIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getPubsubSchemaIamPolicy.
type LookupPubsubSchemaIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPubsubSchemaIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPubsubSchemaIamPolicyResult)(nil)).Elem()
}

func (o LookupPubsubSchemaIamPolicyResultOutput) ToLookupPubsubSchemaIamPolicyResultOutput() LookupPubsubSchemaIamPolicyResultOutput {
	return o
}

func (o LookupPubsubSchemaIamPolicyResultOutput) ToLookupPubsubSchemaIamPolicyResultOutputWithContext(ctx context.Context) LookupPubsubSchemaIamPolicyResultOutput {
	return o
}

func (o LookupPubsubSchemaIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubSchemaIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupPubsubSchemaIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubSchemaIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPubsubSchemaIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubSchemaIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupPubsubSchemaIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubSchemaIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupPubsubSchemaIamPolicyResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPubsubSchemaIamPolicyResult) string { return v.Schema }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPubsubSchemaIamPolicyResultOutput{})
}
