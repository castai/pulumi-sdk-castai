// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventarcTrigger struct {
	pulumi.CustomResourceState

	// Optional. The name of the channel associated with the trigger in
	// `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from
	// Eventarc SaaS partners.
	Channel pulumi.StringPtrOutput `pulumi:"channel"`
	// Output only. The reason(s) why a trigger is in FAILED state.
	Conditions pulumi.StringMapOutput `pulumi:"conditions"`
	// Output only. The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. Destination specifies where the events should be sent to.
	Destination     EventarcTriggerDestinationOutput `pulumi:"destination"`
	EffectiveLabels pulumi.StringMapOutput           `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create
	// requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data
	// field. This is set to `application/json` if the value is not defined.
	EventDataContentType pulumi.StringOutput `pulumi:"eventDataContentType"`
	EventarcTriggerId    pulumi.StringOutput `pulumi:"eventarcTriggerId"`
	// Optional. User labels attached to the triggers that can be used to group resources. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// `effective_labels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters
	// will be sent to the destination.
	MatchingCriterias EventarcTriggerMatchingCriteriaArrayOutput `pulumi:"matchingCriterias"`
	// Required. The resource name of the trigger. Must be unique within the location on the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the
	// trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See
	// https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run
	// destinations, this service account is used to generate identity tokens when invoking the service. See
	// https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke
	// authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have
	// `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput           `pulumi:"terraformLabels"`
	Timeouts        EventarcTriggerTimeoutsPtrOutput `pulumi:"timeouts"`
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field
	// contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport EventarcTriggerTransportPtrOutput `pulumi:"transport"`
	// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain
	// unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEventarcTrigger registers a new resource with the given unique name, arguments, and options.
func NewEventarcTrigger(ctx *pulumi.Context,
	name string, args *EventarcTriggerArgs, opts ...pulumi.ResourceOption) (*EventarcTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MatchingCriterias == nil {
		return nil, errors.New("invalid value for required argument 'MatchingCriterias'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EventarcTrigger
	err = ctx.RegisterPackageResource("google-beta:index/eventarcTrigger:EventarcTrigger", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventarcTrigger gets an existing EventarcTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventarcTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventarcTriggerState, opts ...pulumi.ResourceOption) (*EventarcTrigger, error) {
	var resource EventarcTrigger
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/eventarcTrigger:EventarcTrigger", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventarcTrigger resources.
type eventarcTriggerState struct {
	// Optional. The name of the channel associated with the trigger in
	// `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from
	// Eventarc SaaS partners.
	Channel *string `pulumi:"channel"`
	// Output only. The reason(s) why a trigger is in FAILED state.
	Conditions map[string]string `pulumi:"conditions"`
	// Output only. The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Required. Destination specifies where the events should be sent to.
	Destination     *EventarcTriggerDestination `pulumi:"destination"`
	EffectiveLabels map[string]string           `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create
	// requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data
	// field. This is set to `application/json` if the value is not defined.
	EventDataContentType *string `pulumi:"eventDataContentType"`
	EventarcTriggerId    *string `pulumi:"eventarcTriggerId"`
	// Optional. User labels attached to the triggers that can be used to group resources. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// `effective_labels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters
	// will be sent to the destination.
	MatchingCriterias []EventarcTriggerMatchingCriteria `pulumi:"matchingCriterias"`
	// Required. The resource name of the trigger. Must be unique within the location on the project.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the
	// trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See
	// https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run
	// destinations, this service account is used to generate identity tokens when invoking the service. See
	// https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke
	// authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have
	// `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string        `pulumi:"terraformLabels"`
	Timeouts        *EventarcTriggerTimeouts `pulumi:"timeouts"`
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field
	// contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport *EventarcTriggerTransport `pulumi:"transport"`
	// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain
	// unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type EventarcTriggerState struct {
	// Optional. The name of the channel associated with the trigger in
	// `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from
	// Eventarc SaaS partners.
	Channel pulumi.StringPtrInput
	// Output only. The reason(s) why a trigger is in FAILED state.
	Conditions pulumi.StringMapInput
	// Output only. The creation time.
	CreateTime pulumi.StringPtrInput
	// Required. Destination specifies where the events should be sent to.
	Destination     EventarcTriggerDestinationPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create
	// requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data
	// field. This is set to `application/json` if the value is not defined.
	EventDataContentType pulumi.StringPtrInput
	EventarcTriggerId    pulumi.StringPtrInput
	// Optional. User labels attached to the triggers that can be used to group resources. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// `effective_labels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters
	// will be sent to the destination.
	MatchingCriterias EventarcTriggerMatchingCriteriaArrayInput
	// Required. The resource name of the trigger. Must be unique within the location on the project.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the
	// trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See
	// https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run
	// destinations, this service account is used to generate identity tokens when invoking the service. See
	// https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke
	// authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have
	// `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        EventarcTriggerTimeoutsPtrInput
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field
	// contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport EventarcTriggerTransportPtrInput
	// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain
	// unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (EventarcTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventarcTriggerState)(nil)).Elem()
}

type eventarcTriggerArgs struct {
	// Optional. The name of the channel associated with the trigger in
	// `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from
	// Eventarc SaaS partners.
	Channel *string `pulumi:"channel"`
	// Required. Destination specifies where the events should be sent to.
	Destination EventarcTriggerDestination `pulumi:"destination"`
	// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data
	// field. This is set to `application/json` if the value is not defined.
	EventDataContentType *string `pulumi:"eventDataContentType"`
	EventarcTriggerId    *string `pulumi:"eventarcTriggerId"`
	// Optional. User labels attached to the triggers that can be used to group resources. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// `effective_labels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters
	// will be sent to the destination.
	MatchingCriterias []EventarcTriggerMatchingCriteria `pulumi:"matchingCriterias"`
	// Required. The resource name of the trigger. Must be unique within the location on the project.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the
	// trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See
	// https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run
	// destinations, this service account is used to generate identity tokens when invoking the service. See
	// https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke
	// authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have
	// `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount *string                  `pulumi:"serviceAccount"`
	Timeouts       *EventarcTriggerTimeouts `pulumi:"timeouts"`
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field
	// contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport *EventarcTriggerTransport `pulumi:"transport"`
}

// The set of arguments for constructing a EventarcTrigger resource.
type EventarcTriggerArgs struct {
	// Optional. The name of the channel associated with the trigger in
	// `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from
	// Eventarc SaaS partners.
	Channel pulumi.StringPtrInput
	// Required. Destination specifies where the events should be sent to.
	Destination EventarcTriggerDestinationInput
	// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data
	// field. This is set to `application/json` if the value is not defined.
	EventDataContentType pulumi.StringPtrInput
	EventarcTriggerId    pulumi.StringPtrInput
	// Optional. User labels attached to the triggers that can be used to group resources. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// `effective_labels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters
	// will be sent to the destination.
	MatchingCriterias EventarcTriggerMatchingCriteriaArrayInput
	// Required. The resource name of the trigger. Must be unique within the location on the project.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the
	// trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See
	// https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run
	// destinations, this service account is used to generate identity tokens when invoking the service. See
	// https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke
	// authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have
	// `roles/eventarc.eventReceiver` IAM role.
	ServiceAccount pulumi.StringPtrInput
	Timeouts       EventarcTriggerTimeoutsPtrInput
	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field
	// contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport EventarcTriggerTransportPtrInput
}

func (EventarcTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventarcTriggerArgs)(nil)).Elem()
}

type EventarcTriggerInput interface {
	pulumi.Input

	ToEventarcTriggerOutput() EventarcTriggerOutput
	ToEventarcTriggerOutputWithContext(ctx context.Context) EventarcTriggerOutput
}

func (*EventarcTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**EventarcTrigger)(nil)).Elem()
}

func (i *EventarcTrigger) ToEventarcTriggerOutput() EventarcTriggerOutput {
	return i.ToEventarcTriggerOutputWithContext(context.Background())
}

func (i *EventarcTrigger) ToEventarcTriggerOutputWithContext(ctx context.Context) EventarcTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventarcTriggerOutput)
}

type EventarcTriggerOutput struct{ *pulumi.OutputState }

func (EventarcTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventarcTrigger)(nil)).Elem()
}

func (o EventarcTriggerOutput) ToEventarcTriggerOutput() EventarcTriggerOutput {
	return o
}

func (o EventarcTriggerOutput) ToEventarcTriggerOutputWithContext(ctx context.Context) EventarcTriggerOutput {
	return o
}

// Optional. The name of the channel associated with the trigger in
// `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from
// Eventarc SaaS partners.
func (o EventarcTriggerOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringPtrOutput { return v.Channel }).(pulumi.StringPtrOutput)
}

// Output only. The reason(s) why a trigger is in FAILED state.
func (o EventarcTriggerOutput) Conditions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringMapOutput { return v.Conditions }).(pulumi.StringMapOutput)
}

// Output only. The creation time.
func (o EventarcTriggerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. Destination specifies where the events should be sent to.
func (o EventarcTriggerOutput) Destination() EventarcTriggerDestinationOutput {
	return o.ApplyT(func(v *EventarcTrigger) EventarcTriggerDestinationOutput { return v.Destination }).(EventarcTriggerDestinationOutput)
}

func (o EventarcTriggerOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create
// requests to ensure the client has an up-to-date value before proceeding.
func (o EventarcTriggerOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data
// field. This is set to `application/json` if the value is not defined.
func (o EventarcTriggerOutput) EventDataContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.EventDataContentType }).(pulumi.StringOutput)
}

func (o EventarcTriggerOutput) EventarcTriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.EventarcTriggerId }).(pulumi.StringOutput)
}

// Optional. User labels attached to the triggers that can be used to group resources. **Note**: This field is
// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// `effective_labels` for all of the labels present on the resource.
func (o EventarcTriggerOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource
func (o EventarcTriggerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters
// will be sent to the destination.
func (o EventarcTriggerOutput) MatchingCriterias() EventarcTriggerMatchingCriteriaArrayOutput {
	return o.ApplyT(func(v *EventarcTrigger) EventarcTriggerMatchingCriteriaArrayOutput { return v.MatchingCriterias }).(EventarcTriggerMatchingCriteriaArrayOutput)
}

// Required. The resource name of the trigger. Must be unique within the location on the project.
func (o EventarcTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o EventarcTriggerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the
// trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See
// https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run
// destinations, this service account is used to generate identity tokens when invoking the service. See
// https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke
// authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have
// `roles/eventarc.eventReceiver` IAM role.
func (o EventarcTriggerOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o EventarcTriggerOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o EventarcTriggerOutput) Timeouts() EventarcTriggerTimeoutsPtrOutput {
	return o.ApplyT(func(v *EventarcTrigger) EventarcTriggerTimeoutsPtrOutput { return v.Timeouts }).(EventarcTriggerTimeoutsPtrOutput)
}

// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field
// contains a reference to that transport intermediary. This information can be used for debugging purposes.
func (o EventarcTriggerOutput) Transport() EventarcTriggerTransportPtrOutput {
	return o.ApplyT(func(v *EventarcTrigger) EventarcTriggerTransportPtrOutput { return v.Transport }).(EventarcTriggerTransportPtrOutput)
}

// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain
// unchanged until the resource is deleted.
func (o EventarcTriggerOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The last-modified time.
func (o EventarcTriggerOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcTrigger) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventarcTriggerInput)(nil)).Elem(), &EventarcTrigger{})
	pulumi.RegisterOutputType(EventarcTriggerOutput{})
}
