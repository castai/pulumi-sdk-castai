// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataCatalogTaxonomyIamMember struct {
	pulumi.CustomResourceState

	Condition                      DataCatalogTaxonomyIamMemberConditionPtrOutput `pulumi:"condition"`
	DataCatalogTaxonomyIamMemberId pulumi.StringOutput                            `pulumi:"dataCatalogTaxonomyIamMemberId"`
	Etag                           pulumi.StringOutput                            `pulumi:"etag"`
	Member                         pulumi.StringOutput                            `pulumi:"member"`
	Project                        pulumi.StringOutput                            `pulumi:"project"`
	Region                         pulumi.StringOutput                            `pulumi:"region"`
	Role                           pulumi.StringOutput                            `pulumi:"role"`
	Taxonomy                       pulumi.StringOutput                            `pulumi:"taxonomy"`
}

// NewDataCatalogTaxonomyIamMember registers a new resource with the given unique name, arguments, and options.
func NewDataCatalogTaxonomyIamMember(ctx *pulumi.Context,
	name string, args *DataCatalogTaxonomyIamMemberArgs, opts ...pulumi.ResourceOption) (*DataCatalogTaxonomyIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Taxonomy == nil {
		return nil, errors.New("invalid value for required argument 'Taxonomy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataCatalogTaxonomyIamMember
	err = ctx.RegisterPackageResource("google-beta:index/dataCatalogTaxonomyIamMember:DataCatalogTaxonomyIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalogTaxonomyIamMember gets an existing DataCatalogTaxonomyIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalogTaxonomyIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogTaxonomyIamMemberState, opts ...pulumi.ResourceOption) (*DataCatalogTaxonomyIamMember, error) {
	var resource DataCatalogTaxonomyIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataCatalogTaxonomyIamMember:DataCatalogTaxonomyIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalogTaxonomyIamMember resources.
type dataCatalogTaxonomyIamMemberState struct {
	Condition                      *DataCatalogTaxonomyIamMemberCondition `pulumi:"condition"`
	DataCatalogTaxonomyIamMemberId *string                                `pulumi:"dataCatalogTaxonomyIamMemberId"`
	Etag                           *string                                `pulumi:"etag"`
	Member                         *string                                `pulumi:"member"`
	Project                        *string                                `pulumi:"project"`
	Region                         *string                                `pulumi:"region"`
	Role                           *string                                `pulumi:"role"`
	Taxonomy                       *string                                `pulumi:"taxonomy"`
}

type DataCatalogTaxonomyIamMemberState struct {
	Condition                      DataCatalogTaxonomyIamMemberConditionPtrInput
	DataCatalogTaxonomyIamMemberId pulumi.StringPtrInput
	Etag                           pulumi.StringPtrInput
	Member                         pulumi.StringPtrInput
	Project                        pulumi.StringPtrInput
	Region                         pulumi.StringPtrInput
	Role                           pulumi.StringPtrInput
	Taxonomy                       pulumi.StringPtrInput
}

func (DataCatalogTaxonomyIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogTaxonomyIamMemberState)(nil)).Elem()
}

type dataCatalogTaxonomyIamMemberArgs struct {
	Condition                      *DataCatalogTaxonomyIamMemberCondition `pulumi:"condition"`
	DataCatalogTaxonomyIamMemberId *string                                `pulumi:"dataCatalogTaxonomyIamMemberId"`
	Member                         string                                 `pulumi:"member"`
	Project                        *string                                `pulumi:"project"`
	Region                         *string                                `pulumi:"region"`
	Role                           string                                 `pulumi:"role"`
	Taxonomy                       string                                 `pulumi:"taxonomy"`
}

// The set of arguments for constructing a DataCatalogTaxonomyIamMember resource.
type DataCatalogTaxonomyIamMemberArgs struct {
	Condition                      DataCatalogTaxonomyIamMemberConditionPtrInput
	DataCatalogTaxonomyIamMemberId pulumi.StringPtrInput
	Member                         pulumi.StringInput
	Project                        pulumi.StringPtrInput
	Region                         pulumi.StringPtrInput
	Role                           pulumi.StringInput
	Taxonomy                       pulumi.StringInput
}

func (DataCatalogTaxonomyIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogTaxonomyIamMemberArgs)(nil)).Elem()
}

type DataCatalogTaxonomyIamMemberInput interface {
	pulumi.Input

	ToDataCatalogTaxonomyIamMemberOutput() DataCatalogTaxonomyIamMemberOutput
	ToDataCatalogTaxonomyIamMemberOutputWithContext(ctx context.Context) DataCatalogTaxonomyIamMemberOutput
}

func (*DataCatalogTaxonomyIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogTaxonomyIamMember)(nil)).Elem()
}

func (i *DataCatalogTaxonomyIamMember) ToDataCatalogTaxonomyIamMemberOutput() DataCatalogTaxonomyIamMemberOutput {
	return i.ToDataCatalogTaxonomyIamMemberOutputWithContext(context.Background())
}

func (i *DataCatalogTaxonomyIamMember) ToDataCatalogTaxonomyIamMemberOutputWithContext(ctx context.Context) DataCatalogTaxonomyIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogTaxonomyIamMemberOutput)
}

type DataCatalogTaxonomyIamMemberOutput struct{ *pulumi.OutputState }

func (DataCatalogTaxonomyIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogTaxonomyIamMember)(nil)).Elem()
}

func (o DataCatalogTaxonomyIamMemberOutput) ToDataCatalogTaxonomyIamMemberOutput() DataCatalogTaxonomyIamMemberOutput {
	return o
}

func (o DataCatalogTaxonomyIamMemberOutput) ToDataCatalogTaxonomyIamMemberOutputWithContext(ctx context.Context) DataCatalogTaxonomyIamMemberOutput {
	return o
}

func (o DataCatalogTaxonomyIamMemberOutput) Condition() DataCatalogTaxonomyIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) DataCatalogTaxonomyIamMemberConditionPtrOutput {
		return v.Condition
	}).(DataCatalogTaxonomyIamMemberConditionPtrOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) DataCatalogTaxonomyIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.DataCatalogTaxonomyIamMemberId }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o DataCatalogTaxonomyIamMemberOutput) Taxonomy() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogTaxonomyIamMember) pulumi.StringOutput { return v.Taxonomy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogTaxonomyIamMemberInput)(nil)).Elem(), &DataCatalogTaxonomyIamMember{})
	pulumi.RegisterOutputType(DataCatalogTaxonomyIamMemberOutput{})
}
