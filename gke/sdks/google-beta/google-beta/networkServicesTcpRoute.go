// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkServicesTcpRoute struct {
	pulumi.CustomResourceState

	// Time the TcpRoute was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests
	// served by the gateway. Each gateway reference should match the pattern:
	// projects/*/locations/global/gateways/<gateway_name>
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	// Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served
	// by the mesh. Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name> The attached
	// Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayOutput `pulumi:"meshes"`
	// Name of the TcpRoute resource.
	Name                      pulumi.StringOutput `pulumi:"name"`
	NetworkServicesTcpRouteId pulumi.StringOutput `pulumi:"networkServicesTcpRouteId"`
	Project                   pulumi.StringOutput `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple
	// rules then the action taken will be the first rule to match.
	Rules NetworkServicesTcpRouteRuleArrayOutput `pulumi:"rules"`
	// Server-defined URL of this resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                   `pulumi:"terraformLabels"`
	Timeouts        NetworkServicesTcpRouteTimeoutsPtrOutput `pulumi:"timeouts"`
	// Time the TcpRoute was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewNetworkServicesTcpRoute registers a new resource with the given unique name, arguments, and options.
func NewNetworkServicesTcpRoute(ctx *pulumi.Context,
	name string, args *NetworkServicesTcpRouteArgs, opts ...pulumi.ResourceOption) (*NetworkServicesTcpRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetworkServicesTcpRoute
	err = ctx.RegisterPackageResource("google-beta:index/networkServicesTcpRoute:NetworkServicesTcpRoute", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkServicesTcpRoute gets an existing NetworkServicesTcpRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkServicesTcpRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkServicesTcpRouteState, opts ...pulumi.ResourceOption) (*NetworkServicesTcpRoute, error) {
	var resource NetworkServicesTcpRoute
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/networkServicesTcpRoute:NetworkServicesTcpRoute", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkServicesTcpRoute resources.
type networkServicesTcpRouteState struct {
	// Time the TcpRoute was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// A free-text description of the resource. Max length 1024 characters.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests
	// served by the gateway. Each gateway reference should match the pattern:
	// projects/*/locations/global/gateways/<gateway_name>
	Gateways []string `pulumi:"gateways"`
	// Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels map[string]string `pulumi:"labels"`
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served
	// by the mesh. Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name> The attached
	// Mesh should be of a type SIDECAR
	Meshes []string `pulumi:"meshes"`
	// Name of the TcpRoute resource.
	Name                      *string `pulumi:"name"`
	NetworkServicesTcpRouteId *string `pulumi:"networkServicesTcpRouteId"`
	Project                   *string `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple
	// rules then the action taken will be the first rule to match.
	Rules []NetworkServicesTcpRouteRule `pulumi:"rules"`
	// Server-defined URL of this resource.
	SelfLink *string `pulumi:"selfLink"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                `pulumi:"terraformLabels"`
	Timeouts        *NetworkServicesTcpRouteTimeouts `pulumi:"timeouts"`
	// Time the TcpRoute was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type NetworkServicesTcpRouteState struct {
	// Time the TcpRoute was created in UTC.
	CreateTime pulumi.StringPtrInput
	// A free-text description of the resource. Max length 1024 characters.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests
	// served by the gateway. Each gateway reference should match the pattern:
	// projects/*/locations/global/gateways/<gateway_name>
	Gateways pulumi.StringArrayInput
	// Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapInput
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served
	// by the mesh. Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name> The attached
	// Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayInput
	// Name of the TcpRoute resource.
	Name                      pulumi.StringPtrInput
	NetworkServicesTcpRouteId pulumi.StringPtrInput
	Project                   pulumi.StringPtrInput
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple
	// rules then the action taken will be the first rule to match.
	Rules NetworkServicesTcpRouteRuleArrayInput
	// Server-defined URL of this resource.
	SelfLink pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetworkServicesTcpRouteTimeoutsPtrInput
	// Time the TcpRoute was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (NetworkServicesTcpRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServicesTcpRouteState)(nil)).Elem()
}

type networkServicesTcpRouteArgs struct {
	// A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests
	// served by the gateway. Each gateway reference should match the pattern:
	// projects/*/locations/global/gateways/<gateway_name>
	Gateways []string `pulumi:"gateways"`
	// Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels map[string]string `pulumi:"labels"`
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served
	// by the mesh. Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name> The attached
	// Mesh should be of a type SIDECAR
	Meshes []string `pulumi:"meshes"`
	// Name of the TcpRoute resource.
	Name                      *string `pulumi:"name"`
	NetworkServicesTcpRouteId *string `pulumi:"networkServicesTcpRouteId"`
	Project                   *string `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple
	// rules then the action taken will be the first rule to match.
	Rules    []NetworkServicesTcpRouteRule    `pulumi:"rules"`
	Timeouts *NetworkServicesTcpRouteTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetworkServicesTcpRoute resource.
type NetworkServicesTcpRouteArgs struct {
	// A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests
	// served by the gateway. Each gateway reference should match the pattern:
	// projects/*/locations/global/gateways/<gateway_name>
	Gateways pulumi.StringArrayInput
	// Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
	// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
	// the resource.
	Labels pulumi.StringMapInput
	// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served
	// by the mesh. Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name> The attached
	// Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayInput
	// Name of the TcpRoute resource.
	Name                      pulumi.StringPtrInput
	NetworkServicesTcpRouteId pulumi.StringPtrInput
	Project                   pulumi.StringPtrInput
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple
	// rules then the action taken will be the first rule to match.
	Rules    NetworkServicesTcpRouteRuleArrayInput
	Timeouts NetworkServicesTcpRouteTimeoutsPtrInput
}

func (NetworkServicesTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServicesTcpRouteArgs)(nil)).Elem()
}

type NetworkServicesTcpRouteInput interface {
	pulumi.Input

	ToNetworkServicesTcpRouteOutput() NetworkServicesTcpRouteOutput
	ToNetworkServicesTcpRouteOutputWithContext(ctx context.Context) NetworkServicesTcpRouteOutput
}

func (*NetworkServicesTcpRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkServicesTcpRoute)(nil)).Elem()
}

func (i *NetworkServicesTcpRoute) ToNetworkServicesTcpRouteOutput() NetworkServicesTcpRouteOutput {
	return i.ToNetworkServicesTcpRouteOutputWithContext(context.Background())
}

func (i *NetworkServicesTcpRoute) ToNetworkServicesTcpRouteOutputWithContext(ctx context.Context) NetworkServicesTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServicesTcpRouteOutput)
}

type NetworkServicesTcpRouteOutput struct{ *pulumi.OutputState }

func (NetworkServicesTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkServicesTcpRoute)(nil)).Elem()
}

func (o NetworkServicesTcpRouteOutput) ToNetworkServicesTcpRouteOutput() NetworkServicesTcpRouteOutput {
	return o
}

func (o NetworkServicesTcpRouteOutput) ToNetworkServicesTcpRouteOutputWithContext(ctx context.Context) NetworkServicesTcpRouteOutput {
	return o
}

// Time the TcpRoute was created in UTC.
func (o NetworkServicesTcpRouteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A free-text description of the resource. Max length 1024 characters.
func (o NetworkServicesTcpRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworkServicesTcpRouteOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests
// served by the gateway. Each gateway reference should match the pattern:
// projects/*/locations/global/gateways/<gateway_name>
func (o NetworkServicesTcpRouteOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringArrayOutput { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
// the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
// the resource.
func (o NetworkServicesTcpRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served
// by the mesh. Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name> The attached
// Mesh should be of a type SIDECAR
func (o NetworkServicesTcpRouteOutput) Meshes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringArrayOutput { return v.Meshes }).(pulumi.StringArrayOutput)
}

// Name of the TcpRoute resource.
func (o NetworkServicesTcpRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkServicesTcpRouteOutput) NetworkServicesTcpRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringOutput { return v.NetworkServicesTcpRouteId }).(pulumi.StringOutput)
}

func (o NetworkServicesTcpRouteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple
// rules then the action taken will be the first rule to match.
func (o NetworkServicesTcpRouteOutput) Rules() NetworkServicesTcpRouteRuleArrayOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) NetworkServicesTcpRouteRuleArrayOutput { return v.Rules }).(NetworkServicesTcpRouteRuleArrayOutput)
}

// Server-defined URL of this resource.
func (o NetworkServicesTcpRouteOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetworkServicesTcpRouteOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetworkServicesTcpRouteOutput) Timeouts() NetworkServicesTcpRouteTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) NetworkServicesTcpRouteTimeoutsPtrOutput { return v.Timeouts }).(NetworkServicesTcpRouteTimeoutsPtrOutput)
}

// Time the TcpRoute was updated in UTC.
func (o NetworkServicesTcpRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkServicesTcpRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServicesTcpRouteInput)(nil)).Elem(), &NetworkServicesTcpRoute{})
	pulumi.RegisterOutputType(NetworkServicesTcpRouteOutput{})
}
