// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeHubScopeRbacRoleBinding struct {
	pulumi.CustomResourceState

	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime                   pulumi.StringOutput    `pulumi:"deleteTime"`
	EffectiveLabels              pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	GkeHubScopeRbacRoleBindingId pulumi.StringOutput    `pulumi:"gkeHubScopeRbacRoleBindingId"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// Labels for this ScopeRBACRoleBinding. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for the RBAC Role Binding
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Role to bind to the principal.
	Role GkeHubScopeRbacRoleBindingRoleOutput `pulumi:"role"`
	// Id of the scope
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId pulumi.StringOutput `pulumi:"scopeRbacRoleBindingId"`
	// State of the RBAC Role Binding resource.
	States GkeHubScopeRbacRoleBindingStateTypeArrayOutput `pulumi:"states"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                      `pulumi:"terraformLabels"`
	Timeouts        GkeHubScopeRbacRoleBindingTimeoutsPtrOutput `pulumi:"timeouts"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewGkeHubScopeRbacRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewGkeHubScopeRbacRoleBinding(ctx *pulumi.Context,
	name string, args *GkeHubScopeRbacRoleBindingArgs, opts ...pulumi.ResourceOption) (*GkeHubScopeRbacRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.ScopeRbacRoleBindingId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeRbacRoleBindingId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeHubScopeRbacRoleBinding
	err = ctx.RegisterPackageResource("google-beta:index/gkeHubScopeRbacRoleBinding:GkeHubScopeRbacRoleBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeHubScopeRbacRoleBinding gets an existing GkeHubScopeRbacRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeHubScopeRbacRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeHubScopeRbacRoleBindingState, opts ...pulumi.ResourceOption) (*GkeHubScopeRbacRoleBinding, error) {
	var resource GkeHubScopeRbacRoleBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/gkeHubScopeRbacRoleBinding:GkeHubScopeRbacRoleBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeHubScopeRbacRoleBinding resources.
type gkeHubScopeRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime                   *string           `pulumi:"deleteTime"`
	EffectiveLabels              map[string]string `pulumi:"effectiveLabels"`
	GkeHubScopeRbacRoleBindingId *string           `pulumi:"gkeHubScopeRbacRoleBindingId"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. group is the group, as seen by the kubernetes cluster.
	Group *string `pulumi:"group"`
	// Labels for this ScopeRBACRoleBinding. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the RBAC Role Binding
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Role to bind to the principal.
	Role *GkeHubScopeRbacRoleBindingRole `pulumi:"role"`
	// Id of the scope
	ScopeId *string `pulumi:"scopeId"`
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId *string `pulumi:"scopeRbacRoleBindingId"`
	// State of the RBAC Role Binding resource.
	States []GkeHubScopeRbacRoleBindingStateType `pulumi:"states"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                   `pulumi:"terraformLabels"`
	Timeouts        *GkeHubScopeRbacRoleBindingTimeouts `pulumi:"timeouts"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User *string `pulumi:"user"`
}

type GkeHubScopeRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime                   pulumi.StringPtrInput
	EffectiveLabels              pulumi.StringMapInput
	GkeHubScopeRbacRoleBindingId pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrInput
	// Labels for this ScopeRBACRoleBinding. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the RBAC Role Binding
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	Role GkeHubScopeRbacRoleBindingRolePtrInput
	// Id of the scope
	ScopeId pulumi.StringPtrInput
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId pulumi.StringPtrInput
	// State of the RBAC Role Binding resource.
	States GkeHubScopeRbacRoleBindingStateTypeArrayInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        GkeHubScopeRbacRoleBindingTimeoutsPtrInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (GkeHubScopeRbacRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubScopeRbacRoleBindingState)(nil)).Elem()
}

type gkeHubScopeRbacRoleBindingArgs struct {
	GkeHubScopeRbacRoleBindingId *string `pulumi:"gkeHubScopeRbacRoleBindingId"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. group is the group, as seen by the kubernetes cluster.
	Group *string `pulumi:"group"`
	// Labels for this ScopeRBACRoleBinding. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels  map[string]string `pulumi:"labels"`
	Project *string           `pulumi:"project"`
	// Role to bind to the principal.
	Role GkeHubScopeRbacRoleBindingRole `pulumi:"role"`
	// Id of the scope
	ScopeId string `pulumi:"scopeId"`
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId string                              `pulumi:"scopeRbacRoleBindingId"`
	Timeouts               *GkeHubScopeRbacRoleBindingTimeouts `pulumi:"timeouts"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a GkeHubScopeRbacRoleBinding resource.
type GkeHubScopeRbacRoleBindingArgs struct {
	GkeHubScopeRbacRoleBindingId pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrInput
	// Labels for this ScopeRBACRoleBinding. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels  pulumi.StringMapInput
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	Role GkeHubScopeRbacRoleBindingRoleInput
	// Id of the scope
	ScopeId pulumi.StringInput
	// The client-provided identifier of the RBAC Role Binding.
	ScopeRbacRoleBindingId pulumi.StringInput
	Timeouts               GkeHubScopeRbacRoleBindingTimeoutsPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (GkeHubScopeRbacRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubScopeRbacRoleBindingArgs)(nil)).Elem()
}

type GkeHubScopeRbacRoleBindingInput interface {
	pulumi.Input

	ToGkeHubScopeRbacRoleBindingOutput() GkeHubScopeRbacRoleBindingOutput
	ToGkeHubScopeRbacRoleBindingOutputWithContext(ctx context.Context) GkeHubScopeRbacRoleBindingOutput
}

func (*GkeHubScopeRbacRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubScopeRbacRoleBinding)(nil)).Elem()
}

func (i *GkeHubScopeRbacRoleBinding) ToGkeHubScopeRbacRoleBindingOutput() GkeHubScopeRbacRoleBindingOutput {
	return i.ToGkeHubScopeRbacRoleBindingOutputWithContext(context.Background())
}

func (i *GkeHubScopeRbacRoleBinding) ToGkeHubScopeRbacRoleBindingOutputWithContext(ctx context.Context) GkeHubScopeRbacRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeHubScopeRbacRoleBindingOutput)
}

type GkeHubScopeRbacRoleBindingOutput struct{ *pulumi.OutputState }

func (GkeHubScopeRbacRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubScopeRbacRoleBinding)(nil)).Elem()
}

func (o GkeHubScopeRbacRoleBindingOutput) ToGkeHubScopeRbacRoleBindingOutput() GkeHubScopeRbacRoleBindingOutput {
	return o
}

func (o GkeHubScopeRbacRoleBindingOutput) ToGkeHubScopeRbacRoleBindingOutputWithContext(ctx context.Context) GkeHubScopeRbacRoleBindingOutput {
	return o
}

// Time the RBAC Role Binding was created in UTC.
func (o GkeHubScopeRbacRoleBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was deleted in UTC.
func (o GkeHubScopeRbacRoleBindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

func (o GkeHubScopeRbacRoleBindingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o GkeHubScopeRbacRoleBindingOutput) GkeHubScopeRbacRoleBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.GkeHubScopeRbacRoleBindingId }).(pulumi.StringOutput)
}

// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
// other automatically. group is the group, as seen by the kubernetes cluster.
func (o GkeHubScopeRbacRoleBindingOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// Labels for this ScopeRBACRoleBinding. **Note**: This field is non-authoritative, and will only manage the labels present
// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o GkeHubScopeRbacRoleBindingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the RBAC Role Binding
func (o GkeHubScopeRbacRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GkeHubScopeRbacRoleBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Role to bind to the principal.
func (o GkeHubScopeRbacRoleBindingOutput) Role() GkeHubScopeRbacRoleBindingRoleOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) GkeHubScopeRbacRoleBindingRoleOutput { return v.Role }).(GkeHubScopeRbacRoleBindingRoleOutput)
}

// Id of the scope
func (o GkeHubScopeRbacRoleBindingOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The client-provided identifier of the RBAC Role Binding.
func (o GkeHubScopeRbacRoleBindingOutput) ScopeRbacRoleBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.ScopeRbacRoleBindingId }).(pulumi.StringOutput)
}

// State of the RBAC Role Binding resource.
func (o GkeHubScopeRbacRoleBindingOutput) States() GkeHubScopeRbacRoleBindingStateTypeArrayOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) GkeHubScopeRbacRoleBindingStateTypeArrayOutput { return v.States }).(GkeHubScopeRbacRoleBindingStateTypeArrayOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o GkeHubScopeRbacRoleBindingOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o GkeHubScopeRbacRoleBindingOutput) Timeouts() GkeHubScopeRbacRoleBindingTimeoutsPtrOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) GkeHubScopeRbacRoleBindingTimeoutsPtrOutput { return v.Timeouts }).(GkeHubScopeRbacRoleBindingTimeoutsPtrOutput)
}

// Google-generated UUID for this resource.
func (o GkeHubScopeRbacRoleBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was updated in UTC.
func (o GkeHubScopeRbacRoleBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
// "alice@domain.tld"
func (o GkeHubScopeRbacRoleBindingOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeHubScopeRbacRoleBinding) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeHubScopeRbacRoleBindingInput)(nil)).Elem(), &GkeHubScopeRbacRoleBinding{})
	pulumi.RegisterOutputType(GkeHubScopeRbacRoleBindingOutput{})
}
