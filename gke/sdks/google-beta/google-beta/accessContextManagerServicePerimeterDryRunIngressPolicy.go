// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerServicePerimeterDryRunIngressPolicy struct {
	pulumi.CustomResourceState

	AccessContextManagerServicePerimeterDryRunIngressPolicyId pulumi.StringOutput `pulumi:"accessContextManagerServicePerimeterDryRunIngressPolicyId"`
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringOutput `pulumi:"accessPolicyId"`
	// Defines the conditions on the source of a request causing this 'IngressPolicy' to apply.
	IngressFrom AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFromPtrOutput `pulumi:"ingressFrom"`
	// Defines the conditions on the 'ApiOperation' and request destination that cause this 'IngressPolicy' to apply.
	IngressTo AccessContextManagerServicePerimeterDryRunIngressPolicyIngressToPtrOutput `pulumi:"ingressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringOutput                                                      `pulumi:"perimeter"`
	Timeouts  AccessContextManagerServicePerimeterDryRunIngressPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAccessContextManagerServicePerimeterDryRunIngressPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerServicePerimeterDryRunIngressPolicy(ctx *pulumi.Context,
	name string, args *AccessContextManagerServicePerimeterDryRunIngressPolicyArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeterDryRunIngressPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Perimeter == nil {
		return nil, errors.New("invalid value for required argument 'Perimeter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerServicePerimeterDryRunIngressPolicy
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerServicePerimeterDryRunIngressPolicy:AccessContextManagerServicePerimeterDryRunIngressPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerServicePerimeterDryRunIngressPolicy gets an existing AccessContextManagerServicePerimeterDryRunIngressPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerServicePerimeterDryRunIngressPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerServicePerimeterDryRunIngressPolicyState, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeterDryRunIngressPolicy, error) {
	var resource AccessContextManagerServicePerimeterDryRunIngressPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerServicePerimeterDryRunIngressPolicy:AccessContextManagerServicePerimeterDryRunIngressPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerServicePerimeterDryRunIngressPolicy resources.
type accessContextManagerServicePerimeterDryRunIngressPolicyState struct {
	AccessContextManagerServicePerimeterDryRunIngressPolicyId *string `pulumi:"accessContextManagerServicePerimeterDryRunIngressPolicyId"`
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// Defines the conditions on the source of a request causing this 'IngressPolicy' to apply.
	IngressFrom *AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFrom `pulumi:"ingressFrom"`
	// Defines the conditions on the 'ApiOperation' and request destination that cause this 'IngressPolicy' to apply.
	IngressTo *AccessContextManagerServicePerimeterDryRunIngressPolicyIngressTo `pulumi:"ingressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter *string                                                          `pulumi:"perimeter"`
	Timeouts  *AccessContextManagerServicePerimeterDryRunIngressPolicyTimeouts `pulumi:"timeouts"`
}

type AccessContextManagerServicePerimeterDryRunIngressPolicyState struct {
	AccessContextManagerServicePerimeterDryRunIngressPolicyId pulumi.StringPtrInput
	// The name of the Access Policy this resource belongs to.
	AccessPolicyId pulumi.StringPtrInput
	// Defines the conditions on the source of a request causing this 'IngressPolicy' to apply.
	IngressFrom AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFromPtrInput
	// Defines the conditions on the 'ApiOperation' and request destination that cause this 'IngressPolicy' to apply.
	IngressTo AccessContextManagerServicePerimeterDryRunIngressPolicyIngressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringPtrInput
	Timeouts  AccessContextManagerServicePerimeterDryRunIngressPolicyTimeoutsPtrInput
}

func (AccessContextManagerServicePerimeterDryRunIngressPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimeterDryRunIngressPolicyState)(nil)).Elem()
}

type accessContextManagerServicePerimeterDryRunIngressPolicyArgs struct {
	AccessContextManagerServicePerimeterDryRunIngressPolicyId *string `pulumi:"accessContextManagerServicePerimeterDryRunIngressPolicyId"`
	// Defines the conditions on the source of a request causing this 'IngressPolicy' to apply.
	IngressFrom *AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFrom `pulumi:"ingressFrom"`
	// Defines the conditions on the 'ApiOperation' and request destination that cause this 'IngressPolicy' to apply.
	IngressTo *AccessContextManagerServicePerimeterDryRunIngressPolicyIngressTo `pulumi:"ingressTo"`
	// The name of the Service Perimeter to add this resource to.
	Perimeter string                                                           `pulumi:"perimeter"`
	Timeouts  *AccessContextManagerServicePerimeterDryRunIngressPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessContextManagerServicePerimeterDryRunIngressPolicy resource.
type AccessContextManagerServicePerimeterDryRunIngressPolicyArgs struct {
	AccessContextManagerServicePerimeterDryRunIngressPolicyId pulumi.StringPtrInput
	// Defines the conditions on the source of a request causing this 'IngressPolicy' to apply.
	IngressFrom AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFromPtrInput
	// Defines the conditions on the 'ApiOperation' and request destination that cause this 'IngressPolicy' to apply.
	IngressTo AccessContextManagerServicePerimeterDryRunIngressPolicyIngressToPtrInput
	// The name of the Service Perimeter to add this resource to.
	Perimeter pulumi.StringInput
	Timeouts  AccessContextManagerServicePerimeterDryRunIngressPolicyTimeoutsPtrInput
}

func (AccessContextManagerServicePerimeterDryRunIngressPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimeterDryRunIngressPolicyArgs)(nil)).Elem()
}

type AccessContextManagerServicePerimeterDryRunIngressPolicyInput interface {
	pulumi.Input

	ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutput() AccessContextManagerServicePerimeterDryRunIngressPolicyOutput
	ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterDryRunIngressPolicyOutput
}

func (*AccessContextManagerServicePerimeterDryRunIngressPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (i *AccessContextManagerServicePerimeterDryRunIngressPolicy) ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutput() AccessContextManagerServicePerimeterDryRunIngressPolicyOutput {
	return i.ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutputWithContext(context.Background())
}

func (i *AccessContextManagerServicePerimeterDryRunIngressPolicy) ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterDryRunIngressPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerServicePerimeterDryRunIngressPolicyOutput)
}

type AccessContextManagerServicePerimeterDryRunIngressPolicyOutput struct{ *pulumi.OutputState }

func (AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeterDryRunIngressPolicy)(nil)).Elem()
}

func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutput() AccessContextManagerServicePerimeterDryRunIngressPolicyOutput {
	return o
}

func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) ToAccessContextManagerServicePerimeterDryRunIngressPolicyOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterDryRunIngressPolicyOutput {
	return o
}

func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) AccessContextManagerServicePerimeterDryRunIngressPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunIngressPolicy) pulumi.StringOutput {
		return v.AccessContextManagerServicePerimeterDryRunIngressPolicyId
	}).(pulumi.StringOutput)
}

// The name of the Access Policy this resource belongs to.
func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) AccessPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunIngressPolicy) pulumi.StringOutput {
		return v.AccessPolicyId
	}).(pulumi.StringOutput)
}

// Defines the conditions on the source of a request causing this 'IngressPolicy' to apply.
func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) IngressFrom() AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFromPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunIngressPolicy) AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFromPtrOutput {
		return v.IngressFrom
	}).(AccessContextManagerServicePerimeterDryRunIngressPolicyIngressFromPtrOutput)
}

// Defines the conditions on the 'ApiOperation' and request destination that cause this 'IngressPolicy' to apply.
func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) IngressTo() AccessContextManagerServicePerimeterDryRunIngressPolicyIngressToPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunIngressPolicy) AccessContextManagerServicePerimeterDryRunIngressPolicyIngressToPtrOutput {
		return v.IngressTo
	}).(AccessContextManagerServicePerimeterDryRunIngressPolicyIngressToPtrOutput)
}

// The name of the Service Perimeter to add this resource to.
func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) Perimeter() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunIngressPolicy) pulumi.StringOutput {
		return v.Perimeter
	}).(pulumi.StringOutput)
}

func (o AccessContextManagerServicePerimeterDryRunIngressPolicyOutput) Timeouts() AccessContextManagerServicePerimeterDryRunIngressPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeterDryRunIngressPolicy) AccessContextManagerServicePerimeterDryRunIngressPolicyTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerServicePerimeterDryRunIngressPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerServicePerimeterDryRunIngressPolicyInput)(nil)).Elem(), &AccessContextManagerServicePerimeterDryRunIngressPolicy{})
	pulumi.RegisterOutputType(AccessContextManagerServicePerimeterDryRunIngressPolicyOutput{})
}
