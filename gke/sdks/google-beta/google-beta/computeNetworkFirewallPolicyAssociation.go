// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeNetworkFirewallPolicyAssociation struct {
	pulumi.CustomResourceState

	// The target that the firewall policy is attached to.
	AttachmentTarget                          pulumi.StringOutput `pulumi:"attachmentTarget"`
	ComputeNetworkFirewallPolicyAssociationId pulumi.StringOutput `pulumi:"computeNetworkFirewallPolicyAssociationId"`
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringOutput `pulumi:"firewallPolicy"`
	// The name for an association.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The short name of the firewall policy of the association.
	ShortName pulumi.StringOutput                                      `pulumi:"shortName"`
	Timeouts  ComputeNetworkFirewallPolicyAssociationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewComputeNetworkFirewallPolicyAssociation registers a new resource with the given unique name, arguments, and options.
func NewComputeNetworkFirewallPolicyAssociation(ctx *pulumi.Context,
	name string, args *ComputeNetworkFirewallPolicyAssociationArgs, opts ...pulumi.ResourceOption) (*ComputeNetworkFirewallPolicyAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttachmentTarget == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentTarget'")
	}
	if args.FirewallPolicy == nil {
		return nil, errors.New("invalid value for required argument 'FirewallPolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeNetworkFirewallPolicyAssociation
	err = ctx.RegisterPackageResource("google-beta:index/computeNetworkFirewallPolicyAssociation:ComputeNetworkFirewallPolicyAssociation", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeNetworkFirewallPolicyAssociation gets an existing ComputeNetworkFirewallPolicyAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeNetworkFirewallPolicyAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeNetworkFirewallPolicyAssociationState, opts ...pulumi.ResourceOption) (*ComputeNetworkFirewallPolicyAssociation, error) {
	var resource ComputeNetworkFirewallPolicyAssociation
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeNetworkFirewallPolicyAssociation:ComputeNetworkFirewallPolicyAssociation", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeNetworkFirewallPolicyAssociation resources.
type computeNetworkFirewallPolicyAssociationState struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget                          *string `pulumi:"attachmentTarget"`
	ComputeNetworkFirewallPolicyAssociationId *string `pulumi:"computeNetworkFirewallPolicyAssociationId"`
	// The firewall policy of the resource.
	FirewallPolicy *string `pulumi:"firewallPolicy"`
	// The name for an association.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The short name of the firewall policy of the association.
	ShortName *string                                          `pulumi:"shortName"`
	Timeouts  *ComputeNetworkFirewallPolicyAssociationTimeouts `pulumi:"timeouts"`
}

type ComputeNetworkFirewallPolicyAssociationState struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget                          pulumi.StringPtrInput
	ComputeNetworkFirewallPolicyAssociationId pulumi.StringPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringPtrInput
	// The name for an association.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The short name of the firewall policy of the association.
	ShortName pulumi.StringPtrInput
	Timeouts  ComputeNetworkFirewallPolicyAssociationTimeoutsPtrInput
}

func (ComputeNetworkFirewallPolicyAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNetworkFirewallPolicyAssociationState)(nil)).Elem()
}

type computeNetworkFirewallPolicyAssociationArgs struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget                          string  `pulumi:"attachmentTarget"`
	ComputeNetworkFirewallPolicyAssociationId *string `pulumi:"computeNetworkFirewallPolicyAssociationId"`
	// The firewall policy of the resource.
	FirewallPolicy string `pulumi:"firewallPolicy"`
	// The name for an association.
	Name     *string                                          `pulumi:"name"`
	Project  *string                                          `pulumi:"project"`
	Timeouts *ComputeNetworkFirewallPolicyAssociationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeNetworkFirewallPolicyAssociation resource.
type ComputeNetworkFirewallPolicyAssociationArgs struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget                          pulumi.StringInput
	ComputeNetworkFirewallPolicyAssociationId pulumi.StringPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringInput
	// The name for an association.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts ComputeNetworkFirewallPolicyAssociationTimeoutsPtrInput
}

func (ComputeNetworkFirewallPolicyAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNetworkFirewallPolicyAssociationArgs)(nil)).Elem()
}

type ComputeNetworkFirewallPolicyAssociationInput interface {
	pulumi.Input

	ToComputeNetworkFirewallPolicyAssociationOutput() ComputeNetworkFirewallPolicyAssociationOutput
	ToComputeNetworkFirewallPolicyAssociationOutputWithContext(ctx context.Context) ComputeNetworkFirewallPolicyAssociationOutput
}

func (*ComputeNetworkFirewallPolicyAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNetworkFirewallPolicyAssociation)(nil)).Elem()
}

func (i *ComputeNetworkFirewallPolicyAssociation) ToComputeNetworkFirewallPolicyAssociationOutput() ComputeNetworkFirewallPolicyAssociationOutput {
	return i.ToComputeNetworkFirewallPolicyAssociationOutputWithContext(context.Background())
}

func (i *ComputeNetworkFirewallPolicyAssociation) ToComputeNetworkFirewallPolicyAssociationOutputWithContext(ctx context.Context) ComputeNetworkFirewallPolicyAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeNetworkFirewallPolicyAssociationOutput)
}

type ComputeNetworkFirewallPolicyAssociationOutput struct{ *pulumi.OutputState }

func (ComputeNetworkFirewallPolicyAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNetworkFirewallPolicyAssociation)(nil)).Elem()
}

func (o ComputeNetworkFirewallPolicyAssociationOutput) ToComputeNetworkFirewallPolicyAssociationOutput() ComputeNetworkFirewallPolicyAssociationOutput {
	return o
}

func (o ComputeNetworkFirewallPolicyAssociationOutput) ToComputeNetworkFirewallPolicyAssociationOutputWithContext(ctx context.Context) ComputeNetworkFirewallPolicyAssociationOutput {
	return o
}

// The target that the firewall policy is attached to.
func (o ComputeNetworkFirewallPolicyAssociationOutput) AttachmentTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) pulumi.StringOutput { return v.AttachmentTarget }).(pulumi.StringOutput)
}

func (o ComputeNetworkFirewallPolicyAssociationOutput) ComputeNetworkFirewallPolicyAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) pulumi.StringOutput {
		return v.ComputeNetworkFirewallPolicyAssociationId
	}).(pulumi.StringOutput)
}

// The firewall policy of the resource.
func (o ComputeNetworkFirewallPolicyAssociationOutput) FirewallPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) pulumi.StringOutput { return v.FirewallPolicy }).(pulumi.StringOutput)
}

// The name for an association.
func (o ComputeNetworkFirewallPolicyAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeNetworkFirewallPolicyAssociationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The short name of the firewall policy of the association.
func (o ComputeNetworkFirewallPolicyAssociationOutput) ShortName() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) pulumi.StringOutput { return v.ShortName }).(pulumi.StringOutput)
}

func (o ComputeNetworkFirewallPolicyAssociationOutput) Timeouts() ComputeNetworkFirewallPolicyAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkFirewallPolicyAssociation) ComputeNetworkFirewallPolicyAssociationTimeoutsPtrOutput {
		return v.Timeouts
	}).(ComputeNetworkFirewallPolicyAssociationTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeNetworkFirewallPolicyAssociationInput)(nil)).Elem(), &ComputeNetworkFirewallPolicyAssociation{})
	pulumi.RegisterOutputType(ComputeNetworkFirewallPolicyAssociationOutput{})
}
