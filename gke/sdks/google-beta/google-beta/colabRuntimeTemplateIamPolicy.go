// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ColabRuntimeTemplateIamPolicy struct {
	pulumi.CustomResourceState

	ColabRuntimeTemplateIamPolicyId pulumi.StringOutput `pulumi:"colabRuntimeTemplateIamPolicyId"`
	Etag                            pulumi.StringOutput `pulumi:"etag"`
	Location                        pulumi.StringOutput `pulumi:"location"`
	PolicyData                      pulumi.StringOutput `pulumi:"policyData"`
	Project                         pulumi.StringOutput `pulumi:"project"`
	RuntimeTemplate                 pulumi.StringOutput `pulumi:"runtimeTemplate"`
}

// NewColabRuntimeTemplateIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewColabRuntimeTemplateIamPolicy(ctx *pulumi.Context,
	name string, args *ColabRuntimeTemplateIamPolicyArgs, opts ...pulumi.ResourceOption) (*ColabRuntimeTemplateIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.RuntimeTemplate == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeTemplate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ColabRuntimeTemplateIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/colabRuntimeTemplateIamPolicy:ColabRuntimeTemplateIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetColabRuntimeTemplateIamPolicy gets an existing ColabRuntimeTemplateIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetColabRuntimeTemplateIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ColabRuntimeTemplateIamPolicyState, opts ...pulumi.ResourceOption) (*ColabRuntimeTemplateIamPolicy, error) {
	var resource ColabRuntimeTemplateIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/colabRuntimeTemplateIamPolicy:ColabRuntimeTemplateIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ColabRuntimeTemplateIamPolicy resources.
type colabRuntimeTemplateIamPolicyState struct {
	ColabRuntimeTemplateIamPolicyId *string `pulumi:"colabRuntimeTemplateIamPolicyId"`
	Etag                            *string `pulumi:"etag"`
	Location                        *string `pulumi:"location"`
	PolicyData                      *string `pulumi:"policyData"`
	Project                         *string `pulumi:"project"`
	RuntimeTemplate                 *string `pulumi:"runtimeTemplate"`
}

type ColabRuntimeTemplateIamPolicyState struct {
	ColabRuntimeTemplateIamPolicyId pulumi.StringPtrInput
	Etag                            pulumi.StringPtrInput
	Location                        pulumi.StringPtrInput
	PolicyData                      pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	RuntimeTemplate                 pulumi.StringPtrInput
}

func (ColabRuntimeTemplateIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*colabRuntimeTemplateIamPolicyState)(nil)).Elem()
}

type colabRuntimeTemplateIamPolicyArgs struct {
	ColabRuntimeTemplateIamPolicyId *string `pulumi:"colabRuntimeTemplateIamPolicyId"`
	Location                        *string `pulumi:"location"`
	PolicyData                      string  `pulumi:"policyData"`
	Project                         *string `pulumi:"project"`
	RuntimeTemplate                 string  `pulumi:"runtimeTemplate"`
}

// The set of arguments for constructing a ColabRuntimeTemplateIamPolicy resource.
type ColabRuntimeTemplateIamPolicyArgs struct {
	ColabRuntimeTemplateIamPolicyId pulumi.StringPtrInput
	Location                        pulumi.StringPtrInput
	PolicyData                      pulumi.StringInput
	Project                         pulumi.StringPtrInput
	RuntimeTemplate                 pulumi.StringInput
}

func (ColabRuntimeTemplateIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*colabRuntimeTemplateIamPolicyArgs)(nil)).Elem()
}

type ColabRuntimeTemplateIamPolicyInput interface {
	pulumi.Input

	ToColabRuntimeTemplateIamPolicyOutput() ColabRuntimeTemplateIamPolicyOutput
	ToColabRuntimeTemplateIamPolicyOutputWithContext(ctx context.Context) ColabRuntimeTemplateIamPolicyOutput
}

func (*ColabRuntimeTemplateIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabRuntimeTemplateIamPolicy)(nil)).Elem()
}

func (i *ColabRuntimeTemplateIamPolicy) ToColabRuntimeTemplateIamPolicyOutput() ColabRuntimeTemplateIamPolicyOutput {
	return i.ToColabRuntimeTemplateIamPolicyOutputWithContext(context.Background())
}

func (i *ColabRuntimeTemplateIamPolicy) ToColabRuntimeTemplateIamPolicyOutputWithContext(ctx context.Context) ColabRuntimeTemplateIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColabRuntimeTemplateIamPolicyOutput)
}

type ColabRuntimeTemplateIamPolicyOutput struct{ *pulumi.OutputState }

func (ColabRuntimeTemplateIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ColabRuntimeTemplateIamPolicy)(nil)).Elem()
}

func (o ColabRuntimeTemplateIamPolicyOutput) ToColabRuntimeTemplateIamPolicyOutput() ColabRuntimeTemplateIamPolicyOutput {
	return o
}

func (o ColabRuntimeTemplateIamPolicyOutput) ToColabRuntimeTemplateIamPolicyOutputWithContext(ctx context.Context) ColabRuntimeTemplateIamPolicyOutput {
	return o
}

func (o ColabRuntimeTemplateIamPolicyOutput) ColabRuntimeTemplateIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplateIamPolicy) pulumi.StringOutput { return v.ColabRuntimeTemplateIamPolicyId }).(pulumi.StringOutput)
}

func (o ColabRuntimeTemplateIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplateIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ColabRuntimeTemplateIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplateIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ColabRuntimeTemplateIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplateIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ColabRuntimeTemplateIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplateIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ColabRuntimeTemplateIamPolicyOutput) RuntimeTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *ColabRuntimeTemplateIamPolicy) pulumi.StringOutput { return v.RuntimeTemplate }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ColabRuntimeTemplateIamPolicyInput)(nil)).Elem(), &ColabRuntimeTemplateIamPolicy{})
	pulumi.RegisterOutputType(ColabRuntimeTemplateIamPolicyOutput{})
}
