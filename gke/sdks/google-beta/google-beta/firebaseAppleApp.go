// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseAppleApp struct {
	pulumi.CustomResourceState

	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the AppleApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the AppleApp. This auto-associated
	// key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringOutput `pulumi:"apiKeyId"`
	// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
	// the data format is not specified.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId pulumi.StringPtrOutput `pulumi:"appStoreId"`
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId       pulumi.StringOutput    `pulumi:"bundleId"`
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName        pulumi.StringOutput `pulumi:"displayName"`
	FirebaseAppleAppId pulumi.StringOutput `pulumi:"firebaseAppleAppId"`
	// The fully qualified resource name of the App, for example: projects/projectId/iosApps/appId
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId   pulumi.StringPtrOutput            `pulumi:"teamId"`
	Timeouts FirebaseAppleAppTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFirebaseAppleApp registers a new resource with the given unique name, arguments, and options.
func NewFirebaseAppleApp(ctx *pulumi.Context,
	name string, args *FirebaseAppleAppArgs, opts ...pulumi.ResourceOption) (*FirebaseAppleApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseAppleApp
	err = ctx.RegisterPackageResource("google-beta:index/firebaseAppleApp:FirebaseAppleApp", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseAppleApp gets an existing FirebaseAppleApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseAppleApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseAppleAppState, opts ...pulumi.ResourceOption) (*FirebaseAppleApp, error) {
	var resource FirebaseAppleApp
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaseAppleApp:FirebaseAppleApp", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseAppleApp resources.
type firebaseAppleAppState struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the AppleApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the AppleApp. This auto-associated
	// key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
	// the data format is not specified.
	AppId *string `pulumi:"appId"`
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId *string `pulumi:"appStoreId"`
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId       *string `pulumi:"bundleId"`
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName        *string `pulumi:"displayName"`
	FirebaseAppleAppId *string `pulumi:"firebaseAppleAppId"`
	// The fully qualified resource name of the App, for example: projects/projectId/iosApps/appId
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId   *string                   `pulumi:"teamId"`
	Timeouts *FirebaseAppleAppTimeouts `pulumi:"timeouts"`
}

type FirebaseAppleAppState struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the AppleApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the AppleApp. This auto-associated
	// key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringPtrInput
	// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
	// the data format is not specified.
	AppId pulumi.StringPtrInput
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId pulumi.StringPtrInput
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId       pulumi.StringPtrInput
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	DisplayName        pulumi.StringPtrInput
	FirebaseAppleAppId pulumi.StringPtrInput
	// The fully qualified resource name of the App, for example: projects/projectId/iosApps/appId
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId   pulumi.StringPtrInput
	Timeouts FirebaseAppleAppTimeoutsPtrInput
}

func (FirebaseAppleAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseAppleAppState)(nil)).Elem()
}

type firebaseAppleAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the AppleApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the AppleApp. This auto-associated
	// key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId *string `pulumi:"appStoreId"`
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId       string  `pulumi:"bundleId"`
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName        string  `pulumi:"displayName"`
	FirebaseAppleAppId *string `pulumi:"firebaseAppleAppId"`
	Project            *string `pulumi:"project"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId   *string                   `pulumi:"teamId"`
	Timeouts *FirebaseAppleAppTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaseAppleApp resource.
type FirebaseAppleAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the AppleApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the AppleApp. This auto-associated
	// key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringPtrInput
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId pulumi.StringPtrInput
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId       pulumi.StringInput
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	DisplayName        pulumi.StringInput
	FirebaseAppleAppId pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId   pulumi.StringPtrInput
	Timeouts FirebaseAppleAppTimeoutsPtrInput
}

func (FirebaseAppleAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseAppleAppArgs)(nil)).Elem()
}

type FirebaseAppleAppInput interface {
	pulumi.Input

	ToFirebaseAppleAppOutput() FirebaseAppleAppOutput
	ToFirebaseAppleAppOutputWithContext(ctx context.Context) FirebaseAppleAppOutput
}

func (*FirebaseAppleApp) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseAppleApp)(nil)).Elem()
}

func (i *FirebaseAppleApp) ToFirebaseAppleAppOutput() FirebaseAppleAppOutput {
	return i.ToFirebaseAppleAppOutputWithContext(context.Background())
}

func (i *FirebaseAppleApp) ToFirebaseAppleAppOutputWithContext(ctx context.Context) FirebaseAppleAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseAppleAppOutput)
}

type FirebaseAppleAppOutput struct{ *pulumi.OutputState }

func (FirebaseAppleAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseAppleApp)(nil)).Elem()
}

func (o FirebaseAppleAppOutput) ToFirebaseAppleAppOutput() FirebaseAppleAppOutput {
	return o
}

func (o FirebaseAppleAppOutput) ToFirebaseAppleAppOutputWithContext(ctx context.Context) FirebaseAppleAppOutput {
	return o
}

// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the AppleApp. If apiKeyId
// is not set during creation, then Firebase automatically associates an apiKeyId with the AppleApp. This auto-associated
// key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
func (o FirebaseAppleAppOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.ApiKeyId }).(pulumi.StringOutput)
}

// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
// the data format is not specified.
func (o FirebaseAppleAppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
func (o FirebaseAppleAppOutput) AppStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringPtrOutput { return v.AppStoreId }).(pulumi.StringPtrOutput)
}

// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
func (o FirebaseAppleAppOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.BundleId }).(pulumi.StringOutput)
}

func (o FirebaseAppleAppOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The user-assigned display name of the App.
func (o FirebaseAppleAppOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o FirebaseAppleAppOutput) FirebaseAppleAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.FirebaseAppleAppId }).(pulumi.StringOutput)
}

// The fully qualified resource name of the App, for example: projects/projectId/iosApps/appId
func (o FirebaseAppleAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirebaseAppleAppOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Apple Developer Team ID associated with the App in the App Store.
func (o FirebaseAppleAppOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) pulumi.StringPtrOutput { return v.TeamId }).(pulumi.StringPtrOutput)
}

func (o FirebaseAppleAppOutput) Timeouts() FirebaseAppleAppTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseAppleApp) FirebaseAppleAppTimeoutsPtrOutput { return v.Timeouts }).(FirebaseAppleAppTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseAppleAppInput)(nil)).Elem(), &FirebaseAppleApp{})
	pulumi.RegisterOutputType(FirebaseAppleAppOutput{})
}
