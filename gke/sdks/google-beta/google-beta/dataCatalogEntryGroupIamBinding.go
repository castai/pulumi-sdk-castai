// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataCatalogEntryGroupIamBinding struct {
	pulumi.CustomResourceState

	Condition                         DataCatalogEntryGroupIamBindingConditionPtrOutput `pulumi:"condition"`
	DataCatalogEntryGroupIamBindingId pulumi.StringOutput                               `pulumi:"dataCatalogEntryGroupIamBindingId"`
	EntryGroup                        pulumi.StringOutput                               `pulumi:"entryGroup"`
	Etag                              pulumi.StringOutput                               `pulumi:"etag"`
	Members                           pulumi.StringArrayOutput                          `pulumi:"members"`
	Project                           pulumi.StringOutput                               `pulumi:"project"`
	Region                            pulumi.StringOutput                               `pulumi:"region"`
	Role                              pulumi.StringOutput                               `pulumi:"role"`
}

// NewDataCatalogEntryGroupIamBinding registers a new resource with the given unique name, arguments, and options.
func NewDataCatalogEntryGroupIamBinding(ctx *pulumi.Context,
	name string, args *DataCatalogEntryGroupIamBindingArgs, opts ...pulumi.ResourceOption) (*DataCatalogEntryGroupIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryGroup == nil {
		return nil, errors.New("invalid value for required argument 'EntryGroup'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataCatalogEntryGroupIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/dataCatalogEntryGroupIamBinding:DataCatalogEntryGroupIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalogEntryGroupIamBinding gets an existing DataCatalogEntryGroupIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalogEntryGroupIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogEntryGroupIamBindingState, opts ...pulumi.ResourceOption) (*DataCatalogEntryGroupIamBinding, error) {
	var resource DataCatalogEntryGroupIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataCatalogEntryGroupIamBinding:DataCatalogEntryGroupIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalogEntryGroupIamBinding resources.
type dataCatalogEntryGroupIamBindingState struct {
	Condition                         *DataCatalogEntryGroupIamBindingCondition `pulumi:"condition"`
	DataCatalogEntryGroupIamBindingId *string                                   `pulumi:"dataCatalogEntryGroupIamBindingId"`
	EntryGroup                        *string                                   `pulumi:"entryGroup"`
	Etag                              *string                                   `pulumi:"etag"`
	Members                           []string                                  `pulumi:"members"`
	Project                           *string                                   `pulumi:"project"`
	Region                            *string                                   `pulumi:"region"`
	Role                              *string                                   `pulumi:"role"`
}

type DataCatalogEntryGroupIamBindingState struct {
	Condition                         DataCatalogEntryGroupIamBindingConditionPtrInput
	DataCatalogEntryGroupIamBindingId pulumi.StringPtrInput
	EntryGroup                        pulumi.StringPtrInput
	Etag                              pulumi.StringPtrInput
	Members                           pulumi.StringArrayInput
	Project                           pulumi.StringPtrInput
	Region                            pulumi.StringPtrInput
	Role                              pulumi.StringPtrInput
}

func (DataCatalogEntryGroupIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogEntryGroupIamBindingState)(nil)).Elem()
}

type dataCatalogEntryGroupIamBindingArgs struct {
	Condition                         *DataCatalogEntryGroupIamBindingCondition `pulumi:"condition"`
	DataCatalogEntryGroupIamBindingId *string                                   `pulumi:"dataCatalogEntryGroupIamBindingId"`
	EntryGroup                        string                                    `pulumi:"entryGroup"`
	Members                           []string                                  `pulumi:"members"`
	Project                           *string                                   `pulumi:"project"`
	Region                            *string                                   `pulumi:"region"`
	Role                              string                                    `pulumi:"role"`
}

// The set of arguments for constructing a DataCatalogEntryGroupIamBinding resource.
type DataCatalogEntryGroupIamBindingArgs struct {
	Condition                         DataCatalogEntryGroupIamBindingConditionPtrInput
	DataCatalogEntryGroupIamBindingId pulumi.StringPtrInput
	EntryGroup                        pulumi.StringInput
	Members                           pulumi.StringArrayInput
	Project                           pulumi.StringPtrInput
	Region                            pulumi.StringPtrInput
	Role                              pulumi.StringInput
}

func (DataCatalogEntryGroupIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogEntryGroupIamBindingArgs)(nil)).Elem()
}

type DataCatalogEntryGroupIamBindingInput interface {
	pulumi.Input

	ToDataCatalogEntryGroupIamBindingOutput() DataCatalogEntryGroupIamBindingOutput
	ToDataCatalogEntryGroupIamBindingOutputWithContext(ctx context.Context) DataCatalogEntryGroupIamBindingOutput
}

func (*DataCatalogEntryGroupIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEntryGroupIamBinding)(nil)).Elem()
}

func (i *DataCatalogEntryGroupIamBinding) ToDataCatalogEntryGroupIamBindingOutput() DataCatalogEntryGroupIamBindingOutput {
	return i.ToDataCatalogEntryGroupIamBindingOutputWithContext(context.Background())
}

func (i *DataCatalogEntryGroupIamBinding) ToDataCatalogEntryGroupIamBindingOutputWithContext(ctx context.Context) DataCatalogEntryGroupIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEntryGroupIamBindingOutput)
}

type DataCatalogEntryGroupIamBindingOutput struct{ *pulumi.OutputState }

func (DataCatalogEntryGroupIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEntryGroupIamBinding)(nil)).Elem()
}

func (o DataCatalogEntryGroupIamBindingOutput) ToDataCatalogEntryGroupIamBindingOutput() DataCatalogEntryGroupIamBindingOutput {
	return o
}

func (o DataCatalogEntryGroupIamBindingOutput) ToDataCatalogEntryGroupIamBindingOutputWithContext(ctx context.Context) DataCatalogEntryGroupIamBindingOutput {
	return o
}

func (o DataCatalogEntryGroupIamBindingOutput) Condition() DataCatalogEntryGroupIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) DataCatalogEntryGroupIamBindingConditionPtrOutput {
		return v.Condition
	}).(DataCatalogEntryGroupIamBindingConditionPtrOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) DataCatalogEntryGroupIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringOutput {
		return v.DataCatalogEntryGroupIamBindingId
	}).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) EntryGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringOutput { return v.EntryGroup }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DataCatalogEntryGroupIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalogEntryGroupIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEntryGroupIamBindingInput)(nil)).Elem(), &DataCatalogEntryGroupIamBinding{})
	pulumi.RegisterOutputType(DataCatalogEntryGroupIamBindingOutput{})
}
