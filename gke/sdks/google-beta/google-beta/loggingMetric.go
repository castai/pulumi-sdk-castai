// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoggingMetric struct {
	pulumi.CustomResourceState

	// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has
	// to be in the same project as the metric.
	BucketName pulumi.StringPtrOutput `pulumi:"bucketName"`
	// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket
	// boundaries used to create a histogram of the extracted values.
	BucketOptions LoggingMetricBucketOptionsPtrOutput `pulumi:"bucketOptions"`
	// A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If set to True, then this metric is disabled and it does not generate any points.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which is used to match log
	// entries.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign
	// as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this
	// map. The syntax of the extractor expression is the same as for the valueExtractor field.
	LabelExtractors pulumi.StringMapOutput `pulumi:"labelExtractors"`
	LoggingMetricId pulumi.StringOutput    `pulumi:"loggingMetricId"`
	// The optional metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric
	// descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number
	// of log entries matching the filter expression.
	MetricDescriptor LoggingMetricMetricDescriptorPtrOutput `pulumi:"metricDescriptor"`
	// The client-assigned metric identifier. Examples - "error_count", "nginx/requests". Metric identifiers are limited to 100
	// characters and can include only the following characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The
	// forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.
	Name     pulumi.StringOutput            `pulumi:"name"`
	Project  pulumi.StringOutput            `pulumi:"project"`
	Timeouts LoggingMetricTimeoutsPtrOutput `pulumi:"timeouts"`
	// A valueExtractor is required when using a distribution logs-based metric to extract the values to record from a log
	// entry. Two functions are supported for value extraction - EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument
	// are 1. field - The name of the log entry field from which the value is to be extracted. 2. regex - A regular expression
	// using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from
	// the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error
	// to specify a regex that does not include exactly one capture group.
	ValueExtractor pulumi.StringPtrOutput `pulumi:"valueExtractor"`
}

// NewLoggingMetric registers a new resource with the given unique name, arguments, and options.
func NewLoggingMetric(ctx *pulumi.Context,
	name string, args *LoggingMetricArgs, opts ...pulumi.ResourceOption) (*LoggingMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource LoggingMetric
	err = ctx.RegisterPackageResource("google-beta:index/loggingMetric:LoggingMetric", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingMetric gets an existing LoggingMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingMetricState, opts ...pulumi.ResourceOption) (*LoggingMetric, error) {
	var resource LoggingMetric
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/loggingMetric:LoggingMetric", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingMetric resources.
type loggingMetricState struct {
	// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has
	// to be in the same project as the metric.
	BucketName *string `pulumi:"bucketName"`
	// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket
	// boundaries used to create a histogram of the extracted values.
	BucketOptions *LoggingMetricBucketOptions `pulumi:"bucketOptions"`
	// A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
	Description *string `pulumi:"description"`
	// If set to True, then this metric is disabled and it does not generate any points.
	Disabled *bool `pulumi:"disabled"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which is used to match log
	// entries.
	Filter *string `pulumi:"filter"`
	// A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign
	// as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this
	// map. The syntax of the extractor expression is the same as for the valueExtractor field.
	LabelExtractors map[string]string `pulumi:"labelExtractors"`
	LoggingMetricId *string           `pulumi:"loggingMetricId"`
	// The optional metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric
	// descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number
	// of log entries matching the filter expression.
	MetricDescriptor *LoggingMetricMetricDescriptor `pulumi:"metricDescriptor"`
	// The client-assigned metric identifier. Examples - "error_count", "nginx/requests". Metric identifiers are limited to 100
	// characters and can include only the following characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The
	// forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.
	Name     *string                `pulumi:"name"`
	Project  *string                `pulumi:"project"`
	Timeouts *LoggingMetricTimeouts `pulumi:"timeouts"`
	// A valueExtractor is required when using a distribution logs-based metric to extract the values to record from a log
	// entry. Two functions are supported for value extraction - EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument
	// are 1. field - The name of the log entry field from which the value is to be extracted. 2. regex - A regular expression
	// using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from
	// the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error
	// to specify a regex that does not include exactly one capture group.
	ValueExtractor *string `pulumi:"valueExtractor"`
}

type LoggingMetricState struct {
	// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has
	// to be in the same project as the metric.
	BucketName pulumi.StringPtrInput
	// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket
	// boundaries used to create a histogram of the extracted values.
	BucketOptions LoggingMetricBucketOptionsPtrInput
	// A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrInput
	// If set to True, then this metric is disabled and it does not generate any points.
	Disabled pulumi.BoolPtrInput
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which is used to match log
	// entries.
	Filter pulumi.StringPtrInput
	// A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign
	// as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this
	// map. The syntax of the extractor expression is the same as for the valueExtractor field.
	LabelExtractors pulumi.StringMapInput
	LoggingMetricId pulumi.StringPtrInput
	// The optional metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric
	// descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number
	// of log entries matching the filter expression.
	MetricDescriptor LoggingMetricMetricDescriptorPtrInput
	// The client-assigned metric identifier. Examples - "error_count", "nginx/requests". Metric identifiers are limited to 100
	// characters and can include only the following characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The
	// forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts LoggingMetricTimeoutsPtrInput
	// A valueExtractor is required when using a distribution logs-based metric to extract the values to record from a log
	// entry. Two functions are supported for value extraction - EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument
	// are 1. field - The name of the log entry field from which the value is to be extracted. 2. regex - A regular expression
	// using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from
	// the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error
	// to specify a regex that does not include exactly one capture group.
	ValueExtractor pulumi.StringPtrInput
}

func (LoggingMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingMetricState)(nil)).Elem()
}

type loggingMetricArgs struct {
	// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has
	// to be in the same project as the metric.
	BucketName *string `pulumi:"bucketName"`
	// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket
	// boundaries used to create a histogram of the extracted values.
	BucketOptions *LoggingMetricBucketOptions `pulumi:"bucketOptions"`
	// A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
	Description *string `pulumi:"description"`
	// If set to True, then this metric is disabled and it does not generate any points.
	Disabled *bool `pulumi:"disabled"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which is used to match log
	// entries.
	Filter string `pulumi:"filter"`
	// A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign
	// as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this
	// map. The syntax of the extractor expression is the same as for the valueExtractor field.
	LabelExtractors map[string]string `pulumi:"labelExtractors"`
	LoggingMetricId *string           `pulumi:"loggingMetricId"`
	// The optional metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric
	// descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number
	// of log entries matching the filter expression.
	MetricDescriptor *LoggingMetricMetricDescriptor `pulumi:"metricDescriptor"`
	// The client-assigned metric identifier. Examples - "error_count", "nginx/requests". Metric identifiers are limited to 100
	// characters and can include only the following characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The
	// forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.
	Name     *string                `pulumi:"name"`
	Project  *string                `pulumi:"project"`
	Timeouts *LoggingMetricTimeouts `pulumi:"timeouts"`
	// A valueExtractor is required when using a distribution logs-based metric to extract the values to record from a log
	// entry. Two functions are supported for value extraction - EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument
	// are 1. field - The name of the log entry field from which the value is to be extracted. 2. regex - A regular expression
	// using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from
	// the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error
	// to specify a regex that does not include exactly one capture group.
	ValueExtractor *string `pulumi:"valueExtractor"`
}

// The set of arguments for constructing a LoggingMetric resource.
type LoggingMetricArgs struct {
	// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has
	// to be in the same project as the metric.
	BucketName pulumi.StringPtrInput
	// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket
	// boundaries used to create a histogram of the extracted values.
	BucketOptions LoggingMetricBucketOptionsPtrInput
	// A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
	Description pulumi.StringPtrInput
	// If set to True, then this metric is disabled and it does not generate any points.
	Disabled pulumi.BoolPtrInput
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which is used to match log
	// entries.
	Filter pulumi.StringInput
	// A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign
	// as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this
	// map. The syntax of the extractor expression is the same as for the valueExtractor field.
	LabelExtractors pulumi.StringMapInput
	LoggingMetricId pulumi.StringPtrInput
	// The optional metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric
	// descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number
	// of log entries matching the filter expression.
	MetricDescriptor LoggingMetricMetricDescriptorPtrInput
	// The client-assigned metric identifier. Examples - "error_count", "nginx/requests". Metric identifiers are limited to 100
	// characters and can include only the following characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The
	// forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts LoggingMetricTimeoutsPtrInput
	// A valueExtractor is required when using a distribution logs-based metric to extract the values to record from a log
	// entry. Two functions are supported for value extraction - EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument
	// are 1. field - The name of the log entry field from which the value is to be extracted. 2. regex - A regular expression
	// using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from
	// the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error
	// to specify a regex that does not include exactly one capture group.
	ValueExtractor pulumi.StringPtrInput
}

func (LoggingMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingMetricArgs)(nil)).Elem()
}

type LoggingMetricInput interface {
	pulumi.Input

	ToLoggingMetricOutput() LoggingMetricOutput
	ToLoggingMetricOutputWithContext(ctx context.Context) LoggingMetricOutput
}

func (*LoggingMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingMetric)(nil)).Elem()
}

func (i *LoggingMetric) ToLoggingMetricOutput() LoggingMetricOutput {
	return i.ToLoggingMetricOutputWithContext(context.Background())
}

func (i *LoggingMetric) ToLoggingMetricOutputWithContext(ctx context.Context) LoggingMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingMetricOutput)
}

type LoggingMetricOutput struct{ *pulumi.OutputState }

func (LoggingMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingMetric)(nil)).Elem()
}

func (o LoggingMetricOutput) ToLoggingMetricOutput() LoggingMetricOutput {
	return o
}

func (o LoggingMetricOutput) ToLoggingMetricOutputWithContext(ctx context.Context) LoggingMetricOutput {
	return o
}

// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has
// to be in the same project as the metric.
func (o LoggingMetricOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket
// boundaries used to create a histogram of the extracted values.
func (o LoggingMetricOutput) BucketOptions() LoggingMetricBucketOptionsPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) LoggingMetricBucketOptionsPtrOutput { return v.BucketOptions }).(LoggingMetricBucketOptionsPtrOutput)
}

// A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
func (o LoggingMetricOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If set to True, then this metric is disabled and it does not generate any points.
func (o LoggingMetricOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which is used to match log
// entries.
func (o LoggingMetricOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign
// as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this
// map. The syntax of the extractor expression is the same as for the valueExtractor field.
func (o LoggingMetricOutput) LabelExtractors() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringMapOutput { return v.LabelExtractors }).(pulumi.StringMapOutput)
}

func (o LoggingMetricOutput) LoggingMetricId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringOutput { return v.LoggingMetricId }).(pulumi.StringOutput)
}

// The optional metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric
// descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number
// of log entries matching the filter expression.
func (o LoggingMetricOutput) MetricDescriptor() LoggingMetricMetricDescriptorPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) LoggingMetricMetricDescriptorPtrOutput { return v.MetricDescriptor }).(LoggingMetricMetricDescriptorPtrOutput)
}

// The client-assigned metric identifier. Examples - "error_count", "nginx/requests". Metric identifiers are limited to 100
// characters and can include only the following characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The
// forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.
func (o LoggingMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoggingMetricOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o LoggingMetricOutput) Timeouts() LoggingMetricTimeoutsPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) LoggingMetricTimeoutsPtrOutput { return v.Timeouts }).(LoggingMetricTimeoutsPtrOutput)
}

// A valueExtractor is required when using a distribution logs-based metric to extract the values to record from a log
// entry. Two functions are supported for value extraction - EXTRACT(field) or REGEXP_EXTRACT(field, regex). The argument
// are 1. field - The name of the log entry field from which the value is to be extracted. 2. regex - A regular expression
// using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from
// the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error
// to specify a regex that does not include exactly one capture group.
func (o LoggingMetricOutput) ValueExtractor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingMetric) pulumi.StringPtrOutput { return v.ValueExtractor }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingMetricInput)(nil)).Elem(), &LoggingMetric{})
	pulumi.RegisterOutputType(LoggingMetricOutput{})
}
