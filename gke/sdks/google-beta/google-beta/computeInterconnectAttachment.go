// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeInterconnectAttachment struct {
	pulumi.CustomResourceState

	// Whether the VLAN attachment is enabled or disabled. When using PARTNER type this will Pre-Activate the interconnect
	// attachment
	AdminEnabled pulumi.BoolPtrOutput `pulumi:"adminEnabled"`
	// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the
	// bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the
	// bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible
	// values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G",
	// "BPS_20G", "BPS_50G", "BPS_100G"]
	Bandwidth pulumi.StringOutput `pulumi:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and
	// customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and
	// must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate
	// prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will
	// randomly select an unused /29 from all of link-local space.
	CandidateSubnets pulumi.StringArrayOutput `pulumi:"candidateSubnets"`
	// IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
	CloudRouterIpAddress pulumi.StringOutput `pulumi:"cloudRouterIpAddress"`
	// IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
	CloudRouterIpv6Address          pulumi.StringOutput `pulumi:"cloudRouterIpv6Address"`
	ComputeInterconnectAttachmentId pulumi.StringOutput `pulumi:"computeInterconnectAttachmentId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
	CustomerRouterIpAddress pulumi.StringOutput `pulumi:"customerRouterIpAddress"`
	// IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
	CustomerRouterIpv6Address pulumi.StringOutput `pulumi:"customerRouterIpv6Address"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved
	// reliability, customers should configure a pair of attachments with one per availability domain. The selected
	// availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the
	// specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain pulumi.StringOutput    `pulumi:"edgeAvailabilityDomain"`
	EffectiveLabels        pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Indicates the user-supplied encryption option of this interconnect attachment. Can only be specified at attachment
	// creation for PARTNER or DEDICATED attachments. * NONE - This is the default value, which means that the VLAN attachment
	// carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. * IPSEC -
	// The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or
	// third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use HA
	// VPN over Cloud Interconnect, the VLAN attachment must be created with this option. Default value: "NONE" Possible
	// values: ["NONE", "IPSEC"]
	Encryption pulumi.StringPtrOutput `pulumi:"encryption"`
	// Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity
	// issues.
	GoogleReferenceId pulumi.StringOutput `pulumi:"googleReferenceId"`
	// URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is
	// DEDICATED, must not be set if type is PARTNER.
	Interconnect pulumi.StringPtrOutput `pulumi:"interconnect"`
	// URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has
	// the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the
	// interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway's IP
	// address will be allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is
	// paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated
	// from the IP address specified for this interconnect attachment. If this field is not specified for interconnect
	// attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment,
	// the HA VPN gateway's IP address will be allocated from regional external IP address pool.
	IpsecInternalAddresses pulumi.StringArrayOutput `pulumi:"ipsecInternalAddresses"`
	// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for
	// optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify
	// or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise
	// the request will fail with error 412 conditionNotMet.
	LabelFingerprint pulumi.StringOutput `pulumi:"labelFingerprint"`
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must
	// comply with RFC1035. Label values may be empty. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440
	// and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu pulumi.StringOutput `pulumi:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to
	// initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
	PairingKey pulumi.StringOutput `pulumi:"pairingKey"`
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a
	// layer 3 Partner if they configured BGP on behalf of the customer.
	PartnerAsn pulumi.StringOutput `pulumi:"partnerAsn"`
	// Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached
	// to is of type DEDICATED.
	PrivateInterconnectInfos ComputeInterconnectAttachmentPrivateInterconnectInfoArrayOutput `pulumi:"privateInterconnectInfos"`
	Project                  pulumi.StringOutput                                             `pulumi:"project"`
	// Region where the regional interconnect attachment resides.
	Region pulumi.StringOutput `pulumi:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in the same region as this
	// InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region
	// within which the Cloud Router is configured.
	Router   pulumi.StringOutput `pulumi:"router"`
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not
	// specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update
	// interconnect attachment operations. Possible values: ["IPV4_IPV6", "IPV4_ONLY"]
	StackType pulumi.StringOutput `pulumi:"stackType"`
	// [Output Only] The current state of this attachment's functionality.
	State pulumi.StringOutput `pulumi:"state"`
	// Length of the IPv4 subnet mask. Allowed values: 29 (default), 30. The default value is 29, except for Cross-Cloud
	// Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30.
	// For example, connections that use an Azure remote location fall into this category. In these cases, the default value is
	// 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud
	// Support more debugging visibility.
	SubnetLength pulumi.Float64PtrOutput `pulumi:"subnetLength"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                         `pulumi:"terraformLabels"`
	Timeouts        ComputeInterconnectAttachmentTimeoutsPtrOutput `pulumi:"timeouts"`
	// The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: ["DEDICATED", "PARTNER",
	// "PARTNER_PROVIDER"]
	Type pulumi.StringOutput `pulumi:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed
	// upstream.
	VlanTag8021q pulumi.Float64Output `pulumi:"vlanTag8021q"`
}

// NewComputeInterconnectAttachment registers a new resource with the given unique name, arguments, and options.
func NewComputeInterconnectAttachment(ctx *pulumi.Context,
	name string, args *ComputeInterconnectAttachmentArgs, opts ...pulumi.ResourceOption) (*ComputeInterconnectAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Router == nil {
		return nil, errors.New("invalid value for required argument 'Router'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeInterconnectAttachment
	err = ctx.RegisterPackageResource("google-beta:index/computeInterconnectAttachment:ComputeInterconnectAttachment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeInterconnectAttachment gets an existing ComputeInterconnectAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeInterconnectAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeInterconnectAttachmentState, opts ...pulumi.ResourceOption) (*ComputeInterconnectAttachment, error) {
	var resource ComputeInterconnectAttachment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeInterconnectAttachment:ComputeInterconnectAttachment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeInterconnectAttachment resources.
type computeInterconnectAttachmentState struct {
	// Whether the VLAN attachment is enabled or disabled. When using PARTNER type this will Pre-Activate the interconnect
	// attachment
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the
	// bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the
	// bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible
	// values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G",
	// "BPS_20G", "BPS_50G", "BPS_100G"]
	Bandwidth *string `pulumi:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and
	// customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and
	// must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate
	// prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will
	// randomly select an unused /29 from all of link-local space.
	CandidateSubnets []string `pulumi:"candidateSubnets"`
	// IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
	CloudRouterIpAddress *string `pulumi:"cloudRouterIpAddress"`
	// IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
	CloudRouterIpv6Address          *string `pulumi:"cloudRouterIpv6Address"`
	ComputeInterconnectAttachmentId *string `pulumi:"computeInterconnectAttachmentId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
	CustomerRouterIpAddress *string `pulumi:"customerRouterIpAddress"`
	// IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
	CustomerRouterIpv6Address *string `pulumi:"customerRouterIpv6Address"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved
	// reliability, customers should configure a pair of attachments with one per availability domain. The selected
	// availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the
	// specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain *string           `pulumi:"edgeAvailabilityDomain"`
	EffectiveLabels        map[string]string `pulumi:"effectiveLabels"`
	// Indicates the user-supplied encryption option of this interconnect attachment. Can only be specified at attachment
	// creation for PARTNER or DEDICATED attachments. * NONE - This is the default value, which means that the VLAN attachment
	// carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. * IPSEC -
	// The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or
	// third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use HA
	// VPN over Cloud Interconnect, the VLAN attachment must be created with this option. Default value: "NONE" Possible
	// values: ["NONE", "IPSEC"]
	Encryption *string `pulumi:"encryption"`
	// Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity
	// issues.
	GoogleReferenceId *string `pulumi:"googleReferenceId"`
	// URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is
	// DEDICATED, must not be set if type is PARTNER.
	Interconnect *string `pulumi:"interconnect"`
	// URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has
	// the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the
	// interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway's IP
	// address will be allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is
	// paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated
	// from the IP address specified for this interconnect attachment. If this field is not specified for interconnect
	// attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment,
	// the HA VPN gateway's IP address will be allocated from regional external IP address pool.
	IpsecInternalAddresses []string `pulumi:"ipsecInternalAddresses"`
	// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for
	// optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify
	// or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise
	// the request will fail with error 412 conditionNotMet.
	LabelFingerprint *string `pulumi:"labelFingerprint"`
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must
	// comply with RFC1035. Label values may be empty. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440
	// and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu *string `pulumi:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to
	// initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
	PairingKey *string `pulumi:"pairingKey"`
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a
	// layer 3 Partner if they configured BGP on behalf of the customer.
	PartnerAsn *string `pulumi:"partnerAsn"`
	// Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached
	// to is of type DEDICATED.
	PrivateInterconnectInfos []ComputeInterconnectAttachmentPrivateInterconnectInfo `pulumi:"privateInterconnectInfos"`
	Project                  *string                                                `pulumi:"project"`
	// Region where the regional interconnect attachment resides.
	Region *string `pulumi:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in the same region as this
	// InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region
	// within which the Cloud Router is configured.
	Router   *string `pulumi:"router"`
	SelfLink *string `pulumi:"selfLink"`
	// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not
	// specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update
	// interconnect attachment operations. Possible values: ["IPV4_IPV6", "IPV4_ONLY"]
	StackType *string `pulumi:"stackType"`
	// [Output Only] The current state of this attachment's functionality.
	State *string `pulumi:"state"`
	// Length of the IPv4 subnet mask. Allowed values: 29 (default), 30. The default value is 29, except for Cross-Cloud
	// Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30.
	// For example, connections that use an Azure remote location fall into this category. In these cases, the default value is
	// 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud
	// Support more debugging visibility.
	SubnetLength *float64 `pulumi:"subnetLength"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                      `pulumi:"terraformLabels"`
	Timeouts        *ComputeInterconnectAttachmentTimeouts `pulumi:"timeouts"`
	// The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: ["DEDICATED", "PARTNER",
	// "PARTNER_PROVIDER"]
	Type *string `pulumi:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed
	// upstream.
	VlanTag8021q *float64 `pulumi:"vlanTag8021q"`
}

type ComputeInterconnectAttachmentState struct {
	// Whether the VLAN attachment is enabled or disabled. When using PARTNER type this will Pre-Activate the interconnect
	// attachment
	AdminEnabled pulumi.BoolPtrInput
	// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the
	// bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the
	// bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible
	// values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G",
	// "BPS_20G", "BPS_50G", "BPS_100G"]
	Bandwidth pulumi.StringPtrInput
	// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and
	// customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and
	// must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate
	// prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will
	// randomly select an unused /29 from all of link-local space.
	CandidateSubnets pulumi.StringArrayInput
	// IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
	CloudRouterIpAddress pulumi.StringPtrInput
	// IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
	CloudRouterIpv6Address          pulumi.StringPtrInput
	ComputeInterconnectAttachmentId pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
	CustomerRouterIpAddress pulumi.StringPtrInput
	// IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
	CustomerRouterIpv6Address pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved
	// reliability, customers should configure a pair of attachments with one per availability domain. The selected
	// availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the
	// specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain pulumi.StringPtrInput
	EffectiveLabels        pulumi.StringMapInput
	// Indicates the user-supplied encryption option of this interconnect attachment. Can only be specified at attachment
	// creation for PARTNER or DEDICATED attachments. * NONE - This is the default value, which means that the VLAN attachment
	// carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. * IPSEC -
	// The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or
	// third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use HA
	// VPN over Cloud Interconnect, the VLAN attachment must be created with this option. Default value: "NONE" Possible
	// values: ["NONE", "IPSEC"]
	Encryption pulumi.StringPtrInput
	// Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity
	// issues.
	GoogleReferenceId pulumi.StringPtrInput
	// URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is
	// DEDICATED, must not be set if type is PARTNER.
	Interconnect pulumi.StringPtrInput
	// URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has
	// the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the
	// interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway's IP
	// address will be allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is
	// paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated
	// from the IP address specified for this interconnect attachment. If this field is not specified for interconnect
	// attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment,
	// the HA VPN gateway's IP address will be allocated from regional external IP address pool.
	IpsecInternalAddresses pulumi.StringArrayInput
	// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for
	// optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify
	// or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise
	// the request will fail with error 412 conditionNotMet.
	LabelFingerprint pulumi.StringPtrInput
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must
	// comply with RFC1035. Label values may be empty. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440
	// and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to
	// initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
	PairingKey pulumi.StringPtrInput
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a
	// layer 3 Partner if they configured BGP on behalf of the customer.
	PartnerAsn pulumi.StringPtrInput
	// Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached
	// to is of type DEDICATED.
	PrivateInterconnectInfos ComputeInterconnectAttachmentPrivateInterconnectInfoArrayInput
	Project                  pulumi.StringPtrInput
	// Region where the regional interconnect attachment resides.
	Region pulumi.StringPtrInput
	// URL of the cloud router to be used for dynamic routing. This router must be in the same region as this
	// InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region
	// within which the Cloud Router is configured.
	Router   pulumi.StringPtrInput
	SelfLink pulumi.StringPtrInput
	// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not
	// specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update
	// interconnect attachment operations. Possible values: ["IPV4_IPV6", "IPV4_ONLY"]
	StackType pulumi.StringPtrInput
	// [Output Only] The current state of this attachment's functionality.
	State pulumi.StringPtrInput
	// Length of the IPv4 subnet mask. Allowed values: 29 (default), 30. The default value is 29, except for Cross-Cloud
	// Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30.
	// For example, connections that use an Azure remote location fall into this category. In these cases, the default value is
	// 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud
	// Support more debugging visibility.
	SubnetLength pulumi.Float64PtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        ComputeInterconnectAttachmentTimeoutsPtrInput
	// The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: ["DEDICATED", "PARTNER",
	// "PARTNER_PROVIDER"]
	Type pulumi.StringPtrInput
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed
	// upstream.
	VlanTag8021q pulumi.Float64PtrInput
}

func (ComputeInterconnectAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeInterconnectAttachmentState)(nil)).Elem()
}

type computeInterconnectAttachmentArgs struct {
	// Whether the VLAN attachment is enabled or disabled. When using PARTNER type this will Pre-Activate the interconnect
	// attachment
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the
	// bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the
	// bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible
	// values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G",
	// "BPS_20G", "BPS_50G", "BPS_100G"]
	Bandwidth *string `pulumi:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and
	// customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and
	// must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate
	// prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will
	// randomly select an unused /29 from all of link-local space.
	CandidateSubnets                []string `pulumi:"candidateSubnets"`
	ComputeInterconnectAttachmentId *string  `pulumi:"computeInterconnectAttachmentId"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved
	// reliability, customers should configure a pair of attachments with one per availability domain. The selected
	// availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the
	// specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain *string `pulumi:"edgeAvailabilityDomain"`
	// Indicates the user-supplied encryption option of this interconnect attachment. Can only be specified at attachment
	// creation for PARTNER or DEDICATED attachments. * NONE - This is the default value, which means that the VLAN attachment
	// carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. * IPSEC -
	// The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or
	// third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use HA
	// VPN over Cloud Interconnect, the VLAN attachment must be created with this option. Default value: "NONE" Possible
	// values: ["NONE", "IPSEC"]
	Encryption *string `pulumi:"encryption"`
	// URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is
	// DEDICATED, must not be set if type is PARTNER.
	Interconnect *string `pulumi:"interconnect"`
	// URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has
	// the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the
	// interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway's IP
	// address will be allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is
	// paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated
	// from the IP address specified for this interconnect attachment. If this field is not specified for interconnect
	// attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment,
	// the HA VPN gateway's IP address will be allocated from regional external IP address pool.
	IpsecInternalAddresses []string `pulumi:"ipsecInternalAddresses"`
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must
	// comply with RFC1035. Label values may be empty. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440
	// and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu *string `pulumi:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Region where the regional interconnect attachment resides.
	Region *string `pulumi:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in the same region as this
	// InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region
	// within which the Cloud Router is configured.
	Router string `pulumi:"router"`
	// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not
	// specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update
	// interconnect attachment operations. Possible values: ["IPV4_IPV6", "IPV4_ONLY"]
	StackType *string `pulumi:"stackType"`
	// Length of the IPv4 subnet mask. Allowed values: 29 (default), 30. The default value is 29, except for Cross-Cloud
	// Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30.
	// For example, connections that use an Azure remote location fall into this category. In these cases, the default value is
	// 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud
	// Support more debugging visibility.
	SubnetLength *float64                               `pulumi:"subnetLength"`
	Timeouts     *ComputeInterconnectAttachmentTimeouts `pulumi:"timeouts"`
	// The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: ["DEDICATED", "PARTNER",
	// "PARTNER_PROVIDER"]
	Type *string `pulumi:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed
	// upstream.
	VlanTag8021q *float64 `pulumi:"vlanTag8021q"`
}

// The set of arguments for constructing a ComputeInterconnectAttachment resource.
type ComputeInterconnectAttachmentArgs struct {
	// Whether the VLAN attachment is enabled or disabled. When using PARTNER type this will Pre-Activate the interconnect
	// attachment
	AdminEnabled pulumi.BoolPtrInput
	// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the
	// bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the
	// bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible
	// values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G",
	// "BPS_20G", "BPS_50G", "BPS_100G"]
	Bandwidth pulumi.StringPtrInput
	// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and
	// customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and
	// must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate
	// prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will
	// randomly select an unused /29 from all of link-local space.
	CandidateSubnets                pulumi.StringArrayInput
	ComputeInterconnectAttachmentId pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved
	// reliability, customers should configure a pair of attachments with one per availability domain. The selected
	// availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the
	// specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain pulumi.StringPtrInput
	// Indicates the user-supplied encryption option of this interconnect attachment. Can only be specified at attachment
	// creation for PARTNER or DEDICATED attachments. * NONE - This is the default value, which means that the VLAN attachment
	// carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. * IPSEC -
	// The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or
	// third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use HA
	// VPN over Cloud Interconnect, the VLAN attachment must be created with this option. Default value: "NONE" Possible
	// values: ["NONE", "IPSEC"]
	Encryption pulumi.StringPtrInput
	// URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is
	// DEDICATED, must not be set if type is PARTNER.
	Interconnect pulumi.StringPtrInput
	// URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has
	// the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the
	// interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway's IP
	// address will be allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is
	// paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated
	// from the IP address specified for this interconnect attachment. If this field is not specified for interconnect
	// attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment,
	// the HA VPN gateway's IP address will be allocated from regional external IP address pool.
	IpsecInternalAddresses pulumi.StringArrayInput
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must
	// comply with RFC1035. Label values may be empty. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440
	// and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
	// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
	// digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Region where the regional interconnect attachment resides.
	Region pulumi.StringPtrInput
	// URL of the cloud router to be used for dynamic routing. This router must be in the same region as this
	// InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region
	// within which the Cloud Router is configured.
	Router pulumi.StringInput
	// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not
	// specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update
	// interconnect attachment operations. Possible values: ["IPV4_IPV6", "IPV4_ONLY"]
	StackType pulumi.StringPtrInput
	// Length of the IPv4 subnet mask. Allowed values: 29 (default), 30. The default value is 29, except for Cross-Cloud
	// Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30.
	// For example, connections that use an Azure remote location fall into this category. In these cases, the default value is
	// 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud
	// Support more debugging visibility.
	SubnetLength pulumi.Float64PtrInput
	Timeouts     ComputeInterconnectAttachmentTimeoutsPtrInput
	// The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: ["DEDICATED", "PARTNER",
	// "PARTNER_PROVIDER"]
	Type pulumi.StringPtrInput
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed
	// upstream.
	VlanTag8021q pulumi.Float64PtrInput
}

func (ComputeInterconnectAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeInterconnectAttachmentArgs)(nil)).Elem()
}

type ComputeInterconnectAttachmentInput interface {
	pulumi.Input

	ToComputeInterconnectAttachmentOutput() ComputeInterconnectAttachmentOutput
	ToComputeInterconnectAttachmentOutputWithContext(ctx context.Context) ComputeInterconnectAttachmentOutput
}

func (*ComputeInterconnectAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInterconnectAttachment)(nil)).Elem()
}

func (i *ComputeInterconnectAttachment) ToComputeInterconnectAttachmentOutput() ComputeInterconnectAttachmentOutput {
	return i.ToComputeInterconnectAttachmentOutputWithContext(context.Background())
}

func (i *ComputeInterconnectAttachment) ToComputeInterconnectAttachmentOutputWithContext(ctx context.Context) ComputeInterconnectAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInterconnectAttachmentOutput)
}

type ComputeInterconnectAttachmentOutput struct{ *pulumi.OutputState }

func (ComputeInterconnectAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInterconnectAttachment)(nil)).Elem()
}

func (o ComputeInterconnectAttachmentOutput) ToComputeInterconnectAttachmentOutput() ComputeInterconnectAttachmentOutput {
	return o
}

func (o ComputeInterconnectAttachmentOutput) ToComputeInterconnectAttachmentOutputWithContext(ctx context.Context) ComputeInterconnectAttachmentOutput {
	return o
}

// Whether the VLAN attachment is enabled or disabled. When using PARTNER type this will Pre-Activate the interconnect
// attachment
func (o ComputeInterconnectAttachmentOutput) AdminEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.BoolPtrOutput { return v.AdminEnabled }).(pulumi.BoolPtrOutput)
}

// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the
// bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the
// bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible
// values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G",
// "BPS_20G", "BPS_50G", "BPS_100G"]
func (o ComputeInterconnectAttachmentOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Bandwidth }).(pulumi.StringOutput)
}

// Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and
// customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and
// must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate
// prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will
// randomly select an unused /29 from all of link-local space.
func (o ComputeInterconnectAttachmentOutput) CandidateSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringArrayOutput { return v.CandidateSubnets }).(pulumi.StringArrayOutput)
}

// IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
func (o ComputeInterconnectAttachmentOutput) CloudRouterIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.CloudRouterIpAddress }).(pulumi.StringOutput)
}

// IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
func (o ComputeInterconnectAttachmentOutput) CloudRouterIpv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.CloudRouterIpv6Address }).(pulumi.StringOutput)
}

func (o ComputeInterconnectAttachmentOutput) ComputeInterconnectAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.ComputeInterconnectAttachmentId }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeInterconnectAttachmentOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
func (o ComputeInterconnectAttachmentOutput) CustomerRouterIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.CustomerRouterIpAddress }).(pulumi.StringOutput)
}

// IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
func (o ComputeInterconnectAttachmentOutput) CustomerRouterIpv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.CustomerRouterIpv6Address }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o ComputeInterconnectAttachmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved
// reliability, customers should configure a pair of attachments with one per availability domain. The selected
// availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the
// specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
func (o ComputeInterconnectAttachmentOutput) EdgeAvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.EdgeAvailabilityDomain }).(pulumi.StringOutput)
}

func (o ComputeInterconnectAttachmentOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Indicates the user-supplied encryption option of this interconnect attachment. Can only be specified at attachment
// creation for PARTNER or DEDICATED attachments. * NONE - This is the default value, which means that the VLAN attachment
// carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. * IPSEC -
// The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or
// third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use HA
// VPN over Cloud Interconnect, the VLAN attachment must be created with this option. Default value: "NONE" Possible
// values: ["NONE", "IPSEC"]
func (o ComputeInterconnectAttachmentOutput) Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringPtrOutput { return v.Encryption }).(pulumi.StringPtrOutput)
}

// Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity
// issues.
func (o ComputeInterconnectAttachmentOutput) GoogleReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.GoogleReferenceId }).(pulumi.StringOutput)
}

// URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is
// DEDICATED, must not be set if type is PARTNER.
func (o ComputeInterconnectAttachmentOutput) Interconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringPtrOutput { return v.Interconnect }).(pulumi.StringPtrOutput)
}

// URL of addresses that have been reserved for the interconnect attachment, Used only for interconnect attachment that has
// the encryption option as IPSEC. The addresses must be RFC 1918 IP address ranges. When creating HA VPN gateway over the
// interconnect attachment, if the attachment is configured to use an RFC 1918 IP address, then the VPN gateway's IP
// address will be allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is
// paired to this interconnect attachment, then an RFC 1918 IP address for the VPN gateway interface 0 will be allocated
// from the IP address specified for this interconnect attachment. If this field is not specified for interconnect
// attachment that has encryption option as IPSEC, later on when creating HA VPN gateway on this interconnect attachment,
// the HA VPN gateway's IP address will be allocated from regional external IP address pool.
func (o ComputeInterconnectAttachmentOutput) IpsecInternalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringArrayOutput { return v.IpsecInternalAddresses }).(pulumi.StringArrayOutput)
}

// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for
// optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify
// or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise
// the request will fail with error 412 conditionNotMet.
func (o ComputeInterconnectAttachmentOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must
// comply with RFC1035. Label values may be empty. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o ComputeInterconnectAttachmentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440
// and 1500 are allowed. If not specified, the value will default to 1440.
func (o ComputeInterconnectAttachmentOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
// means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
// digit, except the last character, which cannot be a dash.
func (o ComputeInterconnectAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to
// initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
func (o ComputeInterconnectAttachmentOutput) PairingKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.PairingKey }).(pulumi.StringOutput)
}

// [Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a
// layer 3 Partner if they configured BGP on behalf of the customer.
func (o ComputeInterconnectAttachmentOutput) PartnerAsn() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.PartnerAsn }).(pulumi.StringOutput)
}

// Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached
// to is of type DEDICATED.
func (o ComputeInterconnectAttachmentOutput) PrivateInterconnectInfos() ComputeInterconnectAttachmentPrivateInterconnectInfoArrayOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) ComputeInterconnectAttachmentPrivateInterconnectInfoArrayOutput {
		return v.PrivateInterconnectInfos
	}).(ComputeInterconnectAttachmentPrivateInterconnectInfoArrayOutput)
}

func (o ComputeInterconnectAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the regional interconnect attachment resides.
func (o ComputeInterconnectAttachmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// URL of the cloud router to be used for dynamic routing. This router must be in the same region as this
// InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region
// within which the Cloud Router is configured.
func (o ComputeInterconnectAttachmentOutput) Router() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Router }).(pulumi.StringOutput)
}

func (o ComputeInterconnectAttachmentOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not
// specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update
// interconnect attachment operations. Possible values: ["IPV4_IPV6", "IPV4_ONLY"]
func (o ComputeInterconnectAttachmentOutput) StackType() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.StackType }).(pulumi.StringOutput)
}

// [Output Only] The current state of this attachment's functionality.
func (o ComputeInterconnectAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Length of the IPv4 subnet mask. Allowed values: 29 (default), 30. The default value is 29, except for Cross-Cloud
// Interconnect connections that use an InterconnectRemoteLocation with a constraints.subnetLengthRange.min equal to 30.
// For example, connections that use an Azure remote location fall into this category. In these cases, the default value is
// 30, and requesting 29 returns an error. Where both 29 and 30 are allowed, 29 is preferred, because it gives Google Cloud
// Support more debugging visibility.
func (o ComputeInterconnectAttachmentOutput) SubnetLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.Float64PtrOutput { return v.SubnetLength }).(pulumi.Float64PtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o ComputeInterconnectAttachmentOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o ComputeInterconnectAttachmentOutput) Timeouts() ComputeInterconnectAttachmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) ComputeInterconnectAttachmentTimeoutsPtrOutput {
		return v.Timeouts
	}).(ComputeInterconnectAttachmentTimeoutsPtrOutput)
}

// The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: ["DEDICATED", "PARTNER",
// "PARTNER_PROVIDER"]
func (o ComputeInterconnectAttachmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed
// upstream.
func (o ComputeInterconnectAttachmentOutput) VlanTag8021q() pulumi.Float64Output {
	return o.ApplyT(func(v *ComputeInterconnectAttachment) pulumi.Float64Output { return v.VlanTag8021q }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInterconnectAttachmentInput)(nil)).Elem(), &ComputeInterconnectAttachment{})
	pulumi.RegisterOutputType(ComputeInterconnectAttachmentOutput{})
}
