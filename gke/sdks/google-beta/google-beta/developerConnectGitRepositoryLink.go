// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DeveloperConnectGitRepositoryLink struct {
	pulumi.CustomResourceState

	// Optional. Allows clients to store small amounts of arbitrary data. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Required. Git Clone URI.
	CloneUri pulumi.StringOutput `pulumi:"cloneUri"`
	// Output only. [Output only] Create timestamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. [Output only] Delete timestamp
	DeleteTime                          pulumi.StringOutput    `pulumi:"deleteTime"`
	DeveloperConnectGitRepositoryLinkId pulumi.StringOutput    `pulumi:"developerConnectGitRepositoryLinkId"`
	EffectiveAnnotations                pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	EffectiveLabels                     pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
	// This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId pulumi.StringOutput `pulumi:"gitRepositoryLinkId"`
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. Resource name of the repository, in the format 'projects/*/locations/*/connections/*/gitRepositoryLinks/*'.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	ParentConnection pulumi.StringOutput `pulumi:"parentConnection"`
	Project          pulumi.StringOutput `pulumi:"project"`
	// Output only. Set to true when the connection is being set up or updated in the background.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                             `pulumi:"terraformLabels"`
	Timeouts        DeveloperConnectGitRepositoryLinkTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. [Output only] Update timestamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDeveloperConnectGitRepositoryLink registers a new resource with the given unique name, arguments, and options.
func NewDeveloperConnectGitRepositoryLink(ctx *pulumi.Context,
	name string, args *DeveloperConnectGitRepositoryLinkArgs, opts ...pulumi.ResourceOption) (*DeveloperConnectGitRepositoryLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloneUri == nil {
		return nil, errors.New("invalid value for required argument 'CloneUri'")
	}
	if args.GitRepositoryLinkId == nil {
		return nil, errors.New("invalid value for required argument 'GitRepositoryLinkId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ParentConnection == nil {
		return nil, errors.New("invalid value for required argument 'ParentConnection'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DeveloperConnectGitRepositoryLink
	err = ctx.RegisterPackageResource("google-beta:index/developerConnectGitRepositoryLink:DeveloperConnectGitRepositoryLink", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeveloperConnectGitRepositoryLink gets an existing DeveloperConnectGitRepositoryLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeveloperConnectGitRepositoryLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeveloperConnectGitRepositoryLinkState, opts ...pulumi.ResourceOption) (*DeveloperConnectGitRepositoryLink, error) {
	var resource DeveloperConnectGitRepositoryLink
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/developerConnectGitRepositoryLink:DeveloperConnectGitRepositoryLink", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeveloperConnectGitRepositoryLink resources.
type developerConnectGitRepositoryLinkState struct {
	// Optional. Allows clients to store small amounts of arbitrary data. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. Git Clone URI.
	CloneUri *string `pulumi:"cloneUri"`
	// Output only. [Output only] Create timestamp
	CreateTime *string `pulumi:"createTime"`
	// Output only. [Output only] Delete timestamp
	DeleteTime                          *string           `pulumi:"deleteTime"`
	DeveloperConnectGitRepositoryLinkId *string           `pulumi:"developerConnectGitRepositoryLinkId"`
	EffectiveAnnotations                map[string]string `pulumi:"effectiveAnnotations"`
	EffectiveLabels                     map[string]string `pulumi:"effectiveLabels"`
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
	// This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId *string `pulumi:"gitRepositoryLinkId"`
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	Location *string `pulumi:"location"`
	// Identifier. Resource name of the repository, in the format 'projects/*/locations/*/connections/*/gitRepositoryLinks/*'.
	Name *string `pulumi:"name"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	ParentConnection *string `pulumi:"parentConnection"`
	Project          *string `pulumi:"project"`
	// Output only. Set to true when the connection is being set up or updated in the background.
	Reconciling *bool `pulumi:"reconciling"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                          `pulumi:"terraformLabels"`
	Timeouts        *DeveloperConnectGitRepositoryLinkTimeouts `pulumi:"timeouts"`
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid *string `pulumi:"uid"`
	// Output only. [Output only] Update timestamp
	UpdateTime *string `pulumi:"updateTime"`
}

type DeveloperConnectGitRepositoryLinkState struct {
	// Optional. Allows clients to store small amounts of arbitrary data. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Required. Git Clone URI.
	CloneUri pulumi.StringPtrInput
	// Output only. [Output only] Create timestamp
	CreateTime pulumi.StringPtrInput
	// Output only. [Output only] Delete timestamp
	DeleteTime                          pulumi.StringPtrInput
	DeveloperConnectGitRepositoryLinkId pulumi.StringPtrInput
	EffectiveAnnotations                pulumi.StringMapInput
	EffectiveLabels                     pulumi.StringMapInput
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
	// This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId pulumi.StringPtrInput
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	Location pulumi.StringPtrInput
	// Identifier. Resource name of the repository, in the format 'projects/*/locations/*/connections/*/gitRepositoryLinks/*'.
	Name pulumi.StringPtrInput
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	ParentConnection pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	// Output only. Set to true when the connection is being set up or updated in the background.
	Reconciling pulumi.BoolPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DeveloperConnectGitRepositoryLinkTimeoutsPtrInput
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid pulumi.StringPtrInput
	// Output only. [Output only] Update timestamp
	UpdateTime pulumi.StringPtrInput
}

func (DeveloperConnectGitRepositoryLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*developerConnectGitRepositoryLinkState)(nil)).Elem()
}

type developerConnectGitRepositoryLinkArgs struct {
	// Optional. Allows clients to store small amounts of arbitrary data. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. Git Clone URI.
	CloneUri                            string  `pulumi:"cloneUri"`
	DeveloperConnectGitRepositoryLinkId *string `pulumi:"developerConnectGitRepositoryLinkId"`
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
	// This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId string `pulumi:"gitRepositoryLinkId"`
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	Location string `pulumi:"location"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	ParentConnection string                                     `pulumi:"parentConnection"`
	Project          *string                                    `pulumi:"project"`
	Timeouts         *DeveloperConnectGitRepositoryLinkTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DeveloperConnectGitRepositoryLink resource.
type DeveloperConnectGitRepositoryLinkArgs struct {
	// Optional. Allows clients to store small amounts of arbitrary data. **Note**: This field is non-authoritative, and will
	// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
	// the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Required. Git Clone URI.
	CloneUri                            pulumi.StringInput
	DeveloperConnectGitRepositoryLinkId pulumi.StringPtrInput
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
	// delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
	// This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId pulumi.StringInput
	// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	Location pulumi.StringInput
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
	ParentConnection pulumi.StringInput
	Project          pulumi.StringPtrInput
	Timeouts         DeveloperConnectGitRepositoryLinkTimeoutsPtrInput
}

func (DeveloperConnectGitRepositoryLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*developerConnectGitRepositoryLinkArgs)(nil)).Elem()
}

type DeveloperConnectGitRepositoryLinkInput interface {
	pulumi.Input

	ToDeveloperConnectGitRepositoryLinkOutput() DeveloperConnectGitRepositoryLinkOutput
	ToDeveloperConnectGitRepositoryLinkOutputWithContext(ctx context.Context) DeveloperConnectGitRepositoryLinkOutput
}

func (*DeveloperConnectGitRepositoryLink) ElementType() reflect.Type {
	return reflect.TypeOf((**DeveloperConnectGitRepositoryLink)(nil)).Elem()
}

func (i *DeveloperConnectGitRepositoryLink) ToDeveloperConnectGitRepositoryLinkOutput() DeveloperConnectGitRepositoryLinkOutput {
	return i.ToDeveloperConnectGitRepositoryLinkOutputWithContext(context.Background())
}

func (i *DeveloperConnectGitRepositoryLink) ToDeveloperConnectGitRepositoryLinkOutputWithContext(ctx context.Context) DeveloperConnectGitRepositoryLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeveloperConnectGitRepositoryLinkOutput)
}

type DeveloperConnectGitRepositoryLinkOutput struct{ *pulumi.OutputState }

func (DeveloperConnectGitRepositoryLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeveloperConnectGitRepositoryLink)(nil)).Elem()
}

func (o DeveloperConnectGitRepositoryLinkOutput) ToDeveloperConnectGitRepositoryLinkOutput() DeveloperConnectGitRepositoryLinkOutput {
	return o
}

func (o DeveloperConnectGitRepositoryLinkOutput) ToDeveloperConnectGitRepositoryLinkOutputWithContext(ctx context.Context) DeveloperConnectGitRepositoryLinkOutput {
	return o
}

// Optional. Allows clients to store small amounts of arbitrary data. **Note**: This field is non-authoritative, and will
// only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
// the annotations present on the resource.
func (o DeveloperConnectGitRepositoryLinkOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Required. Git Clone URI.
func (o DeveloperConnectGitRepositoryLinkOutput) CloneUri() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.CloneUri }).(pulumi.StringOutput)
}

// Output only. [Output only] Create timestamp
func (o DeveloperConnectGitRepositoryLinkOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. [Output only] Delete timestamp
func (o DeveloperConnectGitRepositoryLinkOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

func (o DeveloperConnectGitRepositoryLinkOutput) DeveloperConnectGitRepositoryLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput {
		return v.DeveloperConnectGitRepositoryLinkId
	}).(pulumi.StringOutput)
}

func (o DeveloperConnectGitRepositoryLinkOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

func (o DeveloperConnectGitRepositoryLinkOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and
// delete requests to ensure the client has an up-to-date value before proceeding.
func (o DeveloperConnectGitRepositoryLinkOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
// This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
func (o DeveloperConnectGitRepositoryLinkOutput) GitRepositoryLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.GitRepositoryLinkId }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o DeveloperConnectGitRepositoryLinkOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
func (o DeveloperConnectGitRepositoryLinkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. Resource name of the repository, in the format 'projects/*/locations/*/connections/*/gitRepositoryLinks/*'.
func (o DeveloperConnectGitRepositoryLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
// https://google.aip.dev/122. See documentation for resource type 'developerconnect.googleapis.com/GitRepositoryLink'.
func (o DeveloperConnectGitRepositoryLinkOutput) ParentConnection() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.ParentConnection }).(pulumi.StringOutput)
}

func (o DeveloperConnectGitRepositoryLinkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. Set to true when the connection is being set up or updated in the background.
func (o DeveloperConnectGitRepositoryLinkOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DeveloperConnectGitRepositoryLinkOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DeveloperConnectGitRepositoryLinkOutput) Timeouts() DeveloperConnectGitRepositoryLinkTimeoutsPtrOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) DeveloperConnectGitRepositoryLinkTimeoutsPtrOutput {
		return v.Timeouts
	}).(DeveloperConnectGitRepositoryLinkTimeoutsPtrOutput)
}

// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
func (o DeveloperConnectGitRepositoryLinkOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. [Output only] Update timestamp
func (o DeveloperConnectGitRepositoryLinkOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeveloperConnectGitRepositoryLink) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeveloperConnectGitRepositoryLinkInput)(nil)).Elem(), &DeveloperConnectGitRepositoryLink{})
	pulumi.RegisterOutputType(DeveloperConnectGitRepositoryLinkOutput{})
}
