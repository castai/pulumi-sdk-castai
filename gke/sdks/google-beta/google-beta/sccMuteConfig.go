// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccMuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is organizations/{organization}/muteConfigs/{configId},
	// folders/{folder}/muteConfigs/{configId}, or projects/{project}/muteConfigs/{configId}
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource name of the new mute configs's parent. Its format is "organizations/[organization_id]", "folders/[folder_id]",
	// or "projects/[project_id]".
	Parent          pulumi.StringOutput            `pulumi:"parent"`
	SccMuteConfigId pulumi.StringOutput            `pulumi:"sccMuteConfigId"`
	Timeouts        SccMuteConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSccMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewSccMuteConfig(ctx *pulumi.Context,
	name string, args *SccMuteConfigArgs, opts ...pulumi.ResourceOption) (*SccMuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccMuteConfig
	err = ctx.RegisterPackageResource("google-beta:index/sccMuteConfig:SccMuteConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccMuteConfig gets an existing SccMuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccMuteConfigState, opts ...pulumi.ResourceOption) (*SccMuteConfig, error) {
	var resource SccMuteConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sccMuteConfig:SccMuteConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccMuteConfig resources.
type sccMuteConfigState struct {
	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime *string `pulumi:"createTime"`
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter *string `pulumi:"filter"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor *string `pulumi:"mostRecentEditor"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId *string `pulumi:"muteConfigId"`
	// Name of the mute config. Its format is organizations/{organization}/muteConfigs/{configId},
	// folders/{folder}/muteConfigs/{configId}, or projects/{project}/muteConfigs/{configId}
	Name *string `pulumi:"name"`
	// Resource name of the new mute configs's parent. Its format is "organizations/[organization_id]", "folders/[folder_id]",
	// or "projects/[project_id]".
	Parent          *string                `pulumi:"parent"`
	SccMuteConfigId *string                `pulumi:"sccMuteConfigId"`
	Timeouts        *SccMuteConfigTimeouts `pulumi:"timeouts"`
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime *string `pulumi:"updateTime"`
}

type SccMuteConfigState struct {
	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
	// creation.
	CreateTime pulumi.StringPtrInput
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringPtrInput
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
	// provided on config creation or update.
	MostRecentEditor pulumi.StringPtrInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringPtrInput
	// Name of the mute config. Its format is organizations/{organization}/muteConfigs/{configId},
	// folders/{folder}/muteConfigs/{configId}, or projects/{project}/muteConfigs/{configId}
	Name pulumi.StringPtrInput
	// Resource name of the new mute configs's parent. Its format is "organizations/[organization_id]", "folders/[folder_id]",
	// or "projects/[project_id]".
	Parent          pulumi.StringPtrInput
	SccMuteConfigId pulumi.StringPtrInput
	Timeouts        SccMuteConfigTimeoutsPtrInput
	// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
	// ignored if provided on config creation or update.
	UpdateTime pulumi.StringPtrInput
}

func (SccMuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccMuteConfigState)(nil)).Elem()
}

type sccMuteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter string `pulumi:"filter"`
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId string `pulumi:"muteConfigId"`
	// Resource name of the new mute configs's parent. Its format is "organizations/[organization_id]", "folders/[folder_id]",
	// or "projects/[project_id]".
	Parent          string                 `pulumi:"parent"`
	SccMuteConfigId *string                `pulumi:"sccMuteConfigId"`
	Timeouts        *SccMuteConfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SccMuteConfig resource.
type SccMuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
	// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
	// created under the project = Y scope, it might not match any findings.
	Filter pulumi.StringInput
	// Unique identifier provided by the client within the parent scope.
	MuteConfigId pulumi.StringInput
	// Resource name of the new mute configs's parent. Its format is "organizations/[organization_id]", "folders/[folder_id]",
	// or "projects/[project_id]".
	Parent          pulumi.StringInput
	SccMuteConfigId pulumi.StringPtrInput
	Timeouts        SccMuteConfigTimeoutsPtrInput
}

func (SccMuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccMuteConfigArgs)(nil)).Elem()
}

type SccMuteConfigInput interface {
	pulumi.Input

	ToSccMuteConfigOutput() SccMuteConfigOutput
	ToSccMuteConfigOutputWithContext(ctx context.Context) SccMuteConfigOutput
}

func (*SccMuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SccMuteConfig)(nil)).Elem()
}

func (i *SccMuteConfig) ToSccMuteConfigOutput() SccMuteConfigOutput {
	return i.ToSccMuteConfigOutputWithContext(context.Background())
}

func (i *SccMuteConfig) ToSccMuteConfigOutputWithContext(ctx context.Context) SccMuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccMuteConfigOutput)
}

type SccMuteConfigOutput struct{ *pulumi.OutputState }

func (SccMuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccMuteConfig)(nil)).Elem()
}

func (o SccMuteConfigOutput) ToSccMuteConfigOutput() SccMuteConfigOutput {
	return o
}

func (o SccMuteConfigOutput) ToSccMuteConfigOutputWithContext(ctx context.Context) SccMuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
// creation.
func (o SccMuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o SccMuteConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
// be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
// created under the project = Y scope, it might not match any findings.
func (o SccMuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
// provided on config creation or update.
func (o SccMuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Unique identifier provided by the client within the parent scope.
func (o SccMuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// Name of the mute config. Its format is organizations/{organization}/muteConfigs/{configId},
// folders/{folder}/muteConfigs/{configId}, or projects/{project}/muteConfigs/{configId}
func (o SccMuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource name of the new mute configs's parent. Its format is "organizations/[organization_id]", "folders/[folder_id]",
// or "projects/[project_id]".
func (o SccMuteConfigOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

func (o SccMuteConfigOutput) SccMuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.SccMuteConfigId }).(pulumi.StringOutput)
}

func (o SccMuteConfigOutput) Timeouts() SccMuteConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *SccMuteConfig) SccMuteConfigTimeoutsPtrOutput { return v.Timeouts }).(SccMuteConfigTimeoutsPtrOutput)
}

// Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
// ignored if provided on config creation or update.
func (o SccMuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SccMuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccMuteConfigInput)(nil)).Elem(), &SccMuteConfig{})
	pulumi.RegisterOutputType(SccMuteConfigOutput{})
}
