// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OsConfigGuestPolicies struct {
	pulumi.CustomResourceState

	// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by
	// different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are
	// targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of
	// multiple policies that conflict with each other. For more information, see how the service [handles assignment
	// conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
	Assignment OsConfigGuestPoliciesAssignmentOutput `pulumi:"assignment"`
	// Time this guest policy was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the guest policy. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The etag for this guest policy. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The logical name of the guest policy in the project with the following restrictions: * Must contain only lowercase
	// letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number
	// or a letter. * Must be unique within the project.
	GuestPolicyId pulumi.StringOutput `pulumi:"guestPolicyId"`
	// Unique name of the resource in this project using one of the following forms:
	// projects/{project_number}/guestPolicies/{guestPolicyId}.
	Name                    pulumi.StringOutput `pulumi:"name"`
	OsConfigGuestPoliciesId pulumi.StringOutput `pulumi:"osConfigGuestPoliciesId"`
	// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so
	// they can use these repos. Package repositories are only configured if the corresponding package manager(s) are
	// available.
	PackageRepositories OsConfigGuestPoliciesPackageRepositoryArrayOutput `pulumi:"packageRepositories"`
	// The software packages to be managed by this policy.
	Packages OsConfigGuestPoliciesPackageArrayOutput `pulumi:"packages"`
	Project  pulumi.StringOutput                     `pulumi:"project"`
	// A list of Recipes to install on the VM instance.
	Recipes  OsConfigGuestPoliciesRecipeArrayOutput `pulumi:"recipes"`
	Timeouts OsConfigGuestPoliciesTimeoutsPtrOutput `pulumi:"timeouts"`
	// Last time this guest policy was updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewOsConfigGuestPolicies registers a new resource with the given unique name, arguments, and options.
func NewOsConfigGuestPolicies(ctx *pulumi.Context,
	name string, args *OsConfigGuestPoliciesArgs, opts ...pulumi.ResourceOption) (*OsConfigGuestPolicies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Assignment == nil {
		return nil, errors.New("invalid value for required argument 'Assignment'")
	}
	if args.GuestPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'GuestPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource OsConfigGuestPolicies
	err = ctx.RegisterPackageResource("google-beta:index/osConfigGuestPolicies:OsConfigGuestPolicies", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOsConfigGuestPolicies gets an existing OsConfigGuestPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOsConfigGuestPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OsConfigGuestPoliciesState, opts ...pulumi.ResourceOption) (*OsConfigGuestPolicies, error) {
	var resource OsConfigGuestPolicies
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/osConfigGuestPolicies:OsConfigGuestPolicies", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OsConfigGuestPolicies resources.
type osConfigGuestPoliciesState struct {
	// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by
	// different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are
	// targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of
	// multiple policies that conflict with each other. For more information, see how the service [handles assignment
	// conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
	Assignment *OsConfigGuestPoliciesAssignment `pulumi:"assignment"`
	// Time this guest policy was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Description of the guest policy. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// The etag for this guest policy. If this is provided on update, it must match the server's etag.
	Etag *string `pulumi:"etag"`
	// The logical name of the guest policy in the project with the following restrictions: * Must contain only lowercase
	// letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number
	// or a letter. * Must be unique within the project.
	GuestPolicyId *string `pulumi:"guestPolicyId"`
	// Unique name of the resource in this project using one of the following forms:
	// projects/{project_number}/guestPolicies/{guestPolicyId}.
	Name                    *string `pulumi:"name"`
	OsConfigGuestPoliciesId *string `pulumi:"osConfigGuestPoliciesId"`
	// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so
	// they can use these repos. Package repositories are only configured if the corresponding package manager(s) are
	// available.
	PackageRepositories []OsConfigGuestPoliciesPackageRepository `pulumi:"packageRepositories"`
	// The software packages to be managed by this policy.
	Packages []OsConfigGuestPoliciesPackage `pulumi:"packages"`
	Project  *string                        `pulumi:"project"`
	// A list of Recipes to install on the VM instance.
	Recipes  []OsConfigGuestPoliciesRecipe  `pulumi:"recipes"`
	Timeouts *OsConfigGuestPoliciesTimeouts `pulumi:"timeouts"`
	// Last time this guest policy was updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type OsConfigGuestPoliciesState struct {
	// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by
	// different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are
	// targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of
	// multiple policies that conflict with each other. For more information, see how the service [handles assignment
	// conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
	Assignment OsConfigGuestPoliciesAssignmentPtrInput
	// Time this guest policy was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Description of the guest policy. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// The etag for this guest policy. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringPtrInput
	// The logical name of the guest policy in the project with the following restrictions: * Must contain only lowercase
	// letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number
	// or a letter. * Must be unique within the project.
	GuestPolicyId pulumi.StringPtrInput
	// Unique name of the resource in this project using one of the following forms:
	// projects/{project_number}/guestPolicies/{guestPolicyId}.
	Name                    pulumi.StringPtrInput
	OsConfigGuestPoliciesId pulumi.StringPtrInput
	// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so
	// they can use these repos. Package repositories are only configured if the corresponding package manager(s) are
	// available.
	PackageRepositories OsConfigGuestPoliciesPackageRepositoryArrayInput
	// The software packages to be managed by this policy.
	Packages OsConfigGuestPoliciesPackageArrayInput
	Project  pulumi.StringPtrInput
	// A list of Recipes to install on the VM instance.
	Recipes  OsConfigGuestPoliciesRecipeArrayInput
	Timeouts OsConfigGuestPoliciesTimeoutsPtrInput
	// Last time this guest policy was updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (OsConfigGuestPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*osConfigGuestPoliciesState)(nil)).Elem()
}

type osConfigGuestPoliciesArgs struct {
	// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by
	// different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are
	// targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of
	// multiple policies that conflict with each other. For more information, see how the service [handles assignment
	// conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
	Assignment OsConfigGuestPoliciesAssignment `pulumi:"assignment"`
	// Description of the guest policy. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// The etag for this guest policy. If this is provided on update, it must match the server's etag.
	Etag *string `pulumi:"etag"`
	// The logical name of the guest policy in the project with the following restrictions: * Must contain only lowercase
	// letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number
	// or a letter. * Must be unique within the project.
	GuestPolicyId           string  `pulumi:"guestPolicyId"`
	OsConfigGuestPoliciesId *string `pulumi:"osConfigGuestPoliciesId"`
	// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so
	// they can use these repos. Package repositories are only configured if the corresponding package manager(s) are
	// available.
	PackageRepositories []OsConfigGuestPoliciesPackageRepository `pulumi:"packageRepositories"`
	// The software packages to be managed by this policy.
	Packages []OsConfigGuestPoliciesPackage `pulumi:"packages"`
	Project  *string                        `pulumi:"project"`
	// A list of Recipes to install on the VM instance.
	Recipes  []OsConfigGuestPoliciesRecipe  `pulumi:"recipes"`
	Timeouts *OsConfigGuestPoliciesTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a OsConfigGuestPolicies resource.
type OsConfigGuestPoliciesArgs struct {
	// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by
	// different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are
	// targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of
	// multiple policies that conflict with each other. For more information, see how the service [handles assignment
	// conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
	Assignment OsConfigGuestPoliciesAssignmentInput
	// Description of the guest policy. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput
	// The etag for this guest policy. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringPtrInput
	// The logical name of the guest policy in the project with the following restrictions: * Must contain only lowercase
	// letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number
	// or a letter. * Must be unique within the project.
	GuestPolicyId           pulumi.StringInput
	OsConfigGuestPoliciesId pulumi.StringPtrInput
	// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so
	// they can use these repos. Package repositories are only configured if the corresponding package manager(s) are
	// available.
	PackageRepositories OsConfigGuestPoliciesPackageRepositoryArrayInput
	// The software packages to be managed by this policy.
	Packages OsConfigGuestPoliciesPackageArrayInput
	Project  pulumi.StringPtrInput
	// A list of Recipes to install on the VM instance.
	Recipes  OsConfigGuestPoliciesRecipeArrayInput
	Timeouts OsConfigGuestPoliciesTimeoutsPtrInput
}

func (OsConfigGuestPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*osConfigGuestPoliciesArgs)(nil)).Elem()
}

type OsConfigGuestPoliciesInput interface {
	pulumi.Input

	ToOsConfigGuestPoliciesOutput() OsConfigGuestPoliciesOutput
	ToOsConfigGuestPoliciesOutputWithContext(ctx context.Context) OsConfigGuestPoliciesOutput
}

func (*OsConfigGuestPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((**OsConfigGuestPolicies)(nil)).Elem()
}

func (i *OsConfigGuestPolicies) ToOsConfigGuestPoliciesOutput() OsConfigGuestPoliciesOutput {
	return i.ToOsConfigGuestPoliciesOutputWithContext(context.Background())
}

func (i *OsConfigGuestPolicies) ToOsConfigGuestPoliciesOutputWithContext(ctx context.Context) OsConfigGuestPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsConfigGuestPoliciesOutput)
}

type OsConfigGuestPoliciesOutput struct{ *pulumi.OutputState }

func (OsConfigGuestPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsConfigGuestPolicies)(nil)).Elem()
}

func (o OsConfigGuestPoliciesOutput) ToOsConfigGuestPoliciesOutput() OsConfigGuestPoliciesOutput {
	return o
}

func (o OsConfigGuestPoliciesOutput) ToOsConfigGuestPoliciesOutputWithContext(ctx context.Context) OsConfigGuestPoliciesOutput {
	return o
}

// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by
// different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are
// targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of
// multiple policies that conflict with each other. For more information, see how the service [handles assignment
// conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
func (o OsConfigGuestPoliciesOutput) Assignment() OsConfigGuestPoliciesAssignmentOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) OsConfigGuestPoliciesAssignmentOutput { return v.Assignment }).(OsConfigGuestPoliciesAssignmentOutput)
}

// Time this guest policy was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
// "2014-10-02T15:01:23.045123456Z".
func (o OsConfigGuestPoliciesOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the guest policy. Length of the description is limited to 1024 characters.
func (o OsConfigGuestPoliciesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The etag for this guest policy. If this is provided on update, it must match the server's etag.
func (o OsConfigGuestPoliciesOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The logical name of the guest policy in the project with the following restrictions: * Must contain only lowercase
// letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number
// or a letter. * Must be unique within the project.
func (o OsConfigGuestPoliciesOutput) GuestPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.GuestPolicyId }).(pulumi.StringOutput)
}

// Unique name of the resource in this project using one of the following forms:
// projects/{project_number}/guestPolicies/{guestPolicyId}.
func (o OsConfigGuestPoliciesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OsConfigGuestPoliciesOutput) OsConfigGuestPoliciesId() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.OsConfigGuestPoliciesId }).(pulumi.StringOutput)
}

// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so
// they can use these repos. Package repositories are only configured if the corresponding package manager(s) are
// available.
func (o OsConfigGuestPoliciesOutput) PackageRepositories() OsConfigGuestPoliciesPackageRepositoryArrayOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) OsConfigGuestPoliciesPackageRepositoryArrayOutput {
		return v.PackageRepositories
	}).(OsConfigGuestPoliciesPackageRepositoryArrayOutput)
}

// The software packages to be managed by this policy.
func (o OsConfigGuestPoliciesOutput) Packages() OsConfigGuestPoliciesPackageArrayOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) OsConfigGuestPoliciesPackageArrayOutput { return v.Packages }).(OsConfigGuestPoliciesPackageArrayOutput)
}

func (o OsConfigGuestPoliciesOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A list of Recipes to install on the VM instance.
func (o OsConfigGuestPoliciesOutput) Recipes() OsConfigGuestPoliciesRecipeArrayOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) OsConfigGuestPoliciesRecipeArrayOutput { return v.Recipes }).(OsConfigGuestPoliciesRecipeArrayOutput)
}

func (o OsConfigGuestPoliciesOutput) Timeouts() OsConfigGuestPoliciesTimeoutsPtrOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) OsConfigGuestPoliciesTimeoutsPtrOutput { return v.Timeouts }).(OsConfigGuestPoliciesTimeoutsPtrOutput)
}

// Last time this guest policy was updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
// "2014-10-02T15:01:23.045123456Z".
func (o OsConfigGuestPoliciesOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OsConfigGuestPolicies) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OsConfigGuestPoliciesInput)(nil)).Elem(), &OsConfigGuestPolicies{})
	pulumi.RegisterOutputType(OsConfigGuestPoliciesOutput{})
}
