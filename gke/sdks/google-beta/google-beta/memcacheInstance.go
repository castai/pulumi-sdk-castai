// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MemcacheInstance struct {
	pulumi.CustomResourceState

	// The full name of the GCE network to connect the instance to. If not provided, 'default' will be used.
	AuthorizedNetwork pulumi.StringOutput `pulumi:"authorizedNetwork"`
	// Creation timestamp in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Endpoint for Discovery API
	DiscoveryEndpoint pulumi.StringOutput `pulumi:"discoveryEndpoint"`
	// A user-visible name for the instance.
	DisplayName     pulumi.StringOutput    `pulumi:"displayName"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Maintenance policy for an instance.
	MaintenancePolicy MemcacheInstanceMaintenancePolicyPtrOutput `pulumi:"maintenancePolicy"`
	// Output only. Published maintenance schedule.
	MaintenanceSchedules MemcacheInstanceMaintenanceScheduleArrayOutput `pulumi:"maintenanceSchedules"`
	// The full version of memcached server running on this instance.
	MemcacheFullVersion pulumi.StringOutput `pulumi:"memcacheFullVersion"`
	MemcacheInstanceId  pulumi.StringOutput `pulumi:"memcacheInstanceId"`
	// Additional information about the instance state, if available.
	MemcacheNodes MemcacheInstanceMemcacheNodeArrayOutput `pulumi:"memcacheNodes"`
	// User-specified parameters for this memcache instance.
	MemcacheParameters MemcacheInstanceMemcacheParametersPtrOutput `pulumi:"memcacheParameters"`
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest
	// supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the
	// latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5", "MEMCACHE_1_6_15"]
	MemcacheVersion pulumi.StringPtrOutput `pulumi:"memcacheVersion"`
	// The resource name of the instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration for memcache nodes.
	NodeConfig MemcacheInstanceNodeConfigOutput `pulumi:"nodeConfig"`
	// Number of nodes in the memcache instance.
	NodeCount pulumi.Float64Output `pulumi:"nodeCount"`
	Project   pulumi.StringOutput  `pulumi:"project"`
	// The region of the Memcache instance. If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// Contains the name of allocated IP address ranges associated with the private service access connection for example,
	// "test-default" associated with IP range 10.0.0.0/29.
	ReservedIpRangeIds pulumi.StringArrayOutput `pulumi:"reservedIpRangeIds"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput            `pulumi:"terraformLabels"`
	Timeouts        MemcacheInstanceTimeoutsPtrOutput `pulumi:"timeouts"`
	// Zones where memcache nodes should be provisioned. If not provided, all zones will be used.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewMemcacheInstance registers a new resource with the given unique name, arguments, and options.
func NewMemcacheInstance(ctx *pulumi.Context,
	name string, args *MemcacheInstanceArgs, opts ...pulumi.ResourceOption) (*MemcacheInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeConfig == nil {
		return nil, errors.New("invalid value for required argument 'NodeConfig'")
	}
	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource MemcacheInstance
	err = ctx.RegisterPackageResource("google-beta:index/memcacheInstance:MemcacheInstance", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMemcacheInstance gets an existing MemcacheInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMemcacheInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemcacheInstanceState, opts ...pulumi.ResourceOption) (*MemcacheInstance, error) {
	var resource MemcacheInstance
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/memcacheInstance:MemcacheInstance", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MemcacheInstance resources.
type memcacheInstanceState struct {
	// The full name of the GCE network to connect the instance to. If not provided, 'default' will be used.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// Creation timestamp in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// Endpoint for Discovery API
	DiscoveryEndpoint *string `pulumi:"discoveryEndpoint"`
	// A user-visible name for the instance.
	DisplayName     *string           `pulumi:"displayName"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance policy for an instance.
	MaintenancePolicy *MemcacheInstanceMaintenancePolicy `pulumi:"maintenancePolicy"`
	// Output only. Published maintenance schedule.
	MaintenanceSchedules []MemcacheInstanceMaintenanceSchedule `pulumi:"maintenanceSchedules"`
	// The full version of memcached server running on this instance.
	MemcacheFullVersion *string `pulumi:"memcacheFullVersion"`
	MemcacheInstanceId  *string `pulumi:"memcacheInstanceId"`
	// Additional information about the instance state, if available.
	MemcacheNodes []MemcacheInstanceMemcacheNode `pulumi:"memcacheNodes"`
	// User-specified parameters for this memcache instance.
	MemcacheParameters *MemcacheInstanceMemcacheParameters `pulumi:"memcacheParameters"`
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest
	// supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the
	// latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5", "MEMCACHE_1_6_15"]
	MemcacheVersion *string `pulumi:"memcacheVersion"`
	// The resource name of the instance.
	Name *string `pulumi:"name"`
	// Configuration for memcache nodes.
	NodeConfig *MemcacheInstanceNodeConfig `pulumi:"nodeConfig"`
	// Number of nodes in the memcache instance.
	NodeCount *float64 `pulumi:"nodeCount"`
	Project   *string  `pulumi:"project"`
	// The region of the Memcache instance. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// Contains the name of allocated IP address ranges associated with the private service access connection for example,
	// "test-default" associated with IP range 10.0.0.0/29.
	ReservedIpRangeIds []string `pulumi:"reservedIpRangeIds"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string         `pulumi:"terraformLabels"`
	Timeouts        *MemcacheInstanceTimeouts `pulumi:"timeouts"`
	// Zones where memcache nodes should be provisioned. If not provided, all zones will be used.
	Zones []string `pulumi:"zones"`
}

type MemcacheInstanceState struct {
	// The full name of the GCE network to connect the instance to. If not provided, 'default' will be used.
	AuthorizedNetwork pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// Endpoint for Discovery API
	DiscoveryEndpoint pulumi.StringPtrInput
	// A user-visible name for the instance.
	DisplayName     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Maintenance policy for an instance.
	MaintenancePolicy MemcacheInstanceMaintenancePolicyPtrInput
	// Output only. Published maintenance schedule.
	MaintenanceSchedules MemcacheInstanceMaintenanceScheduleArrayInput
	// The full version of memcached server running on this instance.
	MemcacheFullVersion pulumi.StringPtrInput
	MemcacheInstanceId  pulumi.StringPtrInput
	// Additional information about the instance state, if available.
	MemcacheNodes MemcacheInstanceMemcacheNodeArrayInput
	// User-specified parameters for this memcache instance.
	MemcacheParameters MemcacheInstanceMemcacheParametersPtrInput
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest
	// supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the
	// latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5", "MEMCACHE_1_6_15"]
	MemcacheVersion pulumi.StringPtrInput
	// The resource name of the instance.
	Name pulumi.StringPtrInput
	// Configuration for memcache nodes.
	NodeConfig MemcacheInstanceNodeConfigPtrInput
	// Number of nodes in the memcache instance.
	NodeCount pulumi.Float64PtrInput
	Project   pulumi.StringPtrInput
	// The region of the Memcache instance. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// Contains the name of allocated IP address ranges associated with the private service access connection for example,
	// "test-default" associated with IP range 10.0.0.0/29.
	ReservedIpRangeIds pulumi.StringArrayInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        MemcacheInstanceTimeoutsPtrInput
	// Zones where memcache nodes should be provisioned. If not provided, all zones will be used.
	Zones pulumi.StringArrayInput
}

func (MemcacheInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*memcacheInstanceState)(nil)).Elem()
}

type memcacheInstanceArgs struct {
	// The full name of the GCE network to connect the instance to. If not provided, 'default' will be used.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// A user-visible name for the instance.
	DisplayName *string `pulumi:"displayName"`
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance policy for an instance.
	MaintenancePolicy  *MemcacheInstanceMaintenancePolicy `pulumi:"maintenancePolicy"`
	MemcacheInstanceId *string                            `pulumi:"memcacheInstanceId"`
	// User-specified parameters for this memcache instance.
	MemcacheParameters *MemcacheInstanceMemcacheParameters `pulumi:"memcacheParameters"`
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest
	// supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the
	// latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5", "MEMCACHE_1_6_15"]
	MemcacheVersion *string `pulumi:"memcacheVersion"`
	// The resource name of the instance.
	Name *string `pulumi:"name"`
	// Configuration for memcache nodes.
	NodeConfig MemcacheInstanceNodeConfig `pulumi:"nodeConfig"`
	// Number of nodes in the memcache instance.
	NodeCount float64 `pulumi:"nodeCount"`
	Project   *string `pulumi:"project"`
	// The region of the Memcache instance. If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// Contains the name of allocated IP address ranges associated with the private service access connection for example,
	// "test-default" associated with IP range 10.0.0.0/29.
	ReservedIpRangeIds []string                  `pulumi:"reservedIpRangeIds"`
	Timeouts           *MemcacheInstanceTimeouts `pulumi:"timeouts"`
	// Zones where memcache nodes should be provisioned. If not provided, all zones will be used.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a MemcacheInstance resource.
type MemcacheInstanceArgs struct {
	// The full name of the GCE network to connect the instance to. If not provided, 'default' will be used.
	AuthorizedNetwork pulumi.StringPtrInput
	// A user-visible name for the instance.
	DisplayName pulumi.StringPtrInput
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Maintenance policy for an instance.
	MaintenancePolicy  MemcacheInstanceMaintenancePolicyPtrInput
	MemcacheInstanceId pulumi.StringPtrInput
	// User-specified parameters for this memcache instance.
	MemcacheParameters MemcacheInstanceMemcacheParametersPtrInput
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest
	// supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the
	// latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5", "MEMCACHE_1_6_15"]
	MemcacheVersion pulumi.StringPtrInput
	// The resource name of the instance.
	Name pulumi.StringPtrInput
	// Configuration for memcache nodes.
	NodeConfig MemcacheInstanceNodeConfigInput
	// Number of nodes in the memcache instance.
	NodeCount pulumi.Float64Input
	Project   pulumi.StringPtrInput
	// The region of the Memcache instance. If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// Contains the name of allocated IP address ranges associated with the private service access connection for example,
	// "test-default" associated with IP range 10.0.0.0/29.
	ReservedIpRangeIds pulumi.StringArrayInput
	Timeouts           MemcacheInstanceTimeoutsPtrInput
	// Zones where memcache nodes should be provisioned. If not provided, all zones will be used.
	Zones pulumi.StringArrayInput
}

func (MemcacheInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memcacheInstanceArgs)(nil)).Elem()
}

type MemcacheInstanceInput interface {
	pulumi.Input

	ToMemcacheInstanceOutput() MemcacheInstanceOutput
	ToMemcacheInstanceOutputWithContext(ctx context.Context) MemcacheInstanceOutput
}

func (*MemcacheInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheInstance)(nil)).Elem()
}

func (i *MemcacheInstance) ToMemcacheInstanceOutput() MemcacheInstanceOutput {
	return i.ToMemcacheInstanceOutputWithContext(context.Background())
}

func (i *MemcacheInstance) ToMemcacheInstanceOutputWithContext(ctx context.Context) MemcacheInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheInstanceOutput)
}

type MemcacheInstanceOutput struct{ *pulumi.OutputState }

func (MemcacheInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheInstance)(nil)).Elem()
}

func (o MemcacheInstanceOutput) ToMemcacheInstanceOutput() MemcacheInstanceOutput {
	return o
}

func (o MemcacheInstanceOutput) ToMemcacheInstanceOutputWithContext(ctx context.Context) MemcacheInstanceOutput {
	return o
}

// The full name of the GCE network to connect the instance to. If not provided, 'default' will be used.
func (o MemcacheInstanceOutput) AuthorizedNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.AuthorizedNetwork }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o MemcacheInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Endpoint for Discovery API
func (o MemcacheInstanceOutput) DiscoveryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.DiscoveryEndpoint }).(pulumi.StringOutput)
}

// A user-visible name for the instance.
func (o MemcacheInstanceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o MemcacheInstanceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o MemcacheInstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance policy for an instance.
func (o MemcacheInstanceOutput) MaintenancePolicy() MemcacheInstanceMaintenancePolicyPtrOutput {
	return o.ApplyT(func(v *MemcacheInstance) MemcacheInstanceMaintenancePolicyPtrOutput { return v.MaintenancePolicy }).(MemcacheInstanceMaintenancePolicyPtrOutput)
}

// Output only. Published maintenance schedule.
func (o MemcacheInstanceOutput) MaintenanceSchedules() MemcacheInstanceMaintenanceScheduleArrayOutput {
	return o.ApplyT(func(v *MemcacheInstance) MemcacheInstanceMaintenanceScheduleArrayOutput {
		return v.MaintenanceSchedules
	}).(MemcacheInstanceMaintenanceScheduleArrayOutput)
}

// The full version of memcached server running on this instance.
func (o MemcacheInstanceOutput) MemcacheFullVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.MemcacheFullVersion }).(pulumi.StringOutput)
}

func (o MemcacheInstanceOutput) MemcacheInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.MemcacheInstanceId }).(pulumi.StringOutput)
}

// Additional information about the instance state, if available.
func (o MemcacheInstanceOutput) MemcacheNodes() MemcacheInstanceMemcacheNodeArrayOutput {
	return o.ApplyT(func(v *MemcacheInstance) MemcacheInstanceMemcacheNodeArrayOutput { return v.MemcacheNodes }).(MemcacheInstanceMemcacheNodeArrayOutput)
}

// User-specified parameters for this memcache instance.
func (o MemcacheInstanceOutput) MemcacheParameters() MemcacheInstanceMemcacheParametersPtrOutput {
	return o.ApplyT(func(v *MemcacheInstance) MemcacheInstanceMemcacheParametersPtrOutput { return v.MemcacheParameters }).(MemcacheInstanceMemcacheParametersPtrOutput)
}

// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest
// supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the
// latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5", "MEMCACHE_1_6_15"]
func (o MemcacheInstanceOutput) MemcacheVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringPtrOutput { return v.MemcacheVersion }).(pulumi.StringPtrOutput)
}

// The resource name of the instance.
func (o MemcacheInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration for memcache nodes.
func (o MemcacheInstanceOutput) NodeConfig() MemcacheInstanceNodeConfigOutput {
	return o.ApplyT(func(v *MemcacheInstance) MemcacheInstanceNodeConfigOutput { return v.NodeConfig }).(MemcacheInstanceNodeConfigOutput)
}

// Number of nodes in the memcache instance.
func (o MemcacheInstanceOutput) NodeCount() pulumi.Float64Output {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.Float64Output { return v.NodeCount }).(pulumi.Float64Output)
}

func (o MemcacheInstanceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of the Memcache instance. If it is not provided, the provider region is used.
func (o MemcacheInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Contains the name of allocated IP address ranges associated with the private service access connection for example,
// "test-default" associated with IP range 10.0.0.0/29.
func (o MemcacheInstanceOutput) ReservedIpRangeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringArrayOutput { return v.ReservedIpRangeIds }).(pulumi.StringArrayOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o MemcacheInstanceOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o MemcacheInstanceOutput) Timeouts() MemcacheInstanceTimeoutsPtrOutput {
	return o.ApplyT(func(v *MemcacheInstance) MemcacheInstanceTimeoutsPtrOutput { return v.Timeouts }).(MemcacheInstanceTimeoutsPtrOutput)
}

// Zones where memcache nodes should be provisioned. If not provided, all zones will be used.
func (o MemcacheInstanceOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MemcacheInstance) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MemcacheInstanceInput)(nil)).Elem(), &MemcacheInstance{})
	pulumi.RegisterOutputType(MemcacheInstanceOutput{})
}
