// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubLiteTopic struct {
	pulumi.CustomResourceState

	// Name of the topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig   PubsubLiteTopicPartitionConfigPtrOutput `pulumi:"partitionConfig"`
	Project           pulumi.StringOutput                     `pulumi:"project"`
	PubsubLiteTopicId pulumi.StringOutput                     `pulumi:"pubsubLiteTopicId"`
	// The region of the pubsub lite topic.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The settings for this topic's Reservation usage.
	ReservationConfig PubsubLiteTopicReservationConfigPtrOutput `pulumi:"reservationConfig"`
	// The settings for a topic's message retention.
	RetentionConfig PubsubLiteTopicRetentionConfigPtrOutput `pulumi:"retentionConfig"`
	Timeouts        PubsubLiteTopicTimeoutsPtrOutput        `pulumi:"timeouts"`
	// The zone of the pubsub lite topic.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewPubsubLiteTopic registers a new resource with the given unique name, arguments, and options.
func NewPubsubLiteTopic(ctx *pulumi.Context,
	name string, args *PubsubLiteTopicArgs, opts ...pulumi.ResourceOption) (*PubsubLiteTopic, error) {
	if args == nil {
		args = &PubsubLiteTopicArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubLiteTopic
	err = ctx.RegisterPackageResource("google-beta:index/pubsubLiteTopic:PubsubLiteTopic", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubLiteTopic gets an existing PubsubLiteTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubLiteTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubLiteTopicState, opts ...pulumi.ResourceOption) (*PubsubLiteTopic, error) {
	var resource PubsubLiteTopic
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/pubsubLiteTopic:PubsubLiteTopic", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubLiteTopic resources.
type pubsubLiteTopicState struct {
	// Name of the topic.
	Name *string `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig   *PubsubLiteTopicPartitionConfig `pulumi:"partitionConfig"`
	Project           *string                         `pulumi:"project"`
	PubsubLiteTopicId *string                         `pulumi:"pubsubLiteTopicId"`
	// The region of the pubsub lite topic.
	Region *string `pulumi:"region"`
	// The settings for this topic's Reservation usage.
	ReservationConfig *PubsubLiteTopicReservationConfig `pulumi:"reservationConfig"`
	// The settings for a topic's message retention.
	RetentionConfig *PubsubLiteTopicRetentionConfig `pulumi:"retentionConfig"`
	Timeouts        *PubsubLiteTopicTimeouts        `pulumi:"timeouts"`
	// The zone of the pubsub lite topic.
	Zone *string `pulumi:"zone"`
}

type PubsubLiteTopicState struct {
	// Name of the topic.
	Name pulumi.StringPtrInput
	// The settings for this topic's partitions.
	PartitionConfig   PubsubLiteTopicPartitionConfigPtrInput
	Project           pulumi.StringPtrInput
	PubsubLiteTopicId pulumi.StringPtrInput
	// The region of the pubsub lite topic.
	Region pulumi.StringPtrInput
	// The settings for this topic's Reservation usage.
	ReservationConfig PubsubLiteTopicReservationConfigPtrInput
	// The settings for a topic's message retention.
	RetentionConfig PubsubLiteTopicRetentionConfigPtrInput
	Timeouts        PubsubLiteTopicTimeoutsPtrInput
	// The zone of the pubsub lite topic.
	Zone pulumi.StringPtrInput
}

func (PubsubLiteTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubLiteTopicState)(nil)).Elem()
}

type pubsubLiteTopicArgs struct {
	// Name of the topic.
	Name *string `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig   *PubsubLiteTopicPartitionConfig `pulumi:"partitionConfig"`
	Project           *string                         `pulumi:"project"`
	PubsubLiteTopicId *string                         `pulumi:"pubsubLiteTopicId"`
	// The region of the pubsub lite topic.
	Region *string `pulumi:"region"`
	// The settings for this topic's Reservation usage.
	ReservationConfig *PubsubLiteTopicReservationConfig `pulumi:"reservationConfig"`
	// The settings for a topic's message retention.
	RetentionConfig *PubsubLiteTopicRetentionConfig `pulumi:"retentionConfig"`
	Timeouts        *PubsubLiteTopicTimeouts        `pulumi:"timeouts"`
	// The zone of the pubsub lite topic.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PubsubLiteTopic resource.
type PubsubLiteTopicArgs struct {
	// Name of the topic.
	Name pulumi.StringPtrInput
	// The settings for this topic's partitions.
	PartitionConfig   PubsubLiteTopicPartitionConfigPtrInput
	Project           pulumi.StringPtrInput
	PubsubLiteTopicId pulumi.StringPtrInput
	// The region of the pubsub lite topic.
	Region pulumi.StringPtrInput
	// The settings for this topic's Reservation usage.
	ReservationConfig PubsubLiteTopicReservationConfigPtrInput
	// The settings for a topic's message retention.
	RetentionConfig PubsubLiteTopicRetentionConfigPtrInput
	Timeouts        PubsubLiteTopicTimeoutsPtrInput
	// The zone of the pubsub lite topic.
	Zone pulumi.StringPtrInput
}

func (PubsubLiteTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubLiteTopicArgs)(nil)).Elem()
}

type PubsubLiteTopicInput interface {
	pulumi.Input

	ToPubsubLiteTopicOutput() PubsubLiteTopicOutput
	ToPubsubLiteTopicOutputWithContext(ctx context.Context) PubsubLiteTopicOutput
}

func (*PubsubLiteTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubLiteTopic)(nil)).Elem()
}

func (i *PubsubLiteTopic) ToPubsubLiteTopicOutput() PubsubLiteTopicOutput {
	return i.ToPubsubLiteTopicOutputWithContext(context.Background())
}

func (i *PubsubLiteTopic) ToPubsubLiteTopicOutputWithContext(ctx context.Context) PubsubLiteTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubLiteTopicOutput)
}

type PubsubLiteTopicOutput struct{ *pulumi.OutputState }

func (PubsubLiteTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubLiteTopic)(nil)).Elem()
}

func (o PubsubLiteTopicOutput) ToPubsubLiteTopicOutput() PubsubLiteTopicOutput {
	return o
}

func (o PubsubLiteTopicOutput) ToPubsubLiteTopicOutputWithContext(ctx context.Context) PubsubLiteTopicOutput {
	return o
}

// Name of the topic.
func (o PubsubLiteTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The settings for this topic's partitions.
func (o PubsubLiteTopicOutput) PartitionConfig() PubsubLiteTopicPartitionConfigPtrOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) PubsubLiteTopicPartitionConfigPtrOutput { return v.PartitionConfig }).(PubsubLiteTopicPartitionConfigPtrOutput)
}

func (o PubsubLiteTopicOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubLiteTopicOutput) PubsubLiteTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) pulumi.StringOutput { return v.PubsubLiteTopicId }).(pulumi.StringOutput)
}

// The region of the pubsub lite topic.
func (o PubsubLiteTopicOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The settings for this topic's Reservation usage.
func (o PubsubLiteTopicOutput) ReservationConfig() PubsubLiteTopicReservationConfigPtrOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) PubsubLiteTopicReservationConfigPtrOutput { return v.ReservationConfig }).(PubsubLiteTopicReservationConfigPtrOutput)
}

// The settings for a topic's message retention.
func (o PubsubLiteTopicOutput) RetentionConfig() PubsubLiteTopicRetentionConfigPtrOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) PubsubLiteTopicRetentionConfigPtrOutput { return v.RetentionConfig }).(PubsubLiteTopicRetentionConfigPtrOutput)
}

func (o PubsubLiteTopicOutput) Timeouts() PubsubLiteTopicTimeoutsPtrOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) PubsubLiteTopicTimeoutsPtrOutput { return v.Timeouts }).(PubsubLiteTopicTimeoutsPtrOutput)
}

// The zone of the pubsub lite topic.
func (o PubsubLiteTopicOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubLiteTopic) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubLiteTopicInput)(nil)).Elem(), &PubsubLiteTopic{})
	pulumi.RegisterOutputType(PubsubLiteTopicOutput{})
}
