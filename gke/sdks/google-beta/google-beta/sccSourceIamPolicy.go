// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccSourceIamPolicy struct {
	pulumi.CustomResourceState

	Etag                 pulumi.StringOutput `pulumi:"etag"`
	Organization         pulumi.StringOutput `pulumi:"organization"`
	PolicyData           pulumi.StringOutput `pulumi:"policyData"`
	SccSourceIamPolicyId pulumi.StringOutput `pulumi:"sccSourceIamPolicyId"`
	Source               pulumi.StringOutput `pulumi:"source"`
}

// NewSccSourceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewSccSourceIamPolicy(ctx *pulumi.Context,
	name string, args *SccSourceIamPolicyArgs, opts ...pulumi.ResourceOption) (*SccSourceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccSourceIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/sccSourceIamPolicy:SccSourceIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccSourceIamPolicy gets an existing SccSourceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccSourceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccSourceIamPolicyState, opts ...pulumi.ResourceOption) (*SccSourceIamPolicy, error) {
	var resource SccSourceIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sccSourceIamPolicy:SccSourceIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccSourceIamPolicy resources.
type sccSourceIamPolicyState struct {
	Etag                 *string `pulumi:"etag"`
	Organization         *string `pulumi:"organization"`
	PolicyData           *string `pulumi:"policyData"`
	SccSourceIamPolicyId *string `pulumi:"sccSourceIamPolicyId"`
	Source               *string `pulumi:"source"`
}

type SccSourceIamPolicyState struct {
	Etag                 pulumi.StringPtrInput
	Organization         pulumi.StringPtrInput
	PolicyData           pulumi.StringPtrInput
	SccSourceIamPolicyId pulumi.StringPtrInput
	Source               pulumi.StringPtrInput
}

func (SccSourceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccSourceIamPolicyState)(nil)).Elem()
}

type sccSourceIamPolicyArgs struct {
	Organization         string  `pulumi:"organization"`
	PolicyData           string  `pulumi:"policyData"`
	SccSourceIamPolicyId *string `pulumi:"sccSourceIamPolicyId"`
	Source               string  `pulumi:"source"`
}

// The set of arguments for constructing a SccSourceIamPolicy resource.
type SccSourceIamPolicyArgs struct {
	Organization         pulumi.StringInput
	PolicyData           pulumi.StringInput
	SccSourceIamPolicyId pulumi.StringPtrInput
	Source               pulumi.StringInput
}

func (SccSourceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccSourceIamPolicyArgs)(nil)).Elem()
}

type SccSourceIamPolicyInput interface {
	pulumi.Input

	ToSccSourceIamPolicyOutput() SccSourceIamPolicyOutput
	ToSccSourceIamPolicyOutputWithContext(ctx context.Context) SccSourceIamPolicyOutput
}

func (*SccSourceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SccSourceIamPolicy)(nil)).Elem()
}

func (i *SccSourceIamPolicy) ToSccSourceIamPolicyOutput() SccSourceIamPolicyOutput {
	return i.ToSccSourceIamPolicyOutputWithContext(context.Background())
}

func (i *SccSourceIamPolicy) ToSccSourceIamPolicyOutputWithContext(ctx context.Context) SccSourceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccSourceIamPolicyOutput)
}

type SccSourceIamPolicyOutput struct{ *pulumi.OutputState }

func (SccSourceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccSourceIamPolicy)(nil)).Elem()
}

func (o SccSourceIamPolicyOutput) ToSccSourceIamPolicyOutput() SccSourceIamPolicyOutput {
	return o
}

func (o SccSourceIamPolicyOutput) ToSccSourceIamPolicyOutputWithContext(ctx context.Context) SccSourceIamPolicyOutput {
	return o
}

func (o SccSourceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SccSourceIamPolicyOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamPolicy) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SccSourceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o SccSourceIamPolicyOutput) SccSourceIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamPolicy) pulumi.StringOutput { return v.SccSourceIamPolicyId }).(pulumi.StringOutput)
}

func (o SccSourceIamPolicyOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamPolicy) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccSourceIamPolicyInput)(nil)).Elem(), &SccSourceIamPolicy{})
	pulumi.RegisterOutputType(SccSourceIamPolicyOutput{})
}
