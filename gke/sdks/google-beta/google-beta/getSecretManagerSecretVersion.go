// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSecretManagerSecretVersion(ctx *pulumi.Context, args *LookupSecretManagerSecretVersionArgs, opts ...pulumi.InvokeOption) (*LookupSecretManagerSecretVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupSecretManagerSecretVersionResult
	err = ctx.InvokePackage("google-beta:index/getSecretManagerSecretVersion:getSecretManagerSecretVersion", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretManagerSecretVersion.
type LookupSecretManagerSecretVersionArgs struct {
	Id                 *string `pulumi:"id"`
	IsSecretDataBase64 *bool   `pulumi:"isSecretDataBase64"`
	Project            *string `pulumi:"project"`
	Secret             string  `pulumi:"secret"`
	Version            *string `pulumi:"version"`
}

// A collection of values returned by getSecretManagerSecretVersion.
type LookupSecretManagerSecretVersionResult struct {
	CreateTime         string `pulumi:"createTime"`
	DestroyTime        string `pulumi:"destroyTime"`
	Enabled            bool   `pulumi:"enabled"`
	Id                 string `pulumi:"id"`
	IsSecretDataBase64 *bool  `pulumi:"isSecretDataBase64"`
	Name               string `pulumi:"name"`
	Project            string `pulumi:"project"`
	Secret             string `pulumi:"secret"`
	SecretData         string `pulumi:"secretData"`
	Version            string `pulumi:"version"`
}

func LookupSecretManagerSecretVersionOutput(ctx *pulumi.Context, args LookupSecretManagerSecretVersionOutputArgs, opts ...pulumi.InvokeOption) LookupSecretManagerSecretVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecretManagerSecretVersionResultOutput, error) {
			args := v.(LookupSecretManagerSecretVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupSecretManagerSecretVersionResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google-beta:index/getSecretManagerSecretVersion:getSecretManagerSecretVersion", args, LookupSecretManagerSecretVersionResultOutput{}, options).(LookupSecretManagerSecretVersionResultOutput), nil
		}).(LookupSecretManagerSecretVersionResultOutput)
}

// A collection of arguments for invoking getSecretManagerSecretVersion.
type LookupSecretManagerSecretVersionOutputArgs struct {
	Id                 pulumi.StringPtrInput `pulumi:"id"`
	IsSecretDataBase64 pulumi.BoolPtrInput   `pulumi:"isSecretDataBase64"`
	Project            pulumi.StringPtrInput `pulumi:"project"`
	Secret             pulumi.StringInput    `pulumi:"secret"`
	Version            pulumi.StringPtrInput `pulumi:"version"`
}

func (LookupSecretManagerSecretVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretManagerSecretVersionArgs)(nil)).Elem()
}

// A collection of values returned by getSecretManagerSecretVersion.
type LookupSecretManagerSecretVersionResultOutput struct{ *pulumi.OutputState }

func (LookupSecretManagerSecretVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretManagerSecretVersionResult)(nil)).Elem()
}

func (o LookupSecretManagerSecretVersionResultOutput) ToLookupSecretManagerSecretVersionResultOutput() LookupSecretManagerSecretVersionResultOutput {
	return o
}

func (o LookupSecretManagerSecretVersionResultOutput) ToLookupSecretManagerSecretVersionResultOutputWithContext(ctx context.Context) LookupSecretManagerSecretVersionResultOutput {
	return o
}

func (o LookupSecretManagerSecretVersionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) DestroyTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.DestroyTime }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) IsSecretDataBase64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) *bool { return v.IsSecretDataBase64 }).(pulumi.BoolPtrOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.Secret }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) SecretData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.SecretData }).(pulumi.StringOutput)
}

func (o LookupSecretManagerSecretVersionResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretManagerSecretVersionResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecretManagerSecretVersionResultOutput{})
}
