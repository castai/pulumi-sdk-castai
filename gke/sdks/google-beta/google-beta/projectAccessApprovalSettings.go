// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectAccessApprovalSettings struct {
	pulumi.CustomResourceState

	// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
	// Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
	// new non-empty values may not be set.
	ActiveKeyVersion pulumi.StringPtrOutput `pulumi:"activeKeyVersion"`
	// If the field is true, that indicates that an ancestor of this Project has set active_key_version.
	AncestorHasActiveKeyVersion pulumi.BoolOutput `pulumi:"ancestorHasActiveKeyVersion"`
	// If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
	// of the Project.
	EnrolledAncestor pulumi.BoolOutput `pulumi:"enrolledAncestor"`
	// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
	// resource given by name against any of these services contained here will be required to have explicit approval.
	// Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
	// expanded as the set of supported services is expanded.
	EnrolledServices ProjectAccessApprovalSettingsEnrolledServiceArrayOutput `pulumi:"enrolledServices"`
	// If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
	// this Project (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it,
	// etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited
	// top-down.
	InvalidKeyVersion pulumi.BoolOutput `pulumi:"invalidKeyVersion"`
	// The resource name of the settings. Format is "projects/{project_id}/accessApprovalSettings"
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
	// a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
	// addresses are allowed.
	NotificationEmails pulumi.StringArrayOutput `pulumi:"notificationEmails"`
	// Project id.
	//
	// Deprecated: Deprecated
	Project                         pulumi.StringPtrOutput `pulumi:"project"`
	ProjectAccessApprovalSettingsId pulumi.StringOutput    `pulumi:"projectAccessApprovalSettingsId"`
	// ID of the project of the access approval settings.
	ProjectId pulumi.StringOutput                            `pulumi:"projectId"`
	Timeouts  ProjectAccessApprovalSettingsTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewProjectAccessApprovalSettings registers a new resource with the given unique name, arguments, and options.
func NewProjectAccessApprovalSettings(ctx *pulumi.Context,
	name string, args *ProjectAccessApprovalSettingsArgs, opts ...pulumi.ResourceOption) (*ProjectAccessApprovalSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnrolledServices == nil {
		return nil, errors.New("invalid value for required argument 'EnrolledServices'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectAccessApprovalSettings
	err = ctx.RegisterPackageResource("google-beta:index/projectAccessApprovalSettings:ProjectAccessApprovalSettings", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectAccessApprovalSettings gets an existing ProjectAccessApprovalSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectAccessApprovalSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectAccessApprovalSettingsState, opts ...pulumi.ResourceOption) (*ProjectAccessApprovalSettings, error) {
	var resource ProjectAccessApprovalSettings
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/projectAccessApprovalSettings:ProjectAccessApprovalSettings", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectAccessApprovalSettings resources.
type projectAccessApprovalSettingsState struct {
	// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
	// Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
	// new non-empty values may not be set.
	ActiveKeyVersion *string `pulumi:"activeKeyVersion"`
	// If the field is true, that indicates that an ancestor of this Project has set active_key_version.
	AncestorHasActiveKeyVersion *bool `pulumi:"ancestorHasActiveKeyVersion"`
	// If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
	// of the Project.
	EnrolledAncestor *bool `pulumi:"enrolledAncestor"`
	// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
	// resource given by name against any of these services contained here will be required to have explicit approval.
	// Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
	// expanded as the set of supported services is expanded.
	EnrolledServices []ProjectAccessApprovalSettingsEnrolledService `pulumi:"enrolledServices"`
	// If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
	// this Project (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it,
	// etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited
	// top-down.
	InvalidKeyVersion *bool `pulumi:"invalidKeyVersion"`
	// The resource name of the settings. Format is "projects/{project_id}/accessApprovalSettings"
	Name *string `pulumi:"name"`
	// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
	// a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
	// addresses are allowed.
	NotificationEmails []string `pulumi:"notificationEmails"`
	// Project id.
	//
	// Deprecated: Deprecated
	Project                         *string `pulumi:"project"`
	ProjectAccessApprovalSettingsId *string `pulumi:"projectAccessApprovalSettingsId"`
	// ID of the project of the access approval settings.
	ProjectId *string                                `pulumi:"projectId"`
	Timeouts  *ProjectAccessApprovalSettingsTimeouts `pulumi:"timeouts"`
}

type ProjectAccessApprovalSettingsState struct {
	// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
	// Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
	// new non-empty values may not be set.
	ActiveKeyVersion pulumi.StringPtrInput
	// If the field is true, that indicates that an ancestor of this Project has set active_key_version.
	AncestorHasActiveKeyVersion pulumi.BoolPtrInput
	// If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
	// of the Project.
	EnrolledAncestor pulumi.BoolPtrInput
	// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
	// resource given by name against any of these services contained here will be required to have explicit approval.
	// Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
	// expanded as the set of supported services is expanded.
	EnrolledServices ProjectAccessApprovalSettingsEnrolledServiceArrayInput
	// If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
	// this Project (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it,
	// etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited
	// top-down.
	InvalidKeyVersion pulumi.BoolPtrInput
	// The resource name of the settings. Format is "projects/{project_id}/accessApprovalSettings"
	Name pulumi.StringPtrInput
	// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
	// a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
	// addresses are allowed.
	NotificationEmails pulumi.StringArrayInput
	// Project id.
	//
	// Deprecated: Deprecated
	Project                         pulumi.StringPtrInput
	ProjectAccessApprovalSettingsId pulumi.StringPtrInput
	// ID of the project of the access approval settings.
	ProjectId pulumi.StringPtrInput
	Timeouts  ProjectAccessApprovalSettingsTimeoutsPtrInput
}

func (ProjectAccessApprovalSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectAccessApprovalSettingsState)(nil)).Elem()
}

type projectAccessApprovalSettingsArgs struct {
	// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
	// Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
	// new non-empty values may not be set.
	ActiveKeyVersion *string `pulumi:"activeKeyVersion"`
	// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
	// resource given by name against any of these services contained here will be required to have explicit approval.
	// Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
	// expanded as the set of supported services is expanded.
	EnrolledServices []ProjectAccessApprovalSettingsEnrolledService `pulumi:"enrolledServices"`
	// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
	// a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
	// addresses are allowed.
	NotificationEmails []string `pulumi:"notificationEmails"`
	// Project id.
	//
	// Deprecated: Deprecated
	Project                         *string `pulumi:"project"`
	ProjectAccessApprovalSettingsId *string `pulumi:"projectAccessApprovalSettingsId"`
	// ID of the project of the access approval settings.
	ProjectId string                                 `pulumi:"projectId"`
	Timeouts  *ProjectAccessApprovalSettingsTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ProjectAccessApprovalSettings resource.
type ProjectAccessApprovalSettingsArgs struct {
	// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
	// Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
	// new non-empty values may not be set.
	ActiveKeyVersion pulumi.StringPtrInput
	// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
	// resource given by name against any of these services contained here will be required to have explicit approval.
	// Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
	// expanded as the set of supported services is expanded.
	EnrolledServices ProjectAccessApprovalSettingsEnrolledServiceArrayInput
	// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
	// a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
	// addresses are allowed.
	NotificationEmails pulumi.StringArrayInput
	// Project id.
	//
	// Deprecated: Deprecated
	Project                         pulumi.StringPtrInput
	ProjectAccessApprovalSettingsId pulumi.StringPtrInput
	// ID of the project of the access approval settings.
	ProjectId pulumi.StringInput
	Timeouts  ProjectAccessApprovalSettingsTimeoutsPtrInput
}

func (ProjectAccessApprovalSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectAccessApprovalSettingsArgs)(nil)).Elem()
}

type ProjectAccessApprovalSettingsInput interface {
	pulumi.Input

	ToProjectAccessApprovalSettingsOutput() ProjectAccessApprovalSettingsOutput
	ToProjectAccessApprovalSettingsOutputWithContext(ctx context.Context) ProjectAccessApprovalSettingsOutput
}

func (*ProjectAccessApprovalSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAccessApprovalSettings)(nil)).Elem()
}

func (i *ProjectAccessApprovalSettings) ToProjectAccessApprovalSettingsOutput() ProjectAccessApprovalSettingsOutput {
	return i.ToProjectAccessApprovalSettingsOutputWithContext(context.Background())
}

func (i *ProjectAccessApprovalSettings) ToProjectAccessApprovalSettingsOutputWithContext(ctx context.Context) ProjectAccessApprovalSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAccessApprovalSettingsOutput)
}

type ProjectAccessApprovalSettingsOutput struct{ *pulumi.OutputState }

func (ProjectAccessApprovalSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAccessApprovalSettings)(nil)).Elem()
}

func (o ProjectAccessApprovalSettingsOutput) ToProjectAccessApprovalSettingsOutput() ProjectAccessApprovalSettingsOutput {
	return o
}

func (o ProjectAccessApprovalSettingsOutput) ToProjectAccessApprovalSettingsOutputWithContext(ctx context.Context) ProjectAccessApprovalSettingsOutput {
	return o
}

// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
// Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
// new non-empty values may not be set.
func (o ProjectAccessApprovalSettingsOutput) ActiveKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.StringPtrOutput { return v.ActiveKeyVersion }).(pulumi.StringPtrOutput)
}

// If the field is true, that indicates that an ancestor of this Project has set active_key_version.
func (o ProjectAccessApprovalSettingsOutput) AncestorHasActiveKeyVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.BoolOutput { return v.AncestorHasActiveKeyVersion }).(pulumi.BoolOutput)
}

// If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
// of the Project.
func (o ProjectAccessApprovalSettingsOutput) EnrolledAncestor() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.BoolOutput { return v.EnrolledAncestor }).(pulumi.BoolOutput)
}

// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
// resource given by name against any of these services contained here will be required to have explicit approval.
// Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
// expanded as the set of supported services is expanded.
func (o ProjectAccessApprovalSettingsOutput) EnrolledServices() ProjectAccessApprovalSettingsEnrolledServiceArrayOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) ProjectAccessApprovalSettingsEnrolledServiceArrayOutput {
		return v.EnrolledServices
	}).(ProjectAccessApprovalSettingsEnrolledServiceArrayOutput)
}

// If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
// this Project (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it,
// etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited
// top-down.
func (o ProjectAccessApprovalSettingsOutput) InvalidKeyVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.BoolOutput { return v.InvalidKeyVersion }).(pulumi.BoolOutput)
}

// The resource name of the settings. Format is "projects/{project_id}/accessApprovalSettings"
func (o ProjectAccessApprovalSettingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
// a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
// addresses are allowed.
func (o ProjectAccessApprovalSettingsOutput) NotificationEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.StringArrayOutput { return v.NotificationEmails }).(pulumi.StringArrayOutput)
}

// Project id.
//
// Deprecated: Deprecated
func (o ProjectAccessApprovalSettingsOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func (o ProjectAccessApprovalSettingsOutput) ProjectAccessApprovalSettingsId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.StringOutput { return v.ProjectAccessApprovalSettingsId }).(pulumi.StringOutput)
}

// ID of the project of the access approval settings.
func (o ProjectAccessApprovalSettingsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o ProjectAccessApprovalSettingsOutput) Timeouts() ProjectAccessApprovalSettingsTimeoutsPtrOutput {
	return o.ApplyT(func(v *ProjectAccessApprovalSettings) ProjectAccessApprovalSettingsTimeoutsPtrOutput {
		return v.Timeouts
	}).(ProjectAccessApprovalSettingsTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAccessApprovalSettingsInput)(nil)).Elem(), &ProjectAccessApprovalSettings{})
	pulumi.RegisterOutputType(ProjectAccessApprovalSettingsOutput{})
}
