// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DocumentAiProcessorDefaultVersion struct {
	pulumi.CustomResourceState

	DocumentAiProcessorDefaultVersionId pulumi.StringOutput `pulumi:"documentAiProcessorDefaultVersionId"`
	// The processor to set the version on.
	Processor pulumi.StringOutput                                `pulumi:"processor"`
	Timeouts  DocumentAiProcessorDefaultVersionTimeoutsPtrOutput `pulumi:"timeouts"`
	// The version to set. Using 'stable' or 'rc' will cause the API to return the latest version in that release channel.
	// Apply 'lifecycle.ignore_changes' to the 'version' field to suppress this diff.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDocumentAiProcessorDefaultVersion registers a new resource with the given unique name, arguments, and options.
func NewDocumentAiProcessorDefaultVersion(ctx *pulumi.Context,
	name string, args *DocumentAiProcessorDefaultVersionArgs, opts ...pulumi.ResourceOption) (*DocumentAiProcessorDefaultVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Processor == nil {
		return nil, errors.New("invalid value for required argument 'Processor'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DocumentAiProcessorDefaultVersion
	err = ctx.RegisterPackageResource("google-beta:index/documentAiProcessorDefaultVersion:DocumentAiProcessorDefaultVersion", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentAiProcessorDefaultVersion gets an existing DocumentAiProcessorDefaultVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentAiProcessorDefaultVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentAiProcessorDefaultVersionState, opts ...pulumi.ResourceOption) (*DocumentAiProcessorDefaultVersion, error) {
	var resource DocumentAiProcessorDefaultVersion
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/documentAiProcessorDefaultVersion:DocumentAiProcessorDefaultVersion", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentAiProcessorDefaultVersion resources.
type documentAiProcessorDefaultVersionState struct {
	DocumentAiProcessorDefaultVersionId *string `pulumi:"documentAiProcessorDefaultVersionId"`
	// The processor to set the version on.
	Processor *string                                    `pulumi:"processor"`
	Timeouts  *DocumentAiProcessorDefaultVersionTimeouts `pulumi:"timeouts"`
	// The version to set. Using 'stable' or 'rc' will cause the API to return the latest version in that release channel.
	// Apply 'lifecycle.ignore_changes' to the 'version' field to suppress this diff.
	Version *string `pulumi:"version"`
}

type DocumentAiProcessorDefaultVersionState struct {
	DocumentAiProcessorDefaultVersionId pulumi.StringPtrInput
	// The processor to set the version on.
	Processor pulumi.StringPtrInput
	Timeouts  DocumentAiProcessorDefaultVersionTimeoutsPtrInput
	// The version to set. Using 'stable' or 'rc' will cause the API to return the latest version in that release channel.
	// Apply 'lifecycle.ignore_changes' to the 'version' field to suppress this diff.
	Version pulumi.StringPtrInput
}

func (DocumentAiProcessorDefaultVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentAiProcessorDefaultVersionState)(nil)).Elem()
}

type documentAiProcessorDefaultVersionArgs struct {
	DocumentAiProcessorDefaultVersionId *string `pulumi:"documentAiProcessorDefaultVersionId"`
	// The processor to set the version on.
	Processor string                                     `pulumi:"processor"`
	Timeouts  *DocumentAiProcessorDefaultVersionTimeouts `pulumi:"timeouts"`
	// The version to set. Using 'stable' or 'rc' will cause the API to return the latest version in that release channel.
	// Apply 'lifecycle.ignore_changes' to the 'version' field to suppress this diff.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a DocumentAiProcessorDefaultVersion resource.
type DocumentAiProcessorDefaultVersionArgs struct {
	DocumentAiProcessorDefaultVersionId pulumi.StringPtrInput
	// The processor to set the version on.
	Processor pulumi.StringInput
	Timeouts  DocumentAiProcessorDefaultVersionTimeoutsPtrInput
	// The version to set. Using 'stable' or 'rc' will cause the API to return the latest version in that release channel.
	// Apply 'lifecycle.ignore_changes' to the 'version' field to suppress this diff.
	Version pulumi.StringInput
}

func (DocumentAiProcessorDefaultVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentAiProcessorDefaultVersionArgs)(nil)).Elem()
}

type DocumentAiProcessorDefaultVersionInput interface {
	pulumi.Input

	ToDocumentAiProcessorDefaultVersionOutput() DocumentAiProcessorDefaultVersionOutput
	ToDocumentAiProcessorDefaultVersionOutputWithContext(ctx context.Context) DocumentAiProcessorDefaultVersionOutput
}

func (*DocumentAiProcessorDefaultVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentAiProcessorDefaultVersion)(nil)).Elem()
}

func (i *DocumentAiProcessorDefaultVersion) ToDocumentAiProcessorDefaultVersionOutput() DocumentAiProcessorDefaultVersionOutput {
	return i.ToDocumentAiProcessorDefaultVersionOutputWithContext(context.Background())
}

func (i *DocumentAiProcessorDefaultVersion) ToDocumentAiProcessorDefaultVersionOutputWithContext(ctx context.Context) DocumentAiProcessorDefaultVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentAiProcessorDefaultVersionOutput)
}

type DocumentAiProcessorDefaultVersionOutput struct{ *pulumi.OutputState }

func (DocumentAiProcessorDefaultVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentAiProcessorDefaultVersion)(nil)).Elem()
}

func (o DocumentAiProcessorDefaultVersionOutput) ToDocumentAiProcessorDefaultVersionOutput() DocumentAiProcessorDefaultVersionOutput {
	return o
}

func (o DocumentAiProcessorDefaultVersionOutput) ToDocumentAiProcessorDefaultVersionOutputWithContext(ctx context.Context) DocumentAiProcessorDefaultVersionOutput {
	return o
}

func (o DocumentAiProcessorDefaultVersionOutput) DocumentAiProcessorDefaultVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiProcessorDefaultVersion) pulumi.StringOutput {
		return v.DocumentAiProcessorDefaultVersionId
	}).(pulumi.StringOutput)
}

// The processor to set the version on.
func (o DocumentAiProcessorDefaultVersionOutput) Processor() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiProcessorDefaultVersion) pulumi.StringOutput { return v.Processor }).(pulumi.StringOutput)
}

func (o DocumentAiProcessorDefaultVersionOutput) Timeouts() DocumentAiProcessorDefaultVersionTimeoutsPtrOutput {
	return o.ApplyT(func(v *DocumentAiProcessorDefaultVersion) DocumentAiProcessorDefaultVersionTimeoutsPtrOutput {
		return v.Timeouts
	}).(DocumentAiProcessorDefaultVersionTimeoutsPtrOutput)
}

// The version to set. Using 'stable' or 'rc' will cause the API to return the latest version in that release channel.
// Apply 'lifecycle.ignore_changes' to the 'version' field to suppress this diff.
func (o DocumentAiProcessorDefaultVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiProcessorDefaultVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentAiProcessorDefaultVersionInput)(nil)).Elem(), &DocumentAiProcessorDefaultVersion{})
	pulumi.RegisterOutputType(DocumentAiProcessorDefaultVersionOutput{})
}
