// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeNodeGroup struct {
	pulumi.CustomResourceState

	// If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
	// of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
	AutoscalingPolicy  ComputeNodeGroupAutoscalingPolicyPtrOutput `pulumi:"autoscalingPolicy"`
	ComputeNodeGroupId pulumi.StringOutput                        `pulumi:"computeNodeGroupId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional textual description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
	// resource creation.
	InitialSize pulumi.Float64PtrOutput `pulumi:"initialSize"`
	// Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
	// receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
	// infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
	// the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
	// migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
	MaintenanceInterval pulumi.StringOutput `pulumi:"maintenanceInterval"`
	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
	// RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	MaintenancePolicy pulumi.StringPtrOutput `pulumi:"maintenancePolicy"`
	// contains properties for the timeframe of maintenance
	MaintenanceWindow ComputeNodeGroupMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The URL of the node template to which this node group belongs.
	NodeTemplate pulumi.StringOutput `pulumi:"nodeTemplate"`
	Project      pulumi.StringOutput `pulumi:"project"`
	SelfLink     pulumi.StringOutput `pulumi:"selfLink"`
	// Share settings for the node group.
	ShareSettings ComputeNodeGroupShareSettingsPtrOutput `pulumi:"shareSettings"`
	// The total number of nodes in the node group.
	Size     pulumi.Float64Output              `pulumi:"size"`
	Timeouts ComputeNodeGroupTimeoutsPtrOutput `pulumi:"timeouts"`
	// Zone where this node group is located
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewComputeNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewComputeNodeGroup(ctx *pulumi.Context,
	name string, args *ComputeNodeGroupArgs, opts ...pulumi.ResourceOption) (*ComputeNodeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeTemplate == nil {
		return nil, errors.New("invalid value for required argument 'NodeTemplate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeNodeGroup
	err = ctx.RegisterPackageResource("google-beta:index/computeNodeGroup:ComputeNodeGroup", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeNodeGroup gets an existing ComputeNodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeNodeGroupState, opts ...pulumi.ResourceOption) (*ComputeNodeGroup, error) {
	var resource ComputeNodeGroup
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeNodeGroup:ComputeNodeGroup", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeNodeGroup resources.
type computeNodeGroupState struct {
	// If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
	// of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
	AutoscalingPolicy  *ComputeNodeGroupAutoscalingPolicy `pulumi:"autoscalingPolicy"`
	ComputeNodeGroupId *string                            `pulumi:"computeNodeGroupId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional textual description of the resource.
	Description *string `pulumi:"description"`
	// The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
	// resource creation.
	InitialSize *float64 `pulumi:"initialSize"`
	// Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
	// receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
	// infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
	// the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
	// migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
	MaintenanceInterval *string `pulumi:"maintenanceInterval"`
	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
	// RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	MaintenancePolicy *string `pulumi:"maintenancePolicy"`
	// contains properties for the timeframe of maintenance
	MaintenanceWindow *ComputeNodeGroupMaintenanceWindow `pulumi:"maintenanceWindow"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// The URL of the node template to which this node group belongs.
	NodeTemplate *string `pulumi:"nodeTemplate"`
	Project      *string `pulumi:"project"`
	SelfLink     *string `pulumi:"selfLink"`
	// Share settings for the node group.
	ShareSettings *ComputeNodeGroupShareSettings `pulumi:"shareSettings"`
	// The total number of nodes in the node group.
	Size     *float64                  `pulumi:"size"`
	Timeouts *ComputeNodeGroupTimeouts `pulumi:"timeouts"`
	// Zone where this node group is located
	Zone *string `pulumi:"zone"`
}

type ComputeNodeGroupState struct {
	// If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
	// of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
	AutoscalingPolicy  ComputeNodeGroupAutoscalingPolicyPtrInput
	ComputeNodeGroupId pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional textual description of the resource.
	Description pulumi.StringPtrInput
	// The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
	// resource creation.
	InitialSize pulumi.Float64PtrInput
	// Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
	// receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
	// infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
	// the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
	// migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
	MaintenanceInterval pulumi.StringPtrInput
	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
	// RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	MaintenancePolicy pulumi.StringPtrInput
	// contains properties for the timeframe of maintenance
	MaintenanceWindow ComputeNodeGroupMaintenanceWindowPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// The URL of the node template to which this node group belongs.
	NodeTemplate pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
	SelfLink     pulumi.StringPtrInput
	// Share settings for the node group.
	ShareSettings ComputeNodeGroupShareSettingsPtrInput
	// The total number of nodes in the node group.
	Size     pulumi.Float64PtrInput
	Timeouts ComputeNodeGroupTimeoutsPtrInput
	// Zone where this node group is located
	Zone pulumi.StringPtrInput
}

func (ComputeNodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNodeGroupState)(nil)).Elem()
}

type computeNodeGroupArgs struct {
	// If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
	// of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
	AutoscalingPolicy  *ComputeNodeGroupAutoscalingPolicy `pulumi:"autoscalingPolicy"`
	ComputeNodeGroupId *string                            `pulumi:"computeNodeGroupId"`
	// An optional textual description of the resource.
	Description *string `pulumi:"description"`
	// The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
	// resource creation.
	InitialSize *float64 `pulumi:"initialSize"`
	// Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
	// receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
	// infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
	// the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
	// migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
	MaintenanceInterval *string `pulumi:"maintenanceInterval"`
	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
	// RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	MaintenancePolicy *string `pulumi:"maintenancePolicy"`
	// contains properties for the timeframe of maintenance
	MaintenanceWindow *ComputeNodeGroupMaintenanceWindow `pulumi:"maintenanceWindow"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// The URL of the node template to which this node group belongs.
	NodeTemplate string  `pulumi:"nodeTemplate"`
	Project      *string `pulumi:"project"`
	// Share settings for the node group.
	ShareSettings *ComputeNodeGroupShareSettings `pulumi:"shareSettings"`
	Timeouts      *ComputeNodeGroupTimeouts      `pulumi:"timeouts"`
	// Zone where this node group is located
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeNodeGroup resource.
type ComputeNodeGroupArgs struct {
	// If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
	// of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
	AutoscalingPolicy  ComputeNodeGroupAutoscalingPolicyPtrInput
	ComputeNodeGroupId pulumi.StringPtrInput
	// An optional textual description of the resource.
	Description pulumi.StringPtrInput
	// The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
	// resource creation.
	InitialSize pulumi.Float64PtrInput
	// Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
	// receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
	// infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
	// the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
	// migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
	MaintenanceInterval pulumi.StringPtrInput
	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
	// RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	MaintenancePolicy pulumi.StringPtrInput
	// contains properties for the timeframe of maintenance
	MaintenanceWindow ComputeNodeGroupMaintenanceWindowPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// The URL of the node template to which this node group belongs.
	NodeTemplate pulumi.StringInput
	Project      pulumi.StringPtrInput
	// Share settings for the node group.
	ShareSettings ComputeNodeGroupShareSettingsPtrInput
	Timeouts      ComputeNodeGroupTimeoutsPtrInput
	// Zone where this node group is located
	Zone pulumi.StringPtrInput
}

func (ComputeNodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNodeGroupArgs)(nil)).Elem()
}

type ComputeNodeGroupInput interface {
	pulumi.Input

	ToComputeNodeGroupOutput() ComputeNodeGroupOutput
	ToComputeNodeGroupOutputWithContext(ctx context.Context) ComputeNodeGroupOutput
}

func (*ComputeNodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNodeGroup)(nil)).Elem()
}

func (i *ComputeNodeGroup) ToComputeNodeGroupOutput() ComputeNodeGroupOutput {
	return i.ToComputeNodeGroupOutputWithContext(context.Background())
}

func (i *ComputeNodeGroup) ToComputeNodeGroupOutputWithContext(ctx context.Context) ComputeNodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeNodeGroupOutput)
}

type ComputeNodeGroupOutput struct{ *pulumi.OutputState }

func (ComputeNodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNodeGroup)(nil)).Elem()
}

func (o ComputeNodeGroupOutput) ToComputeNodeGroupOutput() ComputeNodeGroupOutput {
	return o
}

func (o ComputeNodeGroupOutput) ToComputeNodeGroupOutputWithContext(ctx context.Context) ComputeNodeGroupOutput {
	return o
}

// If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
// of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
func (o ComputeNodeGroupOutput) AutoscalingPolicy() ComputeNodeGroupAutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupAutoscalingPolicyPtrOutput { return v.AutoscalingPolicy }).(ComputeNodeGroupAutoscalingPolicyPtrOutput)
}

func (o ComputeNodeGroupOutput) ComputeNodeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.ComputeNodeGroupId }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ComputeNodeGroupOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional textual description of the resource.
func (o ComputeNodeGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
// resource creation.
func (o ComputeNodeGroupOutput) InitialSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.Float64PtrOutput { return v.InitialSize }).(pulumi.Float64PtrOutput)
}

// Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
// receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
// infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
// the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
// migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
func (o ComputeNodeGroupOutput) MaintenanceInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.MaintenanceInterval }).(pulumi.StringOutput)
}

// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
// RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
func (o ComputeNodeGroupOutput) MaintenancePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringPtrOutput { return v.MaintenancePolicy }).(pulumi.StringPtrOutput)
}

// contains properties for the timeframe of maintenance
func (o ComputeNodeGroupOutput) MaintenanceWindow() ComputeNodeGroupMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupMaintenanceWindowPtrOutput { return v.MaintenanceWindow }).(ComputeNodeGroupMaintenanceWindowPtrOutput)
}

// Name of the resource.
func (o ComputeNodeGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URL of the node template to which this node group belongs.
func (o ComputeNodeGroupOutput) NodeTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.NodeTemplate }).(pulumi.StringOutput)
}

func (o ComputeNodeGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ComputeNodeGroupOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Share settings for the node group.
func (o ComputeNodeGroupOutput) ShareSettings() ComputeNodeGroupShareSettingsPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupShareSettingsPtrOutput { return v.ShareSettings }).(ComputeNodeGroupShareSettingsPtrOutput)
}

// The total number of nodes in the node group.
func (o ComputeNodeGroupOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

func (o ComputeNodeGroupOutput) Timeouts() ComputeNodeGroupTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupTimeoutsPtrOutput { return v.Timeouts }).(ComputeNodeGroupTimeoutsPtrOutput)
}

// Zone where this node group is located
func (o ComputeNodeGroupOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeNodeGroupInput)(nil)).Elem(), &ComputeNodeGroup{})
	pulumi.RegisterOutputType(ComputeNodeGroupOutput{})
}
