// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeonpremVmwareAdminCluster struct {
	pulumi.CustomResourceState

	// The VMware admin cluster addon node configuration.
	AddonNode GkeonpremVmwareAdminClusterAddonNodePtrOutput `pulumi:"addonNode"`
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups GkeonpremVmwareAdminClusterAntiAffinityGroupsPtrOutput `pulumi:"antiAffinityGroups"`
	// The VMware admin cluster authorization configuration.
	Authorization GkeonpremVmwareAdminClusterAuthorizationPtrOutput `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig GkeonpremVmwareAdminClusterAutoRepairConfigPtrOutput `pulumi:"autoRepairConfig"`
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership pulumi.StringOutput `pulumi:"bootstrapClusterMembership"`
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode GkeonpremVmwareAdminClusterControlPlaneNodePtrOutput `pulumi:"controlPlaneNode"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A human readable description of this VMware admin cluster.
	Description          pulumi.StringOutput    `pulumi:"description"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// The DNS name of VMware admin cluster's API server.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Fleet configuration for the cluster.
	Fleets                        GkeonpremVmwareAdminClusterFleetArrayOutput `pulumi:"fleets"`
	GkeonpremVmwareAdminClusterId pulumi.StringOutput                         `pulumi:"gkeonpremVmwareAdminClusterId"`
	// The OS image type for the VMware admin cluster.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer GkeonpremVmwareAdminClusterLoadBalancerPtrOutput `pulumi:"loadBalancer"`
	// The object name of the VMwareAdminCluster custom resource on the associated admin cluster. This field is used to support
	// conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field
	// will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID and
	// be visible in the last component of the resource name. It is not modifiable. All users should use this name to access
	// their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller
	// logs.
	LocalName pulumi.StringOutput `pulumi:"localName"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The VMware admin cluster resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The VMware admin cluster network configuration.
	NetworkConfig GkeonpremVmwareAdminClusterNetworkConfigOutput `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion pulumi.StringPtrOutput `pulumi:"onPremVersion"`
	// The VMware platform configuration.
	PlatformConfig GkeonpremVmwareAdminClusterPlatformConfigPtrOutput `pulumi:"platformConfig"`
	Project        pulumi.StringOutput                                `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware admin cluster.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The lifecycle state of the VMware admin cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Statuses GkeonpremVmwareAdminClusterStatusArrayOutput `pulumi:"statuses"`
	Timeouts GkeonpremVmwareAdminClusterTimeoutsPtrOutput `pulumi:"timeouts"`
	// The unique identifier of the VMware Admin Cluster.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Specifies vCenter config for the admin cluster.
	Vcenter GkeonpremVmwareAdminClusterVcenterPtrOutput `pulumi:"vcenter"`
}

// NewGkeonpremVmwareAdminCluster registers a new resource with the given unique name, arguments, and options.
func NewGkeonpremVmwareAdminCluster(ctx *pulumi.Context,
	name string, args *GkeonpremVmwareAdminClusterArgs, opts ...pulumi.ResourceOption) (*GkeonpremVmwareAdminCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.NetworkConfig == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeonpremVmwareAdminCluster
	err = ctx.RegisterPackageResource("google-beta:index/gkeonpremVmwareAdminCluster:GkeonpremVmwareAdminCluster", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeonpremVmwareAdminCluster gets an existing GkeonpremVmwareAdminCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeonpremVmwareAdminCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeonpremVmwareAdminClusterState, opts ...pulumi.ResourceOption) (*GkeonpremVmwareAdminCluster, error) {
	var resource GkeonpremVmwareAdminCluster
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/gkeonpremVmwareAdminCluster:GkeonpremVmwareAdminCluster", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeonpremVmwareAdminCluster resources.
type gkeonpremVmwareAdminClusterState struct {
	// The VMware admin cluster addon node configuration.
	AddonNode *GkeonpremVmwareAdminClusterAddonNode `pulumi:"addonNode"`
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *GkeonpremVmwareAdminClusterAntiAffinityGroups `pulumi:"antiAffinityGroups"`
	// The VMware admin cluster authorization configuration.
	Authorization *GkeonpremVmwareAdminClusterAuthorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *GkeonpremVmwareAdminClusterAutoRepairConfig `pulumi:"autoRepairConfig"`
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership *string `pulumi:"bootstrapClusterMembership"`
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode *GkeonpremVmwareAdminClusterControlPlaneNode `pulumi:"controlPlaneNode"`
	// The time the cluster was created, in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// A human readable description of this VMware admin cluster.
	Description          *string           `pulumi:"description"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// The DNS name of VMware admin cluster's API server.
	Endpoint *string `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag *string `pulumi:"etag"`
	// Fleet configuration for the cluster.
	Fleets                        []GkeonpremVmwareAdminClusterFleet `pulumi:"fleets"`
	GkeonpremVmwareAdminClusterId *string                            `pulumi:"gkeonpremVmwareAdminClusterId"`
	// The OS image type for the VMware admin cluster.
	ImageType *string `pulumi:"imageType"`
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer *GkeonpremVmwareAdminClusterLoadBalancer `pulumi:"loadBalancer"`
	// The object name of the VMwareAdminCluster custom resource on the associated admin cluster. This field is used to support
	// conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field
	// will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID and
	// be visible in the last component of the resource name. It is not modifiable. All users should use this name to access
	// their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller
	// logs.
	LocalName *string `pulumi:"localName"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The VMware admin cluster resource name.
	Name *string `pulumi:"name"`
	// The VMware admin cluster network configuration.
	NetworkConfig *GkeonpremVmwareAdminClusterNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion *string `pulumi:"onPremVersion"`
	// The VMware platform configuration.
	PlatformConfig *GkeonpremVmwareAdminClusterPlatformConfig `pulumi:"platformConfig"`
	Project        *string                                    `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware admin cluster.
	Reconciling *bool `pulumi:"reconciling"`
	// The lifecycle state of the VMware admin cluster.
	State *string `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Statuses []GkeonpremVmwareAdminClusterStatus  `pulumi:"statuses"`
	Timeouts *GkeonpremVmwareAdminClusterTimeouts `pulumi:"timeouts"`
	// The unique identifier of the VMware Admin Cluster.
	Uid *string `pulumi:"uid"`
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
	// Specifies vCenter config for the admin cluster.
	Vcenter *GkeonpremVmwareAdminClusterVcenter `pulumi:"vcenter"`
}

type GkeonpremVmwareAdminClusterState struct {
	// The VMware admin cluster addon node configuration.
	AddonNode GkeonpremVmwareAdminClusterAddonNodePtrInput
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups GkeonpremVmwareAdminClusterAntiAffinityGroupsPtrInput
	// The VMware admin cluster authorization configuration.
	Authorization GkeonpremVmwareAdminClusterAuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig GkeonpremVmwareAdminClusterAutoRepairConfigPtrInput
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership pulumi.StringPtrInput
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode GkeonpremVmwareAdminClusterControlPlaneNodePtrInput
	// The time the cluster was created, in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// A human readable description of this VMware admin cluster.
	Description          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// The DNS name of VMware admin cluster's API server.
	Endpoint pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
	// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
	// read-modify-writes through optimistic concurrency control.
	Etag pulumi.StringPtrInput
	// Fleet configuration for the cluster.
	Fleets                        GkeonpremVmwareAdminClusterFleetArrayInput
	GkeonpremVmwareAdminClusterId pulumi.StringPtrInput
	// The OS image type for the VMware admin cluster.
	ImageType pulumi.StringPtrInput
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer GkeonpremVmwareAdminClusterLoadBalancerPtrInput
	// The object name of the VMwareAdminCluster custom resource on the associated admin cluster. This field is used to support
	// conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field
	// will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID and
	// be visible in the last component of the resource name. It is not modifiable. All users should use this name to access
	// their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller
	// logs.
	LocalName pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The VMware admin cluster resource name.
	Name pulumi.StringPtrInput
	// The VMware admin cluster network configuration.
	NetworkConfig GkeonpremVmwareAdminClusterNetworkConfigPtrInput
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion pulumi.StringPtrInput
	// The VMware platform configuration.
	PlatformConfig GkeonpremVmwareAdminClusterPlatformConfigPtrInput
	Project        pulumi.StringPtrInput
	// If set, there are currently changes in flight to the VMware admin cluster.
	Reconciling pulumi.BoolPtrInput
	// The lifecycle state of the VMware admin cluster.
	State pulumi.StringPtrInput
	// ResourceStatus representing detailed cluster state.
	Statuses GkeonpremVmwareAdminClusterStatusArrayInput
	Timeouts GkeonpremVmwareAdminClusterTimeoutsPtrInput
	// The unique identifier of the VMware Admin Cluster.
	Uid pulumi.StringPtrInput
	// The time the cluster was last updated, in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
	// Specifies vCenter config for the admin cluster.
	Vcenter GkeonpremVmwareAdminClusterVcenterPtrInput
}

func (GkeonpremVmwareAdminClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeonpremVmwareAdminClusterState)(nil)).Elem()
}

type gkeonpremVmwareAdminClusterArgs struct {
	// The VMware admin cluster addon node configuration.
	AddonNode *GkeonpremVmwareAdminClusterAddonNode `pulumi:"addonNode"`
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *GkeonpremVmwareAdminClusterAntiAffinityGroups `pulumi:"antiAffinityGroups"`
	// The VMware admin cluster authorization configuration.
	Authorization *GkeonpremVmwareAdminClusterAuthorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *GkeonpremVmwareAdminClusterAutoRepairConfig `pulumi:"autoRepairConfig"`
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership *string `pulumi:"bootstrapClusterMembership"`
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode *GkeonpremVmwareAdminClusterControlPlaneNode `pulumi:"controlPlaneNode"`
	// A human readable description of this VMware admin cluster.
	Description                   *string `pulumi:"description"`
	GkeonpremVmwareAdminClusterId *string `pulumi:"gkeonpremVmwareAdminClusterId"`
	// The OS image type for the VMware admin cluster.
	ImageType *string `pulumi:"imageType"`
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer *GkeonpremVmwareAdminClusterLoadBalancer `pulumi:"loadBalancer"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The VMware admin cluster resource name.
	Name *string `pulumi:"name"`
	// The VMware admin cluster network configuration.
	NetworkConfig GkeonpremVmwareAdminClusterNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion *string `pulumi:"onPremVersion"`
	// The VMware platform configuration.
	PlatformConfig *GkeonpremVmwareAdminClusterPlatformConfig `pulumi:"platformConfig"`
	Project        *string                                    `pulumi:"project"`
	Timeouts       *GkeonpremVmwareAdminClusterTimeouts       `pulumi:"timeouts"`
	// Specifies vCenter config for the admin cluster.
	Vcenter *GkeonpremVmwareAdminClusterVcenter `pulumi:"vcenter"`
}

// The set of arguments for constructing a GkeonpremVmwareAdminCluster resource.
type GkeonpremVmwareAdminClusterArgs struct {
	// The VMware admin cluster addon node configuration.
	AddonNode GkeonpremVmwareAdminClusterAddonNodePtrInput
	// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
	// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
	// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
	// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
	// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
	// 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups GkeonpremVmwareAdminClusterAntiAffinityGroupsPtrInput
	// The VMware admin cluster authorization configuration.
	Authorization GkeonpremVmwareAdminClusterAuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig GkeonpremVmwareAdminClusterAutoRepairConfigPtrInput
	// The bootstrap cluster this VMware admin cluster belongs to.
	BootstrapClusterMembership pulumi.StringPtrInput
	// The VMware admin cluster control plane node configuration.
	ControlPlaneNode GkeonpremVmwareAdminClusterControlPlaneNodePtrInput
	// A human readable description of this VMware admin cluster.
	Description                   pulumi.StringPtrInput
	GkeonpremVmwareAdminClusterId pulumi.StringPtrInput
	// The OS image type for the VMware admin cluster.
	ImageType pulumi.StringPtrInput
	// Specifies the load balancer configuration for VMware admin cluster.
	LoadBalancer GkeonpremVmwareAdminClusterLoadBalancerPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The VMware admin cluster resource name.
	Name pulumi.StringPtrInput
	// The VMware admin cluster network configuration.
	NetworkConfig GkeonpremVmwareAdminClusterNetworkConfigInput
	// The Anthos clusters on the VMware version for the admin cluster.
	OnPremVersion pulumi.StringPtrInput
	// The VMware platform configuration.
	PlatformConfig GkeonpremVmwareAdminClusterPlatformConfigPtrInput
	Project        pulumi.StringPtrInput
	Timeouts       GkeonpremVmwareAdminClusterTimeoutsPtrInput
	// Specifies vCenter config for the admin cluster.
	Vcenter GkeonpremVmwareAdminClusterVcenterPtrInput
}

func (GkeonpremVmwareAdminClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeonpremVmwareAdminClusterArgs)(nil)).Elem()
}

type GkeonpremVmwareAdminClusterInput interface {
	pulumi.Input

	ToGkeonpremVmwareAdminClusterOutput() GkeonpremVmwareAdminClusterOutput
	ToGkeonpremVmwareAdminClusterOutputWithContext(ctx context.Context) GkeonpremVmwareAdminClusterOutput
}

func (*GkeonpremVmwareAdminCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeonpremVmwareAdminCluster)(nil)).Elem()
}

func (i *GkeonpremVmwareAdminCluster) ToGkeonpremVmwareAdminClusterOutput() GkeonpremVmwareAdminClusterOutput {
	return i.ToGkeonpremVmwareAdminClusterOutputWithContext(context.Background())
}

func (i *GkeonpremVmwareAdminCluster) ToGkeonpremVmwareAdminClusterOutputWithContext(ctx context.Context) GkeonpremVmwareAdminClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeonpremVmwareAdminClusterOutput)
}

type GkeonpremVmwareAdminClusterOutput struct{ *pulumi.OutputState }

func (GkeonpremVmwareAdminClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeonpremVmwareAdminCluster)(nil)).Elem()
}

func (o GkeonpremVmwareAdminClusterOutput) ToGkeonpremVmwareAdminClusterOutput() GkeonpremVmwareAdminClusterOutput {
	return o
}

func (o GkeonpremVmwareAdminClusterOutput) ToGkeonpremVmwareAdminClusterOutputWithContext(ctx context.Context) GkeonpremVmwareAdminClusterOutput {
	return o
}

// The VMware admin cluster addon node configuration.
func (o GkeonpremVmwareAdminClusterOutput) AddonNode() GkeonpremVmwareAdminClusterAddonNodePtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterAddonNodePtrOutput { return v.AddonNode }).(GkeonpremVmwareAdminClusterAddonNodePtrOutput)
}

// Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
// of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
// separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
// alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
// non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
// 'effective_annotations' for all of the annotations present on the resource.
func (o GkeonpremVmwareAdminClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
func (o GkeonpremVmwareAdminClusterOutput) AntiAffinityGroups() GkeonpremVmwareAdminClusterAntiAffinityGroupsPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterAntiAffinityGroupsPtrOutput {
		return v.AntiAffinityGroups
	}).(GkeonpremVmwareAdminClusterAntiAffinityGroupsPtrOutput)
}

// The VMware admin cluster authorization configuration.
func (o GkeonpremVmwareAdminClusterOutput) Authorization() GkeonpremVmwareAdminClusterAuthorizationPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterAuthorizationPtrOutput {
		return v.Authorization
	}).(GkeonpremVmwareAdminClusterAuthorizationPtrOutput)
}

// Configuration for auto repairing.
func (o GkeonpremVmwareAdminClusterOutput) AutoRepairConfig() GkeonpremVmwareAdminClusterAutoRepairConfigPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterAutoRepairConfigPtrOutput {
		return v.AutoRepairConfig
	}).(GkeonpremVmwareAdminClusterAutoRepairConfigPtrOutput)
}

// The bootstrap cluster this VMware admin cluster belongs to.
func (o GkeonpremVmwareAdminClusterOutput) BootstrapClusterMembership() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.BootstrapClusterMembership }).(pulumi.StringOutput)
}

// The VMware admin cluster control plane node configuration.
func (o GkeonpremVmwareAdminClusterOutput) ControlPlaneNode() GkeonpremVmwareAdminClusterControlPlaneNodePtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterControlPlaneNodePtrOutput {
		return v.ControlPlaneNode
	}).(GkeonpremVmwareAdminClusterControlPlaneNodePtrOutput)
}

// The time the cluster was created, in RFC3339 text format.
func (o GkeonpremVmwareAdminClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A human readable description of this VMware admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o GkeonpremVmwareAdminClusterOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// The DNS name of VMware admin cluster's API server.
func (o GkeonpremVmwareAdminClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
// requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
// read-modify-writes through optimistic concurrency control.
func (o GkeonpremVmwareAdminClusterOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Fleet configuration for the cluster.
func (o GkeonpremVmwareAdminClusterOutput) Fleets() GkeonpremVmwareAdminClusterFleetArrayOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterFleetArrayOutput { return v.Fleets }).(GkeonpremVmwareAdminClusterFleetArrayOutput)
}

func (o GkeonpremVmwareAdminClusterOutput) GkeonpremVmwareAdminClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.GkeonpremVmwareAdminClusterId }).(pulumi.StringOutput)
}

// The OS image type for the VMware admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

// Specifies the load balancer configuration for VMware admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) LoadBalancer() GkeonpremVmwareAdminClusterLoadBalancerPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterLoadBalancerPtrOutput {
		return v.LoadBalancer
	}).(GkeonpremVmwareAdminClusterLoadBalancerPtrOutput)
}

// The object name of the VMwareAdminCluster custom resource on the associated admin cluster. This field is used to support
// conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field
// will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster ID and
// be visible in the last component of the resource name. It is not modifiable. All users should use this name to access
// their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller
// logs.
func (o GkeonpremVmwareAdminClusterOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.LocalName }).(pulumi.StringOutput)
}

// The location of the resource.
func (o GkeonpremVmwareAdminClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The VMware admin cluster resource name.
func (o GkeonpremVmwareAdminClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The VMware admin cluster network configuration.
func (o GkeonpremVmwareAdminClusterOutput) NetworkConfig() GkeonpremVmwareAdminClusterNetworkConfigOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterNetworkConfigOutput {
		return v.NetworkConfig
	}).(GkeonpremVmwareAdminClusterNetworkConfigOutput)
}

// The Anthos clusters on the VMware version for the admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) OnPremVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringPtrOutput { return v.OnPremVersion }).(pulumi.StringPtrOutput)
}

// The VMware platform configuration.
func (o GkeonpremVmwareAdminClusterOutput) PlatformConfig() GkeonpremVmwareAdminClusterPlatformConfigPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterPlatformConfigPtrOutput {
		return v.PlatformConfig
	}).(GkeonpremVmwareAdminClusterPlatformConfigPtrOutput)
}

func (o GkeonpremVmwareAdminClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the VMware admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The lifecycle state of the VMware admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing detailed cluster state.
func (o GkeonpremVmwareAdminClusterOutput) Statuses() GkeonpremVmwareAdminClusterStatusArrayOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterStatusArrayOutput { return v.Statuses }).(GkeonpremVmwareAdminClusterStatusArrayOutput)
}

func (o GkeonpremVmwareAdminClusterOutput) Timeouts() GkeonpremVmwareAdminClusterTimeoutsPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterTimeoutsPtrOutput { return v.Timeouts }).(GkeonpremVmwareAdminClusterTimeoutsPtrOutput)
}

// The unique identifier of the VMware Admin Cluster.
func (o GkeonpremVmwareAdminClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time the cluster was last updated, in RFC3339 text format.
func (o GkeonpremVmwareAdminClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Specifies vCenter config for the admin cluster.
func (o GkeonpremVmwareAdminClusterOutput) Vcenter() GkeonpremVmwareAdminClusterVcenterPtrOutput {
	return o.ApplyT(func(v *GkeonpremVmwareAdminCluster) GkeonpremVmwareAdminClusterVcenterPtrOutput { return v.Vcenter }).(GkeonpremVmwareAdminClusterVcenterPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeonpremVmwareAdminClusterInput)(nil)).Elem(), &GkeonpremVmwareAdminCluster{})
	pulumi.RegisterOutputType(GkeonpremVmwareAdminClusterOutput{})
}
