// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataprocJobIamPolicy struct {
	pulumi.CustomResourceState

	DataprocJobIamPolicyId pulumi.StringOutput `pulumi:"dataprocJobIamPolicyId"`
	Etag                   pulumi.StringOutput `pulumi:"etag"`
	JobId                  pulumi.StringOutput `pulumi:"jobId"`
	PolicyData             pulumi.StringOutput `pulumi:"policyData"`
	Project                pulumi.StringOutput `pulumi:"project"`
	Region                 pulumi.StringOutput `pulumi:"region"`
}

// NewDataprocJobIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDataprocJobIamPolicy(ctx *pulumi.Context,
	name string, args *DataprocJobIamPolicyArgs, opts ...pulumi.ResourceOption) (*DataprocJobIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataprocJobIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/dataprocJobIamPolicy:DataprocJobIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataprocJobIamPolicy gets an existing DataprocJobIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataprocJobIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataprocJobIamPolicyState, opts ...pulumi.ResourceOption) (*DataprocJobIamPolicy, error) {
	var resource DataprocJobIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataprocJobIamPolicy:DataprocJobIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataprocJobIamPolicy resources.
type dataprocJobIamPolicyState struct {
	DataprocJobIamPolicyId *string `pulumi:"dataprocJobIamPolicyId"`
	Etag                   *string `pulumi:"etag"`
	JobId                  *string `pulumi:"jobId"`
	PolicyData             *string `pulumi:"policyData"`
	Project                *string `pulumi:"project"`
	Region                 *string `pulumi:"region"`
}

type DataprocJobIamPolicyState struct {
	DataprocJobIamPolicyId pulumi.StringPtrInput
	Etag                   pulumi.StringPtrInput
	JobId                  pulumi.StringPtrInput
	PolicyData             pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
}

func (DataprocJobIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocJobIamPolicyState)(nil)).Elem()
}

type dataprocJobIamPolicyArgs struct {
	DataprocJobIamPolicyId *string `pulumi:"dataprocJobIamPolicyId"`
	JobId                  string  `pulumi:"jobId"`
	PolicyData             string  `pulumi:"policyData"`
	Project                *string `pulumi:"project"`
	Region                 *string `pulumi:"region"`
}

// The set of arguments for constructing a DataprocJobIamPolicy resource.
type DataprocJobIamPolicyArgs struct {
	DataprocJobIamPolicyId pulumi.StringPtrInput
	JobId                  pulumi.StringInput
	PolicyData             pulumi.StringInput
	Project                pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
}

func (DataprocJobIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocJobIamPolicyArgs)(nil)).Elem()
}

type DataprocJobIamPolicyInput interface {
	pulumi.Input

	ToDataprocJobIamPolicyOutput() DataprocJobIamPolicyOutput
	ToDataprocJobIamPolicyOutputWithContext(ctx context.Context) DataprocJobIamPolicyOutput
}

func (*DataprocJobIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocJobIamPolicy)(nil)).Elem()
}

func (i *DataprocJobIamPolicy) ToDataprocJobIamPolicyOutput() DataprocJobIamPolicyOutput {
	return i.ToDataprocJobIamPolicyOutputWithContext(context.Background())
}

func (i *DataprocJobIamPolicy) ToDataprocJobIamPolicyOutputWithContext(ctx context.Context) DataprocJobIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocJobIamPolicyOutput)
}

type DataprocJobIamPolicyOutput struct{ *pulumi.OutputState }

func (DataprocJobIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocJobIamPolicy)(nil)).Elem()
}

func (o DataprocJobIamPolicyOutput) ToDataprocJobIamPolicyOutput() DataprocJobIamPolicyOutput {
	return o
}

func (o DataprocJobIamPolicyOutput) ToDataprocJobIamPolicyOutputWithContext(ctx context.Context) DataprocJobIamPolicyOutput {
	return o
}

func (o DataprocJobIamPolicyOutput) DataprocJobIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamPolicy) pulumi.StringOutput { return v.DataprocJobIamPolicyId }).(pulumi.StringOutput)
}

func (o DataprocJobIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataprocJobIamPolicyOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamPolicy) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

func (o DataprocJobIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o DataprocJobIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataprocJobIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocJobIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocJobIamPolicyInput)(nil)).Elem(), &DataprocJobIamPolicy{})
	pulumi.RegisterOutputType(DataprocJobIamPolicyOutput{})
}
