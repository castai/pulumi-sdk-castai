// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityPlatformTenant struct {
	pulumi.CustomResourceState

	// Whether to allow email/password user authentication.
	AllowPasswordSignup pulumi.BoolPtrOutput `pulumi:"allowPasswordSignup"`
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth pulumi.BoolPtrOutput `pulumi:"disableAuth"`
	// Human friendly display name of the tenant.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin    pulumi.BoolPtrOutput `pulumi:"enableEmailLinkSignin"`
	IdentityPlatformTenantId pulumi.StringOutput  `pulumi:"identityPlatformTenantId"`
	// The name of the tenant that is generated by the server
	Name     pulumi.StringOutput                     `pulumi:"name"`
	Project  pulumi.StringOutput                     `pulumi:"project"`
	Timeouts IdentityPlatformTenantTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewIdentityPlatformTenant registers a new resource with the given unique name, arguments, and options.
func NewIdentityPlatformTenant(ctx *pulumi.Context,
	name string, args *IdentityPlatformTenantArgs, opts ...pulumi.ResourceOption) (*IdentityPlatformTenant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IdentityPlatformTenant
	err = ctx.RegisterPackageResource("google-beta:index/identityPlatformTenant:IdentityPlatformTenant", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPlatformTenant gets an existing IdentityPlatformTenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPlatformTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPlatformTenantState, opts ...pulumi.ResourceOption) (*IdentityPlatformTenant, error) {
	var resource IdentityPlatformTenant
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/identityPlatformTenant:IdentityPlatformTenant", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPlatformTenant resources.
type identityPlatformTenantState struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup *bool `pulumi:"allowPasswordSignup"`
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth *bool `pulumi:"disableAuth"`
	// Human friendly display name of the tenant.
	DisplayName *string `pulumi:"displayName"`
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin    *bool   `pulumi:"enableEmailLinkSignin"`
	IdentityPlatformTenantId *string `pulumi:"identityPlatformTenantId"`
	// The name of the tenant that is generated by the server
	Name     *string                         `pulumi:"name"`
	Project  *string                         `pulumi:"project"`
	Timeouts *IdentityPlatformTenantTimeouts `pulumi:"timeouts"`
}

type IdentityPlatformTenantState struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup pulumi.BoolPtrInput
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth pulumi.BoolPtrInput
	// Human friendly display name of the tenant.
	DisplayName pulumi.StringPtrInput
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin    pulumi.BoolPtrInput
	IdentityPlatformTenantId pulumi.StringPtrInput
	// The name of the tenant that is generated by the server
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts IdentityPlatformTenantTimeoutsPtrInput
}

func (IdentityPlatformTenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPlatformTenantState)(nil)).Elem()
}

type identityPlatformTenantArgs struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup *bool `pulumi:"allowPasswordSignup"`
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth *bool `pulumi:"disableAuth"`
	// Human friendly display name of the tenant.
	DisplayName string `pulumi:"displayName"`
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin    *bool                           `pulumi:"enableEmailLinkSignin"`
	IdentityPlatformTenantId *string                         `pulumi:"identityPlatformTenantId"`
	Project                  *string                         `pulumi:"project"`
	Timeouts                 *IdentityPlatformTenantTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a IdentityPlatformTenant resource.
type IdentityPlatformTenantArgs struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup pulumi.BoolPtrInput
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth pulumi.BoolPtrInput
	// Human friendly display name of the tenant.
	DisplayName pulumi.StringInput
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin    pulumi.BoolPtrInput
	IdentityPlatformTenantId pulumi.StringPtrInput
	Project                  pulumi.StringPtrInput
	Timeouts                 IdentityPlatformTenantTimeoutsPtrInput
}

func (IdentityPlatformTenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPlatformTenantArgs)(nil)).Elem()
}

type IdentityPlatformTenantInput interface {
	pulumi.Input

	ToIdentityPlatformTenantOutput() IdentityPlatformTenantOutput
	ToIdentityPlatformTenantOutputWithContext(ctx context.Context) IdentityPlatformTenantOutput
}

func (*IdentityPlatformTenant) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPlatformTenant)(nil)).Elem()
}

func (i *IdentityPlatformTenant) ToIdentityPlatformTenantOutput() IdentityPlatformTenantOutput {
	return i.ToIdentityPlatformTenantOutputWithContext(context.Background())
}

func (i *IdentityPlatformTenant) ToIdentityPlatformTenantOutputWithContext(ctx context.Context) IdentityPlatformTenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPlatformTenantOutput)
}

type IdentityPlatformTenantOutput struct{ *pulumi.OutputState }

func (IdentityPlatformTenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPlatformTenant)(nil)).Elem()
}

func (o IdentityPlatformTenantOutput) ToIdentityPlatformTenantOutput() IdentityPlatformTenantOutput {
	return o
}

func (o IdentityPlatformTenantOutput) ToIdentityPlatformTenantOutputWithContext(ctx context.Context) IdentityPlatformTenantOutput {
	return o
}

// Whether to allow email/password user authentication.
func (o IdentityPlatformTenantOutput) AllowPasswordSignup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.BoolPtrOutput { return v.AllowPasswordSignup }).(pulumi.BoolPtrOutput)
}

// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
// sign-in. Admins of the disabled tenant are not able to manage its users.
func (o IdentityPlatformTenantOutput) DisableAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.BoolPtrOutput { return v.DisableAuth }).(pulumi.BoolPtrOutput)
}

// Human friendly display name of the tenant.
func (o IdentityPlatformTenantOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether to enable email link user authentication.
func (o IdentityPlatformTenantOutput) EnableEmailLinkSignin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.BoolPtrOutput { return v.EnableEmailLinkSignin }).(pulumi.BoolPtrOutput)
}

func (o IdentityPlatformTenantOutput) IdentityPlatformTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.StringOutput { return v.IdentityPlatformTenantId }).(pulumi.StringOutput)
}

// The name of the tenant that is generated by the server
func (o IdentityPlatformTenantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IdentityPlatformTenantOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o IdentityPlatformTenantOutput) Timeouts() IdentityPlatformTenantTimeoutsPtrOutput {
	return o.ApplyT(func(v *IdentityPlatformTenant) IdentityPlatformTenantTimeoutsPtrOutput { return v.Timeouts }).(IdentityPlatformTenantTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPlatformTenantInput)(nil)).Elem(), &IdentityPlatformTenant{})
	pulumi.RegisterOutputType(IdentityPlatformTenantOutput{})
}
