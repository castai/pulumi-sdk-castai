// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreIamMember struct {
	pulumi.CustomResourceState

	Condition                       VertexAiFeaturestoreIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                            pulumi.StringOutput                             `pulumi:"etag"`
	Featurestore                    pulumi.StringOutput                             `pulumi:"featurestore"`
	Member                          pulumi.StringOutput                             `pulumi:"member"`
	Project                         pulumi.StringOutput                             `pulumi:"project"`
	Region                          pulumi.StringOutput                             `pulumi:"region"`
	Role                            pulumi.StringOutput                             `pulumi:"role"`
	VertexAiFeaturestoreIamMemberId pulumi.StringOutput                             `pulumi:"vertexAiFeaturestoreIamMemberId"`
}

// NewVertexAiFeaturestoreIamMember registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreIamMember(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreIamMemberArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreIamMember
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreIamMember:VertexAiFeaturestoreIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreIamMember gets an existing VertexAiFeaturestoreIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreIamMemberState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreIamMember, error) {
	var resource VertexAiFeaturestoreIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreIamMember:VertexAiFeaturestoreIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreIamMember resources.
type vertexAiFeaturestoreIamMemberState struct {
	Condition                       *VertexAiFeaturestoreIamMemberCondition `pulumi:"condition"`
	Etag                            *string                                 `pulumi:"etag"`
	Featurestore                    *string                                 `pulumi:"featurestore"`
	Member                          *string                                 `pulumi:"member"`
	Project                         *string                                 `pulumi:"project"`
	Region                          *string                                 `pulumi:"region"`
	Role                            *string                                 `pulumi:"role"`
	VertexAiFeaturestoreIamMemberId *string                                 `pulumi:"vertexAiFeaturestoreIamMemberId"`
}

type VertexAiFeaturestoreIamMemberState struct {
	Condition                       VertexAiFeaturestoreIamMemberConditionPtrInput
	Etag                            pulumi.StringPtrInput
	Featurestore                    pulumi.StringPtrInput
	Member                          pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	Region                          pulumi.StringPtrInput
	Role                            pulumi.StringPtrInput
	VertexAiFeaturestoreIamMemberId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreIamMemberState)(nil)).Elem()
}

type vertexAiFeaturestoreIamMemberArgs struct {
	Condition                       *VertexAiFeaturestoreIamMemberCondition `pulumi:"condition"`
	Featurestore                    string                                  `pulumi:"featurestore"`
	Member                          string                                  `pulumi:"member"`
	Project                         *string                                 `pulumi:"project"`
	Region                          *string                                 `pulumi:"region"`
	Role                            string                                  `pulumi:"role"`
	VertexAiFeaturestoreIamMemberId *string                                 `pulumi:"vertexAiFeaturestoreIamMemberId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreIamMember resource.
type VertexAiFeaturestoreIamMemberArgs struct {
	Condition                       VertexAiFeaturestoreIamMemberConditionPtrInput
	Featurestore                    pulumi.StringInput
	Member                          pulumi.StringInput
	Project                         pulumi.StringPtrInput
	Region                          pulumi.StringPtrInput
	Role                            pulumi.StringInput
	VertexAiFeaturestoreIamMemberId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreIamMemberArgs)(nil)).Elem()
}

type VertexAiFeaturestoreIamMemberInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreIamMemberOutput() VertexAiFeaturestoreIamMemberOutput
	ToVertexAiFeaturestoreIamMemberOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamMemberOutput
}

func (*VertexAiFeaturestoreIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreIamMember)(nil)).Elem()
}

func (i *VertexAiFeaturestoreIamMember) ToVertexAiFeaturestoreIamMemberOutput() VertexAiFeaturestoreIamMemberOutput {
	return i.ToVertexAiFeaturestoreIamMemberOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreIamMember) ToVertexAiFeaturestoreIamMemberOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreIamMemberOutput)
}

type VertexAiFeaturestoreIamMemberOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreIamMember)(nil)).Elem()
}

func (o VertexAiFeaturestoreIamMemberOutput) ToVertexAiFeaturestoreIamMemberOutput() VertexAiFeaturestoreIamMemberOutput {
	return o
}

func (o VertexAiFeaturestoreIamMemberOutput) ToVertexAiFeaturestoreIamMemberOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamMemberOutput {
	return o
}

func (o VertexAiFeaturestoreIamMemberOutput) Condition() VertexAiFeaturestoreIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) VertexAiFeaturestoreIamMemberConditionPtrOutput {
		return v.Condition
	}).(VertexAiFeaturestoreIamMemberConditionPtrOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamMemberOutput) VertexAiFeaturestoreIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamMember) pulumi.StringOutput { return v.VertexAiFeaturestoreIamMemberId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreIamMemberInput)(nil)).Elem(), &VertexAiFeaturestoreIamMember{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreIamMemberOutput{})
}
