// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BackupDrBackupPlanAssociation struct {
	pulumi.CustomResourceState

	BackupDrBackupPlanAssociationId pulumi.StringOutput `pulumi:"backupDrBackupPlanAssociationId"`
	// The BP with which resource needs to be created
	BackupPlan pulumi.StringOutput `pulumi:"backupPlan"`
	// The id of backupplan association
	BackupPlanAssociationId pulumi.StringOutput `pulumi:"backupPlanAssociationId"`
	// The time when the instance was created
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Resource name of data source which will be used as storage location for backups taken
	DataSource pulumi.StringOutput `pulumi:"dataSource"`
	// The point in time when the last successful backup was captured from the source
	LastSuccessfulBackupConsistencyTime pulumi.StringOutput `pulumi:"lastSuccessfulBackupConsistencyTime"`
	// The location for the backupplan association
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of backup plan association resource created
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The resource for which BPA needs to be created
	Resource pulumi.StringOutput `pulumi:"resource"`
	// The resource type of workload on which backupplan is applied
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Message for rules config info
	RulesConfigInfos BackupDrBackupPlanAssociationRulesConfigInfoArrayOutput `pulumi:"rulesConfigInfos"`
	Timeouts         BackupDrBackupPlanAssociationTimeoutsPtrOutput          `pulumi:"timeouts"`
	// The time when the instance was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBackupDrBackupPlanAssociation registers a new resource with the given unique name, arguments, and options.
func NewBackupDrBackupPlanAssociation(ctx *pulumi.Context,
	name string, args *BackupDrBackupPlanAssociationArgs, opts ...pulumi.ResourceOption) (*BackupDrBackupPlanAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPlan == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlan'")
	}
	if args.BackupPlanAssociationId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlanAssociationId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BackupDrBackupPlanAssociation
	err = ctx.RegisterPackageResource("google-beta:index/backupDrBackupPlanAssociation:BackupDrBackupPlanAssociation", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupDrBackupPlanAssociation gets an existing BackupDrBackupPlanAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupDrBackupPlanAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupDrBackupPlanAssociationState, opts ...pulumi.ResourceOption) (*BackupDrBackupPlanAssociation, error) {
	var resource BackupDrBackupPlanAssociation
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/backupDrBackupPlanAssociation:BackupDrBackupPlanAssociation", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupDrBackupPlanAssociation resources.
type backupDrBackupPlanAssociationState struct {
	BackupDrBackupPlanAssociationId *string `pulumi:"backupDrBackupPlanAssociationId"`
	// The BP with which resource needs to be created
	BackupPlan *string `pulumi:"backupPlan"`
	// The id of backupplan association
	BackupPlanAssociationId *string `pulumi:"backupPlanAssociationId"`
	// The time when the instance was created
	CreateTime *string `pulumi:"createTime"`
	// Resource name of data source which will be used as storage location for backups taken
	DataSource *string `pulumi:"dataSource"`
	// The point in time when the last successful backup was captured from the source
	LastSuccessfulBackupConsistencyTime *string `pulumi:"lastSuccessfulBackupConsistencyTime"`
	// The location for the backupplan association
	Location *string `pulumi:"location"`
	// The name of backup plan association resource created
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The resource for which BPA needs to be created
	Resource *string `pulumi:"resource"`
	// The resource type of workload on which backupplan is applied
	ResourceType *string `pulumi:"resourceType"`
	// Message for rules config info
	RulesConfigInfos []BackupDrBackupPlanAssociationRulesConfigInfo `pulumi:"rulesConfigInfos"`
	Timeouts         *BackupDrBackupPlanAssociationTimeouts         `pulumi:"timeouts"`
	// The time when the instance was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type BackupDrBackupPlanAssociationState struct {
	BackupDrBackupPlanAssociationId pulumi.StringPtrInput
	// The BP with which resource needs to be created
	BackupPlan pulumi.StringPtrInput
	// The id of backupplan association
	BackupPlanAssociationId pulumi.StringPtrInput
	// The time when the instance was created
	CreateTime pulumi.StringPtrInput
	// Resource name of data source which will be used as storage location for backups taken
	DataSource pulumi.StringPtrInput
	// The point in time when the last successful backup was captured from the source
	LastSuccessfulBackupConsistencyTime pulumi.StringPtrInput
	// The location for the backupplan association
	Location pulumi.StringPtrInput
	// The name of backup plan association resource created
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The resource for which BPA needs to be created
	Resource pulumi.StringPtrInput
	// The resource type of workload on which backupplan is applied
	ResourceType pulumi.StringPtrInput
	// Message for rules config info
	RulesConfigInfos BackupDrBackupPlanAssociationRulesConfigInfoArrayInput
	Timeouts         BackupDrBackupPlanAssociationTimeoutsPtrInput
	// The time when the instance was updated.
	UpdateTime pulumi.StringPtrInput
}

func (BackupDrBackupPlanAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupDrBackupPlanAssociationState)(nil)).Elem()
}

type backupDrBackupPlanAssociationArgs struct {
	BackupDrBackupPlanAssociationId *string `pulumi:"backupDrBackupPlanAssociationId"`
	// The BP with which resource needs to be created
	BackupPlan string `pulumi:"backupPlan"`
	// The id of backupplan association
	BackupPlanAssociationId string `pulumi:"backupPlanAssociationId"`
	// The location for the backupplan association
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The resource for which BPA needs to be created
	Resource string `pulumi:"resource"`
	// The resource type of workload on which backupplan is applied
	ResourceType string                                 `pulumi:"resourceType"`
	Timeouts     *BackupDrBackupPlanAssociationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a BackupDrBackupPlanAssociation resource.
type BackupDrBackupPlanAssociationArgs struct {
	BackupDrBackupPlanAssociationId pulumi.StringPtrInput
	// The BP with which resource needs to be created
	BackupPlan pulumi.StringInput
	// The id of backupplan association
	BackupPlanAssociationId pulumi.StringInput
	// The location for the backupplan association
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// The resource for which BPA needs to be created
	Resource pulumi.StringInput
	// The resource type of workload on which backupplan is applied
	ResourceType pulumi.StringInput
	Timeouts     BackupDrBackupPlanAssociationTimeoutsPtrInput
}

func (BackupDrBackupPlanAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupDrBackupPlanAssociationArgs)(nil)).Elem()
}

type BackupDrBackupPlanAssociationInput interface {
	pulumi.Input

	ToBackupDrBackupPlanAssociationOutput() BackupDrBackupPlanAssociationOutput
	ToBackupDrBackupPlanAssociationOutputWithContext(ctx context.Context) BackupDrBackupPlanAssociationOutput
}

func (*BackupDrBackupPlanAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupDrBackupPlanAssociation)(nil)).Elem()
}

func (i *BackupDrBackupPlanAssociation) ToBackupDrBackupPlanAssociationOutput() BackupDrBackupPlanAssociationOutput {
	return i.ToBackupDrBackupPlanAssociationOutputWithContext(context.Background())
}

func (i *BackupDrBackupPlanAssociation) ToBackupDrBackupPlanAssociationOutputWithContext(ctx context.Context) BackupDrBackupPlanAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupDrBackupPlanAssociationOutput)
}

type BackupDrBackupPlanAssociationOutput struct{ *pulumi.OutputState }

func (BackupDrBackupPlanAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupDrBackupPlanAssociation)(nil)).Elem()
}

func (o BackupDrBackupPlanAssociationOutput) ToBackupDrBackupPlanAssociationOutput() BackupDrBackupPlanAssociationOutput {
	return o
}

func (o BackupDrBackupPlanAssociationOutput) ToBackupDrBackupPlanAssociationOutputWithContext(ctx context.Context) BackupDrBackupPlanAssociationOutput {
	return o
}

func (o BackupDrBackupPlanAssociationOutput) BackupDrBackupPlanAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.BackupDrBackupPlanAssociationId }).(pulumi.StringOutput)
}

// The BP with which resource needs to be created
func (o BackupDrBackupPlanAssociationOutput) BackupPlan() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.BackupPlan }).(pulumi.StringOutput)
}

// The id of backupplan association
func (o BackupDrBackupPlanAssociationOutput) BackupPlanAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.BackupPlanAssociationId }).(pulumi.StringOutput)
}

// The time when the instance was created
func (o BackupDrBackupPlanAssociationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource name of data source which will be used as storage location for backups taken
func (o BackupDrBackupPlanAssociationOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.DataSource }).(pulumi.StringOutput)
}

// The point in time when the last successful backup was captured from the source
func (o BackupDrBackupPlanAssociationOutput) LastSuccessfulBackupConsistencyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput {
		return v.LastSuccessfulBackupConsistencyTime
	}).(pulumi.StringOutput)
}

// The location for the backupplan association
func (o BackupDrBackupPlanAssociationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of backup plan association resource created
func (o BackupDrBackupPlanAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BackupDrBackupPlanAssociationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The resource for which BPA needs to be created
func (o BackupDrBackupPlanAssociationOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.Resource }).(pulumi.StringOutput)
}

// The resource type of workload on which backupplan is applied
func (o BackupDrBackupPlanAssociationOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Message for rules config info
func (o BackupDrBackupPlanAssociationOutput) RulesConfigInfos() BackupDrBackupPlanAssociationRulesConfigInfoArrayOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) BackupDrBackupPlanAssociationRulesConfigInfoArrayOutput {
		return v.RulesConfigInfos
	}).(BackupDrBackupPlanAssociationRulesConfigInfoArrayOutput)
}

func (o BackupDrBackupPlanAssociationOutput) Timeouts() BackupDrBackupPlanAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) BackupDrBackupPlanAssociationTimeoutsPtrOutput {
		return v.Timeouts
	}).(BackupDrBackupPlanAssociationTimeoutsPtrOutput)
}

// The time when the instance was updated.
func (o BackupDrBackupPlanAssociationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupDrBackupPlanAssociation) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupDrBackupPlanAssociationInput)(nil)).Elem(), &BackupDrBackupPlanAssociation{})
	pulumi.RegisterOutputType(BackupDrBackupPlanAssociationOutput{})
}
