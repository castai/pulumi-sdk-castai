// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerAuthorizedOrgsDesc struct {
	pulumi.CustomResourceState

	AccessContextManagerAuthorizedOrgsDescId pulumi.StringOutput `pulumi:"accessContextManagerAuthorizedOrgsDescId"`
	// The type of entities that need to use the authorization relationship during evaluation, such as a device. Valid values
	// are "ASSET_TYPE_DEVICE" and "ASSET_TYPE_CREDENTIAL_STRENGTH". Possible values: ["ASSET_TYPE_DEVICE",
	// "ASSET_TYPE_CREDENTIAL_STRENGTH"]
	AssetType pulumi.StringPtrOutput `pulumi:"assetType"`
	// The direction of the authorization relationship between this organization and the organizations listed in the "orgs"
	// field. The valid values for this field include the following: AUTHORIZATION_DIRECTION_FROM: Allows this organization to
	// evaluate traffic in the organizations listed in the 'orgs' field. AUTHORIZATION_DIRECTION_TO: Allows the organizations
	// listed in the 'orgs' field to evaluate the traffic in this organization. For the authorization relationship to take
	// effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if
	// organization A authorized organization B and C to evaluate its traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as
	// the authorization direction, organizations B and C must specify "AUTHORIZATION_DIRECTION_FROM" as the authorization
	// direction in their "AuthorizedOrgsDesc" resource. Possible values: ["AUTHORIZATION_DIRECTION_TO",
	// "AUTHORIZATION_DIRECTION_FROM"]
	AuthorizationDirection pulumi.StringPtrOutput `pulumi:"authorizationDirection"`
	// A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST". Possible values:
	// ["AUTHORIZATION_TYPE_TRUST"]
	AuthorizationType pulumi.StringPtrOutput `pulumi:"authorizationType"`
	// Time the AuthorizedOrgsDesc was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Resource name for the 'AuthorizedOrgsDesc'. Format:
	// 'accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}'. The 'authorized_orgs_desc' component must
	// begin with a letter, followed by alphanumeric characters or '_'. After you create an 'AuthorizedOrgsDesc', you cannot
	// change its 'name'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of organization ids in this AuthorizedOrgsDesc. Format: 'organizations/<org_number>' Example:
	// 'organizations/123456'
	Orgs pulumi.StringArrayOutput `pulumi:"orgs"`
	// Required. Resource name for the access policy which owns this 'AuthorizedOrgsDesc'.
	Parent   pulumi.StringOutput                                     `pulumi:"parent"`
	Timeouts AccessContextManagerAuthorizedOrgsDescTimeoutsPtrOutput `pulumi:"timeouts"`
	// Time the AuthorizedOrgsDesc was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAccessContextManagerAuthorizedOrgsDesc registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerAuthorizedOrgsDesc(ctx *pulumi.Context,
	name string, args *AccessContextManagerAuthorizedOrgsDescArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerAuthorizedOrgsDesc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerAuthorizedOrgsDesc
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerAuthorizedOrgsDesc:AccessContextManagerAuthorizedOrgsDesc", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerAuthorizedOrgsDesc gets an existing AccessContextManagerAuthorizedOrgsDesc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerAuthorizedOrgsDesc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerAuthorizedOrgsDescState, opts ...pulumi.ResourceOption) (*AccessContextManagerAuthorizedOrgsDesc, error) {
	var resource AccessContextManagerAuthorizedOrgsDesc
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerAuthorizedOrgsDesc:AccessContextManagerAuthorizedOrgsDesc", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerAuthorizedOrgsDesc resources.
type accessContextManagerAuthorizedOrgsDescState struct {
	AccessContextManagerAuthorizedOrgsDescId *string `pulumi:"accessContextManagerAuthorizedOrgsDescId"`
	// The type of entities that need to use the authorization relationship during evaluation, such as a device. Valid values
	// are "ASSET_TYPE_DEVICE" and "ASSET_TYPE_CREDENTIAL_STRENGTH". Possible values: ["ASSET_TYPE_DEVICE",
	// "ASSET_TYPE_CREDENTIAL_STRENGTH"]
	AssetType *string `pulumi:"assetType"`
	// The direction of the authorization relationship between this organization and the organizations listed in the "orgs"
	// field. The valid values for this field include the following: AUTHORIZATION_DIRECTION_FROM: Allows this organization to
	// evaluate traffic in the organizations listed in the 'orgs' field. AUTHORIZATION_DIRECTION_TO: Allows the organizations
	// listed in the 'orgs' field to evaluate the traffic in this organization. For the authorization relationship to take
	// effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if
	// organization A authorized organization B and C to evaluate its traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as
	// the authorization direction, organizations B and C must specify "AUTHORIZATION_DIRECTION_FROM" as the authorization
	// direction in their "AuthorizedOrgsDesc" resource. Possible values: ["AUTHORIZATION_DIRECTION_TO",
	// "AUTHORIZATION_DIRECTION_FROM"]
	AuthorizationDirection *string `pulumi:"authorizationDirection"`
	// A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST". Possible values:
	// ["AUTHORIZATION_TYPE_TRUST"]
	AuthorizationType *string `pulumi:"authorizationType"`
	// Time the AuthorizedOrgsDesc was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Resource name for the 'AuthorizedOrgsDesc'. Format:
	// 'accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}'. The 'authorized_orgs_desc' component must
	// begin with a letter, followed by alphanumeric characters or '_'. After you create an 'AuthorizedOrgsDesc', you cannot
	// change its 'name'.
	Name *string `pulumi:"name"`
	// The list of organization ids in this AuthorizedOrgsDesc. Format: 'organizations/<org_number>' Example:
	// 'organizations/123456'
	Orgs []string `pulumi:"orgs"`
	// Required. Resource name for the access policy which owns this 'AuthorizedOrgsDesc'.
	Parent   *string                                         `pulumi:"parent"`
	Timeouts *AccessContextManagerAuthorizedOrgsDescTimeouts `pulumi:"timeouts"`
	// Time the AuthorizedOrgsDesc was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type AccessContextManagerAuthorizedOrgsDescState struct {
	AccessContextManagerAuthorizedOrgsDescId pulumi.StringPtrInput
	// The type of entities that need to use the authorization relationship during evaluation, such as a device. Valid values
	// are "ASSET_TYPE_DEVICE" and "ASSET_TYPE_CREDENTIAL_STRENGTH". Possible values: ["ASSET_TYPE_DEVICE",
	// "ASSET_TYPE_CREDENTIAL_STRENGTH"]
	AssetType pulumi.StringPtrInput
	// The direction of the authorization relationship between this organization and the organizations listed in the "orgs"
	// field. The valid values for this field include the following: AUTHORIZATION_DIRECTION_FROM: Allows this organization to
	// evaluate traffic in the organizations listed in the 'orgs' field. AUTHORIZATION_DIRECTION_TO: Allows the organizations
	// listed in the 'orgs' field to evaluate the traffic in this organization. For the authorization relationship to take
	// effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if
	// organization A authorized organization B and C to evaluate its traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as
	// the authorization direction, organizations B and C must specify "AUTHORIZATION_DIRECTION_FROM" as the authorization
	// direction in their "AuthorizedOrgsDesc" resource. Possible values: ["AUTHORIZATION_DIRECTION_TO",
	// "AUTHORIZATION_DIRECTION_FROM"]
	AuthorizationDirection pulumi.StringPtrInput
	// A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST". Possible values:
	// ["AUTHORIZATION_TYPE_TRUST"]
	AuthorizationType pulumi.StringPtrInput
	// Time the AuthorizedOrgsDesc was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Resource name for the 'AuthorizedOrgsDesc'. Format:
	// 'accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}'. The 'authorized_orgs_desc' component must
	// begin with a letter, followed by alphanumeric characters or '_'. After you create an 'AuthorizedOrgsDesc', you cannot
	// change its 'name'.
	Name pulumi.StringPtrInput
	// The list of organization ids in this AuthorizedOrgsDesc. Format: 'organizations/<org_number>' Example:
	// 'organizations/123456'
	Orgs pulumi.StringArrayInput
	// Required. Resource name for the access policy which owns this 'AuthorizedOrgsDesc'.
	Parent   pulumi.StringPtrInput
	Timeouts AccessContextManagerAuthorizedOrgsDescTimeoutsPtrInput
	// Time the AuthorizedOrgsDesc was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (AccessContextManagerAuthorizedOrgsDescState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerAuthorizedOrgsDescState)(nil)).Elem()
}

type accessContextManagerAuthorizedOrgsDescArgs struct {
	AccessContextManagerAuthorizedOrgsDescId *string `pulumi:"accessContextManagerAuthorizedOrgsDescId"`
	// The type of entities that need to use the authorization relationship during evaluation, such as a device. Valid values
	// are "ASSET_TYPE_DEVICE" and "ASSET_TYPE_CREDENTIAL_STRENGTH". Possible values: ["ASSET_TYPE_DEVICE",
	// "ASSET_TYPE_CREDENTIAL_STRENGTH"]
	AssetType *string `pulumi:"assetType"`
	// The direction of the authorization relationship between this organization and the organizations listed in the "orgs"
	// field. The valid values for this field include the following: AUTHORIZATION_DIRECTION_FROM: Allows this organization to
	// evaluate traffic in the organizations listed in the 'orgs' field. AUTHORIZATION_DIRECTION_TO: Allows the organizations
	// listed in the 'orgs' field to evaluate the traffic in this organization. For the authorization relationship to take
	// effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if
	// organization A authorized organization B and C to evaluate its traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as
	// the authorization direction, organizations B and C must specify "AUTHORIZATION_DIRECTION_FROM" as the authorization
	// direction in their "AuthorizedOrgsDesc" resource. Possible values: ["AUTHORIZATION_DIRECTION_TO",
	// "AUTHORIZATION_DIRECTION_FROM"]
	AuthorizationDirection *string `pulumi:"authorizationDirection"`
	// A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST". Possible values:
	// ["AUTHORIZATION_TYPE_TRUST"]
	AuthorizationType *string `pulumi:"authorizationType"`
	// Resource name for the 'AuthorizedOrgsDesc'. Format:
	// 'accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}'. The 'authorized_orgs_desc' component must
	// begin with a letter, followed by alphanumeric characters or '_'. After you create an 'AuthorizedOrgsDesc', you cannot
	// change its 'name'.
	Name *string `pulumi:"name"`
	// The list of organization ids in this AuthorizedOrgsDesc. Format: 'organizations/<org_number>' Example:
	// 'organizations/123456'
	Orgs []string `pulumi:"orgs"`
	// Required. Resource name for the access policy which owns this 'AuthorizedOrgsDesc'.
	Parent   string                                          `pulumi:"parent"`
	Timeouts *AccessContextManagerAuthorizedOrgsDescTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessContextManagerAuthorizedOrgsDesc resource.
type AccessContextManagerAuthorizedOrgsDescArgs struct {
	AccessContextManagerAuthorizedOrgsDescId pulumi.StringPtrInput
	// The type of entities that need to use the authorization relationship during evaluation, such as a device. Valid values
	// are "ASSET_TYPE_DEVICE" and "ASSET_TYPE_CREDENTIAL_STRENGTH". Possible values: ["ASSET_TYPE_DEVICE",
	// "ASSET_TYPE_CREDENTIAL_STRENGTH"]
	AssetType pulumi.StringPtrInput
	// The direction of the authorization relationship between this organization and the organizations listed in the "orgs"
	// field. The valid values for this field include the following: AUTHORIZATION_DIRECTION_FROM: Allows this organization to
	// evaluate traffic in the organizations listed in the 'orgs' field. AUTHORIZATION_DIRECTION_TO: Allows the organizations
	// listed in the 'orgs' field to evaluate the traffic in this organization. For the authorization relationship to take
	// effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if
	// organization A authorized organization B and C to evaluate its traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as
	// the authorization direction, organizations B and C must specify "AUTHORIZATION_DIRECTION_FROM" as the authorization
	// direction in their "AuthorizedOrgsDesc" resource. Possible values: ["AUTHORIZATION_DIRECTION_TO",
	// "AUTHORIZATION_DIRECTION_FROM"]
	AuthorizationDirection pulumi.StringPtrInput
	// A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST". Possible values:
	// ["AUTHORIZATION_TYPE_TRUST"]
	AuthorizationType pulumi.StringPtrInput
	// Resource name for the 'AuthorizedOrgsDesc'. Format:
	// 'accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}'. The 'authorized_orgs_desc' component must
	// begin with a letter, followed by alphanumeric characters or '_'. After you create an 'AuthorizedOrgsDesc', you cannot
	// change its 'name'.
	Name pulumi.StringPtrInput
	// The list of organization ids in this AuthorizedOrgsDesc. Format: 'organizations/<org_number>' Example:
	// 'organizations/123456'
	Orgs pulumi.StringArrayInput
	// Required. Resource name for the access policy which owns this 'AuthorizedOrgsDesc'.
	Parent   pulumi.StringInput
	Timeouts AccessContextManagerAuthorizedOrgsDescTimeoutsPtrInput
}

func (AccessContextManagerAuthorizedOrgsDescArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerAuthorizedOrgsDescArgs)(nil)).Elem()
}

type AccessContextManagerAuthorizedOrgsDescInput interface {
	pulumi.Input

	ToAccessContextManagerAuthorizedOrgsDescOutput() AccessContextManagerAuthorizedOrgsDescOutput
	ToAccessContextManagerAuthorizedOrgsDescOutputWithContext(ctx context.Context) AccessContextManagerAuthorizedOrgsDescOutput
}

func (*AccessContextManagerAuthorizedOrgsDesc) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerAuthorizedOrgsDesc)(nil)).Elem()
}

func (i *AccessContextManagerAuthorizedOrgsDesc) ToAccessContextManagerAuthorizedOrgsDescOutput() AccessContextManagerAuthorizedOrgsDescOutput {
	return i.ToAccessContextManagerAuthorizedOrgsDescOutputWithContext(context.Background())
}

func (i *AccessContextManagerAuthorizedOrgsDesc) ToAccessContextManagerAuthorizedOrgsDescOutputWithContext(ctx context.Context) AccessContextManagerAuthorizedOrgsDescOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerAuthorizedOrgsDescOutput)
}

type AccessContextManagerAuthorizedOrgsDescOutput struct{ *pulumi.OutputState }

func (AccessContextManagerAuthorizedOrgsDescOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerAuthorizedOrgsDesc)(nil)).Elem()
}

func (o AccessContextManagerAuthorizedOrgsDescOutput) ToAccessContextManagerAuthorizedOrgsDescOutput() AccessContextManagerAuthorizedOrgsDescOutput {
	return o
}

func (o AccessContextManagerAuthorizedOrgsDescOutput) ToAccessContextManagerAuthorizedOrgsDescOutputWithContext(ctx context.Context) AccessContextManagerAuthorizedOrgsDescOutput {
	return o
}

func (o AccessContextManagerAuthorizedOrgsDescOutput) AccessContextManagerAuthorizedOrgsDescId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringOutput {
		return v.AccessContextManagerAuthorizedOrgsDescId
	}).(pulumi.StringOutput)
}

// The type of entities that need to use the authorization relationship during evaluation, such as a device. Valid values
// are "ASSET_TYPE_DEVICE" and "ASSET_TYPE_CREDENTIAL_STRENGTH". Possible values: ["ASSET_TYPE_DEVICE",
// "ASSET_TYPE_CREDENTIAL_STRENGTH"]
func (o AccessContextManagerAuthorizedOrgsDescOutput) AssetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringPtrOutput { return v.AssetType }).(pulumi.StringPtrOutput)
}

// The direction of the authorization relationship between this organization and the organizations listed in the "orgs"
// field. The valid values for this field include the following: AUTHORIZATION_DIRECTION_FROM: Allows this organization to
// evaluate traffic in the organizations listed in the 'orgs' field. AUTHORIZATION_DIRECTION_TO: Allows the organizations
// listed in the 'orgs' field to evaluate the traffic in this organization. For the authorization relationship to take
// effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if
// organization A authorized organization B and C to evaluate its traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as
// the authorization direction, organizations B and C must specify "AUTHORIZATION_DIRECTION_FROM" as the authorization
// direction in their "AuthorizedOrgsDesc" resource. Possible values: ["AUTHORIZATION_DIRECTION_TO",
// "AUTHORIZATION_DIRECTION_FROM"]
func (o AccessContextManagerAuthorizedOrgsDescOutput) AuthorizationDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringPtrOutput {
		return v.AuthorizationDirection
	}).(pulumi.StringPtrOutput)
}

// A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST". Possible values:
// ["AUTHORIZATION_TYPE_TRUST"]
func (o AccessContextManagerAuthorizedOrgsDescOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringPtrOutput { return v.AuthorizationType }).(pulumi.StringPtrOutput)
}

// Time the AuthorizedOrgsDesc was created in UTC.
func (o AccessContextManagerAuthorizedOrgsDescOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource name for the 'AuthorizedOrgsDesc'. Format:
// 'accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}'. The 'authorized_orgs_desc' component must
// begin with a letter, followed by alphanumeric characters or '_'. After you create an 'AuthorizedOrgsDesc', you cannot
// change its 'name'.
func (o AccessContextManagerAuthorizedOrgsDescOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of organization ids in this AuthorizedOrgsDesc. Format: 'organizations/<org_number>' Example:
// 'organizations/123456'
func (o AccessContextManagerAuthorizedOrgsDescOutput) Orgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringArrayOutput { return v.Orgs }).(pulumi.StringArrayOutput)
}

// Required. Resource name for the access policy which owns this 'AuthorizedOrgsDesc'.
func (o AccessContextManagerAuthorizedOrgsDescOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

func (o AccessContextManagerAuthorizedOrgsDescOutput) Timeouts() AccessContextManagerAuthorizedOrgsDescTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) AccessContextManagerAuthorizedOrgsDescTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerAuthorizedOrgsDescTimeoutsPtrOutput)
}

// Time the AuthorizedOrgsDesc was updated in UTC.
func (o AccessContextManagerAuthorizedOrgsDescOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAuthorizedOrgsDesc) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerAuthorizedOrgsDescInput)(nil)).Elem(), &AccessContextManagerAuthorizedOrgsDesc{})
	pulumi.RegisterOutputType(AccessContextManagerAuthorizedOrgsDescOutput{})
}
