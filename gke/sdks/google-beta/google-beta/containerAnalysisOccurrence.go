// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerAnalysisOccurrence struct {
	pulumi.CustomResourceState

	// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
	// signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
	// trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
	// find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
	// this attestation was intended to sign.
	Attestation                   ContainerAnalysisOccurrenceAttestationOutput `pulumi:"attestation"`
	ContainerAnalysisOccurrenceId pulumi.StringOutput                          `pulumi:"containerAnalysisOccurrenceId"`
	// The time when the repository was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
	// in list requests.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the occurrence.
	Name pulumi.StringOutput `pulumi:"name"`
	// The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
	// used as a filter in list requests.
	NoteName pulumi.StringOutput `pulumi:"noteName"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrOutput `pulumi:"remediation"`
	// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
	// https://gcr.io/project/image@sha256:123abc for a Docker image.
	ResourceUri pulumi.StringOutput                          `pulumi:"resourceUri"`
	Timeouts    ContainerAnalysisOccurrenceTimeoutsPtrOutput `pulumi:"timeouts"`
	// The time when the repository was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewContainerAnalysisOccurrence registers a new resource with the given unique name, arguments, and options.
func NewContainerAnalysisOccurrence(ctx *pulumi.Context,
	name string, args *ContainerAnalysisOccurrenceArgs, opts ...pulumi.ResourceOption) (*ContainerAnalysisOccurrence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Attestation == nil {
		return nil, errors.New("invalid value for required argument 'Attestation'")
	}
	if args.NoteName == nil {
		return nil, errors.New("invalid value for required argument 'NoteName'")
	}
	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ContainerAnalysisOccurrence
	err = ctx.RegisterPackageResource("google-beta:index/containerAnalysisOccurrence:ContainerAnalysisOccurrence", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerAnalysisOccurrence gets an existing ContainerAnalysisOccurrence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerAnalysisOccurrence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerAnalysisOccurrenceState, opts ...pulumi.ResourceOption) (*ContainerAnalysisOccurrence, error) {
	var resource ContainerAnalysisOccurrence
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/containerAnalysisOccurrence:ContainerAnalysisOccurrence", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerAnalysisOccurrence resources.
type containerAnalysisOccurrenceState struct {
	// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
	// signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
	// trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
	// find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
	// this attestation was intended to sign.
	Attestation                   *ContainerAnalysisOccurrenceAttestation `pulumi:"attestation"`
	ContainerAnalysisOccurrenceId *string                                 `pulumi:"containerAnalysisOccurrenceId"`
	// The time when the repository was created.
	CreateTime *string `pulumi:"createTime"`
	// The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
	// in list requests.
	Kind *string `pulumi:"kind"`
	// The name of the occurrence.
	Name *string `pulumi:"name"`
	// The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
	// used as a filter in list requests.
	NoteName *string `pulumi:"noteName"`
	Project  *string `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation *string `pulumi:"remediation"`
	// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
	// https://gcr.io/project/image@sha256:123abc for a Docker image.
	ResourceUri *string                              `pulumi:"resourceUri"`
	Timeouts    *ContainerAnalysisOccurrenceTimeouts `pulumi:"timeouts"`
	// The time when the repository was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ContainerAnalysisOccurrenceState struct {
	// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
	// signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
	// trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
	// find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
	// this attestation was intended to sign.
	Attestation                   ContainerAnalysisOccurrenceAttestationPtrInput
	ContainerAnalysisOccurrenceId pulumi.StringPtrInput
	// The time when the repository was created.
	CreateTime pulumi.StringPtrInput
	// The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
	// in list requests.
	Kind pulumi.StringPtrInput
	// The name of the occurrence.
	Name pulumi.StringPtrInput
	// The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
	// used as a filter in list requests.
	NoteName pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrInput
	// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
	// https://gcr.io/project/image@sha256:123abc for a Docker image.
	ResourceUri pulumi.StringPtrInput
	Timeouts    ContainerAnalysisOccurrenceTimeoutsPtrInput
	// The time when the repository was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ContainerAnalysisOccurrenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerAnalysisOccurrenceState)(nil)).Elem()
}

type containerAnalysisOccurrenceArgs struct {
	// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
	// signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
	// trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
	// find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
	// this attestation was intended to sign.
	Attestation                   ContainerAnalysisOccurrenceAttestation `pulumi:"attestation"`
	ContainerAnalysisOccurrenceId *string                                `pulumi:"containerAnalysisOccurrenceId"`
	// The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
	// used as a filter in list requests.
	NoteName string  `pulumi:"noteName"`
	Project  *string `pulumi:"project"`
	// A description of actions that can be taken to remedy the note.
	Remediation *string `pulumi:"remediation"`
	// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
	// https://gcr.io/project/image@sha256:123abc for a Docker image.
	ResourceUri string                               `pulumi:"resourceUri"`
	Timeouts    *ContainerAnalysisOccurrenceTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ContainerAnalysisOccurrence resource.
type ContainerAnalysisOccurrenceArgs struct {
	// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
	// signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
	// trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
	// find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
	// this attestation was intended to sign.
	Attestation                   ContainerAnalysisOccurrenceAttestationInput
	ContainerAnalysisOccurrenceId pulumi.StringPtrInput
	// The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
	// used as a filter in list requests.
	NoteName pulumi.StringInput
	Project  pulumi.StringPtrInput
	// A description of actions that can be taken to remedy the note.
	Remediation pulumi.StringPtrInput
	// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
	// https://gcr.io/project/image@sha256:123abc for a Docker image.
	ResourceUri pulumi.StringInput
	Timeouts    ContainerAnalysisOccurrenceTimeoutsPtrInput
}

func (ContainerAnalysisOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerAnalysisOccurrenceArgs)(nil)).Elem()
}

type ContainerAnalysisOccurrenceInput interface {
	pulumi.Input

	ToContainerAnalysisOccurrenceOutput() ContainerAnalysisOccurrenceOutput
	ToContainerAnalysisOccurrenceOutputWithContext(ctx context.Context) ContainerAnalysisOccurrenceOutput
}

func (*ContainerAnalysisOccurrence) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAnalysisOccurrence)(nil)).Elem()
}

func (i *ContainerAnalysisOccurrence) ToContainerAnalysisOccurrenceOutput() ContainerAnalysisOccurrenceOutput {
	return i.ToContainerAnalysisOccurrenceOutputWithContext(context.Background())
}

func (i *ContainerAnalysisOccurrence) ToContainerAnalysisOccurrenceOutputWithContext(ctx context.Context) ContainerAnalysisOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAnalysisOccurrenceOutput)
}

type ContainerAnalysisOccurrenceOutput struct{ *pulumi.OutputState }

func (ContainerAnalysisOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAnalysisOccurrence)(nil)).Elem()
}

func (o ContainerAnalysisOccurrenceOutput) ToContainerAnalysisOccurrenceOutput() ContainerAnalysisOccurrenceOutput {
	return o
}

func (o ContainerAnalysisOccurrenceOutput) ToContainerAnalysisOccurrenceOutputWithContext(ctx context.Context) ContainerAnalysisOccurrenceOutput {
	return o
}

// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
// signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
// trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
// find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
// this attestation was intended to sign.
func (o ContainerAnalysisOccurrenceOutput) Attestation() ContainerAnalysisOccurrenceAttestationOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) ContainerAnalysisOccurrenceAttestationOutput {
		return v.Attestation
	}).(ContainerAnalysisOccurrenceAttestationOutput)
}

func (o ContainerAnalysisOccurrenceOutput) ContainerAnalysisOccurrenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.ContainerAnalysisOccurrenceId }).(pulumi.StringOutput)
}

// The time when the repository was created.
func (o ContainerAnalysisOccurrenceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
// in list requests.
func (o ContainerAnalysisOccurrenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the occurrence.
func (o ContainerAnalysisOccurrenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
// used as a filter in list requests.
func (o ContainerAnalysisOccurrenceOutput) NoteName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.NoteName }).(pulumi.StringOutput)
}

func (o ContainerAnalysisOccurrenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A description of actions that can be taken to remedy the note.
func (o ContainerAnalysisOccurrenceOutput) Remediation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringPtrOutput { return v.Remediation }).(pulumi.StringPtrOutput)
}

// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
// https://gcr.io/project/image@sha256:123abc for a Docker image.
func (o ContainerAnalysisOccurrenceOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.ResourceUri }).(pulumi.StringOutput)
}

func (o ContainerAnalysisOccurrenceOutput) Timeouts() ContainerAnalysisOccurrenceTimeoutsPtrOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) ContainerAnalysisOccurrenceTimeoutsPtrOutput { return v.Timeouts }).(ContainerAnalysisOccurrenceTimeoutsPtrOutput)
}

// The time when the repository was last updated.
func (o ContainerAnalysisOccurrenceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerAnalysisOccurrence) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerAnalysisOccurrenceInput)(nil)).Elem(), &ContainerAnalysisOccurrence{})
	pulumi.RegisterOutputType(ContainerAnalysisOccurrenceOutput{})
}
