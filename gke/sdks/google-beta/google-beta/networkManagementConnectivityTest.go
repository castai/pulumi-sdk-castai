// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkManagementConnectivityTest struct {
	pulumi.CustomResourceState

	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
	// Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
	// address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
	// route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
	// then you must also specify either a destination IP address or VPC network to identify the destination interface. A
	// reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
	// that you don't intend to test.
	Destination     NetworkManagementConnectivityTestDestinationOutput `pulumi:"destination"`
	EffectiveLabels pulumi.StringMapOutput                             `pulumi:"effectiveLabels"`
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Unique name for the connectivity test.
	Name                                pulumi.StringOutput `pulumi:"name"`
	NetworkManagementConnectivityTestId pulumi.StringOutput `pulumi:"networkManagementConnectivityTestId"`
	Project                             pulumi.StringOutput `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
	// project boundaries.
	RelatedProjects pulumi.StringArrayOutput `pulumi:"relatedProjects"`
	// Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
	// an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
	// network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
	// If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
	// source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
	// to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
	// proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
	// to test.
	Source NetworkManagementConnectivityTestSourceOutput `pulumi:"source"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                             `pulumi:"terraformLabels"`
	Timeouts        NetworkManagementConnectivityTestTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetworkManagementConnectivityTest registers a new resource with the given unique name, arguments, and options.
func NewNetworkManagementConnectivityTest(ctx *pulumi.Context,
	name string, args *NetworkManagementConnectivityTestArgs, opts ...pulumi.ResourceOption) (*NetworkManagementConnectivityTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetworkManagementConnectivityTest
	err = ctx.RegisterPackageResource("google-beta:index/networkManagementConnectivityTest:NetworkManagementConnectivityTest", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManagementConnectivityTest gets an existing NetworkManagementConnectivityTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManagementConnectivityTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagementConnectivityTestState, opts ...pulumi.ResourceOption) (*NetworkManagementConnectivityTest, error) {
	var resource NetworkManagementConnectivityTest
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/networkManagementConnectivityTest:NetworkManagementConnectivityTest", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManagementConnectivityTest resources.
type networkManagementConnectivityTestState struct {
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
	// Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
	// address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
	// route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
	// then you must also specify either a destination IP address or VPC network to identify the destination interface. A
	// reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
	// that you don't intend to test.
	Destination     *NetworkManagementConnectivityTestDestination `pulumi:"destination"`
	EffectiveLabels map[string]string                             `pulumi:"effectiveLabels"`
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Unique name for the connectivity test.
	Name                                *string `pulumi:"name"`
	NetworkManagementConnectivityTestId *string `pulumi:"networkManagementConnectivityTestId"`
	Project                             *string `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol *string `pulumi:"protocol"`
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
	// project boundaries.
	RelatedProjects []string `pulumi:"relatedProjects"`
	// Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
	// an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
	// network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
	// If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
	// source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
	// to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
	// proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
	// to test.
	Source *NetworkManagementConnectivityTestSource `pulumi:"source"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                          `pulumi:"terraformLabels"`
	Timeouts        *NetworkManagementConnectivityTestTimeouts `pulumi:"timeouts"`
}

type NetworkManagementConnectivityTestState struct {
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
	// Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
	// address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
	// route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
	// then you must also specify either a destination IP address or VPC network to identify the destination interface. A
	// reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
	// that you don't intend to test.
	Destination     NetworkManagementConnectivityTestDestinationPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Unique name for the connectivity test.
	Name                                pulumi.StringPtrInput
	NetworkManagementConnectivityTestId pulumi.StringPtrInput
	Project                             pulumi.StringPtrInput
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrInput
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
	// project boundaries.
	RelatedProjects pulumi.StringArrayInput
	// Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
	// an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
	// network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
	// If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
	// source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
	// to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
	// proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
	// to test.
	Source NetworkManagementConnectivityTestSourcePtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetworkManagementConnectivityTestTimeoutsPtrInput
}

func (NetworkManagementConnectivityTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagementConnectivityTestState)(nil)).Elem()
}

type networkManagementConnectivityTestArgs struct {
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
	// Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
	// address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
	// route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
	// then you must also specify either a destination IP address or VPC network to identify the destination interface. A
	// reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
	// that you don't intend to test.
	Destination NetworkManagementConnectivityTestDestination `pulumi:"destination"`
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels map[string]string `pulumi:"labels"`
	// Unique name for the connectivity test.
	Name                                *string `pulumi:"name"`
	NetworkManagementConnectivityTestId *string `pulumi:"networkManagementConnectivityTestId"`
	Project                             *string `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol *string `pulumi:"protocol"`
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
	// project boundaries.
	RelatedProjects []string `pulumi:"relatedProjects"`
	// Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
	// an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
	// network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
	// If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
	// source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
	// to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
	// proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
	// to test.
	Source   NetworkManagementConnectivityTestSource    `pulumi:"source"`
	Timeouts *NetworkManagementConnectivityTestTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetworkManagementConnectivityTest resource.
type NetworkManagementConnectivityTestArgs struct {
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
	// Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
	// address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
	// route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
	// then you must also specify either a destination IP address or VPC network to identify the destination interface. A
	// reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
	// that you don't intend to test.
	Destination NetworkManagementConnectivityTestDestinationInput
	// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
	// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
	// resource.
	Labels pulumi.StringMapInput
	// Unique name for the connectivity test.
	Name                                pulumi.StringPtrInput
	NetworkManagementConnectivityTestId pulumi.StringPtrInput
	Project                             pulumi.StringPtrInput
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrInput
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
	// project boundaries.
	RelatedProjects pulumi.StringArrayInput
	// Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
	// an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
	// network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
	// If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
	// source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
	// to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
	// proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
	// to test.
	Source   NetworkManagementConnectivityTestSourceInput
	Timeouts NetworkManagementConnectivityTestTimeoutsPtrInput
}

func (NetworkManagementConnectivityTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagementConnectivityTestArgs)(nil)).Elem()
}

type NetworkManagementConnectivityTestInput interface {
	pulumi.Input

	ToNetworkManagementConnectivityTestOutput() NetworkManagementConnectivityTestOutput
	ToNetworkManagementConnectivityTestOutputWithContext(ctx context.Context) NetworkManagementConnectivityTestOutput
}

func (*NetworkManagementConnectivityTest) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagementConnectivityTest)(nil)).Elem()
}

func (i *NetworkManagementConnectivityTest) ToNetworkManagementConnectivityTestOutput() NetworkManagementConnectivityTestOutput {
	return i.ToNetworkManagementConnectivityTestOutputWithContext(context.Background())
}

func (i *NetworkManagementConnectivityTest) ToNetworkManagementConnectivityTestOutputWithContext(ctx context.Context) NetworkManagementConnectivityTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagementConnectivityTestOutput)
}

type NetworkManagementConnectivityTestOutput struct{ *pulumi.OutputState }

func (NetworkManagementConnectivityTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagementConnectivityTest)(nil)).Elem()
}

func (o NetworkManagementConnectivityTestOutput) ToNetworkManagementConnectivityTestOutput() NetworkManagementConnectivityTestOutput {
	return o
}

func (o NetworkManagementConnectivityTestOutput) ToNetworkManagementConnectivityTestOutputWithContext(ctx context.Context) NetworkManagementConnectivityTestOutput {
	return o
}

// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
func (o NetworkManagementConnectivityTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
// Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
// address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
// route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
// then you must also specify either a destination IP address or VPC network to identify the destination interface. A
// reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
// that you don't intend to test.
func (o NetworkManagementConnectivityTestOutput) Destination() NetworkManagementConnectivityTestDestinationOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) NetworkManagementConnectivityTestDestinationOutput {
		return v.Destination
	}).(NetworkManagementConnectivityTestDestinationOutput)
}

func (o NetworkManagementConnectivityTestOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
// labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
// resource.
func (o NetworkManagementConnectivityTestOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Unique name for the connectivity test.
func (o NetworkManagementConnectivityTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkManagementConnectivityTestOutput) NetworkManagementConnectivityTestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringOutput {
		return v.NetworkManagementConnectivityTestId
	}).(pulumi.StringOutput)
}

func (o NetworkManagementConnectivityTestOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// IP Protocol of the test. When not provided, "TCP" is assumed.
func (o NetworkManagementConnectivityTestOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
// project boundaries.
func (o NetworkManagementConnectivityTestOutput) RelatedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringArrayOutput { return v.RelatedProjects }).(pulumi.StringArrayOutput)
}

// Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
// (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
// an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
// network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
// If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
// source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
// to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
// proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
// to test.
func (o NetworkManagementConnectivityTestOutput) Source() NetworkManagementConnectivityTestSourceOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) NetworkManagementConnectivityTestSourceOutput {
		return v.Source
	}).(NetworkManagementConnectivityTestSourceOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetworkManagementConnectivityTestOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetworkManagementConnectivityTestOutput) Timeouts() NetworkManagementConnectivityTestTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetworkManagementConnectivityTest) NetworkManagementConnectivityTestTimeoutsPtrOutput {
		return v.Timeouts
	}).(NetworkManagementConnectivityTestTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagementConnectivityTestInput)(nil)).Elem(), &NetworkManagementConnectivityTest{})
	pulumi.RegisterOutputType(NetworkManagementConnectivityTestOutput{})
}
