// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppEngineServiceSplitTraffic struct {
	pulumi.CustomResourceState

	AppEngineServiceSplitTrafficId pulumi.StringOutput `pulumi:"appEngineServiceSplitTrafficId"`
	// If set to true traffic will be migrated to this version.
	MigrateTraffic pulumi.BoolPtrOutput `pulumi:"migrateTraffic"`
	Project        pulumi.StringOutput  `pulumi:"project"`
	// The name of the service these settings apply to.
	Service pulumi.StringOutput `pulumi:"service"`
	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	Split    AppEngineServiceSplitTrafficSplitOutput       `pulumi:"split"`
	Timeouts AppEngineServiceSplitTrafficTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAppEngineServiceSplitTraffic registers a new resource with the given unique name, arguments, and options.
func NewAppEngineServiceSplitTraffic(ctx *pulumi.Context,
	name string, args *AppEngineServiceSplitTrafficArgs, opts ...pulumi.ResourceOption) (*AppEngineServiceSplitTraffic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Split == nil {
		return nil, errors.New("invalid value for required argument 'Split'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AppEngineServiceSplitTraffic
	err = ctx.RegisterPackageResource("google-beta:index/appEngineServiceSplitTraffic:AppEngineServiceSplitTraffic", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppEngineServiceSplitTraffic gets an existing AppEngineServiceSplitTraffic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppEngineServiceSplitTraffic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppEngineServiceSplitTrafficState, opts ...pulumi.ResourceOption) (*AppEngineServiceSplitTraffic, error) {
	var resource AppEngineServiceSplitTraffic
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/appEngineServiceSplitTraffic:AppEngineServiceSplitTraffic", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppEngineServiceSplitTraffic resources.
type appEngineServiceSplitTrafficState struct {
	AppEngineServiceSplitTrafficId *string `pulumi:"appEngineServiceSplitTrafficId"`
	// If set to true traffic will be migrated to this version.
	MigrateTraffic *bool   `pulumi:"migrateTraffic"`
	Project        *string `pulumi:"project"`
	// The name of the service these settings apply to.
	Service *string `pulumi:"service"`
	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	Split    *AppEngineServiceSplitTrafficSplit    `pulumi:"split"`
	Timeouts *AppEngineServiceSplitTrafficTimeouts `pulumi:"timeouts"`
}

type AppEngineServiceSplitTrafficState struct {
	AppEngineServiceSplitTrafficId pulumi.StringPtrInput
	// If set to true traffic will be migrated to this version.
	MigrateTraffic pulumi.BoolPtrInput
	Project        pulumi.StringPtrInput
	// The name of the service these settings apply to.
	Service pulumi.StringPtrInput
	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	Split    AppEngineServiceSplitTrafficSplitPtrInput
	Timeouts AppEngineServiceSplitTrafficTimeoutsPtrInput
}

func (AppEngineServiceSplitTrafficState) ElementType() reflect.Type {
	return reflect.TypeOf((*appEngineServiceSplitTrafficState)(nil)).Elem()
}

type appEngineServiceSplitTrafficArgs struct {
	AppEngineServiceSplitTrafficId *string `pulumi:"appEngineServiceSplitTrafficId"`
	// If set to true traffic will be migrated to this version.
	MigrateTraffic *bool   `pulumi:"migrateTraffic"`
	Project        *string `pulumi:"project"`
	// The name of the service these settings apply to.
	Service string `pulumi:"service"`
	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	Split    AppEngineServiceSplitTrafficSplit     `pulumi:"split"`
	Timeouts *AppEngineServiceSplitTrafficTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AppEngineServiceSplitTraffic resource.
type AppEngineServiceSplitTrafficArgs struct {
	AppEngineServiceSplitTrafficId pulumi.StringPtrInput
	// If set to true traffic will be migrated to this version.
	MigrateTraffic pulumi.BoolPtrInput
	Project        pulumi.StringPtrInput
	// The name of the service these settings apply to.
	Service pulumi.StringInput
	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	Split    AppEngineServiceSplitTrafficSplitInput
	Timeouts AppEngineServiceSplitTrafficTimeoutsPtrInput
}

func (AppEngineServiceSplitTrafficArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appEngineServiceSplitTrafficArgs)(nil)).Elem()
}

type AppEngineServiceSplitTrafficInput interface {
	pulumi.Input

	ToAppEngineServiceSplitTrafficOutput() AppEngineServiceSplitTrafficOutput
	ToAppEngineServiceSplitTrafficOutputWithContext(ctx context.Context) AppEngineServiceSplitTrafficOutput
}

func (*AppEngineServiceSplitTraffic) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceSplitTraffic)(nil)).Elem()
}

func (i *AppEngineServiceSplitTraffic) ToAppEngineServiceSplitTrafficOutput() AppEngineServiceSplitTrafficOutput {
	return i.ToAppEngineServiceSplitTrafficOutputWithContext(context.Background())
}

func (i *AppEngineServiceSplitTraffic) ToAppEngineServiceSplitTrafficOutputWithContext(ctx context.Context) AppEngineServiceSplitTrafficOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineServiceSplitTrafficOutput)
}

type AppEngineServiceSplitTrafficOutput struct{ *pulumi.OutputState }

func (AppEngineServiceSplitTrafficOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineServiceSplitTraffic)(nil)).Elem()
}

func (o AppEngineServiceSplitTrafficOutput) ToAppEngineServiceSplitTrafficOutput() AppEngineServiceSplitTrafficOutput {
	return o
}

func (o AppEngineServiceSplitTrafficOutput) ToAppEngineServiceSplitTrafficOutputWithContext(ctx context.Context) AppEngineServiceSplitTrafficOutput {
	return o
}

func (o AppEngineServiceSplitTrafficOutput) AppEngineServiceSplitTrafficId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineServiceSplitTraffic) pulumi.StringOutput { return v.AppEngineServiceSplitTrafficId }).(pulumi.StringOutput)
}

// If set to true traffic will be migrated to this version.
func (o AppEngineServiceSplitTrafficOutput) MigrateTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceSplitTraffic) pulumi.BoolPtrOutput { return v.MigrateTraffic }).(pulumi.BoolPtrOutput)
}

func (o AppEngineServiceSplitTrafficOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineServiceSplitTraffic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the service these settings apply to.
func (o AppEngineServiceSplitTrafficOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *AppEngineServiceSplitTraffic) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
func (o AppEngineServiceSplitTrafficOutput) Split() AppEngineServiceSplitTrafficSplitOutput {
	return o.ApplyT(func(v *AppEngineServiceSplitTraffic) AppEngineServiceSplitTrafficSplitOutput { return v.Split }).(AppEngineServiceSplitTrafficSplitOutput)
}

func (o AppEngineServiceSplitTrafficOutput) Timeouts() AppEngineServiceSplitTrafficTimeoutsPtrOutput {
	return o.ApplyT(func(v *AppEngineServiceSplitTraffic) AppEngineServiceSplitTrafficTimeoutsPtrOutput { return v.Timeouts }).(AppEngineServiceSplitTrafficTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppEngineServiceSplitTrafficInput)(nil)).Elem(), &AppEngineServiceSplitTraffic{})
	pulumi.RegisterOutputType(AppEngineServiceSplitTrafficOutput{})
}
