// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamDenyPolicy struct {
	pulumi.CustomResourceState

	// The display name of the rule.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The hash of the resource. Used internally during updates.
	Etag            pulumi.StringOutput `pulumi:"etag"`
	IamDenyPolicyId pulumi.StringOutput `pulumi:"iamDenyPolicyId"`
	// The name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The attachment point is identified by its URL-encoded full resource name.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Rules to be applied.
	Rules    IamDenyPolicyRuleArrayOutput   `pulumi:"rules"`
	Timeouts IamDenyPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewIamDenyPolicy registers a new resource with the given unique name, arguments, and options.
func NewIamDenyPolicy(ctx *pulumi.Context,
	name string, args *IamDenyPolicyArgs, opts ...pulumi.ResourceOption) (*IamDenyPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IamDenyPolicy
	err = ctx.RegisterPackageResource("google-beta:index/iamDenyPolicy:IamDenyPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamDenyPolicy gets an existing IamDenyPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamDenyPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamDenyPolicyState, opts ...pulumi.ResourceOption) (*IamDenyPolicy, error) {
	var resource IamDenyPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/iamDenyPolicy:IamDenyPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamDenyPolicy resources.
type iamDenyPolicyState struct {
	// The display name of the rule.
	DisplayName *string `pulumi:"displayName"`
	// The hash of the resource. Used internally during updates.
	Etag            *string `pulumi:"etag"`
	IamDenyPolicyId *string `pulumi:"iamDenyPolicyId"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The attachment point is identified by its URL-encoded full resource name.
	Parent *string `pulumi:"parent"`
	// Rules to be applied.
	Rules    []IamDenyPolicyRule    `pulumi:"rules"`
	Timeouts *IamDenyPolicyTimeouts `pulumi:"timeouts"`
}

type IamDenyPolicyState struct {
	// The display name of the rule.
	DisplayName pulumi.StringPtrInput
	// The hash of the resource. Used internally during updates.
	Etag            pulumi.StringPtrInput
	IamDenyPolicyId pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The attachment point is identified by its URL-encoded full resource name.
	Parent pulumi.StringPtrInput
	// Rules to be applied.
	Rules    IamDenyPolicyRuleArrayInput
	Timeouts IamDenyPolicyTimeoutsPtrInput
}

func (IamDenyPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamDenyPolicyState)(nil)).Elem()
}

type iamDenyPolicyArgs struct {
	// The display name of the rule.
	DisplayName     *string `pulumi:"displayName"`
	IamDenyPolicyId *string `pulumi:"iamDenyPolicyId"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The attachment point is identified by its URL-encoded full resource name.
	Parent string `pulumi:"parent"`
	// Rules to be applied.
	Rules    []IamDenyPolicyRule    `pulumi:"rules"`
	Timeouts *IamDenyPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a IamDenyPolicy resource.
type IamDenyPolicyArgs struct {
	// The display name of the rule.
	DisplayName     pulumi.StringPtrInput
	IamDenyPolicyId pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The attachment point is identified by its URL-encoded full resource name.
	Parent pulumi.StringInput
	// Rules to be applied.
	Rules    IamDenyPolicyRuleArrayInput
	Timeouts IamDenyPolicyTimeoutsPtrInput
}

func (IamDenyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamDenyPolicyArgs)(nil)).Elem()
}

type IamDenyPolicyInput interface {
	pulumi.Input

	ToIamDenyPolicyOutput() IamDenyPolicyOutput
	ToIamDenyPolicyOutputWithContext(ctx context.Context) IamDenyPolicyOutput
}

func (*IamDenyPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**IamDenyPolicy)(nil)).Elem()
}

func (i *IamDenyPolicy) ToIamDenyPolicyOutput() IamDenyPolicyOutput {
	return i.ToIamDenyPolicyOutputWithContext(context.Background())
}

func (i *IamDenyPolicy) ToIamDenyPolicyOutputWithContext(ctx context.Context) IamDenyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamDenyPolicyOutput)
}

type IamDenyPolicyOutput struct{ *pulumi.OutputState }

func (IamDenyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamDenyPolicy)(nil)).Elem()
}

func (o IamDenyPolicyOutput) ToIamDenyPolicyOutput() IamDenyPolicyOutput {
	return o
}

func (o IamDenyPolicyOutput) ToIamDenyPolicyOutputWithContext(ctx context.Context) IamDenyPolicyOutput {
	return o
}

// The display name of the rule.
func (o IamDenyPolicyOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamDenyPolicy) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The hash of the resource. Used internally during updates.
func (o IamDenyPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *IamDenyPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o IamDenyPolicyOutput) IamDenyPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamDenyPolicy) pulumi.StringOutput { return v.IamDenyPolicyId }).(pulumi.StringOutput)
}

// The name of the policy.
func (o IamDenyPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamDenyPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The attachment point is identified by its URL-encoded full resource name.
func (o IamDenyPolicyOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *IamDenyPolicy) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Rules to be applied.
func (o IamDenyPolicyOutput) Rules() IamDenyPolicyRuleArrayOutput {
	return o.ApplyT(func(v *IamDenyPolicy) IamDenyPolicyRuleArrayOutput { return v.Rules }).(IamDenyPolicyRuleArrayOutput)
}

func (o IamDenyPolicyOutput) Timeouts() IamDenyPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *IamDenyPolicy) IamDenyPolicyTimeoutsPtrOutput { return v.Timeouts }).(IamDenyPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamDenyPolicyInput)(nil)).Elem(), &IamDenyPolicy{})
	pulumi.RegisterOutputType(IamDenyPolicyOutput{})
}
