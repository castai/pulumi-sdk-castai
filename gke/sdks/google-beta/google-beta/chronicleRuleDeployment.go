// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChronicleRuleDeployment struct {
	pulumi.CustomResourceState

	// Whether detections resulting from this deployment should be considered alerts.
	Alerting pulumi.BoolPtrOutput `pulumi:"alerting"`
	// Output only. The timestamp when the rule deployment archive state was last set to true. If the rule deployment's current
	// archive state is not set to true, the field will be empty.
	ArchiveTime pulumi.StringOutput `pulumi:"archiveTime"`
	// The archive state of the rule deployment. Cannot be set to true unless enabled is set to false. If set to true, alerting
	// will automatically be set to false. If currently set to true, enabled, alerting, and run_frequency cannot be updated.
	Archived                  pulumi.BoolPtrOutput `pulumi:"archived"`
	ChronicleRuleDeploymentId pulumi.StringOutput  `pulumi:"chronicleRuleDeploymentId"`
	// Output only. The names of the associated/chained consumer rules. Rules are considered consumers of this rule if their
	// rule text explicitly filters on this rule's ruleid. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
	ConsumerRules pulumi.StringArrayOutput `pulumi:"consumerRules"`
	// Whether the rule is currently deployed continuously against incoming data.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The execution state of the rule deployment. Possible values: DEFAULT LIMITED PAUSED
	ExecutionState pulumi.StringOutput `pulumi:"executionState"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// Output only. The timestamp when the rule deployment alert state was lastly changed. This is filled regardless of the
	// current alert state.E.g. if the current alert status is false, this timestamp will be the timestamp when the alert
	// status was changed to false.
	LastAlertStatusChangeTime pulumi.StringOutput `pulumi:"lastAlertStatusChangeTime"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the rule deployment. Note that RuleDeployment is a child of the overall Rule, not any individual
	// revision, so the resource ID segment for the Rule resource must not reference a specific revision. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. The names of the associated/chained producer rules. Rules are considered producers for this rule if this
	// rule explicitly filters on their ruleid. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
	ProducerRules pulumi.StringArrayOutput `pulumi:"producerRules"`
	Project       pulumi.StringOutput      `pulumi:"project"`
	// The Rule ID of the rule.
	Rule pulumi.StringOutput `pulumi:"rule"`
	// The run frequency of the rule deployment. Possible values: LIVE HOURLY DAILY
	RunFrequency pulumi.StringPtrOutput                   `pulumi:"runFrequency"`
	Timeouts     ChronicleRuleDeploymentTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewChronicleRuleDeployment registers a new resource with the given unique name, arguments, and options.
func NewChronicleRuleDeployment(ctx *pulumi.Context,
	name string, args *ChronicleRuleDeploymentArgs, opts ...pulumi.ResourceOption) (*ChronicleRuleDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ChronicleRuleDeployment
	err = ctx.RegisterPackageResource("google-beta:index/chronicleRuleDeployment:ChronicleRuleDeployment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChronicleRuleDeployment gets an existing ChronicleRuleDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChronicleRuleDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChronicleRuleDeploymentState, opts ...pulumi.ResourceOption) (*ChronicleRuleDeployment, error) {
	var resource ChronicleRuleDeployment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/chronicleRuleDeployment:ChronicleRuleDeployment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChronicleRuleDeployment resources.
type chronicleRuleDeploymentState struct {
	// Whether detections resulting from this deployment should be considered alerts.
	Alerting *bool `pulumi:"alerting"`
	// Output only. The timestamp when the rule deployment archive state was last set to true. If the rule deployment's current
	// archive state is not set to true, the field will be empty.
	ArchiveTime *string `pulumi:"archiveTime"`
	// The archive state of the rule deployment. Cannot be set to true unless enabled is set to false. If set to true, alerting
	// will automatically be set to false. If currently set to true, enabled, alerting, and run_frequency cannot be updated.
	Archived                  *bool   `pulumi:"archived"`
	ChronicleRuleDeploymentId *string `pulumi:"chronicleRuleDeploymentId"`
	// Output only. The names of the associated/chained consumer rules. Rules are considered consumers of this rule if their
	// rule text explicitly filters on this rule's ruleid. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
	ConsumerRules []string `pulumi:"consumerRules"`
	// Whether the rule is currently deployed continuously against incoming data.
	Enabled *bool `pulumi:"enabled"`
	// The execution state of the rule deployment. Possible values: DEFAULT LIMITED PAUSED
	ExecutionState *string `pulumi:"executionState"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance *string `pulumi:"instance"`
	// Output only. The timestamp when the rule deployment alert state was lastly changed. This is filled regardless of the
	// current alert state.E.g. if the current alert status is false, this timestamp will be the timestamp when the alert
	// status was changed to false.
	LastAlertStatusChangeTime *string `pulumi:"lastAlertStatusChangeTime"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location *string `pulumi:"location"`
	// The resource name of the rule deployment. Note that RuleDeployment is a child of the overall Rule, not any individual
	// revision, so the resource ID segment for the Rule resource must not reference a specific revision. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment
	Name *string `pulumi:"name"`
	// Output only. The names of the associated/chained producer rules. Rules are considered producers for this rule if this
	// rule explicitly filters on their ruleid. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
	ProducerRules []string `pulumi:"producerRules"`
	Project       *string  `pulumi:"project"`
	// The Rule ID of the rule.
	Rule *string `pulumi:"rule"`
	// The run frequency of the rule deployment. Possible values: LIVE HOURLY DAILY
	RunFrequency *string                          `pulumi:"runFrequency"`
	Timeouts     *ChronicleRuleDeploymentTimeouts `pulumi:"timeouts"`
}

type ChronicleRuleDeploymentState struct {
	// Whether detections resulting from this deployment should be considered alerts.
	Alerting pulumi.BoolPtrInput
	// Output only. The timestamp when the rule deployment archive state was last set to true. If the rule deployment's current
	// archive state is not set to true, the field will be empty.
	ArchiveTime pulumi.StringPtrInput
	// The archive state of the rule deployment. Cannot be set to true unless enabled is set to false. If set to true, alerting
	// will automatically be set to false. If currently set to true, enabled, alerting, and run_frequency cannot be updated.
	Archived                  pulumi.BoolPtrInput
	ChronicleRuleDeploymentId pulumi.StringPtrInput
	// Output only. The names of the associated/chained consumer rules. Rules are considered consumers of this rule if their
	// rule text explicitly filters on this rule's ruleid. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
	ConsumerRules pulumi.StringArrayInput
	// Whether the rule is currently deployed continuously against incoming data.
	Enabled pulumi.BoolPtrInput
	// The execution state of the rule deployment. Possible values: DEFAULT LIMITED PAUSED
	ExecutionState pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringPtrInput
	// Output only. The timestamp when the rule deployment alert state was lastly changed. This is filled regardless of the
	// current alert state.E.g. if the current alert status is false, this timestamp will be the timestamp when the alert
	// status was changed to false.
	LastAlertStatusChangeTime pulumi.StringPtrInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location pulumi.StringPtrInput
	// The resource name of the rule deployment. Note that RuleDeployment is a child of the overall Rule, not any individual
	// revision, so the resource ID segment for the Rule resource must not reference a specific revision. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment
	Name pulumi.StringPtrInput
	// Output only. The names of the associated/chained producer rules. Rules are considered producers for this rule if this
	// rule explicitly filters on their ruleid. Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
	ProducerRules pulumi.StringArrayInput
	Project       pulumi.StringPtrInput
	// The Rule ID of the rule.
	Rule pulumi.StringPtrInput
	// The run frequency of the rule deployment. Possible values: LIVE HOURLY DAILY
	RunFrequency pulumi.StringPtrInput
	Timeouts     ChronicleRuleDeploymentTimeoutsPtrInput
}

func (ChronicleRuleDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*chronicleRuleDeploymentState)(nil)).Elem()
}

type chronicleRuleDeploymentArgs struct {
	// Whether detections resulting from this deployment should be considered alerts.
	Alerting *bool `pulumi:"alerting"`
	// The archive state of the rule deployment. Cannot be set to true unless enabled is set to false. If set to true, alerting
	// will automatically be set to false. If currently set to true, enabled, alerting, and run_frequency cannot be updated.
	Archived                  *bool   `pulumi:"archived"`
	ChronicleRuleDeploymentId *string `pulumi:"chronicleRuleDeploymentId"`
	// Whether the rule is currently deployed continuously against incoming data.
	Enabled *bool `pulumi:"enabled"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The Rule ID of the rule.
	Rule string `pulumi:"rule"`
	// The run frequency of the rule deployment. Possible values: LIVE HOURLY DAILY
	RunFrequency *string                          `pulumi:"runFrequency"`
	Timeouts     *ChronicleRuleDeploymentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ChronicleRuleDeployment resource.
type ChronicleRuleDeploymentArgs struct {
	// Whether detections resulting from this deployment should be considered alerts.
	Alerting pulumi.BoolPtrInput
	// The archive state of the rule deployment. Cannot be set to true unless enabled is set to false. If set to true, alerting
	// will automatically be set to false. If currently set to true, enabled, alerting, and run_frequency cannot be updated.
	Archived                  pulumi.BoolPtrInput
	ChronicleRuleDeploymentId pulumi.StringPtrInput
	// Whether the rule is currently deployed continuously against incoming data.
	Enabled pulumi.BoolPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
	// "europe-west2".
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// The Rule ID of the rule.
	Rule pulumi.StringInput
	// The run frequency of the rule deployment. Possible values: LIVE HOURLY DAILY
	RunFrequency pulumi.StringPtrInput
	Timeouts     ChronicleRuleDeploymentTimeoutsPtrInput
}

func (ChronicleRuleDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chronicleRuleDeploymentArgs)(nil)).Elem()
}

type ChronicleRuleDeploymentInput interface {
	pulumi.Input

	ToChronicleRuleDeploymentOutput() ChronicleRuleDeploymentOutput
	ToChronicleRuleDeploymentOutputWithContext(ctx context.Context) ChronicleRuleDeploymentOutput
}

func (*ChronicleRuleDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**ChronicleRuleDeployment)(nil)).Elem()
}

func (i *ChronicleRuleDeployment) ToChronicleRuleDeploymentOutput() ChronicleRuleDeploymentOutput {
	return i.ToChronicleRuleDeploymentOutputWithContext(context.Background())
}

func (i *ChronicleRuleDeployment) ToChronicleRuleDeploymentOutputWithContext(ctx context.Context) ChronicleRuleDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChronicleRuleDeploymentOutput)
}

type ChronicleRuleDeploymentOutput struct{ *pulumi.OutputState }

func (ChronicleRuleDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChronicleRuleDeployment)(nil)).Elem()
}

func (o ChronicleRuleDeploymentOutput) ToChronicleRuleDeploymentOutput() ChronicleRuleDeploymentOutput {
	return o
}

func (o ChronicleRuleDeploymentOutput) ToChronicleRuleDeploymentOutputWithContext(ctx context.Context) ChronicleRuleDeploymentOutput {
	return o
}

// Whether detections resulting from this deployment should be considered alerts.
func (o ChronicleRuleDeploymentOutput) Alerting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.BoolPtrOutput { return v.Alerting }).(pulumi.BoolPtrOutput)
}

// Output only. The timestamp when the rule deployment archive state was last set to true. If the rule deployment's current
// archive state is not set to true, the field will be empty.
func (o ChronicleRuleDeploymentOutput) ArchiveTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.ArchiveTime }).(pulumi.StringOutput)
}

// The archive state of the rule deployment. Cannot be set to true unless enabled is set to false. If set to true, alerting
// will automatically be set to false. If currently set to true, enabled, alerting, and run_frequency cannot be updated.
func (o ChronicleRuleDeploymentOutput) Archived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.BoolPtrOutput { return v.Archived }).(pulumi.BoolPtrOutput)
}

func (o ChronicleRuleDeploymentOutput) ChronicleRuleDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.ChronicleRuleDeploymentId }).(pulumi.StringOutput)
}

// Output only. The names of the associated/chained consumer rules. Rules are considered consumers of this rule if their
// rule text explicitly filters on this rule's ruleid. Format:
// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
func (o ChronicleRuleDeploymentOutput) ConsumerRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringArrayOutput { return v.ConsumerRules }).(pulumi.StringArrayOutput)
}

// Whether the rule is currently deployed continuously against incoming data.
func (o ChronicleRuleDeploymentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The execution state of the rule deployment. Possible values: DEFAULT LIMITED PAUSED
func (o ChronicleRuleDeploymentOutput) ExecutionState() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.ExecutionState }).(pulumi.StringOutput)
}

// The unique identifier for the Chronicle instance, which is the same as the customer ID.
func (o ChronicleRuleDeploymentOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// Output only. The timestamp when the rule deployment alert state was lastly changed. This is filled regardless of the
// current alert state.E.g. if the current alert status is false, this timestamp will be the timestamp when the alert
// status was changed to false.
func (o ChronicleRuleDeploymentOutput) LastAlertStatusChangeTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.LastAlertStatusChangeTime }).(pulumi.StringOutput)
}

// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or
// "europe-west2".
func (o ChronicleRuleDeploymentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the rule deployment. Note that RuleDeployment is a child of the overall Rule, not any individual
// revision, so the resource ID segment for the Rule resource must not reference a specific revision. Format:
// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment
func (o ChronicleRuleDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Output only. The names of the associated/chained producer rules. Rules are considered producers for this rule if this
// rule explicitly filters on their ruleid. Format:
// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
func (o ChronicleRuleDeploymentOutput) ProducerRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringArrayOutput { return v.ProducerRules }).(pulumi.StringArrayOutput)
}

func (o ChronicleRuleDeploymentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Rule ID of the rule.
func (o ChronicleRuleDeploymentOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringOutput { return v.Rule }).(pulumi.StringOutput)
}

// The run frequency of the rule deployment. Possible values: LIVE HOURLY DAILY
func (o ChronicleRuleDeploymentOutput) RunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) pulumi.StringPtrOutput { return v.RunFrequency }).(pulumi.StringPtrOutput)
}

func (o ChronicleRuleDeploymentOutput) Timeouts() ChronicleRuleDeploymentTimeoutsPtrOutput {
	return o.ApplyT(func(v *ChronicleRuleDeployment) ChronicleRuleDeploymentTimeoutsPtrOutput { return v.Timeouts }).(ChronicleRuleDeploymentTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChronicleRuleDeploymentInput)(nil)).Elem(), &ChronicleRuleDeployment{})
	pulumi.RegisterOutputType(ChronicleRuleDeploymentOutput{})
}
