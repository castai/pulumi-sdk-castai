// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerAccessLevels struct {
	pulumi.CustomResourceState

	AccessContextManagerAccessLevelsId pulumi.StringOutput `pulumi:"accessContextManagerAccessLevelsId"`
	// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
	AccessLevels AccessContextManagerAccessLevelsAccessLevelArrayOutput `pulumi:"accessLevels"`
	// The AccessPolicy this AccessLevel lives in. Format: accessPolicies/{policy_id}
	Parent   pulumi.StringOutput                               `pulumi:"parent"`
	Timeouts AccessContextManagerAccessLevelsTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAccessContextManagerAccessLevels registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerAccessLevels(ctx *pulumi.Context,
	name string, args *AccessContextManagerAccessLevelsArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerAccessLevels, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerAccessLevels
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerAccessLevels:AccessContextManagerAccessLevels", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerAccessLevels gets an existing AccessContextManagerAccessLevels resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerAccessLevels(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerAccessLevelsState, opts ...pulumi.ResourceOption) (*AccessContextManagerAccessLevels, error) {
	var resource AccessContextManagerAccessLevels
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerAccessLevels:AccessContextManagerAccessLevels", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerAccessLevels resources.
type accessContextManagerAccessLevelsState struct {
	AccessContextManagerAccessLevelsId *string `pulumi:"accessContextManagerAccessLevelsId"`
	// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
	AccessLevels []AccessContextManagerAccessLevelsAccessLevel `pulumi:"accessLevels"`
	// The AccessPolicy this AccessLevel lives in. Format: accessPolicies/{policy_id}
	Parent   *string                                   `pulumi:"parent"`
	Timeouts *AccessContextManagerAccessLevelsTimeouts `pulumi:"timeouts"`
}

type AccessContextManagerAccessLevelsState struct {
	AccessContextManagerAccessLevelsId pulumi.StringPtrInput
	// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
	AccessLevels AccessContextManagerAccessLevelsAccessLevelArrayInput
	// The AccessPolicy this AccessLevel lives in. Format: accessPolicies/{policy_id}
	Parent   pulumi.StringPtrInput
	Timeouts AccessContextManagerAccessLevelsTimeoutsPtrInput
}

func (AccessContextManagerAccessLevelsState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerAccessLevelsState)(nil)).Elem()
}

type accessContextManagerAccessLevelsArgs struct {
	AccessContextManagerAccessLevelsId *string `pulumi:"accessContextManagerAccessLevelsId"`
	// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
	AccessLevels []AccessContextManagerAccessLevelsAccessLevel `pulumi:"accessLevels"`
	// The AccessPolicy this AccessLevel lives in. Format: accessPolicies/{policy_id}
	Parent   string                                    `pulumi:"parent"`
	Timeouts *AccessContextManagerAccessLevelsTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessContextManagerAccessLevels resource.
type AccessContextManagerAccessLevelsArgs struct {
	AccessContextManagerAccessLevelsId pulumi.StringPtrInput
	// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
	AccessLevels AccessContextManagerAccessLevelsAccessLevelArrayInput
	// The AccessPolicy this AccessLevel lives in. Format: accessPolicies/{policy_id}
	Parent   pulumi.StringInput
	Timeouts AccessContextManagerAccessLevelsTimeoutsPtrInput
}

func (AccessContextManagerAccessLevelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerAccessLevelsArgs)(nil)).Elem()
}

type AccessContextManagerAccessLevelsInput interface {
	pulumi.Input

	ToAccessContextManagerAccessLevelsOutput() AccessContextManagerAccessLevelsOutput
	ToAccessContextManagerAccessLevelsOutputWithContext(ctx context.Context) AccessContextManagerAccessLevelsOutput
}

func (*AccessContextManagerAccessLevels) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerAccessLevels)(nil)).Elem()
}

func (i *AccessContextManagerAccessLevels) ToAccessContextManagerAccessLevelsOutput() AccessContextManagerAccessLevelsOutput {
	return i.ToAccessContextManagerAccessLevelsOutputWithContext(context.Background())
}

func (i *AccessContextManagerAccessLevels) ToAccessContextManagerAccessLevelsOutputWithContext(ctx context.Context) AccessContextManagerAccessLevelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerAccessLevelsOutput)
}

type AccessContextManagerAccessLevelsOutput struct{ *pulumi.OutputState }

func (AccessContextManagerAccessLevelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerAccessLevels)(nil)).Elem()
}

func (o AccessContextManagerAccessLevelsOutput) ToAccessContextManagerAccessLevelsOutput() AccessContextManagerAccessLevelsOutput {
	return o
}

func (o AccessContextManagerAccessLevelsOutput) ToAccessContextManagerAccessLevelsOutputWithContext(ctx context.Context) AccessContextManagerAccessLevelsOutput {
	return o
}

func (o AccessContextManagerAccessLevelsOutput) AccessContextManagerAccessLevelsId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAccessLevels) pulumi.StringOutput {
		return v.AccessContextManagerAccessLevelsId
	}).(pulumi.StringOutput)
}

// The desired Access Levels that should replace all existing Access Levels in the Access Policy.
func (o AccessContextManagerAccessLevelsOutput) AccessLevels() AccessContextManagerAccessLevelsAccessLevelArrayOutput {
	return o.ApplyT(func(v *AccessContextManagerAccessLevels) AccessContextManagerAccessLevelsAccessLevelArrayOutput {
		return v.AccessLevels
	}).(AccessContextManagerAccessLevelsAccessLevelArrayOutput)
}

// The AccessPolicy this AccessLevel lives in. Format: accessPolicies/{policy_id}
func (o AccessContextManagerAccessLevelsOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerAccessLevels) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

func (o AccessContextManagerAccessLevelsOutput) Timeouts() AccessContextManagerAccessLevelsTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerAccessLevels) AccessContextManagerAccessLevelsTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerAccessLevelsTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerAccessLevelsInput)(nil)).Elem(), &AccessContextManagerAccessLevels{})
	pulumi.RegisterOutputType(AccessContextManagerAccessLevelsOutput{})
}
