// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataplexLakeIamBinding struct {
	pulumi.CustomResourceState

	Condition                DataplexLakeIamBindingConditionPtrOutput `pulumi:"condition"`
	DataplexLakeIamBindingId pulumi.StringOutput                      `pulumi:"dataplexLakeIamBindingId"`
	Etag                     pulumi.StringOutput                      `pulumi:"etag"`
	Lake                     pulumi.StringOutput                      `pulumi:"lake"`
	Location                 pulumi.StringOutput                      `pulumi:"location"`
	Members                  pulumi.StringArrayOutput                 `pulumi:"members"`
	Project                  pulumi.StringOutput                      `pulumi:"project"`
	Role                     pulumi.StringOutput                      `pulumi:"role"`
}

// NewDataplexLakeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewDataplexLakeIamBinding(ctx *pulumi.Context,
	name string, args *DataplexLakeIamBindingArgs, opts ...pulumi.ResourceOption) (*DataplexLakeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataplexLakeIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/dataplexLakeIamBinding:DataplexLakeIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataplexLakeIamBinding gets an existing DataplexLakeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataplexLakeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataplexLakeIamBindingState, opts ...pulumi.ResourceOption) (*DataplexLakeIamBinding, error) {
	var resource DataplexLakeIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataplexLakeIamBinding:DataplexLakeIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataplexLakeIamBinding resources.
type dataplexLakeIamBindingState struct {
	Condition                *DataplexLakeIamBindingCondition `pulumi:"condition"`
	DataplexLakeIamBindingId *string                          `pulumi:"dataplexLakeIamBindingId"`
	Etag                     *string                          `pulumi:"etag"`
	Lake                     *string                          `pulumi:"lake"`
	Location                 *string                          `pulumi:"location"`
	Members                  []string                         `pulumi:"members"`
	Project                  *string                          `pulumi:"project"`
	Role                     *string                          `pulumi:"role"`
}

type DataplexLakeIamBindingState struct {
	Condition                DataplexLakeIamBindingConditionPtrInput
	DataplexLakeIamBindingId pulumi.StringPtrInput
	Etag                     pulumi.StringPtrInput
	Lake                     pulumi.StringPtrInput
	Location                 pulumi.StringPtrInput
	Members                  pulumi.StringArrayInput
	Project                  pulumi.StringPtrInput
	Role                     pulumi.StringPtrInput
}

func (DataplexLakeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataplexLakeIamBindingState)(nil)).Elem()
}

type dataplexLakeIamBindingArgs struct {
	Condition                *DataplexLakeIamBindingCondition `pulumi:"condition"`
	DataplexLakeIamBindingId *string                          `pulumi:"dataplexLakeIamBindingId"`
	Lake                     string                           `pulumi:"lake"`
	Location                 *string                          `pulumi:"location"`
	Members                  []string                         `pulumi:"members"`
	Project                  *string                          `pulumi:"project"`
	Role                     string                           `pulumi:"role"`
}

// The set of arguments for constructing a DataplexLakeIamBinding resource.
type DataplexLakeIamBindingArgs struct {
	Condition                DataplexLakeIamBindingConditionPtrInput
	DataplexLakeIamBindingId pulumi.StringPtrInput
	Lake                     pulumi.StringInput
	Location                 pulumi.StringPtrInput
	Members                  pulumi.StringArrayInput
	Project                  pulumi.StringPtrInput
	Role                     pulumi.StringInput
}

func (DataplexLakeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataplexLakeIamBindingArgs)(nil)).Elem()
}

type DataplexLakeIamBindingInput interface {
	pulumi.Input

	ToDataplexLakeIamBindingOutput() DataplexLakeIamBindingOutput
	ToDataplexLakeIamBindingOutputWithContext(ctx context.Context) DataplexLakeIamBindingOutput
}

func (*DataplexLakeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**DataplexLakeIamBinding)(nil)).Elem()
}

func (i *DataplexLakeIamBinding) ToDataplexLakeIamBindingOutput() DataplexLakeIamBindingOutput {
	return i.ToDataplexLakeIamBindingOutputWithContext(context.Background())
}

func (i *DataplexLakeIamBinding) ToDataplexLakeIamBindingOutputWithContext(ctx context.Context) DataplexLakeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataplexLakeIamBindingOutput)
}

type DataplexLakeIamBindingOutput struct{ *pulumi.OutputState }

func (DataplexLakeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataplexLakeIamBinding)(nil)).Elem()
}

func (o DataplexLakeIamBindingOutput) ToDataplexLakeIamBindingOutput() DataplexLakeIamBindingOutput {
	return o
}

func (o DataplexLakeIamBindingOutput) ToDataplexLakeIamBindingOutputWithContext(ctx context.Context) DataplexLakeIamBindingOutput {
	return o
}

func (o DataplexLakeIamBindingOutput) Condition() DataplexLakeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) DataplexLakeIamBindingConditionPtrOutput { return v.Condition }).(DataplexLakeIamBindingConditionPtrOutput)
}

func (o DataplexLakeIamBindingOutput) DataplexLakeIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringOutput { return v.DataplexLakeIamBindingId }).(pulumi.StringOutput)
}

func (o DataplexLakeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataplexLakeIamBindingOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o DataplexLakeIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DataplexLakeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o DataplexLakeIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o DataplexLakeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DataplexLakeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataplexLakeIamBindingInput)(nil)).Elem(), &DataplexLakeIamBinding{})
	pulumi.RegisterOutputType(DataplexLakeIamBindingOutput{})
}
