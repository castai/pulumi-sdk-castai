// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseHostingCustomDomain struct {
	pulumi.CustomResourceState

	// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan
	// 'CustomDomain's only have access to the 'GROUPED' cert type, while Blaze plan can select any option. Possible values:
	// ["GROUPED", "PROJECT_GROUPED", "DEDICATED"]
	CertPreference pulumi.StringOutput `pulumi:"certPreference"`
	// The SSL certificate Hosting has for this 'CustomDomain''s domain name. For new 'CustomDomain's, this often represents
	// Hosting's intent to create a certificate, rather than an actual cert. Check the 'state' field for more.
	Certs FirebaseHostingCustomDomainCertArrayOutput `pulumi:"certs"`
	// The 'CustomDomain''s create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of the 'CustomDomain', which is the domain name you'd like to use with Firebase Hosting.
	CustomDomain pulumi.StringOutput `pulumi:"customDomain"`
	// The time the 'CustomDomain' was deleted; null for 'CustomDomains' that haven't been deleted. Deleted 'CustomDomains'
	// persist for approximately 30 days, after which time Hosting removes them completely.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// A string that represents the current state of the 'CustomDomain' and allows you to confirm its initial state in requests
	// that would modify it.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The minimum time before a soft-deleted 'CustomDomain' is completely removed from Hosting; null for 'CustomDomains' that
	// haven't been deleted.
	ExpireTime                    pulumi.StringOutput `pulumi:"expireTime"`
	FirebaseHostingCustomDomainId pulumi.StringOutput `pulumi:"firebaseHostingCustomDomainId"`
	// The host state of your domain name. Host state is determined by checking each IP address associated with your domain
	// name to see if it's serving Hosting content. HOST_UNHOSTED: Your 'CustomDomain''s domain name isn't associated with any
	// IP addresses. HOST_UNREACHABLE: Your 'CustomDomain''s domain name can't be reached. Hosting services' DNS queries to
	// find your domain name's IP addresses resulted in errors. See your 'CustomDomain''s 'issues' field for more details.
	// HOST_MISMATCH: Your 'CustomDomain''s domain name has IP addresses that don't ultimately resolve to Hosting.
	// HOST_CONFLICT: Your 'CustomDomain''s domain name has IP addresses that resolve to both Hosting and other services. To
	// ensure consistent results, remove 'A' and 'AAAA' records related to non-Hosting services. HOST_ACTIVE: All requests
	// against your 'CustomDomain''s domain name are served by Hosting. If the 'CustomDomain''s 'OwnershipState' is also
	// 'ACTIVE', Hosting serves your Hosting Site's content on the domain name.
	HostState pulumi.StringOutput `pulumi:"hostState"`
	// A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your
	// domain name. Resolve these issues to ensure your 'CustomDomain' behaves properly.
	Issues FirebaseHostingCustomDomainIssueArrayOutput `pulumi:"issues"`
	// The fully-qualified name of the 'CustomDomain'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ownership state of your domain name. Ownership is determined at a Firebase project level, and established by adding
	// 'TXT' records to your domain name's DNS records. Ownership cascades to subdomains. Granting a project ownership of
	// 'foo.com' also grants that project ownership over 'bar.foo.com', unless you add specific 'TXT' records to 'bar.foo.com'
	// that grant a different project ownership. If your 'CustomDomain' is in an 'OwnershipState' other than 'OWNERSHIP_ACTIVE'
	// for more than 30 days and it hasn't been updated in at least 30 days, Hosting's ownership systems delete the
	// 'CustomDomain'. OWNERSHIP_MISSING: Your 'CustomDomain''s domain name has no Hosting-related ownership records; no
	// Firebase project has permission to act on the domain name's behalf. OWNERSHIP_UNREACHABLE: Your 'CustomDomain''s domain
	// name can't be reached. Hosting services' DNS queries to find your domain name's ownership records resulted in errors.
	// See your 'CustomDomain''s 'issues' field for more details. OWNERSHIP_MISMATCH: Your 'CustomDomain''s domain name is
	// owned by another Firebase project. Remove the conflicting 'TXT' records and replace them with project-specific records
	// for your current Firebase project. OWNERSHIP_CONFLICT: Your 'CustomDomain''s domain name has conflicting 'TXT' records
	// that indicate ownership by both your current Firebase project and another project. Remove the other project's ownership
	// records to grant the current project ownership. OWNERSHIP_PENDING: Your 'CustomDomain''s DNS records are configured
	// correctly. Hosting will transfer ownership of your domain to this 'CustomDomain' within 24 hours. OWNERSHIP_ACTIVE: Your
	// 'CustomDomain''s domain name has 'TXT' records that grant its project permission to act on its behalf.
	OwnershipState pulumi.StringOutput `pulumi:"ownershipState"`
	Project        pulumi.StringOutput `pulumi:"project"`
	// if true, indicates that Hosting's systems are attempting to make the 'CustomDomain''s state match your preferred state.
	// This is most frequently 'true' when initially provisioning a 'CustomDomain' or when creating a new SSL certificate to
	// match an updated 'cert_preference'
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// A domain name that this CustomDomain should direct traffic towards. If specified, Hosting will respond to requests
	// against this CustomDomain with an HTTP 301 code, and route traffic to the specified 'redirect_target' instead.
	RedirectTarget pulumi.StringPtrOutput `pulumi:"redirectTarget"`
	// A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
	RequiredDnsUpdates FirebaseHostingCustomDomainRequiredDnsUpdateArrayOutput `pulumi:"requiredDnsUpdates"`
	// The ID of the site in which to create this custom domain association.
	SiteId   pulumi.StringOutput                          `pulumi:"siteId"`
	Timeouts FirebaseHostingCustomDomainTimeoutsPtrOutput `pulumi:"timeouts"`
	// The last time the 'CustomDomain' was updated.
	UpdateTime          pulumi.StringOutput  `pulumi:"updateTime"`
	WaitDnsVerification pulumi.BoolPtrOutput `pulumi:"waitDnsVerification"`
}

// NewFirebaseHostingCustomDomain registers a new resource with the given unique name, arguments, and options.
func NewFirebaseHostingCustomDomain(ctx *pulumi.Context,
	name string, args *FirebaseHostingCustomDomainArgs, opts ...pulumi.ResourceOption) (*FirebaseHostingCustomDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomDomain == nil {
		return nil, errors.New("invalid value for required argument 'CustomDomain'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseHostingCustomDomain
	err = ctx.RegisterPackageResource("google-beta:index/firebaseHostingCustomDomain:FirebaseHostingCustomDomain", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseHostingCustomDomain gets an existing FirebaseHostingCustomDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseHostingCustomDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseHostingCustomDomainState, opts ...pulumi.ResourceOption) (*FirebaseHostingCustomDomain, error) {
	var resource FirebaseHostingCustomDomain
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaseHostingCustomDomain:FirebaseHostingCustomDomain", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseHostingCustomDomain resources.
type firebaseHostingCustomDomainState struct {
	// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan
	// 'CustomDomain's only have access to the 'GROUPED' cert type, while Blaze plan can select any option. Possible values:
	// ["GROUPED", "PROJECT_GROUPED", "DEDICATED"]
	CertPreference *string `pulumi:"certPreference"`
	// The SSL certificate Hosting has for this 'CustomDomain''s domain name. For new 'CustomDomain's, this often represents
	// Hosting's intent to create a certificate, rather than an actual cert. Check the 'state' field for more.
	Certs []FirebaseHostingCustomDomainCert `pulumi:"certs"`
	// The 'CustomDomain''s create time.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the 'CustomDomain', which is the domain name you'd like to use with Firebase Hosting.
	CustomDomain *string `pulumi:"customDomain"`
	// The time the 'CustomDomain' was deleted; null for 'CustomDomains' that haven't been deleted. Deleted 'CustomDomains'
	// persist for approximately 30 days, after which time Hosting removes them completely.
	DeleteTime *string `pulumi:"deleteTime"`
	// A string that represents the current state of the 'CustomDomain' and allows you to confirm its initial state in requests
	// that would modify it.
	Etag *string `pulumi:"etag"`
	// The minimum time before a soft-deleted 'CustomDomain' is completely removed from Hosting; null for 'CustomDomains' that
	// haven't been deleted.
	ExpireTime                    *string `pulumi:"expireTime"`
	FirebaseHostingCustomDomainId *string `pulumi:"firebaseHostingCustomDomainId"`
	// The host state of your domain name. Host state is determined by checking each IP address associated with your domain
	// name to see if it's serving Hosting content. HOST_UNHOSTED: Your 'CustomDomain''s domain name isn't associated with any
	// IP addresses. HOST_UNREACHABLE: Your 'CustomDomain''s domain name can't be reached. Hosting services' DNS queries to
	// find your domain name's IP addresses resulted in errors. See your 'CustomDomain''s 'issues' field for more details.
	// HOST_MISMATCH: Your 'CustomDomain''s domain name has IP addresses that don't ultimately resolve to Hosting.
	// HOST_CONFLICT: Your 'CustomDomain''s domain name has IP addresses that resolve to both Hosting and other services. To
	// ensure consistent results, remove 'A' and 'AAAA' records related to non-Hosting services. HOST_ACTIVE: All requests
	// against your 'CustomDomain''s domain name are served by Hosting. If the 'CustomDomain''s 'OwnershipState' is also
	// 'ACTIVE', Hosting serves your Hosting Site's content on the domain name.
	HostState *string `pulumi:"hostState"`
	// A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your
	// domain name. Resolve these issues to ensure your 'CustomDomain' behaves properly.
	Issues []FirebaseHostingCustomDomainIssue `pulumi:"issues"`
	// The fully-qualified name of the 'CustomDomain'.
	Name *string `pulumi:"name"`
	// The ownership state of your domain name. Ownership is determined at a Firebase project level, and established by adding
	// 'TXT' records to your domain name's DNS records. Ownership cascades to subdomains. Granting a project ownership of
	// 'foo.com' also grants that project ownership over 'bar.foo.com', unless you add specific 'TXT' records to 'bar.foo.com'
	// that grant a different project ownership. If your 'CustomDomain' is in an 'OwnershipState' other than 'OWNERSHIP_ACTIVE'
	// for more than 30 days and it hasn't been updated in at least 30 days, Hosting's ownership systems delete the
	// 'CustomDomain'. OWNERSHIP_MISSING: Your 'CustomDomain''s domain name has no Hosting-related ownership records; no
	// Firebase project has permission to act on the domain name's behalf. OWNERSHIP_UNREACHABLE: Your 'CustomDomain''s domain
	// name can't be reached. Hosting services' DNS queries to find your domain name's ownership records resulted in errors.
	// See your 'CustomDomain''s 'issues' field for more details. OWNERSHIP_MISMATCH: Your 'CustomDomain''s domain name is
	// owned by another Firebase project. Remove the conflicting 'TXT' records and replace them with project-specific records
	// for your current Firebase project. OWNERSHIP_CONFLICT: Your 'CustomDomain''s domain name has conflicting 'TXT' records
	// that indicate ownership by both your current Firebase project and another project. Remove the other project's ownership
	// records to grant the current project ownership. OWNERSHIP_PENDING: Your 'CustomDomain''s DNS records are configured
	// correctly. Hosting will transfer ownership of your domain to this 'CustomDomain' within 24 hours. OWNERSHIP_ACTIVE: Your
	// 'CustomDomain''s domain name has 'TXT' records that grant its project permission to act on its behalf.
	OwnershipState *string `pulumi:"ownershipState"`
	Project        *string `pulumi:"project"`
	// if true, indicates that Hosting's systems are attempting to make the 'CustomDomain''s state match your preferred state.
	// This is most frequently 'true' when initially provisioning a 'CustomDomain' or when creating a new SSL certificate to
	// match an updated 'cert_preference'
	Reconciling *bool `pulumi:"reconciling"`
	// A domain name that this CustomDomain should direct traffic towards. If specified, Hosting will respond to requests
	// against this CustomDomain with an HTTP 301 code, and route traffic to the specified 'redirect_target' instead.
	RedirectTarget *string `pulumi:"redirectTarget"`
	// A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
	RequiredDnsUpdates []FirebaseHostingCustomDomainRequiredDnsUpdate `pulumi:"requiredDnsUpdates"`
	// The ID of the site in which to create this custom domain association.
	SiteId   *string                              `pulumi:"siteId"`
	Timeouts *FirebaseHostingCustomDomainTimeouts `pulumi:"timeouts"`
	// The last time the 'CustomDomain' was updated.
	UpdateTime          *string `pulumi:"updateTime"`
	WaitDnsVerification *bool   `pulumi:"waitDnsVerification"`
}

type FirebaseHostingCustomDomainState struct {
	// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan
	// 'CustomDomain's only have access to the 'GROUPED' cert type, while Blaze plan can select any option. Possible values:
	// ["GROUPED", "PROJECT_GROUPED", "DEDICATED"]
	CertPreference pulumi.StringPtrInput
	// The SSL certificate Hosting has for this 'CustomDomain''s domain name. For new 'CustomDomain's, this often represents
	// Hosting's intent to create a certificate, rather than an actual cert. Check the 'state' field for more.
	Certs FirebaseHostingCustomDomainCertArrayInput
	// The 'CustomDomain''s create time.
	CreateTime pulumi.StringPtrInput
	// The ID of the 'CustomDomain', which is the domain name you'd like to use with Firebase Hosting.
	CustomDomain pulumi.StringPtrInput
	// The time the 'CustomDomain' was deleted; null for 'CustomDomains' that haven't been deleted. Deleted 'CustomDomains'
	// persist for approximately 30 days, after which time Hosting removes them completely.
	DeleteTime pulumi.StringPtrInput
	// A string that represents the current state of the 'CustomDomain' and allows you to confirm its initial state in requests
	// that would modify it.
	Etag pulumi.StringPtrInput
	// The minimum time before a soft-deleted 'CustomDomain' is completely removed from Hosting; null for 'CustomDomains' that
	// haven't been deleted.
	ExpireTime                    pulumi.StringPtrInput
	FirebaseHostingCustomDomainId pulumi.StringPtrInput
	// The host state of your domain name. Host state is determined by checking each IP address associated with your domain
	// name to see if it's serving Hosting content. HOST_UNHOSTED: Your 'CustomDomain''s domain name isn't associated with any
	// IP addresses. HOST_UNREACHABLE: Your 'CustomDomain''s domain name can't be reached. Hosting services' DNS queries to
	// find your domain name's IP addresses resulted in errors. See your 'CustomDomain''s 'issues' field for more details.
	// HOST_MISMATCH: Your 'CustomDomain''s domain name has IP addresses that don't ultimately resolve to Hosting.
	// HOST_CONFLICT: Your 'CustomDomain''s domain name has IP addresses that resolve to both Hosting and other services. To
	// ensure consistent results, remove 'A' and 'AAAA' records related to non-Hosting services. HOST_ACTIVE: All requests
	// against your 'CustomDomain''s domain name are served by Hosting. If the 'CustomDomain''s 'OwnershipState' is also
	// 'ACTIVE', Hosting serves your Hosting Site's content on the domain name.
	HostState pulumi.StringPtrInput
	// A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your
	// domain name. Resolve these issues to ensure your 'CustomDomain' behaves properly.
	Issues FirebaseHostingCustomDomainIssueArrayInput
	// The fully-qualified name of the 'CustomDomain'.
	Name pulumi.StringPtrInput
	// The ownership state of your domain name. Ownership is determined at a Firebase project level, and established by adding
	// 'TXT' records to your domain name's DNS records. Ownership cascades to subdomains. Granting a project ownership of
	// 'foo.com' also grants that project ownership over 'bar.foo.com', unless you add specific 'TXT' records to 'bar.foo.com'
	// that grant a different project ownership. If your 'CustomDomain' is in an 'OwnershipState' other than 'OWNERSHIP_ACTIVE'
	// for more than 30 days and it hasn't been updated in at least 30 days, Hosting's ownership systems delete the
	// 'CustomDomain'. OWNERSHIP_MISSING: Your 'CustomDomain''s domain name has no Hosting-related ownership records; no
	// Firebase project has permission to act on the domain name's behalf. OWNERSHIP_UNREACHABLE: Your 'CustomDomain''s domain
	// name can't be reached. Hosting services' DNS queries to find your domain name's ownership records resulted in errors.
	// See your 'CustomDomain''s 'issues' field for more details. OWNERSHIP_MISMATCH: Your 'CustomDomain''s domain name is
	// owned by another Firebase project. Remove the conflicting 'TXT' records and replace them with project-specific records
	// for your current Firebase project. OWNERSHIP_CONFLICT: Your 'CustomDomain''s domain name has conflicting 'TXT' records
	// that indicate ownership by both your current Firebase project and another project. Remove the other project's ownership
	// records to grant the current project ownership. OWNERSHIP_PENDING: Your 'CustomDomain''s DNS records are configured
	// correctly. Hosting will transfer ownership of your domain to this 'CustomDomain' within 24 hours. OWNERSHIP_ACTIVE: Your
	// 'CustomDomain''s domain name has 'TXT' records that grant its project permission to act on its behalf.
	OwnershipState pulumi.StringPtrInput
	Project        pulumi.StringPtrInput
	// if true, indicates that Hosting's systems are attempting to make the 'CustomDomain''s state match your preferred state.
	// This is most frequently 'true' when initially provisioning a 'CustomDomain' or when creating a new SSL certificate to
	// match an updated 'cert_preference'
	Reconciling pulumi.BoolPtrInput
	// A domain name that this CustomDomain should direct traffic towards. If specified, Hosting will respond to requests
	// against this CustomDomain with an HTTP 301 code, and route traffic to the specified 'redirect_target' instead.
	RedirectTarget pulumi.StringPtrInput
	// A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
	RequiredDnsUpdates FirebaseHostingCustomDomainRequiredDnsUpdateArrayInput
	// The ID of the site in which to create this custom domain association.
	SiteId   pulumi.StringPtrInput
	Timeouts FirebaseHostingCustomDomainTimeoutsPtrInput
	// The last time the 'CustomDomain' was updated.
	UpdateTime          pulumi.StringPtrInput
	WaitDnsVerification pulumi.BoolPtrInput
}

func (FirebaseHostingCustomDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseHostingCustomDomainState)(nil)).Elem()
}

type firebaseHostingCustomDomainArgs struct {
	// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan
	// 'CustomDomain's only have access to the 'GROUPED' cert type, while Blaze plan can select any option. Possible values:
	// ["GROUPED", "PROJECT_GROUPED", "DEDICATED"]
	CertPreference *string `pulumi:"certPreference"`
	// The ID of the 'CustomDomain', which is the domain name you'd like to use with Firebase Hosting.
	CustomDomain                  string  `pulumi:"customDomain"`
	FirebaseHostingCustomDomainId *string `pulumi:"firebaseHostingCustomDomainId"`
	Project                       *string `pulumi:"project"`
	// A domain name that this CustomDomain should direct traffic towards. If specified, Hosting will respond to requests
	// against this CustomDomain with an HTTP 301 code, and route traffic to the specified 'redirect_target' instead.
	RedirectTarget *string `pulumi:"redirectTarget"`
	// The ID of the site in which to create this custom domain association.
	SiteId              string                               `pulumi:"siteId"`
	Timeouts            *FirebaseHostingCustomDomainTimeouts `pulumi:"timeouts"`
	WaitDnsVerification *bool                                `pulumi:"waitDnsVerification"`
}

// The set of arguments for constructing a FirebaseHostingCustomDomain resource.
type FirebaseHostingCustomDomainArgs struct {
	// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan
	// 'CustomDomain's only have access to the 'GROUPED' cert type, while Blaze plan can select any option. Possible values:
	// ["GROUPED", "PROJECT_GROUPED", "DEDICATED"]
	CertPreference pulumi.StringPtrInput
	// The ID of the 'CustomDomain', which is the domain name you'd like to use with Firebase Hosting.
	CustomDomain                  pulumi.StringInput
	FirebaseHostingCustomDomainId pulumi.StringPtrInput
	Project                       pulumi.StringPtrInput
	// A domain name that this CustomDomain should direct traffic towards. If specified, Hosting will respond to requests
	// against this CustomDomain with an HTTP 301 code, and route traffic to the specified 'redirect_target' instead.
	RedirectTarget pulumi.StringPtrInput
	// The ID of the site in which to create this custom domain association.
	SiteId              pulumi.StringInput
	Timeouts            FirebaseHostingCustomDomainTimeoutsPtrInput
	WaitDnsVerification pulumi.BoolPtrInput
}

func (FirebaseHostingCustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseHostingCustomDomainArgs)(nil)).Elem()
}

type FirebaseHostingCustomDomainInput interface {
	pulumi.Input

	ToFirebaseHostingCustomDomainOutput() FirebaseHostingCustomDomainOutput
	ToFirebaseHostingCustomDomainOutputWithContext(ctx context.Context) FirebaseHostingCustomDomainOutput
}

func (*FirebaseHostingCustomDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseHostingCustomDomain)(nil)).Elem()
}

func (i *FirebaseHostingCustomDomain) ToFirebaseHostingCustomDomainOutput() FirebaseHostingCustomDomainOutput {
	return i.ToFirebaseHostingCustomDomainOutputWithContext(context.Background())
}

func (i *FirebaseHostingCustomDomain) ToFirebaseHostingCustomDomainOutputWithContext(ctx context.Context) FirebaseHostingCustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseHostingCustomDomainOutput)
}

type FirebaseHostingCustomDomainOutput struct{ *pulumi.OutputState }

func (FirebaseHostingCustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseHostingCustomDomain)(nil)).Elem()
}

func (o FirebaseHostingCustomDomainOutput) ToFirebaseHostingCustomDomainOutput() FirebaseHostingCustomDomainOutput {
	return o
}

func (o FirebaseHostingCustomDomainOutput) ToFirebaseHostingCustomDomainOutputWithContext(ctx context.Context) FirebaseHostingCustomDomainOutput {
	return o
}

// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan
// 'CustomDomain's only have access to the 'GROUPED' cert type, while Blaze plan can select any option. Possible values:
// ["GROUPED", "PROJECT_GROUPED", "DEDICATED"]
func (o FirebaseHostingCustomDomainOutput) CertPreference() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.CertPreference }).(pulumi.StringOutput)
}

// The SSL certificate Hosting has for this 'CustomDomain”s domain name. For new 'CustomDomain's, this often represents
// Hosting's intent to create a certificate, rather than an actual cert. Check the 'state' field for more.
func (o FirebaseHostingCustomDomainOutput) Certs() FirebaseHostingCustomDomainCertArrayOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) FirebaseHostingCustomDomainCertArrayOutput { return v.Certs }).(FirebaseHostingCustomDomainCertArrayOutput)
}

// The 'CustomDomain”s create time.
func (o FirebaseHostingCustomDomainOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the 'CustomDomain', which is the domain name you'd like to use with Firebase Hosting.
func (o FirebaseHostingCustomDomainOutput) CustomDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.CustomDomain }).(pulumi.StringOutput)
}

// The time the 'CustomDomain' was deleted; null for 'CustomDomains' that haven't been deleted. Deleted 'CustomDomains'
// persist for approximately 30 days, after which time Hosting removes them completely.
func (o FirebaseHostingCustomDomainOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// A string that represents the current state of the 'CustomDomain' and allows you to confirm its initial state in requests
// that would modify it.
func (o FirebaseHostingCustomDomainOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The minimum time before a soft-deleted 'CustomDomain' is completely removed from Hosting; null for 'CustomDomains' that
// haven't been deleted.
func (o FirebaseHostingCustomDomainOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

func (o FirebaseHostingCustomDomainOutput) FirebaseHostingCustomDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.FirebaseHostingCustomDomainId }).(pulumi.StringOutput)
}

// The host state of your domain name. Host state is determined by checking each IP address associated with your domain
// name to see if it's serving Hosting content. HOST_UNHOSTED: Your 'CustomDomain”s domain name isn't associated with any
// IP addresses. HOST_UNREACHABLE: Your 'CustomDomain”s domain name can't be reached. Hosting services' DNS queries to
// find your domain name's IP addresses resulted in errors. See your 'CustomDomain”s 'issues' field for more details.
// HOST_MISMATCH: Your 'CustomDomain”s domain name has IP addresses that don't ultimately resolve to Hosting.
// HOST_CONFLICT: Your 'CustomDomain”s domain name has IP addresses that resolve to both Hosting and other services. To
// ensure consistent results, remove 'A' and 'AAAA' records related to non-Hosting services. HOST_ACTIVE: All requests
// against your 'CustomDomain”s domain name are served by Hosting. If the 'CustomDomain”s 'OwnershipState' is also
// 'ACTIVE', Hosting serves your Hosting Site's content on the domain name.
func (o FirebaseHostingCustomDomainOutput) HostState() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.HostState }).(pulumi.StringOutput)
}

// A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your
// domain name. Resolve these issues to ensure your 'CustomDomain' behaves properly.
func (o FirebaseHostingCustomDomainOutput) Issues() FirebaseHostingCustomDomainIssueArrayOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) FirebaseHostingCustomDomainIssueArrayOutput { return v.Issues }).(FirebaseHostingCustomDomainIssueArrayOutput)
}

// The fully-qualified name of the 'CustomDomain'.
func (o FirebaseHostingCustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ownership state of your domain name. Ownership is determined at a Firebase project level, and established by adding
// 'TXT' records to your domain name's DNS records. Ownership cascades to subdomains. Granting a project ownership of
// 'foo.com' also grants that project ownership over 'bar.foo.com', unless you add specific 'TXT' records to 'bar.foo.com'
// that grant a different project ownership. If your 'CustomDomain' is in an 'OwnershipState' other than 'OWNERSHIP_ACTIVE'
// for more than 30 days and it hasn't been updated in at least 30 days, Hosting's ownership systems delete the
// 'CustomDomain'. OWNERSHIP_MISSING: Your 'CustomDomain”s domain name has no Hosting-related ownership records; no
// Firebase project has permission to act on the domain name's behalf. OWNERSHIP_UNREACHABLE: Your 'CustomDomain”s domain
// name can't be reached. Hosting services' DNS queries to find your domain name's ownership records resulted in errors.
// See your 'CustomDomain”s 'issues' field for more details. OWNERSHIP_MISMATCH: Your 'CustomDomain”s domain name is
// owned by another Firebase project. Remove the conflicting 'TXT' records and replace them with project-specific records
// for your current Firebase project. OWNERSHIP_CONFLICT: Your 'CustomDomain”s domain name has conflicting 'TXT' records
// that indicate ownership by both your current Firebase project and another project. Remove the other project's ownership
// records to grant the current project ownership. OWNERSHIP_PENDING: Your 'CustomDomain”s DNS records are configured
// correctly. Hosting will transfer ownership of your domain to this 'CustomDomain' within 24 hours. OWNERSHIP_ACTIVE: Your
// 'CustomDomain”s domain name has 'TXT' records that grant its project permission to act on its behalf.
func (o FirebaseHostingCustomDomainOutput) OwnershipState() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.OwnershipState }).(pulumi.StringOutput)
}

func (o FirebaseHostingCustomDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// if true, indicates that Hosting's systems are attempting to make the 'CustomDomain”s state match your preferred state.
// This is most frequently 'true' when initially provisioning a 'CustomDomain' or when creating a new SSL certificate to
// match an updated 'cert_preference'
func (o FirebaseHostingCustomDomainOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// A domain name that this CustomDomain should direct traffic towards. If specified, Hosting will respond to requests
// against this CustomDomain with an HTTP 301 code, and route traffic to the specified 'redirect_target' instead.
func (o FirebaseHostingCustomDomainOutput) RedirectTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringPtrOutput { return v.RedirectTarget }).(pulumi.StringPtrOutput)
}

// A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
func (o FirebaseHostingCustomDomainOutput) RequiredDnsUpdates() FirebaseHostingCustomDomainRequiredDnsUpdateArrayOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) FirebaseHostingCustomDomainRequiredDnsUpdateArrayOutput {
		return v.RequiredDnsUpdates
	}).(FirebaseHostingCustomDomainRequiredDnsUpdateArrayOutput)
}

// The ID of the site in which to create this custom domain association.
func (o FirebaseHostingCustomDomainOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

func (o FirebaseHostingCustomDomainOutput) Timeouts() FirebaseHostingCustomDomainTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) FirebaseHostingCustomDomainTimeoutsPtrOutput { return v.Timeouts }).(FirebaseHostingCustomDomainTimeoutsPtrOutput)
}

// The last time the 'CustomDomain' was updated.
func (o FirebaseHostingCustomDomainOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o FirebaseHostingCustomDomainOutput) WaitDnsVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirebaseHostingCustomDomain) pulumi.BoolPtrOutput { return v.WaitDnsVerification }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseHostingCustomDomainInput)(nil)).Elem(), &FirebaseHostingCustomDomain{})
	pulumi.RegisterOutputType(FirebaseHostingCustomDomainOutput{})
}
