// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetappActiveDirectory struct {
	pulumi.CustomResourceState

	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain
	// users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators pulumi.StringArrayOutput `pulumi:"administrators"`
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption pulumi.BoolPtrOutput `pulumi:"aesEncryption"`
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group
	// allows members to backup and restore files regardless of whether they have read or write access to the files.
	// Comma-separated list.
	BackupOperators pulumi.StringArrayOutput `pulumi:"backupOperators"`
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns pulumi.StringOutput `pulumi:"dns"`
	// Fully qualified domain name for the Active Directory domain.
	Domain          pulumi.StringOutput    `pulumi:"domain"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections pulumi.BoolPtrOutput `pulumi:"encryptDcConnections"`
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using
	// kerberized NFSv4.1
	KdcHostname pulumi.StringPtrOutput `pulumi:"kdcHostname"`
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp pulumi.StringPtrOutput `pulumi:"kdcIp"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrOutput `pulumi:"ldapSigning"`
	// Name of the region for the policy to apply to.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name pulumi.StringOutput `pulumi:"name"`
	// NetBIOS name prefix of the server to be created. A five-character random ID is generated automatically, for example,
	// -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// '\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME'
	NetBiosPrefix           pulumi.StringOutput `pulumi:"netBiosPrefix"`
	NetappActiveDirectoryId pulumi.StringOutput `pulumi:"netappActiveDirectoryId"`
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled
	// volumes. This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap pulumi.BoolPtrOutput `pulumi:"nfsUsersWithLdap"`
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes. Defaults to
	// 'CN=Computers' if left empty.
	OrganizationalUnit pulumi.StringOutput `pulumi:"organizationalUnit"`
	Password           pulumi.StringOutput `pulumi:"password"`
	Project            pulumi.StringOutput `pulumi:"project"`
	// Domain accounts that require elevated privileges such as 'SeSecurityPrivilege' to manage security logs. Comma-separated
	// list.
	SecurityOperators pulumi.StringArrayOutput `pulumi:"securityOperators"`
	// Specifies an Active Directory site to manage domain controller selection. Use when Active Directory domain controllers
	// in multiple regions are configured. Defaults to 'Default-First-Site-Name' if left empty.
	Site pulumi.StringPtrOutput `pulumi:"site"`
	// The state of the Active Directory policy (not the Active Directory itself).
	State pulumi.StringOutput `pulumi:"state"`
	// The state details of the Active Directory.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                 `pulumi:"terraformLabels"`
	Timeouts        NetappActiveDirectoryTimeoutsPtrOutput `pulumi:"timeouts"`
	// Username for the Active Directory account with permissions to create the compute account within the specified
	// organizational unit.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewNetappActiveDirectory registers a new resource with the given unique name, arguments, and options.
func NewNetappActiveDirectory(ctx *pulumi.Context,
	name string, args *NetappActiveDirectoryArgs, opts ...pulumi.ResourceOption) (*NetappActiveDirectory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dns == nil {
		return nil, errors.New("invalid value for required argument 'Dns'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.NetBiosPrefix == nil {
		return nil, errors.New("invalid value for required argument 'NetBiosPrefix'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NetappActiveDirectory
	err = ctx.RegisterPackageResource("google-beta:index/netappActiveDirectory:NetappActiveDirectory", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappActiveDirectory gets an existing NetappActiveDirectory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappActiveDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappActiveDirectoryState, opts ...pulumi.ResourceOption) (*NetappActiveDirectory, error) {
	var resource NetappActiveDirectory
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/netappActiveDirectory:NetappActiveDirectory", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappActiveDirectory resources.
type netappActiveDirectoryState struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain
	// users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators []string `pulumi:"administrators"`
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption *bool `pulumi:"aesEncryption"`
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group
	// allows members to backup and restore files regardless of whether they have read or write access to the files.
	// Comma-separated list.
	BackupOperators []string `pulumi:"backupOperators"`
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime *string `pulumi:"createTime"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns *string `pulumi:"dns"`
	// Fully qualified domain name for the Active Directory domain.
	Domain          *string           `pulumi:"domain"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections *bool `pulumi:"encryptDcConnections"`
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using
	// kerberized NFSv4.1
	KdcHostname *string `pulumi:"kdcHostname"`
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp *string `pulumi:"kdcIp"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// Name of the region for the policy to apply to.
	Location *string `pulumi:"location"`
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name *string `pulumi:"name"`
	// NetBIOS name prefix of the server to be created. A five-character random ID is generated automatically, for example,
	// -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// '\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME'
	NetBiosPrefix           *string `pulumi:"netBiosPrefix"`
	NetappActiveDirectoryId *string `pulumi:"netappActiveDirectoryId"`
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled
	// volumes. This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap *bool `pulumi:"nfsUsersWithLdap"`
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes. Defaults to
	// 'CN=Computers' if left empty.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	Password           *string `pulumi:"password"`
	Project            *string `pulumi:"project"`
	// Domain accounts that require elevated privileges such as 'SeSecurityPrivilege' to manage security logs. Comma-separated
	// list.
	SecurityOperators []string `pulumi:"securityOperators"`
	// Specifies an Active Directory site to manage domain controller selection. Use when Active Directory domain controllers
	// in multiple regions are configured. Defaults to 'Default-First-Site-Name' if left empty.
	Site *string `pulumi:"site"`
	// The state of the Active Directory policy (not the Active Directory itself).
	State *string `pulumi:"state"`
	// The state details of the Active Directory.
	StateDetails *string `pulumi:"stateDetails"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string              `pulumi:"terraformLabels"`
	Timeouts        *NetappActiveDirectoryTimeouts `pulumi:"timeouts"`
	// Username for the Active Directory account with permissions to create the compute account within the specified
	// organizational unit.
	Username *string `pulumi:"username"`
}

type NetappActiveDirectoryState struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain
	// users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators pulumi.StringArrayInput
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption pulumi.BoolPtrInput
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group
	// allows members to backup and restore files regardless of whether they have read or write access to the files.
	// Comma-separated list.
	BackupOperators pulumi.StringArrayInput
	// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
	CreateTime pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns pulumi.StringPtrInput
	// Fully qualified domain name for the Active Directory domain.
	Domain          pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections pulumi.BoolPtrInput
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using
	// kerberized NFSv4.1
	KdcHostname pulumi.StringPtrInput
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp pulumi.StringPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput
	// Name of the region for the policy to apply to.
	Location pulumi.StringPtrInput
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name pulumi.StringPtrInput
	// NetBIOS name prefix of the server to be created. A five-character random ID is generated automatically, for example,
	// -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// '\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME'
	NetBiosPrefix           pulumi.StringPtrInput
	NetappActiveDirectoryId pulumi.StringPtrInput
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled
	// volumes. This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap pulumi.BoolPtrInput
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes. Defaults to
	// 'CN=Computers' if left empty.
	OrganizationalUnit pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
	// Domain accounts that require elevated privileges such as 'SeSecurityPrivilege' to manage security logs. Comma-separated
	// list.
	SecurityOperators pulumi.StringArrayInput
	// Specifies an Active Directory site to manage domain controller selection. Use when Active Directory domain controllers
	// in multiple regions are configured. Defaults to 'Default-First-Site-Name' if left empty.
	Site pulumi.StringPtrInput
	// The state of the Active Directory policy (not the Active Directory itself).
	State pulumi.StringPtrInput
	// The state details of the Active Directory.
	StateDetails pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NetappActiveDirectoryTimeoutsPtrInput
	// Username for the Active Directory account with permissions to create the compute account within the specified
	// organizational unit.
	Username pulumi.StringPtrInput
}

func (NetappActiveDirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappActiveDirectoryState)(nil)).Elem()
}

type netappActiveDirectoryArgs struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain
	// users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators []string `pulumi:"administrators"`
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption *bool `pulumi:"aesEncryption"`
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group
	// allows members to backup and restore files regardless of whether they have read or write access to the files.
	// Comma-separated list.
	BackupOperators []string `pulumi:"backupOperators"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns string `pulumi:"dns"`
	// Fully qualified domain name for the Active Directory domain.
	Domain string `pulumi:"domain"`
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections *bool `pulumi:"encryptDcConnections"`
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using
	// kerberized NFSv4.1
	KdcHostname *string `pulumi:"kdcHostname"`
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp *string `pulumi:"kdcIp"`
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// Name of the region for the policy to apply to.
	Location string `pulumi:"location"`
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name *string `pulumi:"name"`
	// NetBIOS name prefix of the server to be created. A five-character random ID is generated automatically, for example,
	// -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// '\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME'
	NetBiosPrefix           string  `pulumi:"netBiosPrefix"`
	NetappActiveDirectoryId *string `pulumi:"netappActiveDirectoryId"`
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled
	// volumes. This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap *bool `pulumi:"nfsUsersWithLdap"`
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes. Defaults to
	// 'CN=Computers' if left empty.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	Password           string  `pulumi:"password"`
	Project            *string `pulumi:"project"`
	// Domain accounts that require elevated privileges such as 'SeSecurityPrivilege' to manage security logs. Comma-separated
	// list.
	SecurityOperators []string `pulumi:"securityOperators"`
	// Specifies an Active Directory site to manage domain controller selection. Use when Active Directory domain controllers
	// in multiple regions are configured. Defaults to 'Default-First-Site-Name' if left empty.
	Site     *string                        `pulumi:"site"`
	Timeouts *NetappActiveDirectoryTimeouts `pulumi:"timeouts"`
	// Username for the Active Directory account with permissions to create the compute account within the specified
	// organizational unit.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a NetappActiveDirectory resource.
type NetappActiveDirectoryArgs struct {
	// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain
	// users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
	Administrators pulumi.StringArrayInput
	// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
	AesEncryption pulumi.BoolPtrInput
	// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group
	// allows members to backup and restore files regardless of whether they have read or write access to the files.
	// Comma-separated list.
	BackupOperators pulumi.StringArrayInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Comma separated list of DNS server IP addresses for the Active Directory domain.
	Dns pulumi.StringInput
	// Fully qualified domain name for the Active Directory domain.
	Domain pulumi.StringInput
	// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDcConnections pulumi.BoolPtrInput
	// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using
	// kerberized NFSv4.1
	KdcHostname pulumi.StringPtrInput
	// IP address of the Active Directory server used as Kerberos Key Distribution Center.
	KdcIp pulumi.StringPtrInput
	// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput
	// Name of the region for the policy to apply to.
	Location pulumi.StringInput
	// The resource name of the Active Directory pool. Needs to be unique per location.
	Name pulumi.StringPtrInput
	// NetBIOS name prefix of the server to be created. A five-character random ID is generated automatically, for example,
	// -6f9a, and appended to the prefix. The full UNC share path will have the following format:
	// '\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME'
	NetBiosPrefix           pulumi.StringInput
	NetappActiveDirectoryId pulumi.StringPtrInput
	// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled
	// volumes. This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
	NfsUsersWithLdap pulumi.BoolPtrInput
	// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes. Defaults to
	// 'CN=Computers' if left empty.
	OrganizationalUnit pulumi.StringPtrInput
	Password           pulumi.StringInput
	Project            pulumi.StringPtrInput
	// Domain accounts that require elevated privileges such as 'SeSecurityPrivilege' to manage security logs. Comma-separated
	// list.
	SecurityOperators pulumi.StringArrayInput
	// Specifies an Active Directory site to manage domain controller selection. Use when Active Directory domain controllers
	// in multiple regions are configured. Defaults to 'Default-First-Site-Name' if left empty.
	Site     pulumi.StringPtrInput
	Timeouts NetappActiveDirectoryTimeoutsPtrInput
	// Username for the Active Directory account with permissions to create the compute account within the specified
	// organizational unit.
	Username pulumi.StringInput
}

func (NetappActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappActiveDirectoryArgs)(nil)).Elem()
}

type NetappActiveDirectoryInput interface {
	pulumi.Input

	ToNetappActiveDirectoryOutput() NetappActiveDirectoryOutput
	ToNetappActiveDirectoryOutputWithContext(ctx context.Context) NetappActiveDirectoryOutput
}

func (*NetappActiveDirectory) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappActiveDirectory)(nil)).Elem()
}

func (i *NetappActiveDirectory) ToNetappActiveDirectoryOutput() NetappActiveDirectoryOutput {
	return i.ToNetappActiveDirectoryOutputWithContext(context.Background())
}

func (i *NetappActiveDirectory) ToNetappActiveDirectoryOutputWithContext(ctx context.Context) NetappActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappActiveDirectoryOutput)
}

type NetappActiveDirectoryOutput struct{ *pulumi.OutputState }

func (NetappActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappActiveDirectory)(nil)).Elem()
}

func (o NetappActiveDirectoryOutput) ToNetappActiveDirectoryOutput() NetappActiveDirectoryOutput {
	return o
}

func (o NetappActiveDirectoryOutput) ToNetappActiveDirectoryOutputWithContext(ctx context.Context) NetappActiveDirectoryOutput {
	return o
}

// Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain
// users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
func (o NetappActiveDirectoryOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringArrayOutput { return v.Administrators }).(pulumi.StringArrayOutput)
}

// Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
func (o NetappActiveDirectoryOutput) AesEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.BoolPtrOutput { return v.AesEncryption }).(pulumi.BoolPtrOutput)
}

// Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group
// allows members to backup and restore files regardless of whether they have read or write access to the files.
// Comma-separated list.
func (o NetappActiveDirectoryOutput) BackupOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringArrayOutput { return v.BackupOperators }).(pulumi.StringArrayOutput)
}

// Create time of the active directory. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
func (o NetappActiveDirectoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o NetappActiveDirectoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Comma separated list of DNS server IP addresses for the Active Directory domain.
func (o NetappActiveDirectoryOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Dns }).(pulumi.StringOutput)
}

// Fully qualified domain name for the Active Directory domain.
func (o NetappActiveDirectoryOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o NetappActiveDirectoryOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
func (o NetappActiveDirectoryOutput) EncryptDcConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.BoolPtrOutput { return v.EncryptDcConnections }).(pulumi.BoolPtrOutput)
}

// Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using
// kerberized NFSv4.1
func (o NetappActiveDirectoryOutput) KdcHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringPtrOutput { return v.KdcHostname }).(pulumi.StringPtrOutput)
}

// IP address of the Active Directory server used as Kerberos Key Distribution Center.
func (o NetappActiveDirectoryOutput) KdcIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringPtrOutput { return v.KdcIp }).(pulumi.StringPtrOutput)
}

// Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o NetappActiveDirectoryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies whether or not the LDAP traffic needs to be signed.
func (o NetappActiveDirectoryOutput) LdapSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.BoolPtrOutput { return v.LdapSigning }).(pulumi.BoolPtrOutput)
}

// Name of the region for the policy to apply to.
func (o NetappActiveDirectoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Active Directory pool. Needs to be unique per location.
func (o NetappActiveDirectoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NetBIOS name prefix of the server to be created. A five-character random ID is generated automatically, for example,
// -6f9a, and appended to the prefix. The full UNC share path will have the following format:
// '\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME'
func (o NetappActiveDirectoryOutput) NetBiosPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.NetBiosPrefix }).(pulumi.StringOutput)
}

func (o NetappActiveDirectoryOutput) NetappActiveDirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.NetappActiveDirectoryId }).(pulumi.StringOutput)
}

// Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled
// volumes. This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
func (o NetappActiveDirectoryOutput) NfsUsersWithLdap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.BoolPtrOutput { return v.NfsUsersWithLdap }).(pulumi.BoolPtrOutput)
}

// Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes. Defaults to
// 'CN=Computers' if left empty.
func (o NetappActiveDirectoryOutput) OrganizationalUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.OrganizationalUnit }).(pulumi.StringOutput)
}

func (o NetappActiveDirectoryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o NetappActiveDirectoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Domain accounts that require elevated privileges such as 'SeSecurityPrivilege' to manage security logs. Comma-separated
// list.
func (o NetappActiveDirectoryOutput) SecurityOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringArrayOutput { return v.SecurityOperators }).(pulumi.StringArrayOutput)
}

// Specifies an Active Directory site to manage domain controller selection. Use when Active Directory domain controllers
// in multiple regions are configured. Defaults to 'Default-First-Site-Name' if left empty.
func (o NetappActiveDirectoryOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringPtrOutput { return v.Site }).(pulumi.StringPtrOutput)
}

// The state of the Active Directory policy (not the Active Directory itself).
func (o NetappActiveDirectoryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The state details of the Active Directory.
func (o NetappActiveDirectoryOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NetappActiveDirectoryOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NetappActiveDirectoryOutput) Timeouts() NetappActiveDirectoryTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) NetappActiveDirectoryTimeoutsPtrOutput { return v.Timeouts }).(NetappActiveDirectoryTimeoutsPtrOutput)
}

// Username for the Active Directory account with permissions to create the compute account within the specified
// organizational unit.
func (o NetappActiveDirectoryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappActiveDirectory) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappActiveDirectoryInput)(nil)).Elem(), &NetappActiveDirectory{})
	pulumi.RegisterOutputType(NetappActiveDirectoryOutput{})
}
