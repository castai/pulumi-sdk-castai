// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseWebApp struct {
	pulumi.CustomResourceState

	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp. This auto-associated key
	// may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringOutput `pulumi:"apiKeyId"`
	// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
	// the data format is not specified.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The URLs where the 'WebApp' is hosted.
	AppUrls        pulumi.StringArrayOutput `pulumi:"appUrls"`
	DeletionPolicy pulumi.StringPtrOutput   `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName      pulumi.StringOutput `pulumi:"displayName"`
	FirebaseWebAppId pulumi.StringOutput `pulumi:"firebaseWebAppId"`
	// The fully qualified resource name of the App, for example: projects/projectId/webApps/appId
	Name     pulumi.StringOutput             `pulumi:"name"`
	Project  pulumi.StringOutput             `pulumi:"project"`
	Timeouts FirebaseWebAppTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFirebaseWebApp registers a new resource with the given unique name, arguments, and options.
func NewFirebaseWebApp(ctx *pulumi.Context,
	name string, args *FirebaseWebAppArgs, opts ...pulumi.ResourceOption) (*FirebaseWebApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseWebApp
	err = ctx.RegisterPackageResource("google-beta:index/firebaseWebApp:FirebaseWebApp", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseWebApp gets an existing FirebaseWebApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseWebApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseWebAppState, opts ...pulumi.ResourceOption) (*FirebaseWebApp, error) {
	var resource FirebaseWebApp
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaseWebApp:FirebaseWebApp", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseWebApp resources.
type firebaseWebAppState struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp. This auto-associated key
	// may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
	// the data format is not specified.
	AppId *string `pulumi:"appId"`
	// The URLs where the 'WebApp' is hosted.
	AppUrls        []string `pulumi:"appUrls"`
	DeletionPolicy *string  `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName      *string `pulumi:"displayName"`
	FirebaseWebAppId *string `pulumi:"firebaseWebAppId"`
	// The fully qualified resource name of the App, for example: projects/projectId/webApps/appId
	Name     *string                 `pulumi:"name"`
	Project  *string                 `pulumi:"project"`
	Timeouts *FirebaseWebAppTimeouts `pulumi:"timeouts"`
}

type FirebaseWebAppState struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp. This auto-associated key
	// may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringPtrInput
	// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
	// the data format is not specified.
	AppId pulumi.StringPtrInput
	// The URLs where the 'WebApp' is hosted.
	AppUrls        pulumi.StringArrayInput
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	DisplayName      pulumi.StringPtrInput
	FirebaseWebAppId pulumi.StringPtrInput
	// The fully qualified resource name of the App, for example: projects/projectId/webApps/appId
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts FirebaseWebAppTimeoutsPtrInput
}

func (FirebaseWebAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseWebAppState)(nil)).Elem()
}

type firebaseWebAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp. This auto-associated key
	// may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId       *string `pulumi:"apiKeyId"`
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName      string                  `pulumi:"displayName"`
	FirebaseWebAppId *string                 `pulumi:"firebaseWebAppId"`
	Project          *string                 `pulumi:"project"`
	Timeouts         *FirebaseWebAppTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaseWebApp resource.
type FirebaseWebAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp. If apiKeyId
	// is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp. This auto-associated key
	// may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId       pulumi.StringPtrInput
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	DisplayName      pulumi.StringInput
	FirebaseWebAppId pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	Timeouts         FirebaseWebAppTimeoutsPtrInput
}

func (FirebaseWebAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseWebAppArgs)(nil)).Elem()
}

type FirebaseWebAppInput interface {
	pulumi.Input

	ToFirebaseWebAppOutput() FirebaseWebAppOutput
	ToFirebaseWebAppOutputWithContext(ctx context.Context) FirebaseWebAppOutput
}

func (*FirebaseWebApp) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseWebApp)(nil)).Elem()
}

func (i *FirebaseWebApp) ToFirebaseWebAppOutput() FirebaseWebAppOutput {
	return i.ToFirebaseWebAppOutputWithContext(context.Background())
}

func (i *FirebaseWebApp) ToFirebaseWebAppOutputWithContext(ctx context.Context) FirebaseWebAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseWebAppOutput)
}

type FirebaseWebAppOutput struct{ *pulumi.OutputState }

func (FirebaseWebAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseWebApp)(nil)).Elem()
}

func (o FirebaseWebAppOutput) ToFirebaseWebAppOutput() FirebaseWebAppOutput {
	return o
}

func (o FirebaseWebAppOutput) ToFirebaseWebAppOutputWithContext(ctx context.Context) FirebaseWebAppOutput {
	return o
}

// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp. If apiKeyId
// is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp. This auto-associated key
// may be an existing valid key or, if no valid key exists, a new one will be provisioned.
func (o FirebaseWebAppOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringOutput { return v.ApiKeyId }).(pulumi.StringOutput)
}

// The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque token, as
// the data format is not specified.
func (o FirebaseWebAppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The URLs where the 'WebApp' is hosted.
func (o FirebaseWebAppOutput) AppUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringArrayOutput { return v.AppUrls }).(pulumi.StringArrayOutput)
}

func (o FirebaseWebAppOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The user-assigned display name of the App.
func (o FirebaseWebAppOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o FirebaseWebAppOutput) FirebaseWebAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringOutput { return v.FirebaseWebAppId }).(pulumi.StringOutput)
}

// The fully qualified resource name of the App, for example: projects/projectId/webApps/appId
func (o FirebaseWebAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirebaseWebAppOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseWebApp) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o FirebaseWebAppOutput) Timeouts() FirebaseWebAppTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseWebApp) FirebaseWebAppTimeoutsPtrOutput { return v.Timeouts }).(FirebaseWebAppTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseWebAppInput)(nil)).Elem(), &FirebaseWebApp{})
	pulumi.RegisterOutputType(FirebaseWebAppOutput{})
}
