// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamWorkloadIdentityPool struct {
	pulumi.CustomResourceState

	// A description of the pool. Cannot exceed 256 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access
	// resources. If the pool is re-enabled, existing tokens grant access again.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName               pulumi.StringPtrOutput `pulumi:"displayName"`
	IamWorkloadIdentityPoolId pulumi.StringOutput    `pulumi:"iamWorkloadIdentityPoolId"`
	// The resource name of the pool as
	// 'projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}'.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The state of the pool. * STATE_UNSPECIFIED: State unspecified. * ACTIVE: The pool is active, and may be used in Google
	// Cloud policies. * DELETED: The pool is soft-deleted. Soft-deleted pools are permanently deleted after approximately 30
	// days. You can restore a soft-deleted pool using UndeleteWorkloadIdentityPool. You cannot reuse the ID of a soft-deleted
	// pool until it is permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or use existing
	// tokens to access resources. If the pool is undeleted, existing tokens grant access again.
	State    pulumi.StringOutput                      `pulumi:"state"`
	Timeouts IamWorkloadIdentityPoolTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID to use for the pool, which becomes the final component of the resource name. This value should be 4-32
	// characters, and may contain the characters [a-z0-9-]. The prefix 'gcp-' is reserved for use by Google, and may not be
	// specified.
	WorkloadIdentityPoolId pulumi.StringOutput `pulumi:"workloadIdentityPoolId"`
}

// NewIamWorkloadIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIamWorkloadIdentityPool(ctx *pulumi.Context,
	name string, args *IamWorkloadIdentityPoolArgs, opts ...pulumi.ResourceOption) (*IamWorkloadIdentityPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkloadIdentityPoolId == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadIdentityPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource IamWorkloadIdentityPool
	err = ctx.RegisterPackageResource("google-beta:index/iamWorkloadIdentityPool:IamWorkloadIdentityPool", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamWorkloadIdentityPool gets an existing IamWorkloadIdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamWorkloadIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamWorkloadIdentityPoolState, opts ...pulumi.ResourceOption) (*IamWorkloadIdentityPool, error) {
	var resource IamWorkloadIdentityPool
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/iamWorkloadIdentityPool:IamWorkloadIdentityPool", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamWorkloadIdentityPool resources.
type iamWorkloadIdentityPoolState struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description *string `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access
	// resources. If the pool is re-enabled, existing tokens grant access again.
	Disabled *bool `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName               *string `pulumi:"displayName"`
	IamWorkloadIdentityPoolId *string `pulumi:"iamWorkloadIdentityPoolId"`
	// The resource name of the pool as
	// 'projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}'.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The state of the pool. * STATE_UNSPECIFIED: State unspecified. * ACTIVE: The pool is active, and may be used in Google
	// Cloud policies. * DELETED: The pool is soft-deleted. Soft-deleted pools are permanently deleted after approximately 30
	// days. You can restore a soft-deleted pool using UndeleteWorkloadIdentityPool. You cannot reuse the ID of a soft-deleted
	// pool until it is permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or use existing
	// tokens to access resources. If the pool is undeleted, existing tokens grant access again.
	State    *string                          `pulumi:"state"`
	Timeouts *IamWorkloadIdentityPoolTimeouts `pulumi:"timeouts"`
	// The ID to use for the pool, which becomes the final component of the resource name. This value should be 4-32
	// characters, and may contain the characters [a-z0-9-]. The prefix 'gcp-' is reserved for use by Google, and may not be
	// specified.
	WorkloadIdentityPoolId *string `pulumi:"workloadIdentityPoolId"`
}

type IamWorkloadIdentityPoolState struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description pulumi.StringPtrInput
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access
	// resources. If the pool is re-enabled, existing tokens grant access again.
	Disabled pulumi.BoolPtrInput
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName               pulumi.StringPtrInput
	IamWorkloadIdentityPoolId pulumi.StringPtrInput
	// The resource name of the pool as
	// 'projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}'.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The state of the pool. * STATE_UNSPECIFIED: State unspecified. * ACTIVE: The pool is active, and may be used in Google
	// Cloud policies. * DELETED: The pool is soft-deleted. Soft-deleted pools are permanently deleted after approximately 30
	// days. You can restore a soft-deleted pool using UndeleteWorkloadIdentityPool. You cannot reuse the ID of a soft-deleted
	// pool until it is permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or use existing
	// tokens to access resources. If the pool is undeleted, existing tokens grant access again.
	State    pulumi.StringPtrInput
	Timeouts IamWorkloadIdentityPoolTimeoutsPtrInput
	// The ID to use for the pool, which becomes the final component of the resource name. This value should be 4-32
	// characters, and may contain the characters [a-z0-9-]. The prefix 'gcp-' is reserved for use by Google, and may not be
	// specified.
	WorkloadIdentityPoolId pulumi.StringPtrInput
}

func (IamWorkloadIdentityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamWorkloadIdentityPoolState)(nil)).Elem()
}

type iamWorkloadIdentityPoolArgs struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description *string `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access
	// resources. If the pool is re-enabled, existing tokens grant access again.
	Disabled *bool `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName               *string                          `pulumi:"displayName"`
	IamWorkloadIdentityPoolId *string                          `pulumi:"iamWorkloadIdentityPoolId"`
	Project                   *string                          `pulumi:"project"`
	Timeouts                  *IamWorkloadIdentityPoolTimeouts `pulumi:"timeouts"`
	// The ID to use for the pool, which becomes the final component of the resource name. This value should be 4-32
	// characters, and may contain the characters [a-z0-9-]. The prefix 'gcp-' is reserved for use by Google, and may not be
	// specified.
	WorkloadIdentityPoolId string `pulumi:"workloadIdentityPoolId"`
}

// The set of arguments for constructing a IamWorkloadIdentityPool resource.
type IamWorkloadIdentityPoolArgs struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description pulumi.StringPtrInput
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access
	// resources. If the pool is re-enabled, existing tokens grant access again.
	Disabled pulumi.BoolPtrInput
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName               pulumi.StringPtrInput
	IamWorkloadIdentityPoolId pulumi.StringPtrInput
	Project                   pulumi.StringPtrInput
	Timeouts                  IamWorkloadIdentityPoolTimeoutsPtrInput
	// The ID to use for the pool, which becomes the final component of the resource name. This value should be 4-32
	// characters, and may contain the characters [a-z0-9-]. The prefix 'gcp-' is reserved for use by Google, and may not be
	// specified.
	WorkloadIdentityPoolId pulumi.StringInput
}

func (IamWorkloadIdentityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamWorkloadIdentityPoolArgs)(nil)).Elem()
}

type IamWorkloadIdentityPoolInput interface {
	pulumi.Input

	ToIamWorkloadIdentityPoolOutput() IamWorkloadIdentityPoolOutput
	ToIamWorkloadIdentityPoolOutputWithContext(ctx context.Context) IamWorkloadIdentityPoolOutput
}

func (*IamWorkloadIdentityPool) ElementType() reflect.Type {
	return reflect.TypeOf((**IamWorkloadIdentityPool)(nil)).Elem()
}

func (i *IamWorkloadIdentityPool) ToIamWorkloadIdentityPoolOutput() IamWorkloadIdentityPoolOutput {
	return i.ToIamWorkloadIdentityPoolOutputWithContext(context.Background())
}

func (i *IamWorkloadIdentityPool) ToIamWorkloadIdentityPoolOutputWithContext(ctx context.Context) IamWorkloadIdentityPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamWorkloadIdentityPoolOutput)
}

type IamWorkloadIdentityPoolOutput struct{ *pulumi.OutputState }

func (IamWorkloadIdentityPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamWorkloadIdentityPool)(nil)).Elem()
}

func (o IamWorkloadIdentityPoolOutput) ToIamWorkloadIdentityPoolOutput() IamWorkloadIdentityPoolOutput {
	return o
}

func (o IamWorkloadIdentityPoolOutput) ToIamWorkloadIdentityPoolOutputWithContext(ctx context.Context) IamWorkloadIdentityPoolOutput {
	return o
}

// A description of the pool. Cannot exceed 256 characters.
func (o IamWorkloadIdentityPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access
// resources. If the pool is re-enabled, existing tokens grant access again.
func (o IamWorkloadIdentityPoolOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// A display name for the pool. Cannot exceed 32 characters.
func (o IamWorkloadIdentityPoolOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o IamWorkloadIdentityPoolOutput) IamWorkloadIdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringOutput { return v.IamWorkloadIdentityPoolId }).(pulumi.StringOutput)
}

// The resource name of the pool as
// 'projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}'.
func (o IamWorkloadIdentityPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IamWorkloadIdentityPoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The state of the pool. * STATE_UNSPECIFIED: State unspecified. * ACTIVE: The pool is active, and may be used in Google
// Cloud policies. * DELETED: The pool is soft-deleted. Soft-deleted pools are permanently deleted after approximately 30
// days. You can restore a soft-deleted pool using UndeleteWorkloadIdentityPool. You cannot reuse the ID of a soft-deleted
// pool until it is permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or use existing
// tokens to access resources. If the pool is undeleted, existing tokens grant access again.
func (o IamWorkloadIdentityPoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o IamWorkloadIdentityPoolOutput) Timeouts() IamWorkloadIdentityPoolTimeoutsPtrOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) IamWorkloadIdentityPoolTimeoutsPtrOutput { return v.Timeouts }).(IamWorkloadIdentityPoolTimeoutsPtrOutput)
}

// The ID to use for the pool, which becomes the final component of the resource name. This value should be 4-32
// characters, and may contain the characters [a-z0-9-]. The prefix 'gcp-' is reserved for use by Google, and may not be
// specified.
func (o IamWorkloadIdentityPoolOutput) WorkloadIdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamWorkloadIdentityPool) pulumi.StringOutput { return v.WorkloadIdentityPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamWorkloadIdentityPoolInput)(nil)).Elem(), &IamWorkloadIdentityPool{})
	pulumi.RegisterOutputType(IamWorkloadIdentityPoolOutput{})
}
