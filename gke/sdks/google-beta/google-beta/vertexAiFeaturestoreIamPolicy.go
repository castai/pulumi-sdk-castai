// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreIamPolicy struct {
	pulumi.CustomResourceState

	Etag                            pulumi.StringOutput `pulumi:"etag"`
	Featurestore                    pulumi.StringOutput `pulumi:"featurestore"`
	PolicyData                      pulumi.StringOutput `pulumi:"policyData"`
	Project                         pulumi.StringOutput `pulumi:"project"`
	Region                          pulumi.StringOutput `pulumi:"region"`
	VertexAiFeaturestoreIamPolicyId pulumi.StringOutput `pulumi:"vertexAiFeaturestoreIamPolicyId"`
}

// NewVertexAiFeaturestoreIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreIamPolicy(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreIamPolicyArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreIamPolicy:VertexAiFeaturestoreIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreIamPolicy gets an existing VertexAiFeaturestoreIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreIamPolicyState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreIamPolicy, error) {
	var resource VertexAiFeaturestoreIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreIamPolicy:VertexAiFeaturestoreIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreIamPolicy resources.
type vertexAiFeaturestoreIamPolicyState struct {
	Etag                            *string `pulumi:"etag"`
	Featurestore                    *string `pulumi:"featurestore"`
	PolicyData                      *string `pulumi:"policyData"`
	Project                         *string `pulumi:"project"`
	Region                          *string `pulumi:"region"`
	VertexAiFeaturestoreIamPolicyId *string `pulumi:"vertexAiFeaturestoreIamPolicyId"`
}

type VertexAiFeaturestoreIamPolicyState struct {
	Etag                            pulumi.StringPtrInput
	Featurestore                    pulumi.StringPtrInput
	PolicyData                      pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	Region                          pulumi.StringPtrInput
	VertexAiFeaturestoreIamPolicyId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreIamPolicyState)(nil)).Elem()
}

type vertexAiFeaturestoreIamPolicyArgs struct {
	Featurestore                    string  `pulumi:"featurestore"`
	PolicyData                      string  `pulumi:"policyData"`
	Project                         *string `pulumi:"project"`
	Region                          *string `pulumi:"region"`
	VertexAiFeaturestoreIamPolicyId *string `pulumi:"vertexAiFeaturestoreIamPolicyId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreIamPolicy resource.
type VertexAiFeaturestoreIamPolicyArgs struct {
	Featurestore                    pulumi.StringInput
	PolicyData                      pulumi.StringInput
	Project                         pulumi.StringPtrInput
	Region                          pulumi.StringPtrInput
	VertexAiFeaturestoreIamPolicyId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreIamPolicyArgs)(nil)).Elem()
}

type VertexAiFeaturestoreIamPolicyInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreIamPolicyOutput() VertexAiFeaturestoreIamPolicyOutput
	ToVertexAiFeaturestoreIamPolicyOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamPolicyOutput
}

func (*VertexAiFeaturestoreIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreIamPolicy)(nil)).Elem()
}

func (i *VertexAiFeaturestoreIamPolicy) ToVertexAiFeaturestoreIamPolicyOutput() VertexAiFeaturestoreIamPolicyOutput {
	return i.ToVertexAiFeaturestoreIamPolicyOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreIamPolicy) ToVertexAiFeaturestoreIamPolicyOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreIamPolicyOutput)
}

type VertexAiFeaturestoreIamPolicyOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreIamPolicy)(nil)).Elem()
}

func (o VertexAiFeaturestoreIamPolicyOutput) ToVertexAiFeaturestoreIamPolicyOutput() VertexAiFeaturestoreIamPolicyOutput {
	return o
}

func (o VertexAiFeaturestoreIamPolicyOutput) ToVertexAiFeaturestoreIamPolicyOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamPolicyOutput {
	return o
}

func (o VertexAiFeaturestoreIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamPolicyOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamPolicy) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamPolicyOutput) VertexAiFeaturestoreIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamPolicy) pulumi.StringOutput { return v.VertexAiFeaturestoreIamPolicyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreIamPolicyInput)(nil)).Elem(), &VertexAiFeaturestoreIamPolicy{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreIamPolicyOutput{})
}
