// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeatureGroup struct {
	pulumi.CustomResourceState

	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time
	// series source, which is required to have an entityId and a feature_timestamp column in the source.
	BigQuery VertexAiFeatureGroupBigQueryPtrOutput `pulumi:"bigQuery"`
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the FeatureGroup.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels with user-defined metadata to organize your FeatureGroup. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the Feature Group.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The region of feature group. eg us-central1
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                `pulumi:"terraformLabels"`
	Timeouts        VertexAiFeatureGroupTimeoutsPtrOutput `pulumi:"timeouts"`
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime             pulumi.StringOutput `pulumi:"updateTime"`
	VertexAiFeatureGroupId pulumi.StringOutput `pulumi:"vertexAiFeatureGroupId"`
}

// NewVertexAiFeatureGroup registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeatureGroup(ctx *pulumi.Context,
	name string, args *VertexAiFeatureGroupArgs, opts ...pulumi.ResourceOption) (*VertexAiFeatureGroup, error) {
	if args == nil {
		args = &VertexAiFeatureGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeatureGroup
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeatureGroup:VertexAiFeatureGroup", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeatureGroup gets an existing VertexAiFeatureGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeatureGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeatureGroupState, opts ...pulumi.ResourceOption) (*VertexAiFeatureGroup, error) {
	var resource VertexAiFeatureGroup
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeatureGroup:VertexAiFeatureGroup", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeatureGroup resources.
type vertexAiFeatureGroupState struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time
	// series source, which is required to have an entityId and a feature_timestamp column in the source.
	BigQuery *VertexAiFeatureGroupBigQuery `pulumi:"bigQuery"`
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime *string `pulumi:"createTime"`
	// The description of the FeatureGroup.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Used to perform consistent read-modify-write updates.
	Etag *string `pulumi:"etag"`
	// The labels with user-defined metadata to organize your FeatureGroup. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Group.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1
	Region *string `pulumi:"region"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string             `pulumi:"terraformLabels"`
	Timeouts        *VertexAiFeatureGroupTimeouts `pulumi:"timeouts"`
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime             *string `pulumi:"updateTime"`
	VertexAiFeatureGroupId *string `pulumi:"vertexAiFeatureGroupId"`
}

type VertexAiFeatureGroupState struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time
	// series source, which is required to have an entityId and a feature_timestamp column in the source.
	BigQuery VertexAiFeatureGroupBigQueryPtrInput
	// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits.
	CreateTime pulumi.StringPtrInput
	// The description of the FeatureGroup.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Used to perform consistent read-modify-write updates.
	Etag pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your FeatureGroup. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Group.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1
	Region pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        VertexAiFeatureGroupTimeoutsPtrInput
	// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	UpdateTime             pulumi.StringPtrInput
	VertexAiFeatureGroupId pulumi.StringPtrInput
}

func (VertexAiFeatureGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeatureGroupState)(nil)).Elem()
}

type vertexAiFeatureGroupArgs struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time
	// series source, which is required to have an entityId and a feature_timestamp column in the source.
	BigQuery *VertexAiFeatureGroupBigQuery `pulumi:"bigQuery"`
	// The description of the FeatureGroup.
	Description *string `pulumi:"description"`
	// The labels with user-defined metadata to organize your FeatureGroup. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Feature Group.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The region of feature group. eg us-central1
	Region                 *string                       `pulumi:"region"`
	Timeouts               *VertexAiFeatureGroupTimeouts `pulumi:"timeouts"`
	VertexAiFeatureGroupId *string                       `pulumi:"vertexAiFeatureGroupId"`
}

// The set of arguments for constructing a VertexAiFeatureGroup resource.
type VertexAiFeatureGroupArgs struct {
	// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time
	// series source, which is required to have an entityId and a feature_timestamp column in the source.
	BigQuery VertexAiFeatureGroupBigQueryPtrInput
	// The description of the FeatureGroup.
	Description pulumi.StringPtrInput
	// The labels with user-defined metadata to organize your FeatureGroup. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Feature Group.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The region of feature group. eg us-central1
	Region                 pulumi.StringPtrInput
	Timeouts               VertexAiFeatureGroupTimeoutsPtrInput
	VertexAiFeatureGroupId pulumi.StringPtrInput
}

func (VertexAiFeatureGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeatureGroupArgs)(nil)).Elem()
}

type VertexAiFeatureGroupInput interface {
	pulumi.Input

	ToVertexAiFeatureGroupOutput() VertexAiFeatureGroupOutput
	ToVertexAiFeatureGroupOutputWithContext(ctx context.Context) VertexAiFeatureGroupOutput
}

func (*VertexAiFeatureGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeatureGroup)(nil)).Elem()
}

func (i *VertexAiFeatureGroup) ToVertexAiFeatureGroupOutput() VertexAiFeatureGroupOutput {
	return i.ToVertexAiFeatureGroupOutputWithContext(context.Background())
}

func (i *VertexAiFeatureGroup) ToVertexAiFeatureGroupOutputWithContext(ctx context.Context) VertexAiFeatureGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeatureGroupOutput)
}

type VertexAiFeatureGroupOutput struct{ *pulumi.OutputState }

func (VertexAiFeatureGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeatureGroup)(nil)).Elem()
}

func (o VertexAiFeatureGroupOutput) ToVertexAiFeatureGroupOutput() VertexAiFeatureGroupOutput {
	return o
}

func (o VertexAiFeatureGroupOutput) ToVertexAiFeatureGroupOutputWithContext(ctx context.Context) VertexAiFeatureGroupOutput {
	return o
}

// Indicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time
// series source, which is required to have an entityId and a feature_timestamp column in the source.
func (o VertexAiFeatureGroupOutput) BigQuery() VertexAiFeatureGroupBigQueryPtrOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) VertexAiFeatureGroupBigQueryPtrOutput { return v.BigQuery }).(VertexAiFeatureGroupBigQueryPtrOutput)
}

// The timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
// nine fractional digits.
func (o VertexAiFeatureGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the FeatureGroup.
func (o VertexAiFeatureGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VertexAiFeatureGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Used to perform consistent read-modify-write updates.
func (o VertexAiFeatureGroupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels with user-defined metadata to organize your FeatureGroup. **Note**: This field is non-authoritative, and will
// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o VertexAiFeatureGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the Feature Group.
func (o VertexAiFeatureGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VertexAiFeatureGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region of feature group. eg us-central1
func (o VertexAiFeatureGroupOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o VertexAiFeatureGroupOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o VertexAiFeatureGroupOutput) Timeouts() VertexAiFeatureGroupTimeoutsPtrOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) VertexAiFeatureGroupTimeoutsPtrOutput { return v.Timeouts }).(VertexAiFeatureGroupTimeoutsPtrOutput)
}

// The timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
// to nine fractional digits.
func (o VertexAiFeatureGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o VertexAiFeatureGroupOutput) VertexAiFeatureGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeatureGroup) pulumi.StringOutput { return v.VertexAiFeatureGroupId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeatureGroupInput)(nil)).Elem(), &VertexAiFeatureGroup{})
	pulumi.RegisterOutputType(VertexAiFeatureGroupOutput{})
}
