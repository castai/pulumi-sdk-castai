// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeHubMembershipRbacRoleBinding struct {
	pulumi.CustomResourceState

	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime                        pulumi.StringOutput `pulumi:"deleteTime"`
	GkeHubMembershipRbacRoleBindingId pulumi.StringOutput `pulumi:"gkeHubMembershipRbacRoleBindingId"`
	// Location of the Membership
	Location pulumi.StringOutput `pulumi:"location"`
	// Id of the membership
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId pulumi.StringOutput `pulumi:"membershipRbacRoleBindingId"`
	// The resource name for the RBAC Role Binding
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Role to bind to the principal.
	Role GkeHubMembershipRbacRoleBindingRoleOutput `pulumi:"role"`
	// State of the RBAC Role Binding resource.
	States   GkeHubMembershipRbacRoleBindingStateTypeArrayOutput `pulumi:"states"`
	Timeouts GkeHubMembershipRbacRoleBindingTimeoutsPtrOutput    `pulumi:"timeouts"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User pulumi.StringOutput `pulumi:"user"`
}

// NewGkeHubMembershipRbacRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewGkeHubMembershipRbacRoleBinding(ctx *pulumi.Context,
	name string, args *GkeHubMembershipRbacRoleBindingArgs, opts ...pulumi.ResourceOption) (*GkeHubMembershipRbacRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MembershipId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipId'")
	}
	if args.MembershipRbacRoleBindingId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipRbacRoleBindingId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeHubMembershipRbacRoleBinding
	err = ctx.RegisterPackageResource("google-beta:index/gkeHubMembershipRbacRoleBinding:GkeHubMembershipRbacRoleBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeHubMembershipRbacRoleBinding gets an existing GkeHubMembershipRbacRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeHubMembershipRbacRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeHubMembershipRbacRoleBindingState, opts ...pulumi.ResourceOption) (*GkeHubMembershipRbacRoleBinding, error) {
	var resource GkeHubMembershipRbacRoleBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/gkeHubMembershipRbacRoleBinding:GkeHubMembershipRbacRoleBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeHubMembershipRbacRoleBinding resources.
type gkeHubMembershipRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime                        *string `pulumi:"deleteTime"`
	GkeHubMembershipRbacRoleBindingId *string `pulumi:"gkeHubMembershipRbacRoleBindingId"`
	// Location of the Membership
	Location *string `pulumi:"location"`
	// Id of the membership
	MembershipId *string `pulumi:"membershipId"`
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId *string `pulumi:"membershipRbacRoleBindingId"`
	// The resource name for the RBAC Role Binding
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Role to bind to the principal.
	Role *GkeHubMembershipRbacRoleBindingRole `pulumi:"role"`
	// State of the RBAC Role Binding resource.
	States   []GkeHubMembershipRbacRoleBindingStateType `pulumi:"states"`
	Timeouts *GkeHubMembershipRbacRoleBindingTimeouts   `pulumi:"timeouts"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User *string `pulumi:"user"`
}

type GkeHubMembershipRbacRoleBindingState struct {
	// Time the RBAC Role Binding was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the RBAC Role Binding was deleted in UTC.
	DeleteTime                        pulumi.StringPtrInput
	GkeHubMembershipRbacRoleBindingId pulumi.StringPtrInput
	// Location of the Membership
	Location pulumi.StringPtrInput
	// Id of the membership
	MembershipId pulumi.StringPtrInput
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId pulumi.StringPtrInput
	// The resource name for the RBAC Role Binding
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Role to bind to the principal.
	Role GkeHubMembershipRbacRoleBindingRolePtrInput
	// State of the RBAC Role Binding resource.
	States   GkeHubMembershipRbacRoleBindingStateTypeArrayInput
	Timeouts GkeHubMembershipRbacRoleBindingTimeoutsPtrInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the RBAC Role Binding was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (GkeHubMembershipRbacRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubMembershipRbacRoleBindingState)(nil)).Elem()
}

type gkeHubMembershipRbacRoleBindingArgs struct {
	GkeHubMembershipRbacRoleBindingId *string `pulumi:"gkeHubMembershipRbacRoleBindingId"`
	// Location of the Membership
	Location string `pulumi:"location"`
	// Id of the membership
	MembershipId string `pulumi:"membershipId"`
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId string  `pulumi:"membershipRbacRoleBindingId"`
	Project                     *string `pulumi:"project"`
	// Role to bind to the principal.
	Role     GkeHubMembershipRbacRoleBindingRole      `pulumi:"role"`
	Timeouts *GkeHubMembershipRbacRoleBindingTimeouts `pulumi:"timeouts"`
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User string `pulumi:"user"`
}

// The set of arguments for constructing a GkeHubMembershipRbacRoleBinding resource.
type GkeHubMembershipRbacRoleBindingArgs struct {
	GkeHubMembershipRbacRoleBindingId pulumi.StringPtrInput
	// Location of the Membership
	Location pulumi.StringInput
	// Id of the membership
	MembershipId pulumi.StringInput
	// The client-provided identifier of the RBAC Role Binding.
	MembershipRbacRoleBindingId pulumi.StringInput
	Project                     pulumi.StringPtrInput
	// Role to bind to the principal.
	Role     GkeHubMembershipRbacRoleBindingRoleInput
	Timeouts GkeHubMembershipRbacRoleBindingTimeoutsPtrInput
	// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
	// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
	// "alice@domain.tld"
	User pulumi.StringInput
}

func (GkeHubMembershipRbacRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubMembershipRbacRoleBindingArgs)(nil)).Elem()
}

type GkeHubMembershipRbacRoleBindingInput interface {
	pulumi.Input

	ToGkeHubMembershipRbacRoleBindingOutput() GkeHubMembershipRbacRoleBindingOutput
	ToGkeHubMembershipRbacRoleBindingOutputWithContext(ctx context.Context) GkeHubMembershipRbacRoleBindingOutput
}

func (*GkeHubMembershipRbacRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubMembershipRbacRoleBinding)(nil)).Elem()
}

func (i *GkeHubMembershipRbacRoleBinding) ToGkeHubMembershipRbacRoleBindingOutput() GkeHubMembershipRbacRoleBindingOutput {
	return i.ToGkeHubMembershipRbacRoleBindingOutputWithContext(context.Background())
}

func (i *GkeHubMembershipRbacRoleBinding) ToGkeHubMembershipRbacRoleBindingOutputWithContext(ctx context.Context) GkeHubMembershipRbacRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeHubMembershipRbacRoleBindingOutput)
}

type GkeHubMembershipRbacRoleBindingOutput struct{ *pulumi.OutputState }

func (GkeHubMembershipRbacRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubMembershipRbacRoleBinding)(nil)).Elem()
}

func (o GkeHubMembershipRbacRoleBindingOutput) ToGkeHubMembershipRbacRoleBindingOutput() GkeHubMembershipRbacRoleBindingOutput {
	return o
}

func (o GkeHubMembershipRbacRoleBindingOutput) ToGkeHubMembershipRbacRoleBindingOutputWithContext(ctx context.Context) GkeHubMembershipRbacRoleBindingOutput {
	return o
}

// Time the RBAC Role Binding was created in UTC.
func (o GkeHubMembershipRbacRoleBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was deleted in UTC.
func (o GkeHubMembershipRbacRoleBindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

func (o GkeHubMembershipRbacRoleBindingOutput) GkeHubMembershipRbacRoleBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput {
		return v.GkeHubMembershipRbacRoleBindingId
	}).(pulumi.StringOutput)
}

// Location of the Membership
func (o GkeHubMembershipRbacRoleBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Id of the membership
func (o GkeHubMembershipRbacRoleBindingOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The client-provided identifier of the RBAC Role Binding.
func (o GkeHubMembershipRbacRoleBindingOutput) MembershipRbacRoleBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.MembershipRbacRoleBindingId }).(pulumi.StringOutput)
}

// The resource name for the RBAC Role Binding
func (o GkeHubMembershipRbacRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GkeHubMembershipRbacRoleBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Role to bind to the principal.
func (o GkeHubMembershipRbacRoleBindingOutput) Role() GkeHubMembershipRbacRoleBindingRoleOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) GkeHubMembershipRbacRoleBindingRoleOutput { return v.Role }).(GkeHubMembershipRbacRoleBindingRoleOutput)
}

// State of the RBAC Role Binding resource.
func (o GkeHubMembershipRbacRoleBindingOutput) States() GkeHubMembershipRbacRoleBindingStateTypeArrayOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) GkeHubMembershipRbacRoleBindingStateTypeArrayOutput {
		return v.States
	}).(GkeHubMembershipRbacRoleBindingStateTypeArrayOutput)
}

func (o GkeHubMembershipRbacRoleBindingOutput) Timeouts() GkeHubMembershipRbacRoleBindingTimeoutsPtrOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) GkeHubMembershipRbacRoleBindingTimeoutsPtrOutput {
		return v.Timeouts
	}).(GkeHubMembershipRbacRoleBindingTimeoutsPtrOutput)
}

// Google-generated UUID for this resource.
func (o GkeHubMembershipRbacRoleBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the RBAC Role Binding was updated in UTC.
func (o GkeHubMembershipRbacRoleBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Principal that is be authorized in the cluster (at least of one the oneof is required). Updating one will unset the
// other automatically. user is the name of the user as seen by the kubernetes cluster, example "alice" or
// "alice@domain.tld"
func (o GkeHubMembershipRbacRoleBindingOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubMembershipRbacRoleBinding) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeHubMembershipRbacRoleBindingInput)(nil)).Elem(), &GkeHubMembershipRbacRoleBinding{})
	pulumi.RegisterOutputType(GkeHubMembershipRbacRoleBindingOutput{})
}
