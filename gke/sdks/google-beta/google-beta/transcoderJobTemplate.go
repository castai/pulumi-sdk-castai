// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TranscoderJobTemplate struct {
	pulumi.CustomResourceState

	// The configuration for this template.
	Config          TranscoderJobTemplateConfigPtrOutput `pulumi:"config"`
	EffectiveLabels pulumi.StringMapOutput               `pulumi:"effectiveLabels"`
	// ID to use for the Transcoding job template.
	JobTemplateId pulumi.StringOutput `pulumi:"jobTemplateId"`
	// The labels associated with this job template. You can use these to organize and group your job templates. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the transcoding job template resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the job template.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels         pulumi.StringMapOutput                 `pulumi:"terraformLabels"`
	Timeouts                TranscoderJobTemplateTimeoutsPtrOutput `pulumi:"timeouts"`
	TranscoderJobTemplateId pulumi.StringOutput                    `pulumi:"transcoderJobTemplateId"`
}

// NewTranscoderJobTemplate registers a new resource with the given unique name, arguments, and options.
func NewTranscoderJobTemplate(ctx *pulumi.Context,
	name string, args *TranscoderJobTemplateArgs, opts ...pulumi.ResourceOption) (*TranscoderJobTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'JobTemplateId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource TranscoderJobTemplate
	err = ctx.RegisterPackageResource("google-beta:index/transcoderJobTemplate:TranscoderJobTemplate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTranscoderJobTemplate gets an existing TranscoderJobTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTranscoderJobTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TranscoderJobTemplateState, opts ...pulumi.ResourceOption) (*TranscoderJobTemplate, error) {
	var resource TranscoderJobTemplate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/transcoderJobTemplate:TranscoderJobTemplate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TranscoderJobTemplate resources.
type transcoderJobTemplateState struct {
	// The configuration for this template.
	Config          *TranscoderJobTemplateConfig `pulumi:"config"`
	EffectiveLabels map[string]string            `pulumi:"effectiveLabels"`
	// ID to use for the Transcoding job template.
	JobTemplateId *string `pulumi:"jobTemplateId"`
	// The labels associated with this job template. You can use these to organize and group your job templates. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the transcoding job template resource.
	Location *string `pulumi:"location"`
	// The resource name of the job template.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels         map[string]string              `pulumi:"terraformLabels"`
	Timeouts                *TranscoderJobTemplateTimeouts `pulumi:"timeouts"`
	TranscoderJobTemplateId *string                        `pulumi:"transcoderJobTemplateId"`
}

type TranscoderJobTemplateState struct {
	// The configuration for this template.
	Config          TranscoderJobTemplateConfigPtrInput
	EffectiveLabels pulumi.StringMapInput
	// ID to use for the Transcoding job template.
	JobTemplateId pulumi.StringPtrInput
	// The labels associated with this job template. You can use these to organize and group your job templates. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the transcoding job template resource.
	Location pulumi.StringPtrInput
	// The resource name of the job template.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels         pulumi.StringMapInput
	Timeouts                TranscoderJobTemplateTimeoutsPtrInput
	TranscoderJobTemplateId pulumi.StringPtrInput
}

func (TranscoderJobTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*transcoderJobTemplateState)(nil)).Elem()
}

type transcoderJobTemplateArgs struct {
	// The configuration for this template.
	Config *TranscoderJobTemplateConfig `pulumi:"config"`
	// ID to use for the Transcoding job template.
	JobTemplateId string `pulumi:"jobTemplateId"`
	// The labels associated with this job template. You can use these to organize and group your job templates. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the transcoding job template resource.
	Location                string                         `pulumi:"location"`
	Project                 *string                        `pulumi:"project"`
	Timeouts                *TranscoderJobTemplateTimeouts `pulumi:"timeouts"`
	TranscoderJobTemplateId *string                        `pulumi:"transcoderJobTemplateId"`
}

// The set of arguments for constructing a TranscoderJobTemplate resource.
type TranscoderJobTemplateArgs struct {
	// The configuration for this template.
	Config TranscoderJobTemplateConfigPtrInput
	// ID to use for the Transcoding job template.
	JobTemplateId pulumi.StringInput
	// The labels associated with this job template. You can use these to organize and group your job templates. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the transcoding job template resource.
	Location                pulumi.StringInput
	Project                 pulumi.StringPtrInput
	Timeouts                TranscoderJobTemplateTimeoutsPtrInput
	TranscoderJobTemplateId pulumi.StringPtrInput
}

func (TranscoderJobTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transcoderJobTemplateArgs)(nil)).Elem()
}

type TranscoderJobTemplateInput interface {
	pulumi.Input

	ToTranscoderJobTemplateOutput() TranscoderJobTemplateOutput
	ToTranscoderJobTemplateOutputWithContext(ctx context.Context) TranscoderJobTemplateOutput
}

func (*TranscoderJobTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**TranscoderJobTemplate)(nil)).Elem()
}

func (i *TranscoderJobTemplate) ToTranscoderJobTemplateOutput() TranscoderJobTemplateOutput {
	return i.ToTranscoderJobTemplateOutputWithContext(context.Background())
}

func (i *TranscoderJobTemplate) ToTranscoderJobTemplateOutputWithContext(ctx context.Context) TranscoderJobTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TranscoderJobTemplateOutput)
}

type TranscoderJobTemplateOutput struct{ *pulumi.OutputState }

func (TranscoderJobTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TranscoderJobTemplate)(nil)).Elem()
}

func (o TranscoderJobTemplateOutput) ToTranscoderJobTemplateOutput() TranscoderJobTemplateOutput {
	return o
}

func (o TranscoderJobTemplateOutput) ToTranscoderJobTemplateOutputWithContext(ctx context.Context) TranscoderJobTemplateOutput {
	return o
}

// The configuration for this template.
func (o TranscoderJobTemplateOutput) Config() TranscoderJobTemplateConfigPtrOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) TranscoderJobTemplateConfigPtrOutput { return v.Config }).(TranscoderJobTemplateConfigPtrOutput)
}

func (o TranscoderJobTemplateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// ID to use for the Transcoding job template.
func (o TranscoderJobTemplateOutput) JobTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringOutput { return v.JobTemplateId }).(pulumi.StringOutput)
}

// The labels associated with this job template. You can use these to organize and group your job templates. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o TranscoderJobTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the transcoding job template resource.
func (o TranscoderJobTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the job template.
func (o TranscoderJobTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TranscoderJobTemplateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o TranscoderJobTemplateOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o TranscoderJobTemplateOutput) Timeouts() TranscoderJobTemplateTimeoutsPtrOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) TranscoderJobTemplateTimeoutsPtrOutput { return v.Timeouts }).(TranscoderJobTemplateTimeoutsPtrOutput)
}

func (o TranscoderJobTemplateOutput) TranscoderJobTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *TranscoderJobTemplate) pulumi.StringOutput { return v.TranscoderJobTemplateId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TranscoderJobTemplateInput)(nil)).Elem(), &TranscoderJobTemplate{})
	pulumi.RegisterOutputType(TranscoderJobTemplateOutput{})
}
