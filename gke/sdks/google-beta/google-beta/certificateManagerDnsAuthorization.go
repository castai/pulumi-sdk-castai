// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificateManagerDnsAuthorization struct {
	pulumi.CustomResourceState

	CertificateManagerDnsAuthorizationId pulumi.StringOutput `pulumi:"certificateManagerDnsAuthorizationId"`
	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
	// usable by certificate.
	DnsResourceRecords CertificateManagerDnsAuthorizationDnsResourceRecordArrayOutput `pulumi:"dnsResourceRecords"`
	// A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
	// authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
	Domain          pulumi.StringOutput    `pulumi:"domain"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                              `pulumi:"terraformLabels"`
	Timeouts        CertificateManagerDnsAuthorizationTimeoutsPtrOutput `pulumi:"timeouts"`
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
	// PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
	// authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCertificateManagerDnsAuthorization registers a new resource with the given unique name, arguments, and options.
func NewCertificateManagerDnsAuthorization(ctx *pulumi.Context,
	name string, args *CertificateManagerDnsAuthorizationArgs, opts ...pulumi.ResourceOption) (*CertificateManagerDnsAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource CertificateManagerDnsAuthorization
	err = ctx.RegisterPackageResource("google-beta:index/certificateManagerDnsAuthorization:CertificateManagerDnsAuthorization", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateManagerDnsAuthorization gets an existing CertificateManagerDnsAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateManagerDnsAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateManagerDnsAuthorizationState, opts ...pulumi.ResourceOption) (*CertificateManagerDnsAuthorization, error) {
	var resource CertificateManagerDnsAuthorization
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/certificateManagerDnsAuthorization:CertificateManagerDnsAuthorization", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateManagerDnsAuthorization resources.
type certificateManagerDnsAuthorizationState struct {
	CertificateManagerDnsAuthorizationId *string `pulumi:"certificateManagerDnsAuthorizationId"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
	// usable by certificate.
	DnsResourceRecords []CertificateManagerDnsAuthorizationDnsResourceRecord `pulumi:"dnsResourceRecords"`
	// A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
	// authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
	Domain          *string           `pulumi:"domain"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                           `pulumi:"terraformLabels"`
	Timeouts        *CertificateManagerDnsAuthorizationTimeouts `pulumi:"timeouts"`
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
	// PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
	// authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
	Type *string `pulumi:"type"`
}

type CertificateManagerDnsAuthorizationState struct {
	CertificateManagerDnsAuthorizationId pulumi.StringPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
	// usable by certificate.
	DnsResourceRecords CertificateManagerDnsAuthorizationDnsResourceRecordArrayInput
	// A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
	// authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
	Domain          pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        CertificateManagerDnsAuthorizationTimeoutsPtrInput
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
	// PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
	// authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
	Type pulumi.StringPtrInput
}

func (CertificateManagerDnsAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateManagerDnsAuthorizationState)(nil)).Elem()
}

type certificateManagerDnsAuthorizationArgs struct {
	CertificateManagerDnsAuthorizationId *string `pulumi:"certificateManagerDnsAuthorizationId"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
	// authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
	Domain string `pulumi:"domain"`
	// Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name     *string                                     `pulumi:"name"`
	Project  *string                                     `pulumi:"project"`
	Timeouts *CertificateManagerDnsAuthorizationTimeouts `pulumi:"timeouts"`
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
	// PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
	// authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a CertificateManagerDnsAuthorization resource.
type CertificateManagerDnsAuthorizationArgs struct {
	CertificateManagerDnsAuthorizationId pulumi.StringPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
	// authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
	Domain pulumi.StringInput
	// Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
	// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
	// characters must be a dash, underscore, letter or digit.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts CertificateManagerDnsAuthorizationTimeoutsPtrInput
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
	// PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
	// authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
	Type pulumi.StringPtrInput
}

func (CertificateManagerDnsAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateManagerDnsAuthorizationArgs)(nil)).Elem()
}

type CertificateManagerDnsAuthorizationInput interface {
	pulumi.Input

	ToCertificateManagerDnsAuthorizationOutput() CertificateManagerDnsAuthorizationOutput
	ToCertificateManagerDnsAuthorizationOutputWithContext(ctx context.Context) CertificateManagerDnsAuthorizationOutput
}

func (*CertificateManagerDnsAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManagerDnsAuthorization)(nil)).Elem()
}

func (i *CertificateManagerDnsAuthorization) ToCertificateManagerDnsAuthorizationOutput() CertificateManagerDnsAuthorizationOutput {
	return i.ToCertificateManagerDnsAuthorizationOutputWithContext(context.Background())
}

func (i *CertificateManagerDnsAuthorization) ToCertificateManagerDnsAuthorizationOutputWithContext(ctx context.Context) CertificateManagerDnsAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagerDnsAuthorizationOutput)
}

type CertificateManagerDnsAuthorizationOutput struct{ *pulumi.OutputState }

func (CertificateManagerDnsAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManagerDnsAuthorization)(nil)).Elem()
}

func (o CertificateManagerDnsAuthorizationOutput) ToCertificateManagerDnsAuthorizationOutput() CertificateManagerDnsAuthorizationOutput {
	return o
}

func (o CertificateManagerDnsAuthorizationOutput) ToCertificateManagerDnsAuthorizationOutputWithContext(ctx context.Context) CertificateManagerDnsAuthorizationOutput {
	return o
}

func (o CertificateManagerDnsAuthorizationOutput) CertificateManagerDnsAuthorizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringOutput {
		return v.CertificateManagerDnsAuthorizationId
	}).(pulumi.StringOutput)
}

// A human-readable description of the resource.
func (o CertificateManagerDnsAuthorizationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
// usable by certificate.
func (o CertificateManagerDnsAuthorizationOutput) DnsResourceRecords() CertificateManagerDnsAuthorizationDnsResourceRecordArrayOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) CertificateManagerDnsAuthorizationDnsResourceRecordArrayOutput {
		return v.DnsResourceRecords
	}).(CertificateManagerDnsAuthorizationDnsResourceRecordArrayOutput)
}

// A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
// authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
func (o CertificateManagerDnsAuthorizationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o CertificateManagerDnsAuthorizationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o CertificateManagerDnsAuthorizationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The Certificate Manager location. If not specified, "global" is used.
func (o CertificateManagerDnsAuthorizationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
// match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
// characters must be a dash, underscore, letter or digit.
func (o CertificateManagerDnsAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateManagerDnsAuthorizationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o CertificateManagerDnsAuthorizationOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o CertificateManagerDnsAuthorizationOutput) Timeouts() CertificateManagerDnsAuthorizationTimeoutsPtrOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) CertificateManagerDnsAuthorizationTimeoutsPtrOutput {
		return v.Timeouts
	}).(CertificateManagerDnsAuthorizationTimeoutsPtrOutput)
}

// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
// PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
// PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
// authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
func (o CertificateManagerDnsAuthorizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateManagerDnsAuthorization) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagerDnsAuthorizationInput)(nil)).Elem(), &CertificateManagerDnsAuthorization{})
	pulumi.RegisterOutputType(CertificateManagerDnsAuthorizationOutput{})
}
