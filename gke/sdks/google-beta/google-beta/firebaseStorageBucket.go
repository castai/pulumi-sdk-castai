// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirebaseStorageBucket struct {
	pulumi.CustomResourceState

	// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
	BucketId                pulumi.StringPtrOutput `pulumi:"bucketId"`
	FirebaseStorageBucketId pulumi.StringOutput    `pulumi:"firebaseStorageBucketId"`
	// Resource name of the bucket in the format projects/PROJECT_IDENTIFIER/buckets/BUCKET_ID
	Name     pulumi.StringOutput                    `pulumi:"name"`
	Project  pulumi.StringOutput                    `pulumi:"project"`
	Timeouts FirebaseStorageBucketTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFirebaseStorageBucket registers a new resource with the given unique name, arguments, and options.
func NewFirebaseStorageBucket(ctx *pulumi.Context,
	name string, args *FirebaseStorageBucketArgs, opts ...pulumi.ResourceOption) (*FirebaseStorageBucket, error) {
	if args == nil {
		args = &FirebaseStorageBucketArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FirebaseStorageBucket
	err = ctx.RegisterPackageResource("google-beta:index/firebaseStorageBucket:FirebaseStorageBucket", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirebaseStorageBucket gets an existing FirebaseStorageBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirebaseStorageBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirebaseStorageBucketState, opts ...pulumi.ResourceOption) (*FirebaseStorageBucket, error) {
	var resource FirebaseStorageBucket
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/firebaseStorageBucket:FirebaseStorageBucket", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirebaseStorageBucket resources.
type firebaseStorageBucketState struct {
	// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
	BucketId                *string `pulumi:"bucketId"`
	FirebaseStorageBucketId *string `pulumi:"firebaseStorageBucketId"`
	// Resource name of the bucket in the format projects/PROJECT_IDENTIFIER/buckets/BUCKET_ID
	Name     *string                        `pulumi:"name"`
	Project  *string                        `pulumi:"project"`
	Timeouts *FirebaseStorageBucketTimeouts `pulumi:"timeouts"`
}

type FirebaseStorageBucketState struct {
	// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
	BucketId                pulumi.StringPtrInput
	FirebaseStorageBucketId pulumi.StringPtrInput
	// Resource name of the bucket in the format projects/PROJECT_IDENTIFIER/buckets/BUCKET_ID
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	Timeouts FirebaseStorageBucketTimeoutsPtrInput
}

func (FirebaseStorageBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseStorageBucketState)(nil)).Elem()
}

type firebaseStorageBucketArgs struct {
	// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
	BucketId                *string                        `pulumi:"bucketId"`
	FirebaseStorageBucketId *string                        `pulumi:"firebaseStorageBucketId"`
	Project                 *string                        `pulumi:"project"`
	Timeouts                *FirebaseStorageBucketTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FirebaseStorageBucket resource.
type FirebaseStorageBucketArgs struct {
	// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
	BucketId                pulumi.StringPtrInput
	FirebaseStorageBucketId pulumi.StringPtrInput
	Project                 pulumi.StringPtrInput
	Timeouts                FirebaseStorageBucketTimeoutsPtrInput
}

func (FirebaseStorageBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firebaseStorageBucketArgs)(nil)).Elem()
}

type FirebaseStorageBucketInput interface {
	pulumi.Input

	ToFirebaseStorageBucketOutput() FirebaseStorageBucketOutput
	ToFirebaseStorageBucketOutputWithContext(ctx context.Context) FirebaseStorageBucketOutput
}

func (*FirebaseStorageBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseStorageBucket)(nil)).Elem()
}

func (i *FirebaseStorageBucket) ToFirebaseStorageBucketOutput() FirebaseStorageBucketOutput {
	return i.ToFirebaseStorageBucketOutputWithContext(context.Background())
}

func (i *FirebaseStorageBucket) ToFirebaseStorageBucketOutputWithContext(ctx context.Context) FirebaseStorageBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirebaseStorageBucketOutput)
}

type FirebaseStorageBucketOutput struct{ *pulumi.OutputState }

func (FirebaseStorageBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirebaseStorageBucket)(nil)).Elem()
}

func (o FirebaseStorageBucketOutput) ToFirebaseStorageBucketOutput() FirebaseStorageBucketOutput {
	return o
}

func (o FirebaseStorageBucketOutput) ToFirebaseStorageBucketOutputWithContext(ctx context.Context) FirebaseStorageBucketOutput {
	return o
}

// Required. Immutable. The ID of the underlying Google Cloud Storage bucket
func (o FirebaseStorageBucketOutput) BucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirebaseStorageBucket) pulumi.StringPtrOutput { return v.BucketId }).(pulumi.StringPtrOutput)
}

func (o FirebaseStorageBucketOutput) FirebaseStorageBucketId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseStorageBucket) pulumi.StringOutput { return v.FirebaseStorageBucketId }).(pulumi.StringOutput)
}

// Resource name of the bucket in the format projects/PROJECT_IDENTIFIER/buckets/BUCKET_ID
func (o FirebaseStorageBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseStorageBucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirebaseStorageBucketOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *FirebaseStorageBucket) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o FirebaseStorageBucketOutput) Timeouts() FirebaseStorageBucketTimeoutsPtrOutput {
	return o.ApplyT(func(v *FirebaseStorageBucket) FirebaseStorageBucketTimeoutsPtrOutput { return v.Timeouts }).(FirebaseStorageBucketTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirebaseStorageBucketInput)(nil)).Elem(), &FirebaseStorageBucket{})
	pulumi.RegisterOutputType(FirebaseStorageBucketOutput{})
}
