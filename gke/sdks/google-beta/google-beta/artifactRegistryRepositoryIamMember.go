// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ArtifactRegistryRepositoryIamMember struct {
	pulumi.CustomResourceState

	ArtifactRegistryRepositoryIamMemberId pulumi.StringOutput                                   `pulumi:"artifactRegistryRepositoryIamMemberId"`
	Condition                             ArtifactRegistryRepositoryIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                                  pulumi.StringOutput                                   `pulumi:"etag"`
	Location                              pulumi.StringOutput                                   `pulumi:"location"`
	Member                                pulumi.StringOutput                                   `pulumi:"member"`
	Project                               pulumi.StringOutput                                   `pulumi:"project"`
	Repository                            pulumi.StringOutput                                   `pulumi:"repository"`
	Role                                  pulumi.StringOutput                                   `pulumi:"role"`
}

// NewArtifactRegistryRepositoryIamMember registers a new resource with the given unique name, arguments, and options.
func NewArtifactRegistryRepositoryIamMember(ctx *pulumi.Context,
	name string, args *ArtifactRegistryRepositoryIamMemberArgs, opts ...pulumi.ResourceOption) (*ArtifactRegistryRepositoryIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ArtifactRegistryRepositoryIamMember
	err = ctx.RegisterPackageResource("google-beta:index/artifactRegistryRepositoryIamMember:ArtifactRegistryRepositoryIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactRegistryRepositoryIamMember gets an existing ArtifactRegistryRepositoryIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactRegistryRepositoryIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactRegistryRepositoryIamMemberState, opts ...pulumi.ResourceOption) (*ArtifactRegistryRepositoryIamMember, error) {
	var resource ArtifactRegistryRepositoryIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/artifactRegistryRepositoryIamMember:ArtifactRegistryRepositoryIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactRegistryRepositoryIamMember resources.
type artifactRegistryRepositoryIamMemberState struct {
	ArtifactRegistryRepositoryIamMemberId *string                                       `pulumi:"artifactRegistryRepositoryIamMemberId"`
	Condition                             *ArtifactRegistryRepositoryIamMemberCondition `pulumi:"condition"`
	Etag                                  *string                                       `pulumi:"etag"`
	Location                              *string                                       `pulumi:"location"`
	Member                                *string                                       `pulumi:"member"`
	Project                               *string                                       `pulumi:"project"`
	Repository                            *string                                       `pulumi:"repository"`
	Role                                  *string                                       `pulumi:"role"`
}

type ArtifactRegistryRepositoryIamMemberState struct {
	ArtifactRegistryRepositoryIamMemberId pulumi.StringPtrInput
	Condition                             ArtifactRegistryRepositoryIamMemberConditionPtrInput
	Etag                                  pulumi.StringPtrInput
	Location                              pulumi.StringPtrInput
	Member                                pulumi.StringPtrInput
	Project                               pulumi.StringPtrInput
	Repository                            pulumi.StringPtrInput
	Role                                  pulumi.StringPtrInput
}

func (ArtifactRegistryRepositoryIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactRegistryRepositoryIamMemberState)(nil)).Elem()
}

type artifactRegistryRepositoryIamMemberArgs struct {
	ArtifactRegistryRepositoryIamMemberId *string                                       `pulumi:"artifactRegistryRepositoryIamMemberId"`
	Condition                             *ArtifactRegistryRepositoryIamMemberCondition `pulumi:"condition"`
	Location                              *string                                       `pulumi:"location"`
	Member                                string                                        `pulumi:"member"`
	Project                               *string                                       `pulumi:"project"`
	Repository                            string                                        `pulumi:"repository"`
	Role                                  string                                        `pulumi:"role"`
}

// The set of arguments for constructing a ArtifactRegistryRepositoryIamMember resource.
type ArtifactRegistryRepositoryIamMemberArgs struct {
	ArtifactRegistryRepositoryIamMemberId pulumi.StringPtrInput
	Condition                             ArtifactRegistryRepositoryIamMemberConditionPtrInput
	Location                              pulumi.StringPtrInput
	Member                                pulumi.StringInput
	Project                               pulumi.StringPtrInput
	Repository                            pulumi.StringInput
	Role                                  pulumi.StringInput
}

func (ArtifactRegistryRepositoryIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactRegistryRepositoryIamMemberArgs)(nil)).Elem()
}

type ArtifactRegistryRepositoryIamMemberInput interface {
	pulumi.Input

	ToArtifactRegistryRepositoryIamMemberOutput() ArtifactRegistryRepositoryIamMemberOutput
	ToArtifactRegistryRepositoryIamMemberOutputWithContext(ctx context.Context) ArtifactRegistryRepositoryIamMemberOutput
}

func (*ArtifactRegistryRepositoryIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactRegistryRepositoryIamMember)(nil)).Elem()
}

func (i *ArtifactRegistryRepositoryIamMember) ToArtifactRegistryRepositoryIamMemberOutput() ArtifactRegistryRepositoryIamMemberOutput {
	return i.ToArtifactRegistryRepositoryIamMemberOutputWithContext(context.Background())
}

func (i *ArtifactRegistryRepositoryIamMember) ToArtifactRegistryRepositoryIamMemberOutputWithContext(ctx context.Context) ArtifactRegistryRepositoryIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactRegistryRepositoryIamMemberOutput)
}

type ArtifactRegistryRepositoryIamMemberOutput struct{ *pulumi.OutputState }

func (ArtifactRegistryRepositoryIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactRegistryRepositoryIamMember)(nil)).Elem()
}

func (o ArtifactRegistryRepositoryIamMemberOutput) ToArtifactRegistryRepositoryIamMemberOutput() ArtifactRegistryRepositoryIamMemberOutput {
	return o
}

func (o ArtifactRegistryRepositoryIamMemberOutput) ToArtifactRegistryRepositoryIamMemberOutputWithContext(ctx context.Context) ArtifactRegistryRepositoryIamMemberOutput {
	return o
}

func (o ArtifactRegistryRepositoryIamMemberOutput) ArtifactRegistryRepositoryIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput {
		return v.ArtifactRegistryRepositoryIamMemberId
	}).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Condition() ArtifactRegistryRepositoryIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) ArtifactRegistryRepositoryIamMemberConditionPtrOutput {
		return v.Condition
	}).(ArtifactRegistryRepositoryIamMemberConditionPtrOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o ArtifactRegistryRepositoryIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactRegistryRepositoryIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactRegistryRepositoryIamMemberInput)(nil)).Elem(), &ArtifactRegistryRepositoryIamMember{})
	pulumi.RegisterOutputType(ArtifactRegistryRepositoryIamMemberOutput{})
}
