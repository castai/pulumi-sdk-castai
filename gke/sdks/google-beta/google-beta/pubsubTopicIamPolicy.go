// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubTopicIamPolicy struct {
	pulumi.CustomResourceState

	Etag                   pulumi.StringOutput `pulumi:"etag"`
	PolicyData             pulumi.StringOutput `pulumi:"policyData"`
	Project                pulumi.StringOutput `pulumi:"project"`
	PubsubTopicIamPolicyId pulumi.StringOutput `pulumi:"pubsubTopicIamPolicyId"`
	Topic                  pulumi.StringOutput `pulumi:"topic"`
}

// NewPubsubTopicIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewPubsubTopicIamPolicy(ctx *pulumi.Context,
	name string, args *PubsubTopicIamPolicyArgs, opts ...pulumi.ResourceOption) (*PubsubTopicIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubTopicIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/pubsubTopicIamPolicy:PubsubTopicIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubTopicIamPolicy gets an existing PubsubTopicIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubTopicIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubTopicIamPolicyState, opts ...pulumi.ResourceOption) (*PubsubTopicIamPolicy, error) {
	var resource PubsubTopicIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/pubsubTopicIamPolicy:PubsubTopicIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubTopicIamPolicy resources.
type pubsubTopicIamPolicyState struct {
	Etag                   *string `pulumi:"etag"`
	PolicyData             *string `pulumi:"policyData"`
	Project                *string `pulumi:"project"`
	PubsubTopicIamPolicyId *string `pulumi:"pubsubTopicIamPolicyId"`
	Topic                  *string `pulumi:"topic"`
}

type PubsubTopicIamPolicyState struct {
	Etag                   pulumi.StringPtrInput
	PolicyData             pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	PubsubTopicIamPolicyId pulumi.StringPtrInput
	Topic                  pulumi.StringPtrInput
}

func (PubsubTopicIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubTopicIamPolicyState)(nil)).Elem()
}

type pubsubTopicIamPolicyArgs struct {
	PolicyData             string  `pulumi:"policyData"`
	Project                *string `pulumi:"project"`
	PubsubTopicIamPolicyId *string `pulumi:"pubsubTopicIamPolicyId"`
	Topic                  string  `pulumi:"topic"`
}

// The set of arguments for constructing a PubsubTopicIamPolicy resource.
type PubsubTopicIamPolicyArgs struct {
	PolicyData             pulumi.StringInput
	Project                pulumi.StringPtrInput
	PubsubTopicIamPolicyId pulumi.StringPtrInput
	Topic                  pulumi.StringInput
}

func (PubsubTopicIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubTopicIamPolicyArgs)(nil)).Elem()
}

type PubsubTopicIamPolicyInput interface {
	pulumi.Input

	ToPubsubTopicIamPolicyOutput() PubsubTopicIamPolicyOutput
	ToPubsubTopicIamPolicyOutputWithContext(ctx context.Context) PubsubTopicIamPolicyOutput
}

func (*PubsubTopicIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTopicIamPolicy)(nil)).Elem()
}

func (i *PubsubTopicIamPolicy) ToPubsubTopicIamPolicyOutput() PubsubTopicIamPolicyOutput {
	return i.ToPubsubTopicIamPolicyOutputWithContext(context.Background())
}

func (i *PubsubTopicIamPolicy) ToPubsubTopicIamPolicyOutputWithContext(ctx context.Context) PubsubTopicIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTopicIamPolicyOutput)
}

type PubsubTopicIamPolicyOutput struct{ *pulumi.OutputState }

func (PubsubTopicIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTopicIamPolicy)(nil)).Elem()
}

func (o PubsubTopicIamPolicyOutput) ToPubsubTopicIamPolicyOutput() PubsubTopicIamPolicyOutput {
	return o
}

func (o PubsubTopicIamPolicyOutput) ToPubsubTopicIamPolicyOutputWithContext(ctx context.Context) PubsubTopicIamPolicyOutput {
	return o
}

func (o PubsubTopicIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o PubsubTopicIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o PubsubTopicIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubTopicIamPolicyOutput) PubsubTopicIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamPolicy) pulumi.StringOutput { return v.PubsubTopicIamPolicyId }).(pulumi.StringOutput)
}

func (o PubsubTopicIamPolicyOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamPolicy) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubTopicIamPolicyInput)(nil)).Elem(), &PubsubTopicIamPolicy{})
	pulumi.RegisterOutputType(PubsubTopicIamPolicyOutput{})
}
