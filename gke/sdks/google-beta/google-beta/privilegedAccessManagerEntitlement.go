// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PrivilegedAccessManagerEntitlement struct {
	pulumi.CustomResourceState

	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsPtrOutput `pulumi:"additionalNotificationTargets"`
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow PrivilegedAccessManagerEntitlementApprovalWorkflowPtrOutput `pulumi:"approvalWorkflow"`
	// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Who can create Grants using Entitlement. This list should contain at most one entry
	EligibleUsers PrivilegedAccessManagerEntitlementEligibleUserArrayOutput `pulumi:"eligibleUsers"`
	// The ID to use for this Entitlement. This will become the last part of the resource name. This value should be 4-63
	// characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z]. This value
	// should be unique among all other Entitlements under the specified 'parent'.
	EntitlementId pulumi.StringOutput `pulumi:"entitlementId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The region of the Entitlement resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum amount of time for which access would be granted for a request. A requester can choose to ask for access for
	// less than this duration but never more. Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours =
	// "7200s", 45 minutes = "2700s"
	MaxRequestDuration pulumi.StringOutput `pulumi:"maxRequestDuration"`
	// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project,
	// alongside the region and a unique entitlement ID. Formats:
	// organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id},
	// folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and
	// projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
	Name pulumi.StringOutput `pulumi:"name"`
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Privileged access that this service can be used to gate.
	PrivilegedAccess                     PrivilegedAccessManagerEntitlementPrivilegedAccessOutput `pulumi:"privilegedAccess"`
	PrivilegedAccessManagerEntitlementId pulumi.StringOutput                                      `pulumi:"privilegedAccessManagerEntitlementId"`
	// Defines the ways in which a requester should provide the justification while requesting for access.
	RequesterJustificationConfig PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutput `pulumi:"requesterJustificationConfig"`
	// Output only. The current state of the Entitlement.
	State    pulumi.StringOutput                                 `pulumi:"state"`
	Timeouts PrivilegedAccessManagerEntitlementTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPrivilegedAccessManagerEntitlement registers a new resource with the given unique name, arguments, and options.
func NewPrivilegedAccessManagerEntitlement(ctx *pulumi.Context,
	name string, args *PrivilegedAccessManagerEntitlementArgs, opts ...pulumi.ResourceOption) (*PrivilegedAccessManagerEntitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EligibleUsers == nil {
		return nil, errors.New("invalid value for required argument 'EligibleUsers'")
	}
	if args.EntitlementId == nil {
		return nil, errors.New("invalid value for required argument 'EntitlementId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MaxRequestDuration == nil {
		return nil, errors.New("invalid value for required argument 'MaxRequestDuration'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.PrivilegedAccess == nil {
		return nil, errors.New("invalid value for required argument 'PrivilegedAccess'")
	}
	if args.RequesterJustificationConfig == nil {
		return nil, errors.New("invalid value for required argument 'RequesterJustificationConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PrivilegedAccessManagerEntitlement
	err = ctx.RegisterPackageResource("google-beta:index/privilegedAccessManagerEntitlement:PrivilegedAccessManagerEntitlement", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilegedAccessManagerEntitlement gets an existing PrivilegedAccessManagerEntitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilegedAccessManagerEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegedAccessManagerEntitlementState, opts ...pulumi.ResourceOption) (*PrivilegedAccessManagerEntitlement, error) {
	var resource PrivilegedAccessManagerEntitlement
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/privilegedAccessManagerEntitlement:PrivilegedAccessManagerEntitlement", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivilegedAccessManagerEntitlement resources.
type privilegedAccessManagerEntitlementState struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets *PrivilegedAccessManagerEntitlementAdditionalNotificationTargets `pulumi:"additionalNotificationTargets"`
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow *PrivilegedAccessManagerEntitlementApprovalWorkflow `pulumi:"approvalWorkflow"`
	// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime *string `pulumi:"createTime"`
	// Who can create Grants using Entitlement. This list should contain at most one entry
	EligibleUsers []PrivilegedAccessManagerEntitlementEligibleUser `pulumi:"eligibleUsers"`
	// The ID to use for this Entitlement. This will become the last part of the resource name. This value should be 4-63
	// characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z]. This value
	// should be unique among all other Entitlements under the specified 'parent'.
	EntitlementId *string `pulumi:"entitlementId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag *string `pulumi:"etag"`
	// The region of the Entitlement resource.
	Location *string `pulumi:"location"`
	// The maximum amount of time for which access would be granted for a request. A requester can choose to ask for access for
	// less than this duration but never more. Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours =
	// "7200s", 45 minutes = "2700s"
	MaxRequestDuration *string `pulumi:"maxRequestDuration"`
	// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project,
	// alongside the region and a unique entitlement ID. Formats:
	// organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id},
	// folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and
	// projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
	Name *string `pulumi:"name"`
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent *string `pulumi:"parent"`
	// Privileged access that this service can be used to gate.
	PrivilegedAccess                     *PrivilegedAccessManagerEntitlementPrivilegedAccess `pulumi:"privilegedAccess"`
	PrivilegedAccessManagerEntitlementId *string                                             `pulumi:"privilegedAccessManagerEntitlementId"`
	// Defines the ways in which a requester should provide the justification while requesting for access.
	RequesterJustificationConfig *PrivilegedAccessManagerEntitlementRequesterJustificationConfig `pulumi:"requesterJustificationConfig"`
	// Output only. The current state of the Entitlement.
	State    *string                                     `pulumi:"state"`
	Timeouts *PrivilegedAccessManagerEntitlementTimeouts `pulumi:"timeouts"`
	// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type PrivilegedAccessManagerEntitlementState struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsPtrInput
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow PrivilegedAccessManagerEntitlementApprovalWorkflowPtrInput
	// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime pulumi.StringPtrInput
	// Who can create Grants using Entitlement. This list should contain at most one entry
	EligibleUsers PrivilegedAccessManagerEntitlementEligibleUserArrayInput
	// The ID to use for this Entitlement. This will become the last part of the resource name. This value should be 4-63
	// characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z]. This value
	// should be unique among all other Entitlements under the specified 'parent'.
	EntitlementId pulumi.StringPtrInput
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringPtrInput
	// The region of the Entitlement resource.
	Location pulumi.StringPtrInput
	// The maximum amount of time for which access would be granted for a request. A requester can choose to ask for access for
	// less than this duration but never more. Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours =
	// "7200s", 45 minutes = "2700s"
	MaxRequestDuration pulumi.StringPtrInput
	// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project,
	// alongside the region and a unique entitlement ID. Formats:
	// organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id},
	// folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and
	// projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
	Name pulumi.StringPtrInput
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent pulumi.StringPtrInput
	// Privileged access that this service can be used to gate.
	PrivilegedAccess                     PrivilegedAccessManagerEntitlementPrivilegedAccessPtrInput
	PrivilegedAccessManagerEntitlementId pulumi.StringPtrInput
	// Defines the ways in which a requester should provide the justification while requesting for access.
	RequesterJustificationConfig PrivilegedAccessManagerEntitlementRequesterJustificationConfigPtrInput
	// Output only. The current state of the Entitlement.
	State    pulumi.StringPtrInput
	Timeouts PrivilegedAccessManagerEntitlementTimeoutsPtrInput
	// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (PrivilegedAccessManagerEntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegedAccessManagerEntitlementState)(nil)).Elem()
}

type privilegedAccessManagerEntitlementArgs struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets *PrivilegedAccessManagerEntitlementAdditionalNotificationTargets `pulumi:"additionalNotificationTargets"`
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow *PrivilegedAccessManagerEntitlementApprovalWorkflow `pulumi:"approvalWorkflow"`
	// Who can create Grants using Entitlement. This list should contain at most one entry
	EligibleUsers []PrivilegedAccessManagerEntitlementEligibleUser `pulumi:"eligibleUsers"`
	// The ID to use for this Entitlement. This will become the last part of the resource name. This value should be 4-63
	// characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z]. This value
	// should be unique among all other Entitlements under the specified 'parent'.
	EntitlementId string `pulumi:"entitlementId"`
	// The region of the Entitlement resource.
	Location string `pulumi:"location"`
	// The maximum amount of time for which access would be granted for a request. A requester can choose to ask for access for
	// less than this duration but never more. Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours =
	// "7200s", 45 minutes = "2700s"
	MaxRequestDuration string `pulumi:"maxRequestDuration"`
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent string `pulumi:"parent"`
	// Privileged access that this service can be used to gate.
	PrivilegedAccess                     PrivilegedAccessManagerEntitlementPrivilegedAccess `pulumi:"privilegedAccess"`
	PrivilegedAccessManagerEntitlementId *string                                            `pulumi:"privilegedAccessManagerEntitlementId"`
	// Defines the ways in which a requester should provide the justification while requesting for access.
	RequesterJustificationConfig PrivilegedAccessManagerEntitlementRequesterJustificationConfig `pulumi:"requesterJustificationConfig"`
	Timeouts                     *PrivilegedAccessManagerEntitlementTimeouts                    `pulumi:"timeouts"`
}

// The set of arguments for constructing a PrivilegedAccessManagerEntitlement resource.
type PrivilegedAccessManagerEntitlementArgs struct {
	// AdditionalNotificationTargets includes email addresses to be notified.
	AdditionalNotificationTargets PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsPtrInput
	// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
	// Different types of approval workflows that can be used to gate privileged access granting.
	ApprovalWorkflow PrivilegedAccessManagerEntitlementApprovalWorkflowPtrInput
	// Who can create Grants using Entitlement. This list should contain at most one entry
	EligibleUsers PrivilegedAccessManagerEntitlementEligibleUserArrayInput
	// The ID to use for this Entitlement. This will become the last part of the resource name. This value should be 4-63
	// characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z]. This value
	// should be unique among all other Entitlements under the specified 'parent'.
	EntitlementId pulumi.StringInput
	// The region of the Entitlement resource.
	Location pulumi.StringInput
	// The maximum amount of time for which access would be granted for a request. A requester can choose to ask for access for
	// less than this duration but never more. Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours =
	// "7200s", 45 minutes = "2700s"
	MaxRequestDuration pulumi.StringInput
	// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
	Parent pulumi.StringInput
	// Privileged access that this service can be used to gate.
	PrivilegedAccess                     PrivilegedAccessManagerEntitlementPrivilegedAccessInput
	PrivilegedAccessManagerEntitlementId pulumi.StringPtrInput
	// Defines the ways in which a requester should provide the justification while requesting for access.
	RequesterJustificationConfig PrivilegedAccessManagerEntitlementRequesterJustificationConfigInput
	Timeouts                     PrivilegedAccessManagerEntitlementTimeoutsPtrInput
}

func (PrivilegedAccessManagerEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegedAccessManagerEntitlementArgs)(nil)).Elem()
}

type PrivilegedAccessManagerEntitlementInput interface {
	pulumi.Input

	ToPrivilegedAccessManagerEntitlementOutput() PrivilegedAccessManagerEntitlementOutput
	ToPrivilegedAccessManagerEntitlementOutputWithContext(ctx context.Context) PrivilegedAccessManagerEntitlementOutput
}

func (*PrivilegedAccessManagerEntitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegedAccessManagerEntitlement)(nil)).Elem()
}

func (i *PrivilegedAccessManagerEntitlement) ToPrivilegedAccessManagerEntitlementOutput() PrivilegedAccessManagerEntitlementOutput {
	return i.ToPrivilegedAccessManagerEntitlementOutputWithContext(context.Background())
}

func (i *PrivilegedAccessManagerEntitlement) ToPrivilegedAccessManagerEntitlementOutputWithContext(ctx context.Context) PrivilegedAccessManagerEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessManagerEntitlementOutput)
}

type PrivilegedAccessManagerEntitlementOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessManagerEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegedAccessManagerEntitlement)(nil)).Elem()
}

func (o PrivilegedAccessManagerEntitlementOutput) ToPrivilegedAccessManagerEntitlementOutput() PrivilegedAccessManagerEntitlementOutput {
	return o
}

func (o PrivilegedAccessManagerEntitlementOutput) ToPrivilegedAccessManagerEntitlementOutputWithContext(ctx context.Context) PrivilegedAccessManagerEntitlementOutput {
	return o
}

// AdditionalNotificationTargets includes email addresses to be notified.
func (o PrivilegedAccessManagerEntitlementOutput) AdditionalNotificationTargets() PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsPtrOutput {
		return v.AdditionalNotificationTargets
	}).(PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsPtrOutput)
}

// The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
// Different types of approval workflows that can be used to gate privileged access granting.
func (o PrivilegedAccessManagerEntitlementOutput) ApprovalWorkflow() PrivilegedAccessManagerEntitlementApprovalWorkflowPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) PrivilegedAccessManagerEntitlementApprovalWorkflowPtrOutput {
		return v.ApprovalWorkflow
	}).(PrivilegedAccessManagerEntitlementApprovalWorkflowPtrOutput)
}

// Output only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
func (o PrivilegedAccessManagerEntitlementOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Who can create Grants using Entitlement. This list should contain at most one entry
func (o PrivilegedAccessManagerEntitlementOutput) EligibleUsers() PrivilegedAccessManagerEntitlementEligibleUserArrayOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) PrivilegedAccessManagerEntitlementEligibleUserArrayOutput {
		return v.EligibleUsers
	}).(PrivilegedAccessManagerEntitlementEligibleUserArrayOutput)
}

// The ID to use for this Entitlement. This will become the last part of the resource name. This value should be 4-63
// characters, and valid characters are "[a-z]", "[0-9]", and "-". The first character should be from [a-z]. This value
// should be unique among all other Entitlements under the specified 'parent'.
func (o PrivilegedAccessManagerEntitlementOutput) EntitlementId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.EntitlementId }).(pulumi.StringOutput)
}

// For Resource freshness validation (https://google.aip.dev/154)
func (o PrivilegedAccessManagerEntitlementOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The region of the Entitlement resource.
func (o PrivilegedAccessManagerEntitlementOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum amount of time for which access would be granted for a request. A requester can choose to ask for access for
// less than this duration but never more. Format: calculate the time in seconds and concatenate it with 's' i.e. 2 hours =
// "7200s", 45 minutes = "2700s"
func (o PrivilegedAccessManagerEntitlementOutput) MaxRequestDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.MaxRequestDuration }).(pulumi.StringOutput)
}

// Output Only. The entitlement's name follows a hierarchical structure, comprising the organization, folder, or project,
// alongside the region and a unique entitlement ID. Formats:
// organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id},
// folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}, and
// projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}.
func (o PrivilegedAccessManagerEntitlementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
func (o PrivilegedAccessManagerEntitlementOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Privileged access that this service can be used to gate.
func (o PrivilegedAccessManagerEntitlementOutput) PrivilegedAccess() PrivilegedAccessManagerEntitlementPrivilegedAccessOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) PrivilegedAccessManagerEntitlementPrivilegedAccessOutput {
		return v.PrivilegedAccess
	}).(PrivilegedAccessManagerEntitlementPrivilegedAccessOutput)
}

func (o PrivilegedAccessManagerEntitlementOutput) PrivilegedAccessManagerEntitlementId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput {
		return v.PrivilegedAccessManagerEntitlementId
	}).(pulumi.StringOutput)
}

// Defines the ways in which a requester should provide the justification while requesting for access.
func (o PrivilegedAccessManagerEntitlementOutput) RequesterJustificationConfig() PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutput {
		return v.RequesterJustificationConfig
	}).(PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutput)
}

// Output only. The current state of the Entitlement.
func (o PrivilegedAccessManagerEntitlementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o PrivilegedAccessManagerEntitlementOutput) Timeouts() PrivilegedAccessManagerEntitlementTimeoutsPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) PrivilegedAccessManagerEntitlementTimeoutsPtrOutput {
		return v.Timeouts
	}).(PrivilegedAccessManagerEntitlementTimeoutsPtrOutput)
}

// Output only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o PrivilegedAccessManagerEntitlementOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessManagerEntitlement) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessManagerEntitlementInput)(nil)).Elem(), &PrivilegedAccessManagerEntitlement{})
	pulumi.RegisterOutputType(PrivilegedAccessManagerEntitlementOutput{})
}
