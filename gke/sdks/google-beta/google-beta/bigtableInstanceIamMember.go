// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigtableInstanceIamMember struct {
	pulumi.CustomResourceState

	BigtableInstanceIamMemberId pulumi.StringOutput                         `pulumi:"bigtableInstanceIamMemberId"`
	Condition                   BigtableInstanceIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                        pulumi.StringOutput                         `pulumi:"etag"`
	Instance                    pulumi.StringOutput                         `pulumi:"instance"`
	Member                      pulumi.StringOutput                         `pulumi:"member"`
	Project                     pulumi.StringOutput                         `pulumi:"project"`
	Role                        pulumi.StringOutput                         `pulumi:"role"`
}

// NewBigtableInstanceIamMember registers a new resource with the given unique name, arguments, and options.
func NewBigtableInstanceIamMember(ctx *pulumi.Context,
	name string, args *BigtableInstanceIamMemberArgs, opts ...pulumi.ResourceOption) (*BigtableInstanceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigtableInstanceIamMember
	err = ctx.RegisterPackageResource("google-beta:index/bigtableInstanceIamMember:BigtableInstanceIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigtableInstanceIamMember gets an existing BigtableInstanceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigtableInstanceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigtableInstanceIamMemberState, opts ...pulumi.ResourceOption) (*BigtableInstanceIamMember, error) {
	var resource BigtableInstanceIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigtableInstanceIamMember:BigtableInstanceIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigtableInstanceIamMember resources.
type bigtableInstanceIamMemberState struct {
	BigtableInstanceIamMemberId *string                             `pulumi:"bigtableInstanceIamMemberId"`
	Condition                   *BigtableInstanceIamMemberCondition `pulumi:"condition"`
	Etag                        *string                             `pulumi:"etag"`
	Instance                    *string                             `pulumi:"instance"`
	Member                      *string                             `pulumi:"member"`
	Project                     *string                             `pulumi:"project"`
	Role                        *string                             `pulumi:"role"`
}

type BigtableInstanceIamMemberState struct {
	BigtableInstanceIamMemberId pulumi.StringPtrInput
	Condition                   BigtableInstanceIamMemberConditionPtrInput
	Etag                        pulumi.StringPtrInput
	Instance                    pulumi.StringPtrInput
	Member                      pulumi.StringPtrInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringPtrInput
}

func (BigtableInstanceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableInstanceIamMemberState)(nil)).Elem()
}

type bigtableInstanceIamMemberArgs struct {
	BigtableInstanceIamMemberId *string                             `pulumi:"bigtableInstanceIamMemberId"`
	Condition                   *BigtableInstanceIamMemberCondition `pulumi:"condition"`
	Instance                    string                              `pulumi:"instance"`
	Member                      string                              `pulumi:"member"`
	Project                     *string                             `pulumi:"project"`
	Role                        string                              `pulumi:"role"`
}

// The set of arguments for constructing a BigtableInstanceIamMember resource.
type BigtableInstanceIamMemberArgs struct {
	BigtableInstanceIamMemberId pulumi.StringPtrInput
	Condition                   BigtableInstanceIamMemberConditionPtrInput
	Instance                    pulumi.StringInput
	Member                      pulumi.StringInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringInput
}

func (BigtableInstanceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableInstanceIamMemberArgs)(nil)).Elem()
}

type BigtableInstanceIamMemberInput interface {
	pulumi.Input

	ToBigtableInstanceIamMemberOutput() BigtableInstanceIamMemberOutput
	ToBigtableInstanceIamMemberOutputWithContext(ctx context.Context) BigtableInstanceIamMemberOutput
}

func (*BigtableInstanceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableInstanceIamMember)(nil)).Elem()
}

func (i *BigtableInstanceIamMember) ToBigtableInstanceIamMemberOutput() BigtableInstanceIamMemberOutput {
	return i.ToBigtableInstanceIamMemberOutputWithContext(context.Background())
}

func (i *BigtableInstanceIamMember) ToBigtableInstanceIamMemberOutputWithContext(ctx context.Context) BigtableInstanceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableInstanceIamMemberOutput)
}

type BigtableInstanceIamMemberOutput struct{ *pulumi.OutputState }

func (BigtableInstanceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableInstanceIamMember)(nil)).Elem()
}

func (o BigtableInstanceIamMemberOutput) ToBigtableInstanceIamMemberOutput() BigtableInstanceIamMemberOutput {
	return o
}

func (o BigtableInstanceIamMemberOutput) ToBigtableInstanceIamMemberOutputWithContext(ctx context.Context) BigtableInstanceIamMemberOutput {
	return o
}

func (o BigtableInstanceIamMemberOutput) BigtableInstanceIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) pulumi.StringOutput { return v.BigtableInstanceIamMemberId }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamMemberOutput) Condition() BigtableInstanceIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) BigtableInstanceIamMemberConditionPtrOutput { return v.Condition }).(BigtableInstanceIamMemberConditionPtrOutput)
}

func (o BigtableInstanceIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamMemberOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o BigtableInstanceIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableInstanceIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableInstanceIamMemberInput)(nil)).Elem(), &BigtableInstanceIamMember{})
	pulumi.RegisterOutputType(BigtableInstanceIamMemberOutput{})
}
