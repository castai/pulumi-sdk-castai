// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupKmsKeyHandle(ctx *pulumi.Context, args *LookupKmsKeyHandleArgs, opts ...pulumi.InvokeOption) (*LookupKmsKeyHandleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupKmsKeyHandleResult
	err = ctx.InvokePackage("google-beta:index/getKmsKeyHandle:getKmsKeyHandle", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKmsKeyHandle.
type LookupKmsKeyHandleArgs struct {
	Id       *string `pulumi:"id"`
	Location string  `pulumi:"location"`
	Name     string  `pulumi:"name"`
	Project  *string `pulumi:"project"`
}

// A collection of values returned by getKmsKeyHandle.
type LookupKmsKeyHandleResult struct {
	Id                   string  `pulumi:"id"`
	KmsKey               string  `pulumi:"kmsKey"`
	Location             string  `pulumi:"location"`
	Name                 string  `pulumi:"name"`
	Project              *string `pulumi:"project"`
	ResourceTypeSelector string  `pulumi:"resourceTypeSelector"`
}

func LookupKmsKeyHandleOutput(ctx *pulumi.Context, args LookupKmsKeyHandleOutputArgs, opts ...pulumi.InvokeOption) LookupKmsKeyHandleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKmsKeyHandleResultOutput, error) {
			args := v.(LookupKmsKeyHandleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupKmsKeyHandleResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google-beta:index/getKmsKeyHandle:getKmsKeyHandle", args, LookupKmsKeyHandleResultOutput{}, options).(LookupKmsKeyHandleResultOutput), nil
		}).(LookupKmsKeyHandleResultOutput)
}

// A collection of arguments for invoking getKmsKeyHandle.
type LookupKmsKeyHandleOutputArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Location pulumi.StringInput    `pulumi:"location"`
	Name     pulumi.StringInput    `pulumi:"name"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupKmsKeyHandleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKmsKeyHandleArgs)(nil)).Elem()
}

// A collection of values returned by getKmsKeyHandle.
type LookupKmsKeyHandleResultOutput struct{ *pulumi.OutputState }

func (LookupKmsKeyHandleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKmsKeyHandleResult)(nil)).Elem()
}

func (o LookupKmsKeyHandleResultOutput) ToLookupKmsKeyHandleResultOutput() LookupKmsKeyHandleResultOutput {
	return o
}

func (o LookupKmsKeyHandleResultOutput) ToLookupKmsKeyHandleResultOutputWithContext(ctx context.Context) LookupKmsKeyHandleResultOutput {
	return o
}

func (o LookupKmsKeyHandleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKmsKeyHandleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKmsKeyHandleResultOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKmsKeyHandleResult) string { return v.KmsKey }).(pulumi.StringOutput)
}

func (o LookupKmsKeyHandleResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKmsKeyHandleResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupKmsKeyHandleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKmsKeyHandleResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupKmsKeyHandleResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKmsKeyHandleResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupKmsKeyHandleResultOutput) ResourceTypeSelector() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKmsKeyHandleResult) string { return v.ResourceTypeSelector }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKmsKeyHandleResultOutput{})
}
