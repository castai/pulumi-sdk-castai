// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectOrganizationPolicy struct {
	pulumi.CustomResourceState

	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy ProjectOrganizationPolicyBooleanPolicyPtrOutput `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint pulumi.StringOutput `pulumi:"constraint"`
	// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
	// simultaneous updates of a policy from overwriting each other.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy ProjectOrganizationPolicyListPolicyPtrOutput `pulumi:"listPolicy"`
	// The project ID.
	Project                     pulumi.StringOutput `pulumi:"project"`
	ProjectOrganizationPolicyId pulumi.StringOutput `pulumi:"projectOrganizationPolicyId"`
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy ProjectOrganizationPolicyRestorePolicyPtrOutput `pulumi:"restorePolicy"`
	Timeouts      ProjectOrganizationPolicyTimeoutsPtrOutput      `pulumi:"timeouts"`
	// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
	// Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Version of the Policy. Default version is 0.
	Version pulumi.Float64Output `pulumi:"version"`
}

// NewProjectOrganizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewProjectOrganizationPolicy(ctx *pulumi.Context,
	name string, args *ProjectOrganizationPolicyArgs, opts ...pulumi.ResourceOption) (*ProjectOrganizationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Constraint == nil {
		return nil, errors.New("invalid value for required argument 'Constraint'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectOrganizationPolicy
	err = ctx.RegisterPackageResource("google-beta:index/projectOrganizationPolicy:ProjectOrganizationPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectOrganizationPolicy gets an existing ProjectOrganizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectOrganizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectOrganizationPolicyState, opts ...pulumi.ResourceOption) (*ProjectOrganizationPolicy, error) {
	var resource ProjectOrganizationPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/projectOrganizationPolicy:ProjectOrganizationPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectOrganizationPolicy resources.
type projectOrganizationPolicyState struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy *ProjectOrganizationPolicyBooleanPolicy `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint *string `pulumi:"constraint"`
	// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
	// simultaneous updates of a policy from overwriting each other.
	Etag *string `pulumi:"etag"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy *ProjectOrganizationPolicyListPolicy `pulumi:"listPolicy"`
	// The project ID.
	Project                     *string `pulumi:"project"`
	ProjectOrganizationPolicyId *string `pulumi:"projectOrganizationPolicyId"`
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy *ProjectOrganizationPolicyRestorePolicy `pulumi:"restorePolicy"`
	Timeouts      *ProjectOrganizationPolicyTimeouts      `pulumi:"timeouts"`
	// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
	// Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime *string `pulumi:"updateTime"`
	// Version of the Policy. Default version is 0.
	Version *float64 `pulumi:"version"`
}

type ProjectOrganizationPolicyState struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy ProjectOrganizationPolicyBooleanPolicyPtrInput
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint pulumi.StringPtrInput
	// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
	// simultaneous updates of a policy from overwriting each other.
	Etag pulumi.StringPtrInput
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy ProjectOrganizationPolicyListPolicyPtrInput
	// The project ID.
	Project                     pulumi.StringPtrInput
	ProjectOrganizationPolicyId pulumi.StringPtrInput
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy ProjectOrganizationPolicyRestorePolicyPtrInput
	Timeouts      ProjectOrganizationPolicyTimeoutsPtrInput
	// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
	// Example: "2016-10-09T12:33:37.578138407Z".
	UpdateTime pulumi.StringPtrInput
	// Version of the Policy. Default version is 0.
	Version pulumi.Float64PtrInput
}

func (ProjectOrganizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectOrganizationPolicyState)(nil)).Elem()
}

type projectOrganizationPolicyArgs struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy *ProjectOrganizationPolicyBooleanPolicy `pulumi:"booleanPolicy"`
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint string `pulumi:"constraint"`
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy *ProjectOrganizationPolicyListPolicy `pulumi:"listPolicy"`
	// The project ID.
	Project                     string  `pulumi:"project"`
	ProjectOrganizationPolicyId *string `pulumi:"projectOrganizationPolicyId"`
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy *ProjectOrganizationPolicyRestorePolicy `pulumi:"restorePolicy"`
	Timeouts      *ProjectOrganizationPolicyTimeouts      `pulumi:"timeouts"`
	// Version of the Policy. Default version is 0.
	Version *float64 `pulumi:"version"`
}

// The set of arguments for constructing a ProjectOrganizationPolicy resource.
type ProjectOrganizationPolicyArgs struct {
	// A boolean policy is a constraint that is either enforced or not.
	BooleanPolicy ProjectOrganizationPolicyBooleanPolicyPtrInput
	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	Constraint pulumi.StringInput
	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
	// allow or deny all values.
	ListPolicy ProjectOrganizationPolicyListPolicyPtrInput
	// The project ID.
	Project                     pulumi.StringInput
	ProjectOrganizationPolicyId pulumi.StringPtrInput
	// A restore policy is a constraint to restore the default policy.
	RestorePolicy ProjectOrganizationPolicyRestorePolicyPtrInput
	Timeouts      ProjectOrganizationPolicyTimeoutsPtrInput
	// Version of the Policy. Default version is 0.
	Version pulumi.Float64PtrInput
}

func (ProjectOrganizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectOrganizationPolicyArgs)(nil)).Elem()
}

type ProjectOrganizationPolicyInput interface {
	pulumi.Input

	ToProjectOrganizationPolicyOutput() ProjectOrganizationPolicyOutput
	ToProjectOrganizationPolicyOutputWithContext(ctx context.Context) ProjectOrganizationPolicyOutput
}

func (*ProjectOrganizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectOrganizationPolicy)(nil)).Elem()
}

func (i *ProjectOrganizationPolicy) ToProjectOrganizationPolicyOutput() ProjectOrganizationPolicyOutput {
	return i.ToProjectOrganizationPolicyOutputWithContext(context.Background())
}

func (i *ProjectOrganizationPolicy) ToProjectOrganizationPolicyOutputWithContext(ctx context.Context) ProjectOrganizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOrganizationPolicyOutput)
}

type ProjectOrganizationPolicyOutput struct{ *pulumi.OutputState }

func (ProjectOrganizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectOrganizationPolicy)(nil)).Elem()
}

func (o ProjectOrganizationPolicyOutput) ToProjectOrganizationPolicyOutput() ProjectOrganizationPolicyOutput {
	return o
}

func (o ProjectOrganizationPolicyOutput) ToProjectOrganizationPolicyOutputWithContext(ctx context.Context) ProjectOrganizationPolicyOutput {
	return o
}

// A boolean policy is a constraint that is either enforced or not.
func (o ProjectOrganizationPolicyOutput) BooleanPolicy() ProjectOrganizationPolicyBooleanPolicyPtrOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) ProjectOrganizationPolicyBooleanPolicyPtrOutput {
		return v.BooleanPolicy
	}).(ProjectOrganizationPolicyBooleanPolicyPtrOutput)
}

// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
func (o ProjectOrganizationPolicyOutput) Constraint() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) pulumi.StringOutput { return v.Constraint }).(pulumi.StringOutput)
}

// The etag of the organization policy. etag is used for optimistic concurrency control as a way to help prevent
// simultaneous updates of a policy from overwriting each other.
func (o ProjectOrganizationPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to
// allow or deny all values.
func (o ProjectOrganizationPolicyOutput) ListPolicy() ProjectOrganizationPolicyListPolicyPtrOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) ProjectOrganizationPolicyListPolicyPtrOutput { return v.ListPolicy }).(ProjectOrganizationPolicyListPolicyPtrOutput)
}

// The project ID.
func (o ProjectOrganizationPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectOrganizationPolicyOutput) ProjectOrganizationPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) pulumi.StringOutput { return v.ProjectOrganizationPolicyId }).(pulumi.StringOutput)
}

// A restore policy is a constraint to restore the default policy.
func (o ProjectOrganizationPolicyOutput) RestorePolicy() ProjectOrganizationPolicyRestorePolicyPtrOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) ProjectOrganizationPolicyRestorePolicyPtrOutput {
		return v.RestorePolicy
	}).(ProjectOrganizationPolicyRestorePolicyPtrOutput)
}

func (o ProjectOrganizationPolicyOutput) Timeouts() ProjectOrganizationPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) ProjectOrganizationPolicyTimeoutsPtrOutput { return v.Timeouts }).(ProjectOrganizationPolicyTimeoutsPtrOutput)
}

// The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
// Example: "2016-10-09T12:33:37.578138407Z".
func (o ProjectOrganizationPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Version of the Policy. Default version is 0.
func (o ProjectOrganizationPolicyOutput) Version() pulumi.Float64Output {
	return o.ApplyT(func(v *ProjectOrganizationPolicy) pulumi.Float64Output { return v.Version }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectOrganizationPolicyInput)(nil)).Elem(), &ProjectOrganizationPolicy{})
	pulumi.RegisterOutputType(ProjectOrganizationPolicyOutput{})
}
