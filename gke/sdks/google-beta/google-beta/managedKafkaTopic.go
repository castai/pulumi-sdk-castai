// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedKafkaTopic struct {
	pulumi.CustomResourceState

	// The cluster name.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
	// name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
	Configs pulumi.StringMapOutput `pulumi:"configs"`
	// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
	// supported locations.
	Location            pulumi.StringOutput `pulumi:"location"`
	ManagedKafkaTopicId pulumi.StringOutput `pulumi:"managedKafkaTopicId"`
	// The name of the topic. The 'topic' segment is used when connecting directly to the cluster. Must be in the format
	// 'projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
	// Increasing partitions for a topic that uses a key might change how messages are distributed.
	PartitionCount pulumi.Float64PtrOutput `pulumi:"partitionCount"`
	Project        pulumi.StringOutput     `pulumi:"project"`
	// The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
	ReplicationFactor pulumi.Float64Output               `pulumi:"replicationFactor"`
	Timeouts          ManagedKafkaTopicTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
	// 'my-topic-name'.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewManagedKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewManagedKafkaTopic(ctx *pulumi.Context,
	name string, args *ManagedKafkaTopicArgs, opts ...pulumi.ResourceOption) (*ManagedKafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ReplicationFactor == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationFactor'")
	}
	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ManagedKafkaTopic
	err = ctx.RegisterPackageResource("google-beta:index/managedKafkaTopic:ManagedKafkaTopic", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedKafkaTopic gets an existing ManagedKafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedKafkaTopicState, opts ...pulumi.ResourceOption) (*ManagedKafkaTopic, error) {
	var resource ManagedKafkaTopic
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/managedKafkaTopic:ManagedKafkaTopic", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedKafkaTopic resources.
type managedKafkaTopicState struct {
	// The cluster name.
	Cluster *string `pulumi:"cluster"`
	// Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
	// name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
	Configs map[string]string `pulumi:"configs"`
	// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
	// supported locations.
	Location            *string `pulumi:"location"`
	ManagedKafkaTopicId *string `pulumi:"managedKafkaTopicId"`
	// The name of the topic. The 'topic' segment is used when connecting directly to the cluster. Must be in the format
	// 'projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID'.
	Name *string `pulumi:"name"`
	// The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
	// Increasing partitions for a topic that uses a key might change how messages are distributed.
	PartitionCount *float64 `pulumi:"partitionCount"`
	Project        *string  `pulumi:"project"`
	// The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
	ReplicationFactor *float64                   `pulumi:"replicationFactor"`
	Timeouts          *ManagedKafkaTopicTimeouts `pulumi:"timeouts"`
	// The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
	// 'my-topic-name'.
	TopicId *string `pulumi:"topicId"`
}

type ManagedKafkaTopicState struct {
	// The cluster name.
	Cluster pulumi.StringPtrInput
	// Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
	// name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
	Configs pulumi.StringMapInput
	// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
	// supported locations.
	Location            pulumi.StringPtrInput
	ManagedKafkaTopicId pulumi.StringPtrInput
	// The name of the topic. The 'topic' segment is used when connecting directly to the cluster. Must be in the format
	// 'projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID'.
	Name pulumi.StringPtrInput
	// The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
	// Increasing partitions for a topic that uses a key might change how messages are distributed.
	PartitionCount pulumi.Float64PtrInput
	Project        pulumi.StringPtrInput
	// The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
	ReplicationFactor pulumi.Float64PtrInput
	Timeouts          ManagedKafkaTopicTimeoutsPtrInput
	// The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
	// 'my-topic-name'.
	TopicId pulumi.StringPtrInput
}

func (ManagedKafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedKafkaTopicState)(nil)).Elem()
}

type managedKafkaTopicArgs struct {
	// The cluster name.
	Cluster string `pulumi:"cluster"`
	// Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
	// name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
	Configs map[string]string `pulumi:"configs"`
	// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
	// supported locations.
	Location            string  `pulumi:"location"`
	ManagedKafkaTopicId *string `pulumi:"managedKafkaTopicId"`
	// The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
	// Increasing partitions for a topic that uses a key might change how messages are distributed.
	PartitionCount *float64 `pulumi:"partitionCount"`
	Project        *string  `pulumi:"project"`
	// The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
	ReplicationFactor float64                    `pulumi:"replicationFactor"`
	Timeouts          *ManagedKafkaTopicTimeouts `pulumi:"timeouts"`
	// The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
	// 'my-topic-name'.
	TopicId string `pulumi:"topicId"`
}

// The set of arguments for constructing a ManagedKafkaTopic resource.
type ManagedKafkaTopicArgs struct {
	// The cluster name.
	Cluster pulumi.StringInput
	// Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
	// name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
	Configs pulumi.StringMapInput
	// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
	// supported locations.
	Location            pulumi.StringInput
	ManagedKafkaTopicId pulumi.StringPtrInput
	// The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
	// Increasing partitions for a topic that uses a key might change how messages are distributed.
	PartitionCount pulumi.Float64PtrInput
	Project        pulumi.StringPtrInput
	// The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
	ReplicationFactor pulumi.Float64Input
	Timeouts          ManagedKafkaTopicTimeoutsPtrInput
	// The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
	// 'my-topic-name'.
	TopicId pulumi.StringInput
}

func (ManagedKafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedKafkaTopicArgs)(nil)).Elem()
}

type ManagedKafkaTopicInput interface {
	pulumi.Input

	ToManagedKafkaTopicOutput() ManagedKafkaTopicOutput
	ToManagedKafkaTopicOutputWithContext(ctx context.Context) ManagedKafkaTopicOutput
}

func (*ManagedKafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedKafkaTopic)(nil)).Elem()
}

func (i *ManagedKafkaTopic) ToManagedKafkaTopicOutput() ManagedKafkaTopicOutput {
	return i.ToManagedKafkaTopicOutputWithContext(context.Background())
}

func (i *ManagedKafkaTopic) ToManagedKafkaTopicOutputWithContext(ctx context.Context) ManagedKafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedKafkaTopicOutput)
}

type ManagedKafkaTopicOutput struct{ *pulumi.OutputState }

func (ManagedKafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedKafkaTopic)(nil)).Elem()
}

func (o ManagedKafkaTopicOutput) ToManagedKafkaTopicOutput() ManagedKafkaTopicOutput {
	return o
}

func (o ManagedKafkaTopicOutput) ToManagedKafkaTopicOutputWithContext(ctx context.Context) ManagedKafkaTopicOutput {
	return o
}

// The cluster name.
func (o ManagedKafkaTopicOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
// name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
func (o ManagedKafkaTopicOutput) Configs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringMapOutput { return v.Configs }).(pulumi.StringMapOutput)
}

// ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
// supported locations.
func (o ManagedKafkaTopicOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ManagedKafkaTopicOutput) ManagedKafkaTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringOutput { return v.ManagedKafkaTopicId }).(pulumi.StringOutput)
}

// The name of the topic. The 'topic' segment is used when connecting directly to the cluster. Must be in the format
// 'projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID'.
func (o ManagedKafkaTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
// Increasing partitions for a topic that uses a key might change how messages are distributed.
func (o ManagedKafkaTopicOutput) PartitionCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.Float64PtrOutput { return v.PartitionCount }).(pulumi.Float64PtrOutput)
}

func (o ManagedKafkaTopicOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
func (o ManagedKafkaTopicOutput) ReplicationFactor() pulumi.Float64Output {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.Float64Output { return v.ReplicationFactor }).(pulumi.Float64Output)
}

func (o ManagedKafkaTopicOutput) Timeouts() ManagedKafkaTopicTimeoutsPtrOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) ManagedKafkaTopicTimeoutsPtrOutput { return v.Timeouts }).(ManagedKafkaTopicTimeoutsPtrOutput)
}

// The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
// 'my-topic-name'.
func (o ManagedKafkaTopicOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaTopic) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedKafkaTopicInput)(nil)).Elem(), &ManagedKafkaTopic{})
	pulumi.RegisterOutputType(ManagedKafkaTopicOutput{})
}
