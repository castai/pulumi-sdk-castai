// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSqlDatabase(ctx *pulumi.Context, args *LookupSqlDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupSqlDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupSqlDatabaseResult
	err = ctx.InvokePackage("google-beta:index/getSqlDatabase:getSqlDatabase", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlDatabase.
type LookupSqlDatabaseArgs struct {
	Id       *string `pulumi:"id"`
	Instance string  `pulumi:"instance"`
	Name     string  `pulumi:"name"`
	Project  *string `pulumi:"project"`
}

// A collection of values returned by getSqlDatabase.
type LookupSqlDatabaseResult struct {
	Charset        string  `pulumi:"charset"`
	Collation      string  `pulumi:"collation"`
	DeletionPolicy string  `pulumi:"deletionPolicy"`
	Id             string  `pulumi:"id"`
	Instance       string  `pulumi:"instance"`
	Name           string  `pulumi:"name"`
	Project        *string `pulumi:"project"`
	SelfLink       string  `pulumi:"selfLink"`
}

func LookupSqlDatabaseOutput(ctx *pulumi.Context, args LookupSqlDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupSqlDatabaseResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSqlDatabaseResultOutput, error) {
			args := v.(LookupSqlDatabaseArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupSqlDatabaseResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("google-beta:index/getSqlDatabase:getSqlDatabase", args, LookupSqlDatabaseResultOutput{}, options).(LookupSqlDatabaseResultOutput), nil
		}).(LookupSqlDatabaseResultOutput)
}

// A collection of arguments for invoking getSqlDatabase.
type LookupSqlDatabaseOutputArgs struct {
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Instance pulumi.StringInput    `pulumi:"instance"`
	Name     pulumi.StringInput    `pulumi:"name"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupSqlDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getSqlDatabase.
type LookupSqlDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupSqlDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlDatabaseResult)(nil)).Elem()
}

func (o LookupSqlDatabaseResultOutput) ToLookupSqlDatabaseResultOutput() LookupSqlDatabaseResultOutput {
	return o
}

func (o LookupSqlDatabaseResultOutput) ToLookupSqlDatabaseResultOutputWithContext(ctx context.Context) LookupSqlDatabaseResultOutput {
	return o
}

func (o LookupSqlDatabaseResultOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Charset }).(pulumi.StringOutput)
}

func (o LookupSqlDatabaseResultOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Collation }).(pulumi.StringOutput)
}

func (o LookupSqlDatabaseResultOutput) DeletionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.DeletionPolicy }).(pulumi.StringOutput)
}

func (o LookupSqlDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSqlDatabaseResultOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Instance }).(pulumi.StringOutput)
}

func (o LookupSqlDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSqlDatabaseResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupSqlDatabaseResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlDatabaseResultOutput{})
}
