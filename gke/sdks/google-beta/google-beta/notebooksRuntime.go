// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotebooksRuntime struct {
	pulumi.CustomResourceState

	// The config settings for accessing runtime.
	AccessConfig    NotebooksRuntimeAccessConfigPtrOutput `pulumi:"accessConfig"`
	EffectiveLabels pulumi.StringMapOutput                `pulumi:"effectiveLabels"`
	// The health state of this runtime. For a list of possible output values, see
	// 'https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate'.
	HealthState pulumi.StringOutput `pulumi:"healthState"`
	// The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035] (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// A reference to the zone where the machine resides.
	Location pulumi.StringOutput `pulumi:"location"`
	// Contains Runtime daemon metrics such as Service status and JupyterLab status
	Metrics NotebooksRuntimeMetricArrayOutput `pulumi:"metrics"`
	// The name specified for the Notebook runtime.
	Name               pulumi.StringOutput `pulumi:"name"`
	NotebooksRuntimeId pulumi.StringOutput `pulumi:"notebooksRuntimeId"`
	Project            pulumi.StringOutput `pulumi:"project"`
	// The config settings for software inside the runtime.
	SoftwareConfig NotebooksRuntimeSoftwareConfigPtrOutput `pulumi:"softwareConfig"`
	// The state of this runtime.
	State pulumi.StringOutput `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput            `pulumi:"terraformLabels"`
	Timeouts        NotebooksRuntimeTimeoutsPtrOutput `pulumi:"timeouts"`
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine NotebooksRuntimeVirtualMachinePtrOutput `pulumi:"virtualMachine"`
}

// NewNotebooksRuntime registers a new resource with the given unique name, arguments, and options.
func NewNotebooksRuntime(ctx *pulumi.Context,
	name string, args *NotebooksRuntimeArgs, opts ...pulumi.ResourceOption) (*NotebooksRuntime, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NotebooksRuntime
	err = ctx.RegisterPackageResource("google-beta:index/notebooksRuntime:NotebooksRuntime", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotebooksRuntime gets an existing NotebooksRuntime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotebooksRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotebooksRuntimeState, opts ...pulumi.ResourceOption) (*NotebooksRuntime, error) {
	var resource NotebooksRuntime
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/notebooksRuntime:NotebooksRuntime", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotebooksRuntime resources.
type notebooksRuntimeState struct {
	// The config settings for accessing runtime.
	AccessConfig    *NotebooksRuntimeAccessConfig `pulumi:"accessConfig"`
	EffectiveLabels map[string]string             `pulumi:"effectiveLabels"`
	// The health state of this runtime. For a list of possible output values, see
	// 'https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate'.
	HealthState *string `pulumi:"healthState"`
	// The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035] (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// A reference to the zone where the machine resides.
	Location *string `pulumi:"location"`
	// Contains Runtime daemon metrics such as Service status and JupyterLab status
	Metrics []NotebooksRuntimeMetric `pulumi:"metrics"`
	// The name specified for the Notebook runtime.
	Name               *string `pulumi:"name"`
	NotebooksRuntimeId *string `pulumi:"notebooksRuntimeId"`
	Project            *string `pulumi:"project"`
	// The config settings for software inside the runtime.
	SoftwareConfig *NotebooksRuntimeSoftwareConfig `pulumi:"softwareConfig"`
	// The state of this runtime.
	State *string `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string         `pulumi:"terraformLabels"`
	Timeouts        *NotebooksRuntimeTimeouts `pulumi:"timeouts"`
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine *NotebooksRuntimeVirtualMachine `pulumi:"virtualMachine"`
}

type NotebooksRuntimeState struct {
	// The config settings for accessing runtime.
	AccessConfig    NotebooksRuntimeAccessConfigPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The health state of this runtime. For a list of possible output values, see
	// 'https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate'.
	HealthState pulumi.StringPtrInput
	// The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035] (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// A reference to the zone where the machine resides.
	Location pulumi.StringPtrInput
	// Contains Runtime daemon metrics such as Service status and JupyterLab status
	Metrics NotebooksRuntimeMetricArrayInput
	// The name specified for the Notebook runtime.
	Name               pulumi.StringPtrInput
	NotebooksRuntimeId pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
	// The config settings for software inside the runtime.
	SoftwareConfig NotebooksRuntimeSoftwareConfigPtrInput
	// The state of this runtime.
	State pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        NotebooksRuntimeTimeoutsPtrInput
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine NotebooksRuntimeVirtualMachinePtrInput
}

func (NotebooksRuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*notebooksRuntimeState)(nil)).Elem()
}

type notebooksRuntimeArgs struct {
	// The config settings for accessing runtime.
	AccessConfig *NotebooksRuntimeAccessConfig `pulumi:"accessConfig"`
	// The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035] (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// A reference to the zone where the machine resides.
	Location string `pulumi:"location"`
	// The name specified for the Notebook runtime.
	Name               *string `pulumi:"name"`
	NotebooksRuntimeId *string `pulumi:"notebooksRuntimeId"`
	Project            *string `pulumi:"project"`
	// The config settings for software inside the runtime.
	SoftwareConfig *NotebooksRuntimeSoftwareConfig `pulumi:"softwareConfig"`
	Timeouts       *NotebooksRuntimeTimeouts       `pulumi:"timeouts"`
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine *NotebooksRuntimeVirtualMachine `pulumi:"virtualMachine"`
}

// The set of arguments for constructing a NotebooksRuntime resource.
type NotebooksRuntimeArgs struct {
	// The config settings for accessing runtime.
	AccessConfig NotebooksRuntimeAccessConfigPtrInput
	// The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
	// 1035] (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// A reference to the zone where the machine resides.
	Location pulumi.StringInput
	// The name specified for the Notebook runtime.
	Name               pulumi.StringPtrInput
	NotebooksRuntimeId pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
	// The config settings for software inside the runtime.
	SoftwareConfig NotebooksRuntimeSoftwareConfigPtrInput
	Timeouts       NotebooksRuntimeTimeoutsPtrInput
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine NotebooksRuntimeVirtualMachinePtrInput
}

func (NotebooksRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notebooksRuntimeArgs)(nil)).Elem()
}

type NotebooksRuntimeInput interface {
	pulumi.Input

	ToNotebooksRuntimeOutput() NotebooksRuntimeOutput
	ToNotebooksRuntimeOutputWithContext(ctx context.Context) NotebooksRuntimeOutput
}

func (*NotebooksRuntime) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebooksRuntime)(nil)).Elem()
}

func (i *NotebooksRuntime) ToNotebooksRuntimeOutput() NotebooksRuntimeOutput {
	return i.ToNotebooksRuntimeOutputWithContext(context.Background())
}

func (i *NotebooksRuntime) ToNotebooksRuntimeOutputWithContext(ctx context.Context) NotebooksRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebooksRuntimeOutput)
}

type NotebooksRuntimeOutput struct{ *pulumi.OutputState }

func (NotebooksRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebooksRuntime)(nil)).Elem()
}

func (o NotebooksRuntimeOutput) ToNotebooksRuntimeOutput() NotebooksRuntimeOutput {
	return o
}

func (o NotebooksRuntimeOutput) ToNotebooksRuntimeOutputWithContext(ctx context.Context) NotebooksRuntimeOutput {
	return o
}

// The config settings for accessing runtime.
func (o NotebooksRuntimeOutput) AccessConfig() NotebooksRuntimeAccessConfigPtrOutput {
	return o.ApplyT(func(v *NotebooksRuntime) NotebooksRuntimeAccessConfigPtrOutput { return v.AccessConfig }).(NotebooksRuntimeAccessConfigPtrOutput)
}

func (o NotebooksRuntimeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The health state of this runtime. For a list of possible output values, see
// 'https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate'.
func (o NotebooksRuntimeOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringOutput { return v.HealthState }).(pulumi.StringOutput)
}

// The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC
// 1035] (https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63
// characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
// associated with a cluster. **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o NotebooksRuntimeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// A reference to the zone where the machine resides.
func (o NotebooksRuntimeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Contains Runtime daemon metrics such as Service status and JupyterLab status
func (o NotebooksRuntimeOutput) Metrics() NotebooksRuntimeMetricArrayOutput {
	return o.ApplyT(func(v *NotebooksRuntime) NotebooksRuntimeMetricArrayOutput { return v.Metrics }).(NotebooksRuntimeMetricArrayOutput)
}

// The name specified for the Notebook runtime.
func (o NotebooksRuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NotebooksRuntimeOutput) NotebooksRuntimeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringOutput { return v.NotebooksRuntimeId }).(pulumi.StringOutput)
}

func (o NotebooksRuntimeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The config settings for software inside the runtime.
func (o NotebooksRuntimeOutput) SoftwareConfig() NotebooksRuntimeSoftwareConfigPtrOutput {
	return o.ApplyT(func(v *NotebooksRuntime) NotebooksRuntimeSoftwareConfigPtrOutput { return v.SoftwareConfig }).(NotebooksRuntimeSoftwareConfigPtrOutput)
}

// The state of this runtime.
func (o NotebooksRuntimeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o NotebooksRuntimeOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotebooksRuntime) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o NotebooksRuntimeOutput) Timeouts() NotebooksRuntimeTimeoutsPtrOutput {
	return o.ApplyT(func(v *NotebooksRuntime) NotebooksRuntimeTimeoutsPtrOutput { return v.Timeouts }).(NotebooksRuntimeTimeoutsPtrOutput)
}

// Use a Compute Engine VM image to start the managed notebook instance.
func (o NotebooksRuntimeOutput) VirtualMachine() NotebooksRuntimeVirtualMachinePtrOutput {
	return o.ApplyT(func(v *NotebooksRuntime) NotebooksRuntimeVirtualMachinePtrOutput { return v.VirtualMachine }).(NotebooksRuntimeVirtualMachinePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotebooksRuntimeInput)(nil)).Elem(), &NotebooksRuntime{})
	pulumi.RegisterOutputType(NotebooksRuntimeOutput{})
}
