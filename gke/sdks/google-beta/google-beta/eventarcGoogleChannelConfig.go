// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventarcGoogleChannelConfig struct {
	pulumi.CustomResourceState

	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName                 pulumi.StringPtrOutput `pulumi:"cryptoKeyName"`
	EventarcGoogleChannelConfigId pulumi.StringOutput    `pulumi:"eventarcGoogleChannelConfigId"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The resource name of the config. Must be in the format of,
	// `projects/{project}/locations/{location}/googleChannelConfig`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project  pulumi.StringOutput                          `pulumi:"project"`
	Timeouts EventarcGoogleChannelConfigTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEventarcGoogleChannelConfig registers a new resource with the given unique name, arguments, and options.
func NewEventarcGoogleChannelConfig(ctx *pulumi.Context,
	name string, args *EventarcGoogleChannelConfigArgs, opts ...pulumi.ResourceOption) (*EventarcGoogleChannelConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EventarcGoogleChannelConfig
	err = ctx.RegisterPackageResource("google-beta:index/eventarcGoogleChannelConfig:EventarcGoogleChannelConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventarcGoogleChannelConfig gets an existing EventarcGoogleChannelConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventarcGoogleChannelConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventarcGoogleChannelConfigState, opts ...pulumi.ResourceOption) (*EventarcGoogleChannelConfig, error) {
	var resource EventarcGoogleChannelConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/eventarcGoogleChannelConfig:EventarcGoogleChannelConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventarcGoogleChannelConfig resources.
type eventarcGoogleChannelConfigState struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName                 *string `pulumi:"cryptoKeyName"`
	EventarcGoogleChannelConfigId *string `pulumi:"eventarcGoogleChannelConfigId"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. The resource name of the config. Must be in the format of,
	// `projects/{project}/locations/{location}/googleChannelConfig`.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project  *string                              `pulumi:"project"`
	Timeouts *EventarcGoogleChannelConfigTimeouts `pulumi:"timeouts"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type EventarcGoogleChannelConfigState struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName                 pulumi.StringPtrInput
	EventarcGoogleChannelConfigId pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. The resource name of the config. Must be in the format of,
	// `projects/{project}/locations/{location}/googleChannelConfig`.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project  pulumi.StringPtrInput
	Timeouts EventarcGoogleChannelConfigTimeoutsPtrInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (EventarcGoogleChannelConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventarcGoogleChannelConfigState)(nil)).Elem()
}

type eventarcGoogleChannelConfigArgs struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName                 *string `pulumi:"cryptoKeyName"`
	EventarcGoogleChannelConfigId *string `pulumi:"eventarcGoogleChannelConfigId"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. The resource name of the config. Must be in the format of,
	// `projects/{project}/locations/{location}/googleChannelConfig`.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project  *string                              `pulumi:"project"`
	Timeouts *EventarcGoogleChannelConfigTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a EventarcGoogleChannelConfig resource.
type EventarcGoogleChannelConfigArgs struct {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
	// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName                 pulumi.StringPtrInput
	EventarcGoogleChannelConfigId pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. The resource name of the config. Must be in the format of,
	// `projects/{project}/locations/{location}/googleChannelConfig`.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project  pulumi.StringPtrInput
	Timeouts EventarcGoogleChannelConfigTimeoutsPtrInput
}

func (EventarcGoogleChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventarcGoogleChannelConfigArgs)(nil)).Elem()
}

type EventarcGoogleChannelConfigInput interface {
	pulumi.Input

	ToEventarcGoogleChannelConfigOutput() EventarcGoogleChannelConfigOutput
	ToEventarcGoogleChannelConfigOutputWithContext(ctx context.Context) EventarcGoogleChannelConfigOutput
}

func (*EventarcGoogleChannelConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**EventarcGoogleChannelConfig)(nil)).Elem()
}

func (i *EventarcGoogleChannelConfig) ToEventarcGoogleChannelConfigOutput() EventarcGoogleChannelConfigOutput {
	return i.ToEventarcGoogleChannelConfigOutputWithContext(context.Background())
}

func (i *EventarcGoogleChannelConfig) ToEventarcGoogleChannelConfigOutputWithContext(ctx context.Context) EventarcGoogleChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventarcGoogleChannelConfigOutput)
}

type EventarcGoogleChannelConfigOutput struct{ *pulumi.OutputState }

func (EventarcGoogleChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventarcGoogleChannelConfig)(nil)).Elem()
}

func (o EventarcGoogleChannelConfigOutput) ToEventarcGoogleChannelConfigOutput() EventarcGoogleChannelConfigOutput {
	return o
}

func (o EventarcGoogleChannelConfigOutput) ToEventarcGoogleChannelConfigOutputWithContext(ctx context.Context) EventarcGoogleChannelConfigOutput {
	return o
}

// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
// match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o EventarcGoogleChannelConfigOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) pulumi.StringPtrOutput { return v.CryptoKeyName }).(pulumi.StringPtrOutput)
}

func (o EventarcGoogleChannelConfigOutput) EventarcGoogleChannelConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) pulumi.StringOutput { return v.EventarcGoogleChannelConfigId }).(pulumi.StringOutput)
}

// The location for the resource
func (o EventarcGoogleChannelConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The resource name of the config. Must be in the format of,
// `projects/{project}/locations/{location}/googleChannelConfig`.
func (o EventarcGoogleChannelConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o EventarcGoogleChannelConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o EventarcGoogleChannelConfigOutput) Timeouts() EventarcGoogleChannelConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) EventarcGoogleChannelConfigTimeoutsPtrOutput { return v.Timeouts }).(EventarcGoogleChannelConfigTimeoutsPtrOutput)
}

// Output only. The last-modified time.
func (o EventarcGoogleChannelConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventarcGoogleChannelConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventarcGoogleChannelConfigInput)(nil)).Elem(), &EventarcGoogleChannelConfig{})
	pulumi.RegisterOutputType(EventarcGoogleChannelConfigOutput{})
}
