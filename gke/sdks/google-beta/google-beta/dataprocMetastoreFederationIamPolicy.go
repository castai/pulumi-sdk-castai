// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataprocMetastoreFederationIamPolicy struct {
	pulumi.CustomResourceState

	DataprocMetastoreFederationIamPolicyId pulumi.StringOutput `pulumi:"dataprocMetastoreFederationIamPolicyId"`
	Etag                                   pulumi.StringOutput `pulumi:"etag"`
	FederationId                           pulumi.StringOutput `pulumi:"federationId"`
	Location                               pulumi.StringOutput `pulumi:"location"`
	PolicyData                             pulumi.StringOutput `pulumi:"policyData"`
	Project                                pulumi.StringOutput `pulumi:"project"`
}

// NewDataprocMetastoreFederationIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDataprocMetastoreFederationIamPolicy(ctx *pulumi.Context,
	name string, args *DataprocMetastoreFederationIamPolicyArgs, opts ...pulumi.ResourceOption) (*DataprocMetastoreFederationIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FederationId == nil {
		return nil, errors.New("invalid value for required argument 'FederationId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataprocMetastoreFederationIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/dataprocMetastoreFederationIamPolicy:DataprocMetastoreFederationIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataprocMetastoreFederationIamPolicy gets an existing DataprocMetastoreFederationIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataprocMetastoreFederationIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataprocMetastoreFederationIamPolicyState, opts ...pulumi.ResourceOption) (*DataprocMetastoreFederationIamPolicy, error) {
	var resource DataprocMetastoreFederationIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataprocMetastoreFederationIamPolicy:DataprocMetastoreFederationIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataprocMetastoreFederationIamPolicy resources.
type dataprocMetastoreFederationIamPolicyState struct {
	DataprocMetastoreFederationIamPolicyId *string `pulumi:"dataprocMetastoreFederationIamPolicyId"`
	Etag                                   *string `pulumi:"etag"`
	FederationId                           *string `pulumi:"federationId"`
	Location                               *string `pulumi:"location"`
	PolicyData                             *string `pulumi:"policyData"`
	Project                                *string `pulumi:"project"`
}

type DataprocMetastoreFederationIamPolicyState struct {
	DataprocMetastoreFederationIamPolicyId pulumi.StringPtrInput
	Etag                                   pulumi.StringPtrInput
	FederationId                           pulumi.StringPtrInput
	Location                               pulumi.StringPtrInput
	PolicyData                             pulumi.StringPtrInput
	Project                                pulumi.StringPtrInput
}

func (DataprocMetastoreFederationIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocMetastoreFederationIamPolicyState)(nil)).Elem()
}

type dataprocMetastoreFederationIamPolicyArgs struct {
	DataprocMetastoreFederationIamPolicyId *string `pulumi:"dataprocMetastoreFederationIamPolicyId"`
	FederationId                           string  `pulumi:"federationId"`
	Location                               *string `pulumi:"location"`
	PolicyData                             string  `pulumi:"policyData"`
	Project                                *string `pulumi:"project"`
}

// The set of arguments for constructing a DataprocMetastoreFederationIamPolicy resource.
type DataprocMetastoreFederationIamPolicyArgs struct {
	DataprocMetastoreFederationIamPolicyId pulumi.StringPtrInput
	FederationId                           pulumi.StringInput
	Location                               pulumi.StringPtrInput
	PolicyData                             pulumi.StringInput
	Project                                pulumi.StringPtrInput
}

func (DataprocMetastoreFederationIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocMetastoreFederationIamPolicyArgs)(nil)).Elem()
}

type DataprocMetastoreFederationIamPolicyInput interface {
	pulumi.Input

	ToDataprocMetastoreFederationIamPolicyOutput() DataprocMetastoreFederationIamPolicyOutput
	ToDataprocMetastoreFederationIamPolicyOutputWithContext(ctx context.Context) DataprocMetastoreFederationIamPolicyOutput
}

func (*DataprocMetastoreFederationIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocMetastoreFederationIamPolicy)(nil)).Elem()
}

func (i *DataprocMetastoreFederationIamPolicy) ToDataprocMetastoreFederationIamPolicyOutput() DataprocMetastoreFederationIamPolicyOutput {
	return i.ToDataprocMetastoreFederationIamPolicyOutputWithContext(context.Background())
}

func (i *DataprocMetastoreFederationIamPolicy) ToDataprocMetastoreFederationIamPolicyOutputWithContext(ctx context.Context) DataprocMetastoreFederationIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocMetastoreFederationIamPolicyOutput)
}

type DataprocMetastoreFederationIamPolicyOutput struct{ *pulumi.OutputState }

func (DataprocMetastoreFederationIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocMetastoreFederationIamPolicy)(nil)).Elem()
}

func (o DataprocMetastoreFederationIamPolicyOutput) ToDataprocMetastoreFederationIamPolicyOutput() DataprocMetastoreFederationIamPolicyOutput {
	return o
}

func (o DataprocMetastoreFederationIamPolicyOutput) ToDataprocMetastoreFederationIamPolicyOutputWithContext(ctx context.Context) DataprocMetastoreFederationIamPolicyOutput {
	return o
}

func (o DataprocMetastoreFederationIamPolicyOutput) DataprocMetastoreFederationIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocMetastoreFederationIamPolicy) pulumi.StringOutput {
		return v.DataprocMetastoreFederationIamPolicyId
	}).(pulumi.StringOutput)
}

func (o DataprocMetastoreFederationIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocMetastoreFederationIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o DataprocMetastoreFederationIamPolicyOutput) FederationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocMetastoreFederationIamPolicy) pulumi.StringOutput { return v.FederationId }).(pulumi.StringOutput)
}

func (o DataprocMetastoreFederationIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocMetastoreFederationIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DataprocMetastoreFederationIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocMetastoreFederationIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o DataprocMetastoreFederationIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocMetastoreFederationIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocMetastoreFederationIamPolicyInput)(nil)).Elem(), &DataprocMetastoreFederationIamPolicy{})
	pulumi.RegisterOutputType(DataprocMetastoreFederationIamPolicyOutput{})
}
