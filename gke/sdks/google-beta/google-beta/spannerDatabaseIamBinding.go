// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpannerDatabaseIamBinding struct {
	pulumi.CustomResourceState

	Condition                   SpannerDatabaseIamBindingConditionPtrOutput `pulumi:"condition"`
	Database                    pulumi.StringOutput                         `pulumi:"database"`
	Etag                        pulumi.StringOutput                         `pulumi:"etag"`
	Instance                    pulumi.StringOutput                         `pulumi:"instance"`
	Members                     pulumi.StringArrayOutput                    `pulumi:"members"`
	Project                     pulumi.StringOutput                         `pulumi:"project"`
	Role                        pulumi.StringOutput                         `pulumi:"role"`
	SpannerDatabaseIamBindingId pulumi.StringOutput                         `pulumi:"spannerDatabaseIamBindingId"`
}

// NewSpannerDatabaseIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSpannerDatabaseIamBinding(ctx *pulumi.Context,
	name string, args *SpannerDatabaseIamBindingArgs, opts ...pulumi.ResourceOption) (*SpannerDatabaseIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SpannerDatabaseIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/spannerDatabaseIamBinding:SpannerDatabaseIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpannerDatabaseIamBinding gets an existing SpannerDatabaseIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpannerDatabaseIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpannerDatabaseIamBindingState, opts ...pulumi.ResourceOption) (*SpannerDatabaseIamBinding, error) {
	var resource SpannerDatabaseIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/spannerDatabaseIamBinding:SpannerDatabaseIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpannerDatabaseIamBinding resources.
type spannerDatabaseIamBindingState struct {
	Condition                   *SpannerDatabaseIamBindingCondition `pulumi:"condition"`
	Database                    *string                             `pulumi:"database"`
	Etag                        *string                             `pulumi:"etag"`
	Instance                    *string                             `pulumi:"instance"`
	Members                     []string                            `pulumi:"members"`
	Project                     *string                             `pulumi:"project"`
	Role                        *string                             `pulumi:"role"`
	SpannerDatabaseIamBindingId *string                             `pulumi:"spannerDatabaseIamBindingId"`
}

type SpannerDatabaseIamBindingState struct {
	Condition                   SpannerDatabaseIamBindingConditionPtrInput
	Database                    pulumi.StringPtrInput
	Etag                        pulumi.StringPtrInput
	Instance                    pulumi.StringPtrInput
	Members                     pulumi.StringArrayInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringPtrInput
	SpannerDatabaseIamBindingId pulumi.StringPtrInput
}

func (SpannerDatabaseIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerDatabaseIamBindingState)(nil)).Elem()
}

type spannerDatabaseIamBindingArgs struct {
	Condition                   *SpannerDatabaseIamBindingCondition `pulumi:"condition"`
	Database                    string                              `pulumi:"database"`
	Instance                    string                              `pulumi:"instance"`
	Members                     []string                            `pulumi:"members"`
	Project                     *string                             `pulumi:"project"`
	Role                        string                              `pulumi:"role"`
	SpannerDatabaseIamBindingId *string                             `pulumi:"spannerDatabaseIamBindingId"`
}

// The set of arguments for constructing a SpannerDatabaseIamBinding resource.
type SpannerDatabaseIamBindingArgs struct {
	Condition                   SpannerDatabaseIamBindingConditionPtrInput
	Database                    pulumi.StringInput
	Instance                    pulumi.StringInput
	Members                     pulumi.StringArrayInput
	Project                     pulumi.StringPtrInput
	Role                        pulumi.StringInput
	SpannerDatabaseIamBindingId pulumi.StringPtrInput
}

func (SpannerDatabaseIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spannerDatabaseIamBindingArgs)(nil)).Elem()
}

type SpannerDatabaseIamBindingInput interface {
	pulumi.Input

	ToSpannerDatabaseIamBindingOutput() SpannerDatabaseIamBindingOutput
	ToSpannerDatabaseIamBindingOutputWithContext(ctx context.Context) SpannerDatabaseIamBindingOutput
}

func (*SpannerDatabaseIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerDatabaseIamBinding)(nil)).Elem()
}

func (i *SpannerDatabaseIamBinding) ToSpannerDatabaseIamBindingOutput() SpannerDatabaseIamBindingOutput {
	return i.ToSpannerDatabaseIamBindingOutputWithContext(context.Background())
}

func (i *SpannerDatabaseIamBinding) ToSpannerDatabaseIamBindingOutputWithContext(ctx context.Context) SpannerDatabaseIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerDatabaseIamBindingOutput)
}

type SpannerDatabaseIamBindingOutput struct{ *pulumi.OutputState }

func (SpannerDatabaseIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpannerDatabaseIamBinding)(nil)).Elem()
}

func (o SpannerDatabaseIamBindingOutput) ToSpannerDatabaseIamBindingOutput() SpannerDatabaseIamBindingOutput {
	return o
}

func (o SpannerDatabaseIamBindingOutput) ToSpannerDatabaseIamBindingOutputWithContext(ctx context.Context) SpannerDatabaseIamBindingOutput {
	return o
}

func (o SpannerDatabaseIamBindingOutput) Condition() SpannerDatabaseIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) SpannerDatabaseIamBindingConditionPtrOutput { return v.Condition }).(SpannerDatabaseIamBindingConditionPtrOutput)
}

func (o SpannerDatabaseIamBindingOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

func (o SpannerDatabaseIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SpannerDatabaseIamBindingOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o SpannerDatabaseIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o SpannerDatabaseIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SpannerDatabaseIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SpannerDatabaseIamBindingOutput) SpannerDatabaseIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpannerDatabaseIamBinding) pulumi.StringOutput { return v.SpannerDatabaseIamBindingId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerDatabaseIamBindingInput)(nil)).Elem(), &SpannerDatabaseIamBinding{})
	pulumi.RegisterOutputType(SpannerDatabaseIamBindingOutput{})
}
