// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Batchings struct {
	EnableBatching *bool   `pulumi:"enableBatching"`
	SendAfter      *string `pulumi:"sendAfter"`
}

// BatchingsInput is an input type that accepts BatchingsArgs and BatchingsOutput values.
// You can construct a concrete instance of `BatchingsInput` via:
//
//	BatchingsArgs{...}
type BatchingsInput interface {
	pulumi.Input

	ToBatchingsOutput() BatchingsOutput
	ToBatchingsOutputWithContext(context.Context) BatchingsOutput
}

type BatchingsArgs struct {
	EnableBatching pulumi.BoolPtrInput   `pulumi:"enableBatching"`
	SendAfter      pulumi.StringPtrInput `pulumi:"sendAfter"`
}

func (BatchingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Batchings)(nil)).Elem()
}

func (i BatchingsArgs) ToBatchingsOutput() BatchingsOutput {
	return i.ToBatchingsOutputWithContext(context.Background())
}

func (i BatchingsArgs) ToBatchingsOutputWithContext(ctx context.Context) BatchingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchingsOutput)
}

// BatchingsArrayInput is an input type that accepts BatchingsArray and BatchingsArrayOutput values.
// You can construct a concrete instance of `BatchingsArrayInput` via:
//
//	BatchingsArray{ BatchingsArgs{...} }
type BatchingsArrayInput interface {
	pulumi.Input

	ToBatchingsArrayOutput() BatchingsArrayOutput
	ToBatchingsArrayOutputWithContext(context.Context) BatchingsArrayOutput
}

type BatchingsArray []BatchingsInput

func (BatchingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Batchings)(nil)).Elem()
}

func (i BatchingsArray) ToBatchingsArrayOutput() BatchingsArrayOutput {
	return i.ToBatchingsArrayOutputWithContext(context.Background())
}

func (i BatchingsArray) ToBatchingsArrayOutputWithContext(ctx context.Context) BatchingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchingsArrayOutput)
}

type BatchingsOutput struct{ *pulumi.OutputState }

func (BatchingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Batchings)(nil)).Elem()
}

func (o BatchingsOutput) ToBatchingsOutput() BatchingsOutput {
	return o
}

func (o BatchingsOutput) ToBatchingsOutputWithContext(ctx context.Context) BatchingsOutput {
	return o
}

func (o BatchingsOutput) EnableBatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Batchings) *bool { return v.EnableBatching }).(pulumi.BoolPtrOutput)
}

func (o BatchingsOutput) SendAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Batchings) *string { return v.SendAfter }).(pulumi.StringPtrOutput)
}

type BatchingsArrayOutput struct{ *pulumi.OutputState }

func (BatchingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Batchings)(nil)).Elem()
}

func (o BatchingsArrayOutput) ToBatchingsArrayOutput() BatchingsArrayOutput {
	return o
}

func (o BatchingsArrayOutput) ToBatchingsArrayOutputWithContext(ctx context.Context) BatchingsArrayOutput {
	return o
}

func (o BatchingsArrayOutput) Index(i pulumi.IntInput) BatchingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Batchings {
		return vs[0].([]Batchings)[vs[1].(int)]
	}).(BatchingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BatchingsInput)(nil)).Elem(), BatchingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchingsArrayInput)(nil)).Elem(), BatchingsArray{})
	pulumi.RegisterOutputType(BatchingsOutput{})
	pulumi.RegisterOutputType(BatchingsArrayOutput{})
}
