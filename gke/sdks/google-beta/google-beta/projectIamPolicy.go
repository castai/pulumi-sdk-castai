// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectIamPolicy struct {
	pulumi.CustomResourceState

	Etag               pulumi.StringOutput `pulumi:"etag"`
	PolicyData         pulumi.StringOutput `pulumi:"policyData"`
	Project            pulumi.StringOutput `pulumi:"project"`
	ProjectIamPolicyId pulumi.StringOutput `pulumi:"projectIamPolicyId"`
}

// NewProjectIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewProjectIamPolicy(ctx *pulumi.Context,
	name string, args *ProjectIamPolicyArgs, opts ...pulumi.ResourceOption) (*ProjectIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/projectIamPolicy:ProjectIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectIamPolicy gets an existing ProjectIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectIamPolicyState, opts ...pulumi.ResourceOption) (*ProjectIamPolicy, error) {
	var resource ProjectIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/projectIamPolicy:ProjectIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectIamPolicy resources.
type projectIamPolicyState struct {
	Etag               *string `pulumi:"etag"`
	PolicyData         *string `pulumi:"policyData"`
	Project            *string `pulumi:"project"`
	ProjectIamPolicyId *string `pulumi:"projectIamPolicyId"`
}

type ProjectIamPolicyState struct {
	Etag               pulumi.StringPtrInput
	PolicyData         pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
	ProjectIamPolicyId pulumi.StringPtrInput
}

func (ProjectIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamPolicyState)(nil)).Elem()
}

type projectIamPolicyArgs struct {
	PolicyData         string  `pulumi:"policyData"`
	Project            string  `pulumi:"project"`
	ProjectIamPolicyId *string `pulumi:"projectIamPolicyId"`
}

// The set of arguments for constructing a ProjectIamPolicy resource.
type ProjectIamPolicyArgs struct {
	PolicyData         pulumi.StringInput
	Project            pulumi.StringInput
	ProjectIamPolicyId pulumi.StringPtrInput
}

func (ProjectIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectIamPolicyArgs)(nil)).Elem()
}

type ProjectIamPolicyInput interface {
	pulumi.Input

	ToProjectIamPolicyOutput() ProjectIamPolicyOutput
	ToProjectIamPolicyOutputWithContext(ctx context.Context) ProjectIamPolicyOutput
}

func (*ProjectIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamPolicy)(nil)).Elem()
}

func (i *ProjectIamPolicy) ToProjectIamPolicyOutput() ProjectIamPolicyOutput {
	return i.ToProjectIamPolicyOutputWithContext(context.Background())
}

func (i *ProjectIamPolicy) ToProjectIamPolicyOutputWithContext(ctx context.Context) ProjectIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIamPolicyOutput)
}

type ProjectIamPolicyOutput struct{ *pulumi.OutputState }

func (ProjectIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIamPolicy)(nil)).Elem()
}

func (o ProjectIamPolicyOutput) ToProjectIamPolicyOutput() ProjectIamPolicyOutput {
	return o
}

func (o ProjectIamPolicyOutput) ToProjectIamPolicyOutputWithContext(ctx context.Context) ProjectIamPolicyOutput {
	return o
}

func (o ProjectIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ProjectIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ProjectIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectIamPolicyOutput) ProjectIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectIamPolicy) pulumi.StringOutput { return v.ProjectIamPolicyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIamPolicyInput)(nil)).Elem(), &ProjectIamPolicy{})
	pulumi.RegisterOutputType(ProjectIamPolicyOutput{})
}
