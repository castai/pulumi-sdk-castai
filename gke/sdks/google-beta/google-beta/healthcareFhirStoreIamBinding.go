// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HealthcareFhirStoreIamBinding struct {
	pulumi.CustomResourceState

	Condition                       HealthcareFhirStoreIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                            pulumi.StringOutput                             `pulumi:"etag"`
	FhirStoreId                     pulumi.StringOutput                             `pulumi:"fhirStoreId"`
	HealthcareFhirStoreIamBindingId pulumi.StringOutput                             `pulumi:"healthcareFhirStoreIamBindingId"`
	Members                         pulumi.StringArrayOutput                        `pulumi:"members"`
	Role                            pulumi.StringOutput                             `pulumi:"role"`
}

// NewHealthcareFhirStoreIamBinding registers a new resource with the given unique name, arguments, and options.
func NewHealthcareFhirStoreIamBinding(ctx *pulumi.Context,
	name string, args *HealthcareFhirStoreIamBindingArgs, opts ...pulumi.ResourceOption) (*HealthcareFhirStoreIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FhirStoreId == nil {
		return nil, errors.New("invalid value for required argument 'FhirStoreId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HealthcareFhirStoreIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/healthcareFhirStoreIamBinding:HealthcareFhirStoreIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcareFhirStoreIamBinding gets an existing HealthcareFhirStoreIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcareFhirStoreIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcareFhirStoreIamBindingState, opts ...pulumi.ResourceOption) (*HealthcareFhirStoreIamBinding, error) {
	var resource HealthcareFhirStoreIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/healthcareFhirStoreIamBinding:HealthcareFhirStoreIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthcareFhirStoreIamBinding resources.
type healthcareFhirStoreIamBindingState struct {
	Condition                       *HealthcareFhirStoreIamBindingCondition `pulumi:"condition"`
	Etag                            *string                                 `pulumi:"etag"`
	FhirStoreId                     *string                                 `pulumi:"fhirStoreId"`
	HealthcareFhirStoreIamBindingId *string                                 `pulumi:"healthcareFhirStoreIamBindingId"`
	Members                         []string                                `pulumi:"members"`
	Role                            *string                                 `pulumi:"role"`
}

type HealthcareFhirStoreIamBindingState struct {
	Condition                       HealthcareFhirStoreIamBindingConditionPtrInput
	Etag                            pulumi.StringPtrInput
	FhirStoreId                     pulumi.StringPtrInput
	HealthcareFhirStoreIamBindingId pulumi.StringPtrInput
	Members                         pulumi.StringArrayInput
	Role                            pulumi.StringPtrInput
}

func (HealthcareFhirStoreIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareFhirStoreIamBindingState)(nil)).Elem()
}

type healthcareFhirStoreIamBindingArgs struct {
	Condition                       *HealthcareFhirStoreIamBindingCondition `pulumi:"condition"`
	FhirStoreId                     string                                  `pulumi:"fhirStoreId"`
	HealthcareFhirStoreIamBindingId *string                                 `pulumi:"healthcareFhirStoreIamBindingId"`
	Members                         []string                                `pulumi:"members"`
	Role                            string                                  `pulumi:"role"`
}

// The set of arguments for constructing a HealthcareFhirStoreIamBinding resource.
type HealthcareFhirStoreIamBindingArgs struct {
	Condition                       HealthcareFhirStoreIamBindingConditionPtrInput
	FhirStoreId                     pulumi.StringInput
	HealthcareFhirStoreIamBindingId pulumi.StringPtrInput
	Members                         pulumi.StringArrayInput
	Role                            pulumi.StringInput
}

func (HealthcareFhirStoreIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcareFhirStoreIamBindingArgs)(nil)).Elem()
}

type HealthcareFhirStoreIamBindingInput interface {
	pulumi.Input

	ToHealthcareFhirStoreIamBindingOutput() HealthcareFhirStoreIamBindingOutput
	ToHealthcareFhirStoreIamBindingOutputWithContext(ctx context.Context) HealthcareFhirStoreIamBindingOutput
}

func (*HealthcareFhirStoreIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareFhirStoreIamBinding)(nil)).Elem()
}

func (i *HealthcareFhirStoreIamBinding) ToHealthcareFhirStoreIamBindingOutput() HealthcareFhirStoreIamBindingOutput {
	return i.ToHealthcareFhirStoreIamBindingOutputWithContext(context.Background())
}

func (i *HealthcareFhirStoreIamBinding) ToHealthcareFhirStoreIamBindingOutputWithContext(ctx context.Context) HealthcareFhirStoreIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcareFhirStoreIamBindingOutput)
}

type HealthcareFhirStoreIamBindingOutput struct{ *pulumi.OutputState }

func (HealthcareFhirStoreIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthcareFhirStoreIamBinding)(nil)).Elem()
}

func (o HealthcareFhirStoreIamBindingOutput) ToHealthcareFhirStoreIamBindingOutput() HealthcareFhirStoreIamBindingOutput {
	return o
}

func (o HealthcareFhirStoreIamBindingOutput) ToHealthcareFhirStoreIamBindingOutputWithContext(ctx context.Context) HealthcareFhirStoreIamBindingOutput {
	return o
}

func (o HealthcareFhirStoreIamBindingOutput) Condition() HealthcareFhirStoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *HealthcareFhirStoreIamBinding) HealthcareFhirStoreIamBindingConditionPtrOutput {
		return v.Condition
	}).(HealthcareFhirStoreIamBindingConditionPtrOutput)
}

func (o HealthcareFhirStoreIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStoreIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o HealthcareFhirStoreIamBindingOutput) FhirStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStoreIamBinding) pulumi.StringOutput { return v.FhirStoreId }).(pulumi.StringOutput)
}

func (o HealthcareFhirStoreIamBindingOutput) HealthcareFhirStoreIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStoreIamBinding) pulumi.StringOutput { return v.HealthcareFhirStoreIamBindingId }).(pulumi.StringOutput)
}

func (o HealthcareFhirStoreIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HealthcareFhirStoreIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o HealthcareFhirStoreIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *HealthcareFhirStoreIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcareFhirStoreIamBindingInput)(nil)).Elem(), &HealthcareFhirStoreIamBinding{})
	pulumi.RegisterOutputType(HealthcareFhirStoreIamBindingOutput{})
}
