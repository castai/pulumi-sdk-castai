// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeRouterNat struct {
	pulumi.CustomResourceState

	// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not
	// specified, then the current project-level default tier is used. Possible values: ["PREMIUM", "STANDARD"]
	AutoNetworkTier    pulumi.StringOutput `pulumi:"autoNetworkTier"`
	ComputeRouterNatId pulumi.StringOutput `pulumi:"computeRouterNatId"`
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
	// the NAT.
	DrainNatIps pulumi.StringArrayOutput `pulumi:"drainNatIps"`
	// Enable Dynamic Port Allocation. If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or
	// equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. If
	// maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm. If maxPortsPerVm is not
	// set, a maximum of 65536 ports will be allocated to a VM from this NAT config. Mutually exclusive with
	// enableEndpointIndependentMapping.
	EnableDynamicPortAllocation pulumi.BoolOutput `pulumi:"enableDynamicPortAllocation"`
	// Enable endpoint independent mapping. For more information see the [official
	// documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping pulumi.BoolOutput `pulumi:"enableEndpointIndependentMapping"`
	// Specifies the endpoint Types supported by the NAT Gateway. Supported values include: 'ENDPOINT_TYPE_VM',
	// 'ENDPOINT_TYPE_SWG', 'ENDPOINT_TYPE_MANAGED_PROXY_LB'.
	EndpointTypes pulumi.StringArrayOutput `pulumi:"endpointTypes"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.Float64PtrOutput `pulumi:"icmpIdleTimeoutSec"`
	// Self-links of NAT IPs to be used as initial value for creation alongside a RouterNatAddress resource. Conflicts with
	// natIps and drainNatIps. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	InitialNatIps pulumi.StringArrayOutput `pulumi:"initialNatIps"`
	// Configuration for logging on NAT
	LogConfig ComputeRouterNatLogConfigPtrOutput `pulumi:"logConfig"`
	// Maximum number of ports allocated to a VM from this NAT. This field can only be set when enableDynamicPortAllocation is
	// enabled.
	MaxPortsPerVm pulumi.Float64PtrOutput `pulumi:"maxPortsPerVm"`
	// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port
	// allocation if not set.
	MinPortsPerVm pulumi.Float64Output `pulumi:"minPortsPerVm"`
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name pulumi.StringOutput `pulumi:"name"`
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY",
	// "AUTO_ONLY"]
	NatIpAllocateOption pulumi.StringPtrOutput `pulumi:"natIpAllocateOption"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY. If this field is used alongside with a
	// count created list of address resources 'google_compute_address.foobar.*.self_link', the access level resource for the
	// address resource must have a 'lifecycle' block with 'create_before_destroy = true' so the number of resources can be
	// increased/decreased without triggering the 'resourceInUseByAnotherResource' error.
	NatIps  pulumi.StringArrayOutput `pulumi:"natIps"`
	Project pulumi.StringOutput      `pulumi:"project"`
	// Region where the router and NAT reside.
	Region pulumi.StringOutput `pulumi:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	Router pulumi.StringOutput `pulumi:"router"`
	// A list of rules associated with this NAT.
	Rules ComputeRouterNatRuleArrayOutput `pulumi:"rules"`
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
	// "LIST_OF_SUBNETWORKS"]
	SourceSubnetworkIpRangesToNat pulumi.StringOutput `pulumi:"sourceSubnetworkIpRangesToNat"`
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks ComputeRouterNatSubnetworkArrayOutput `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.Float64PtrOutput `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec pulumi.Float64PtrOutput `pulumi:"tcpTimeWaitTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.Float64PtrOutput           `pulumi:"tcpTransitoryIdleTimeoutSec"`
	Timeouts                    ComputeRouterNatTimeoutsPtrOutput `pulumi:"timeouts"`
	// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. If
	// 'PUBLIC' NAT used for public IP translation. If 'PRIVATE' NAT used for private IP translation. Default value: "PUBLIC"
	// Possible values: ["PUBLIC", "PRIVATE"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.Float64PtrOutput `pulumi:"udpIdleTimeoutSec"`
}

// NewComputeRouterNat registers a new resource with the given unique name, arguments, and options.
func NewComputeRouterNat(ctx *pulumi.Context,
	name string, args *ComputeRouterNatArgs, opts ...pulumi.ResourceOption) (*ComputeRouterNat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Router == nil {
		return nil, errors.New("invalid value for required argument 'Router'")
	}
	if args.SourceSubnetworkIpRangesToNat == nil {
		return nil, errors.New("invalid value for required argument 'SourceSubnetworkIpRangesToNat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeRouterNat
	err = ctx.RegisterPackageResource("google-beta:index/computeRouterNat:ComputeRouterNat", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeRouterNat gets an existing ComputeRouterNat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeRouterNat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeRouterNatState, opts ...pulumi.ResourceOption) (*ComputeRouterNat, error) {
	var resource ComputeRouterNat
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeRouterNat:ComputeRouterNat", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeRouterNat resources.
type computeRouterNatState struct {
	// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not
	// specified, then the current project-level default tier is used. Possible values: ["PREMIUM", "STANDARD"]
	AutoNetworkTier    *string `pulumi:"autoNetworkTier"`
	ComputeRouterNatId *string `pulumi:"computeRouterNatId"`
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
	// the NAT.
	DrainNatIps []string `pulumi:"drainNatIps"`
	// Enable Dynamic Port Allocation. If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or
	// equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. If
	// maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm. If maxPortsPerVm is not
	// set, a maximum of 65536 ports will be allocated to a VM from this NAT config. Mutually exclusive with
	// enableEndpointIndependentMapping.
	EnableDynamicPortAllocation *bool `pulumi:"enableDynamicPortAllocation"`
	// Enable endpoint independent mapping. For more information see the [official
	// documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping *bool `pulumi:"enableEndpointIndependentMapping"`
	// Specifies the endpoint Types supported by the NAT Gateway. Supported values include: 'ENDPOINT_TYPE_VM',
	// 'ENDPOINT_TYPE_SWG', 'ENDPOINT_TYPE_MANAGED_PROXY_LB'.
	EndpointTypes []string `pulumi:"endpointTypes"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec *float64 `pulumi:"icmpIdleTimeoutSec"`
	// Self-links of NAT IPs to be used as initial value for creation alongside a RouterNatAddress resource. Conflicts with
	// natIps and drainNatIps. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	InitialNatIps []string `pulumi:"initialNatIps"`
	// Configuration for logging on NAT
	LogConfig *ComputeRouterNatLogConfig `pulumi:"logConfig"`
	// Maximum number of ports allocated to a VM from this NAT. This field can only be set when enableDynamicPortAllocation is
	// enabled.
	MaxPortsPerVm *float64 `pulumi:"maxPortsPerVm"`
	// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port
	// allocation if not set.
	MinPortsPerVm *float64 `pulumi:"minPortsPerVm"`
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name *string `pulumi:"name"`
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY",
	// "AUTO_ONLY"]
	NatIpAllocateOption *string `pulumi:"natIpAllocateOption"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY. If this field is used alongside with a
	// count created list of address resources 'google_compute_address.foobar.*.self_link', the access level resource for the
	// address resource must have a 'lifecycle' block with 'create_before_destroy = true' so the number of resources can be
	// increased/decreased without triggering the 'resourceInUseByAnotherResource' error.
	NatIps  []string `pulumi:"natIps"`
	Project *string  `pulumi:"project"`
	// Region where the router and NAT reside.
	Region *string `pulumi:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	Router *string `pulumi:"router"`
	// A list of rules associated with this NAT.
	Rules []ComputeRouterNatRule `pulumi:"rules"`
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
	// "LIST_OF_SUBNETWORKS"]
	SourceSubnetworkIpRangesToNat *string `pulumi:"sourceSubnetworkIpRangesToNat"`
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks []ComputeRouterNatSubnetwork `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec *float64 `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec *float64 `pulumi:"tcpTimeWaitTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec *float64                  `pulumi:"tcpTransitoryIdleTimeoutSec"`
	Timeouts                    *ComputeRouterNatTimeouts `pulumi:"timeouts"`
	// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. If
	// 'PUBLIC' NAT used for public IP translation. If 'PRIVATE' NAT used for private IP translation. Default value: "PUBLIC"
	// Possible values: ["PUBLIC", "PRIVATE"]
	Type *string `pulumi:"type"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec *float64 `pulumi:"udpIdleTimeoutSec"`
}

type ComputeRouterNatState struct {
	// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not
	// specified, then the current project-level default tier is used. Possible values: ["PREMIUM", "STANDARD"]
	AutoNetworkTier    pulumi.StringPtrInput
	ComputeRouterNatId pulumi.StringPtrInput
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
	// the NAT.
	DrainNatIps pulumi.StringArrayInput
	// Enable Dynamic Port Allocation. If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or
	// equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. If
	// maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm. If maxPortsPerVm is not
	// set, a maximum of 65536 ports will be allocated to a VM from this NAT config. Mutually exclusive with
	// enableEndpointIndependentMapping.
	EnableDynamicPortAllocation pulumi.BoolPtrInput
	// Enable endpoint independent mapping. For more information see the [official
	// documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping pulumi.BoolPtrInput
	// Specifies the endpoint Types supported by the NAT Gateway. Supported values include: 'ENDPOINT_TYPE_VM',
	// 'ENDPOINT_TYPE_SWG', 'ENDPOINT_TYPE_MANAGED_PROXY_LB'.
	EndpointTypes pulumi.StringArrayInput
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.Float64PtrInput
	// Self-links of NAT IPs to be used as initial value for creation alongside a RouterNatAddress resource. Conflicts with
	// natIps and drainNatIps. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	InitialNatIps pulumi.StringArrayInput
	// Configuration for logging on NAT
	LogConfig ComputeRouterNatLogConfigPtrInput
	// Maximum number of ports allocated to a VM from this NAT. This field can only be set when enableDynamicPortAllocation is
	// enabled.
	MaxPortsPerVm pulumi.Float64PtrInput
	// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port
	// allocation if not set.
	MinPortsPerVm pulumi.Float64PtrInput
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name pulumi.StringPtrInput
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY",
	// "AUTO_ONLY"]
	NatIpAllocateOption pulumi.StringPtrInput
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY. If this field is used alongside with a
	// count created list of address resources 'google_compute_address.foobar.*.self_link', the access level resource for the
	// address resource must have a 'lifecycle' block with 'create_before_destroy = true' so the number of resources can be
	// increased/decreased without triggering the 'resourceInUseByAnotherResource' error.
	NatIps  pulumi.StringArrayInput
	Project pulumi.StringPtrInput
	// Region where the router and NAT reside.
	Region pulumi.StringPtrInput
	// The name of the Cloud Router in which this NAT will be configured.
	Router pulumi.StringPtrInput
	// A list of rules associated with this NAT.
	Rules ComputeRouterNatRuleArrayInput
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
	// "LIST_OF_SUBNETWORKS"]
	SourceSubnetworkIpRangesToNat pulumi.StringPtrInput
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks ComputeRouterNatSubnetworkArrayInput
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.Float64PtrInput
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec pulumi.Float64PtrInput
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.Float64PtrInput
	Timeouts                    ComputeRouterNatTimeoutsPtrInput
	// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. If
	// 'PUBLIC' NAT used for public IP translation. If 'PRIVATE' NAT used for private IP translation. Default value: "PUBLIC"
	// Possible values: ["PUBLIC", "PRIVATE"]
	Type pulumi.StringPtrInput
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.Float64PtrInput
}

func (ComputeRouterNatState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeRouterNatState)(nil)).Elem()
}

type computeRouterNatArgs struct {
	// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not
	// specified, then the current project-level default tier is used. Possible values: ["PREMIUM", "STANDARD"]
	AutoNetworkTier    *string `pulumi:"autoNetworkTier"`
	ComputeRouterNatId *string `pulumi:"computeRouterNatId"`
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
	// the NAT.
	DrainNatIps []string `pulumi:"drainNatIps"`
	// Enable Dynamic Port Allocation. If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or
	// equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. If
	// maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm. If maxPortsPerVm is not
	// set, a maximum of 65536 ports will be allocated to a VM from this NAT config. Mutually exclusive with
	// enableEndpointIndependentMapping.
	EnableDynamicPortAllocation *bool `pulumi:"enableDynamicPortAllocation"`
	// Enable endpoint independent mapping. For more information see the [official
	// documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping *bool `pulumi:"enableEndpointIndependentMapping"`
	// Specifies the endpoint Types supported by the NAT Gateway. Supported values include: 'ENDPOINT_TYPE_VM',
	// 'ENDPOINT_TYPE_SWG', 'ENDPOINT_TYPE_MANAGED_PROXY_LB'.
	EndpointTypes []string `pulumi:"endpointTypes"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec *float64 `pulumi:"icmpIdleTimeoutSec"`
	// Self-links of NAT IPs to be used as initial value for creation alongside a RouterNatAddress resource. Conflicts with
	// natIps and drainNatIps. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	InitialNatIps []string `pulumi:"initialNatIps"`
	// Configuration for logging on NAT
	LogConfig *ComputeRouterNatLogConfig `pulumi:"logConfig"`
	// Maximum number of ports allocated to a VM from this NAT. This field can only be set when enableDynamicPortAllocation is
	// enabled.
	MaxPortsPerVm *float64 `pulumi:"maxPortsPerVm"`
	// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port
	// allocation if not set.
	MinPortsPerVm *float64 `pulumi:"minPortsPerVm"`
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name *string `pulumi:"name"`
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY",
	// "AUTO_ONLY"]
	NatIpAllocateOption *string `pulumi:"natIpAllocateOption"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY. If this field is used alongside with a
	// count created list of address resources 'google_compute_address.foobar.*.self_link', the access level resource for the
	// address resource must have a 'lifecycle' block with 'create_before_destroy = true' so the number of resources can be
	// increased/decreased without triggering the 'resourceInUseByAnotherResource' error.
	NatIps  []string `pulumi:"natIps"`
	Project *string  `pulumi:"project"`
	// Region where the router and NAT reside.
	Region *string `pulumi:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	Router string `pulumi:"router"`
	// A list of rules associated with this NAT.
	Rules []ComputeRouterNatRule `pulumi:"rules"`
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
	// "LIST_OF_SUBNETWORKS"]
	SourceSubnetworkIpRangesToNat string `pulumi:"sourceSubnetworkIpRangesToNat"`
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks []ComputeRouterNatSubnetwork `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec *float64 `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec *float64 `pulumi:"tcpTimeWaitTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec *float64                  `pulumi:"tcpTransitoryIdleTimeoutSec"`
	Timeouts                    *ComputeRouterNatTimeouts `pulumi:"timeouts"`
	// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. If
	// 'PUBLIC' NAT used for public IP translation. If 'PRIVATE' NAT used for private IP translation. Default value: "PUBLIC"
	// Possible values: ["PUBLIC", "PRIVATE"]
	Type *string `pulumi:"type"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec *float64 `pulumi:"udpIdleTimeoutSec"`
}

// The set of arguments for constructing a ComputeRouterNat resource.
type ComputeRouterNatArgs struct {
	// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not
	// specified, then the current project-level default tier is used. Possible values: ["PREMIUM", "STANDARD"]
	AutoNetworkTier    pulumi.StringPtrInput
	ComputeRouterNatId pulumi.StringPtrInput
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
	// the NAT.
	DrainNatIps pulumi.StringArrayInput
	// Enable Dynamic Port Allocation. If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or
	// equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. If
	// maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm. If maxPortsPerVm is not
	// set, a maximum of 65536 ports will be allocated to a VM from this NAT config. Mutually exclusive with
	// enableEndpointIndependentMapping.
	EnableDynamicPortAllocation pulumi.BoolPtrInput
	// Enable endpoint independent mapping. For more information see the [official
	// documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping pulumi.BoolPtrInput
	// Specifies the endpoint Types supported by the NAT Gateway. Supported values include: 'ENDPOINT_TYPE_VM',
	// 'ENDPOINT_TYPE_SWG', 'ENDPOINT_TYPE_MANAGED_PROXY_LB'.
	EndpointTypes pulumi.StringArrayInput
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.Float64PtrInput
	// Self-links of NAT IPs to be used as initial value for creation alongside a RouterNatAddress resource. Conflicts with
	// natIps and drainNatIps. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	InitialNatIps pulumi.StringArrayInput
	// Configuration for logging on NAT
	LogConfig ComputeRouterNatLogConfigPtrInput
	// Maximum number of ports allocated to a VM from this NAT. This field can only be set when enableDynamicPortAllocation is
	// enabled.
	MaxPortsPerVm pulumi.Float64PtrInput
	// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port
	// allocation if not set.
	MinPortsPerVm pulumi.Float64PtrInput
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name pulumi.StringPtrInput
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY",
	// "AUTO_ONLY"]
	NatIpAllocateOption pulumi.StringPtrInput
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY. If this field is used alongside with a
	// count created list of address resources 'google_compute_address.foobar.*.self_link', the access level resource for the
	// address resource must have a 'lifecycle' block with 'create_before_destroy = true' so the number of resources can be
	// increased/decreased without triggering the 'resourceInUseByAnotherResource' error.
	NatIps  pulumi.StringArrayInput
	Project pulumi.StringPtrInput
	// Region where the router and NAT reside.
	Region pulumi.StringPtrInput
	// The name of the Cloud Router in which this NAT will be configured.
	Router pulumi.StringInput
	// A list of rules associated with this NAT.
	Rules ComputeRouterNatRuleArrayInput
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
	// "LIST_OF_SUBNETWORKS"]
	SourceSubnetworkIpRangesToNat pulumi.StringInput
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks ComputeRouterNatSubnetworkArrayInput
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.Float64PtrInput
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec pulumi.Float64PtrInput
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.Float64PtrInput
	Timeouts                    ComputeRouterNatTimeoutsPtrInput
	// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. If
	// 'PUBLIC' NAT used for public IP translation. If 'PRIVATE' NAT used for private IP translation. Default value: "PUBLIC"
	// Possible values: ["PUBLIC", "PRIVATE"]
	Type pulumi.StringPtrInput
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.Float64PtrInput
}

func (ComputeRouterNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeRouterNatArgs)(nil)).Elem()
}

type ComputeRouterNatInput interface {
	pulumi.Input

	ToComputeRouterNatOutput() ComputeRouterNatOutput
	ToComputeRouterNatOutputWithContext(ctx context.Context) ComputeRouterNatOutput
}

func (*ComputeRouterNat) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRouterNat)(nil)).Elem()
}

func (i *ComputeRouterNat) ToComputeRouterNatOutput() ComputeRouterNatOutput {
	return i.ToComputeRouterNatOutputWithContext(context.Background())
}

func (i *ComputeRouterNat) ToComputeRouterNatOutputWithContext(ctx context.Context) ComputeRouterNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRouterNatOutput)
}

type ComputeRouterNatOutput struct{ *pulumi.OutputState }

func (ComputeRouterNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRouterNat)(nil)).Elem()
}

func (o ComputeRouterNatOutput) ToComputeRouterNatOutput() ComputeRouterNatOutput {
	return o
}

func (o ComputeRouterNatOutput) ToComputeRouterNatOutputWithContext(ctx context.Context) ComputeRouterNatOutput {
	return o
}

// The network tier to use when automatically reserving NAT IP addresses. Must be one of: PREMIUM, STANDARD. If not
// specified, then the current project-level default tier is used. Possible values: ["PREMIUM", "STANDARD"]
func (o ComputeRouterNatOutput) AutoNetworkTier() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.AutoNetworkTier }).(pulumi.StringOutput)
}

func (o ComputeRouterNatOutput) ComputeRouterNatId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.ComputeRouterNatId }).(pulumi.StringOutput)
}

// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
// the NAT.
func (o ComputeRouterNatOutput) DrainNatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringArrayOutput { return v.DrainNatIps }).(pulumi.StringArrayOutput)
}

// Enable Dynamic Port Allocation. If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or
// equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. If
// maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm. If maxPortsPerVm is not
// set, a maximum of 65536 ports will be allocated to a VM from this NAT config. Mutually exclusive with
// enableEndpointIndependentMapping.
func (o ComputeRouterNatOutput) EnableDynamicPortAllocation() pulumi.BoolOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.BoolOutput { return v.EnableDynamicPortAllocation }).(pulumi.BoolOutput)
}

// Enable endpoint independent mapping. For more information see the [official
// documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
func (o ComputeRouterNatOutput) EnableEndpointIndependentMapping() pulumi.BoolOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.BoolOutput { return v.EnableEndpointIndependentMapping }).(pulumi.BoolOutput)
}

// Specifies the endpoint Types supported by the NAT Gateway. Supported values include: 'ENDPOINT_TYPE_VM',
// 'ENDPOINT_TYPE_SWG', 'ENDPOINT_TYPE_MANAGED_PROXY_LB'.
func (o ComputeRouterNatOutput) EndpointTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringArrayOutput { return v.EndpointTypes }).(pulumi.StringArrayOutput)
}

// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
func (o ComputeRouterNatOutput) IcmpIdleTimeoutSec() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64PtrOutput { return v.IcmpIdleTimeoutSec }).(pulumi.Float64PtrOutput)
}

// Self-links of NAT IPs to be used as initial value for creation alongside a RouterNatAddress resource. Conflicts with
// natIps and drainNatIps. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
func (o ComputeRouterNatOutput) InitialNatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringArrayOutput { return v.InitialNatIps }).(pulumi.StringArrayOutput)
}

// Configuration for logging on NAT
func (o ComputeRouterNatOutput) LogConfig() ComputeRouterNatLogConfigPtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) ComputeRouterNatLogConfigPtrOutput { return v.LogConfig }).(ComputeRouterNatLogConfigPtrOutput)
}

// Maximum number of ports allocated to a VM from this NAT. This field can only be set when enableDynamicPortAllocation is
// enabled.
func (o ComputeRouterNatOutput) MaxPortsPerVm() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64PtrOutput { return v.MaxPortsPerVm }).(pulumi.Float64PtrOutput)
}

// Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port
// allocation if not set.
func (o ComputeRouterNatOutput) MinPortsPerVm() pulumi.Float64Output {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64Output { return v.MinPortsPerVm }).(pulumi.Float64Output)
}

// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
func (o ComputeRouterNatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY",
// "AUTO_ONLY"]
func (o ComputeRouterNatOutput) NatIpAllocateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringPtrOutput { return v.NatIpAllocateOption }).(pulumi.StringPtrOutput)
}

// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY. If this field is used alongside with a
// count created list of address resources 'google_compute_address.foobar.*.self_link', the access level resource for the
// address resource must have a 'lifecycle' block with 'create_before_destroy = true' so the number of resources can be
// increased/decreased without triggering the 'resourceInUseByAnotherResource' error.
func (o ComputeRouterNatOutput) NatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringArrayOutput { return v.NatIps }).(pulumi.StringArrayOutput)
}

func (o ComputeRouterNatOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the router and NAT reside.
func (o ComputeRouterNatOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The name of the Cloud Router in which this NAT will be configured.
func (o ComputeRouterNatOutput) Router() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.Router }).(pulumi.StringOutput)
}

// A list of rules associated with this NAT.
func (o ComputeRouterNatOutput) Rules() ComputeRouterNatRuleArrayOutput {
	return o.ApplyT(func(v *ComputeRouterNat) ComputeRouterNatRuleArrayOutput { return v.Rules }).(ComputeRouterNatRuleArrayOutput)
}

// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
// network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES",
// "LIST_OF_SUBNETWORKS"]
func (o ComputeRouterNatOutput) SourceSubnetworkIpRangesToNat() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringOutput { return v.SourceSubnetworkIpRangesToNat }).(pulumi.StringOutput)
}

// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
// 'LIST_OF_SUBNETWORKS'
func (o ComputeRouterNatOutput) Subnetworks() ComputeRouterNatSubnetworkArrayOutput {
	return o.ApplyT(func(v *ComputeRouterNat) ComputeRouterNatSubnetworkArrayOutput { return v.Subnetworks }).(ComputeRouterNatSubnetworkArrayOutput)
}

// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
func (o ComputeRouterNatOutput) TcpEstablishedIdleTimeoutSec() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64PtrOutput { return v.TcpEstablishedIdleTimeoutSec }).(pulumi.Float64PtrOutput)
}

// Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
func (o ComputeRouterNatOutput) TcpTimeWaitTimeoutSec() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64PtrOutput { return v.TcpTimeWaitTimeoutSec }).(pulumi.Float64PtrOutput)
}

// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
func (o ComputeRouterNatOutput) TcpTransitoryIdleTimeoutSec() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64PtrOutput { return v.TcpTransitoryIdleTimeoutSec }).(pulumi.Float64PtrOutput)
}

func (o ComputeRouterNatOutput) Timeouts() ComputeRouterNatTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) ComputeRouterNatTimeoutsPtrOutput { return v.Timeouts }).(ComputeRouterNatTimeoutsPtrOutput)
}

// Indicates whether this NAT is used for public or private IP translation. If unspecified, it defaults to PUBLIC. If
// 'PUBLIC' NAT used for public IP translation. If 'PRIVATE' NAT used for private IP translation. Default value: "PUBLIC"
// Possible values: ["PUBLIC", "PRIVATE"]
func (o ComputeRouterNatOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
func (o ComputeRouterNatOutput) UdpIdleTimeoutSec() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeRouterNat) pulumi.Float64PtrOutput { return v.UdpIdleTimeoutSec }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeRouterNatInput)(nil)).Elem(), &ComputeRouterNat{})
	pulumi.RegisterOutputType(ComputeRouterNatOutput{})
}
