// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreIamBinding struct {
	pulumi.CustomResourceState

	Condition                        VertexAiFeaturestoreIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                             pulumi.StringOutput                              `pulumi:"etag"`
	Featurestore                     pulumi.StringOutput                              `pulumi:"featurestore"`
	Members                          pulumi.StringArrayOutput                         `pulumi:"members"`
	Project                          pulumi.StringOutput                              `pulumi:"project"`
	Region                           pulumi.StringOutput                              `pulumi:"region"`
	Role                             pulumi.StringOutput                              `pulumi:"role"`
	VertexAiFeaturestoreIamBindingId pulumi.StringOutput                              `pulumi:"vertexAiFeaturestoreIamBindingId"`
}

// NewVertexAiFeaturestoreIamBinding registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreIamBinding(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreIamBindingArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreIamBinding:VertexAiFeaturestoreIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreIamBinding gets an existing VertexAiFeaturestoreIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreIamBindingState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreIamBinding, error) {
	var resource VertexAiFeaturestoreIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreIamBinding:VertexAiFeaturestoreIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreIamBinding resources.
type vertexAiFeaturestoreIamBindingState struct {
	Condition                        *VertexAiFeaturestoreIamBindingCondition `pulumi:"condition"`
	Etag                             *string                                  `pulumi:"etag"`
	Featurestore                     *string                                  `pulumi:"featurestore"`
	Members                          []string                                 `pulumi:"members"`
	Project                          *string                                  `pulumi:"project"`
	Region                           *string                                  `pulumi:"region"`
	Role                             *string                                  `pulumi:"role"`
	VertexAiFeaturestoreIamBindingId *string                                  `pulumi:"vertexAiFeaturestoreIamBindingId"`
}

type VertexAiFeaturestoreIamBindingState struct {
	Condition                        VertexAiFeaturestoreIamBindingConditionPtrInput
	Etag                             pulumi.StringPtrInput
	Featurestore                     pulumi.StringPtrInput
	Members                          pulumi.StringArrayInput
	Project                          pulumi.StringPtrInput
	Region                           pulumi.StringPtrInput
	Role                             pulumi.StringPtrInput
	VertexAiFeaturestoreIamBindingId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreIamBindingState)(nil)).Elem()
}

type vertexAiFeaturestoreIamBindingArgs struct {
	Condition                        *VertexAiFeaturestoreIamBindingCondition `pulumi:"condition"`
	Featurestore                     string                                   `pulumi:"featurestore"`
	Members                          []string                                 `pulumi:"members"`
	Project                          *string                                  `pulumi:"project"`
	Region                           *string                                  `pulumi:"region"`
	Role                             string                                   `pulumi:"role"`
	VertexAiFeaturestoreIamBindingId *string                                  `pulumi:"vertexAiFeaturestoreIamBindingId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreIamBinding resource.
type VertexAiFeaturestoreIamBindingArgs struct {
	Condition                        VertexAiFeaturestoreIamBindingConditionPtrInput
	Featurestore                     pulumi.StringInput
	Members                          pulumi.StringArrayInput
	Project                          pulumi.StringPtrInput
	Region                           pulumi.StringPtrInput
	Role                             pulumi.StringInput
	VertexAiFeaturestoreIamBindingId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreIamBindingArgs)(nil)).Elem()
}

type VertexAiFeaturestoreIamBindingInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreIamBindingOutput() VertexAiFeaturestoreIamBindingOutput
	ToVertexAiFeaturestoreIamBindingOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamBindingOutput
}

func (*VertexAiFeaturestoreIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreIamBinding)(nil)).Elem()
}

func (i *VertexAiFeaturestoreIamBinding) ToVertexAiFeaturestoreIamBindingOutput() VertexAiFeaturestoreIamBindingOutput {
	return i.ToVertexAiFeaturestoreIamBindingOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreIamBinding) ToVertexAiFeaturestoreIamBindingOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreIamBindingOutput)
}

type VertexAiFeaturestoreIamBindingOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreIamBinding)(nil)).Elem()
}

func (o VertexAiFeaturestoreIamBindingOutput) ToVertexAiFeaturestoreIamBindingOutput() VertexAiFeaturestoreIamBindingOutput {
	return o
}

func (o VertexAiFeaturestoreIamBindingOutput) ToVertexAiFeaturestoreIamBindingOutputWithContext(ctx context.Context) VertexAiFeaturestoreIamBindingOutput {
	return o
}

func (o VertexAiFeaturestoreIamBindingOutput) Condition() VertexAiFeaturestoreIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) VertexAiFeaturestoreIamBindingConditionPtrOutput {
		return v.Condition
	}).(VertexAiFeaturestoreIamBindingConditionPtrOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreIamBindingOutput) VertexAiFeaturestoreIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreIamBinding) pulumi.StringOutput { return v.VertexAiFeaturestoreIamBindingId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreIamBindingInput)(nil)).Elem(), &VertexAiFeaturestoreIamBinding{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreIamBindingOutput{})
}
