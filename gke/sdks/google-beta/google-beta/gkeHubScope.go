// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeHubScope struct {
	pulumi.CustomResourceState

	// Time the Scope was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time the Scope was deleted in UTC.
	DeleteTime      pulumi.StringOutput    `pulumi:"deleteTime"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	GkeHubScopeId   pulumi.StringOutput    `pulumi:"gkeHubScopeId"`
	// Labels for this Scope. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The unique identifier of the scope
	Name pulumi.StringOutput `pulumi:"name"`
	// Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each
	// namespace under the Scope. Scope-level labels take precedence over Namespace-level labels ('namespace_labels' in the
	// Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapOutput `pulumi:"namespaceLabels"`
	Project         pulumi.StringOutput    `pulumi:"project"`
	// The client-provided identifier of the scope.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// State of the scope resource.
	States GkeHubScopeStateTypeArrayOutput `pulumi:"states"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput       `pulumi:"terraformLabels"`
	Timeouts        GkeHubScopeTimeoutsPtrOutput `pulumi:"timeouts"`
	// Google-generated UUID for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the Scope was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGkeHubScope registers a new resource with the given unique name, arguments, and options.
func NewGkeHubScope(ctx *pulumi.Context,
	name string, args *GkeHubScopeArgs, opts ...pulumi.ResourceOption) (*GkeHubScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeHubScope
	err = ctx.RegisterPackageResource("google-beta:index/gkeHubScope:GkeHubScope", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeHubScope gets an existing GkeHubScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeHubScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeHubScopeState, opts ...pulumi.ResourceOption) (*GkeHubScope, error) {
	var resource GkeHubScope
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/gkeHubScope:GkeHubScope", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeHubScope resources.
type gkeHubScopeState struct {
	// Time the Scope was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Time the Scope was deleted in UTC.
	DeleteTime      *string           `pulumi:"deleteTime"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	GkeHubScopeId   *string           `pulumi:"gkeHubScopeId"`
	// Labels for this Scope. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The unique identifier of the scope
	Name *string `pulumi:"name"`
	// Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each
	// namespace under the Scope. Scope-level labels take precedence over Namespace-level labels ('namespace_labels' in the
	// Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels map[string]string `pulumi:"namespaceLabels"`
	Project         *string           `pulumi:"project"`
	// The client-provided identifier of the scope.
	ScopeId *string `pulumi:"scopeId"`
	// State of the scope resource.
	States []GkeHubScopeStateType `pulumi:"states"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string    `pulumi:"terraformLabels"`
	Timeouts        *GkeHubScopeTimeouts `pulumi:"timeouts"`
	// Google-generated UUID for this resource.
	Uid *string `pulumi:"uid"`
	// Time the Scope was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type GkeHubScopeState struct {
	// Time the Scope was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Time the Scope was deleted in UTC.
	DeleteTime      pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	GkeHubScopeId   pulumi.StringPtrInput
	// Labels for this Scope. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The unique identifier of the scope
	Name pulumi.StringPtrInput
	// Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each
	// namespace under the Scope. Scope-level labels take precedence over Namespace-level labels ('namespace_labels' in the
	// Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapInput
	Project         pulumi.StringPtrInput
	// The client-provided identifier of the scope.
	ScopeId pulumi.StringPtrInput
	// State of the scope resource.
	States GkeHubScopeStateTypeArrayInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        GkeHubScopeTimeoutsPtrInput
	// Google-generated UUID for this resource.
	Uid pulumi.StringPtrInput
	// Time the Scope was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (GkeHubScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubScopeState)(nil)).Elem()
}

type gkeHubScopeArgs struct {
	GkeHubScopeId *string `pulumi:"gkeHubScopeId"`
	// Labels for this Scope. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each
	// namespace under the Scope. Scope-level labels take precedence over Namespace-level labels ('namespace_labels' in the
	// Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels map[string]string `pulumi:"namespaceLabels"`
	Project         *string           `pulumi:"project"`
	// The client-provided identifier of the scope.
	ScopeId  string               `pulumi:"scopeId"`
	Timeouts *GkeHubScopeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a GkeHubScope resource.
type GkeHubScopeArgs struct {
	GkeHubScopeId pulumi.StringPtrInput
	// Labels for this Scope. **Note**: This field is non-authoritative, and will only manage the labels present in your
	// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each
	// namespace under the Scope. Scope-level labels take precedence over Namespace-level labels ('namespace_labels' in the
	// Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapInput
	Project         pulumi.StringPtrInput
	// The client-provided identifier of the scope.
	ScopeId  pulumi.StringInput
	Timeouts GkeHubScopeTimeoutsPtrInput
}

func (GkeHubScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeHubScopeArgs)(nil)).Elem()
}

type GkeHubScopeInput interface {
	pulumi.Input

	ToGkeHubScopeOutput() GkeHubScopeOutput
	ToGkeHubScopeOutputWithContext(ctx context.Context) GkeHubScopeOutput
}

func (*GkeHubScope) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubScope)(nil)).Elem()
}

func (i *GkeHubScope) ToGkeHubScopeOutput() GkeHubScopeOutput {
	return i.ToGkeHubScopeOutputWithContext(context.Background())
}

func (i *GkeHubScope) ToGkeHubScopeOutputWithContext(ctx context.Context) GkeHubScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeHubScopeOutput)
}

type GkeHubScopeOutput struct{ *pulumi.OutputState }

func (GkeHubScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeHubScope)(nil)).Elem()
}

func (o GkeHubScopeOutput) ToGkeHubScopeOutput() GkeHubScopeOutput {
	return o
}

func (o GkeHubScopeOutput) ToGkeHubScopeOutputWithContext(ctx context.Context) GkeHubScopeOutput {
	return o
}

// Time the Scope was created in UTC.
func (o GkeHubScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time the Scope was deleted in UTC.
func (o GkeHubScopeOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

func (o GkeHubScopeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o GkeHubScopeOutput) GkeHubScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.GkeHubScopeId }).(pulumi.StringOutput)
}

// Labels for this Scope. **Note**: This field is non-authoritative, and will only manage the labels present in your
// configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o GkeHubScopeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The unique identifier of the scope
func (o GkeHubScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each
// namespace under the Scope. Scope-level labels take precedence over Namespace-level labels ('namespace_labels' in the
// Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
func (o GkeHubScopeOutput) NamespaceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringMapOutput { return v.NamespaceLabels }).(pulumi.StringMapOutput)
}

func (o GkeHubScopeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The client-provided identifier of the scope.
func (o GkeHubScopeOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// State of the scope resource.
func (o GkeHubScopeOutput) States() GkeHubScopeStateTypeArrayOutput {
	return o.ApplyT(func(v *GkeHubScope) GkeHubScopeStateTypeArrayOutput { return v.States }).(GkeHubScopeStateTypeArrayOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o GkeHubScopeOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o GkeHubScopeOutput) Timeouts() GkeHubScopeTimeoutsPtrOutput {
	return o.ApplyT(func(v *GkeHubScope) GkeHubScopeTimeoutsPtrOutput { return v.Timeouts }).(GkeHubScopeTimeoutsPtrOutput)
}

// Google-generated UUID for this resource.
func (o GkeHubScopeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the Scope was updated in UTC.
func (o GkeHubScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeHubScope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeHubScopeInput)(nil)).Elem(), &GkeHubScope{})
	pulumi.RegisterOutputType(GkeHubScopeOutput{})
}
