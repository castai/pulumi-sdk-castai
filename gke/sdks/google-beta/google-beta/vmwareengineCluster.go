// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmwareengineCluster struct {
	pulumi.CustomResourceState

	// Configuration of the autoscaling applied to this cluster
	AutoscalingSettings VmwareengineClusterAutoscalingSettingsPtrOutput `pulumi:"autoscalingSettings"`
	// True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private
	// cloud and it has to be the first one.
	Management pulumi.BoolOutput `pulumi:"management"`
	// The ID of the Cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to
	// the NodeType).
	NodeTypeConfigs VmwareengineClusterNodeTypeConfigArrayOutput `pulumi:"nodeTypeConfigs"`
	// The resource name of the private cloud to create a new cluster in. Resource names are schemeless URIs that follow the
	// conventions in https://cloud.google.com/apis/design/resource_names. For example:
	// projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringOutput `pulumi:"parent"`
	// State of the Cluster.
	State    pulumi.StringOutput                  `pulumi:"state"`
	Timeouts VmwareengineClusterTimeoutsPtrOutput `pulumi:"timeouts"`
	// System-generated unique identifier for the resource.
	Uid                   pulumi.StringOutput `pulumi:"uid"`
	VmwareengineClusterId pulumi.StringOutput `pulumi:"vmwareengineClusterId"`
}

// NewVmwareengineCluster registers a new resource with the given unique name, arguments, and options.
func NewVmwareengineCluster(ctx *pulumi.Context,
	name string, args *VmwareengineClusterArgs, opts ...pulumi.ResourceOption) (*VmwareengineCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VmwareengineCluster
	err = ctx.RegisterPackageResource("google-beta:index/vmwareengineCluster:VmwareengineCluster", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareengineCluster gets an existing VmwareengineCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareengineCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareengineClusterState, opts ...pulumi.ResourceOption) (*VmwareengineCluster, error) {
	var resource VmwareengineCluster
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vmwareengineCluster:VmwareengineCluster", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareengineCluster resources.
type vmwareengineClusterState struct {
	// Configuration of the autoscaling applied to this cluster
	AutoscalingSettings *VmwareengineClusterAutoscalingSettings `pulumi:"autoscalingSettings"`
	// True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private
	// cloud and it has to be the first one.
	Management *bool `pulumi:"management"`
	// The ID of the Cluster.
	Name *string `pulumi:"name"`
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to
	// the NodeType).
	NodeTypeConfigs []VmwareengineClusterNodeTypeConfig `pulumi:"nodeTypeConfigs"`
	// The resource name of the private cloud to create a new cluster in. Resource names are schemeless URIs that follow the
	// conventions in https://cloud.google.com/apis/design/resource_names. For example:
	// projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent *string `pulumi:"parent"`
	// State of the Cluster.
	State    *string                      `pulumi:"state"`
	Timeouts *VmwareengineClusterTimeouts `pulumi:"timeouts"`
	// System-generated unique identifier for the resource.
	Uid                   *string `pulumi:"uid"`
	VmwareengineClusterId *string `pulumi:"vmwareengineClusterId"`
}

type VmwareengineClusterState struct {
	// Configuration of the autoscaling applied to this cluster
	AutoscalingSettings VmwareengineClusterAutoscalingSettingsPtrInput
	// True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private
	// cloud and it has to be the first one.
	Management pulumi.BoolPtrInput
	// The ID of the Cluster.
	Name pulumi.StringPtrInput
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to
	// the NodeType).
	NodeTypeConfigs VmwareengineClusterNodeTypeConfigArrayInput
	// The resource name of the private cloud to create a new cluster in. Resource names are schemeless URIs that follow the
	// conventions in https://cloud.google.com/apis/design/resource_names. For example:
	// projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringPtrInput
	// State of the Cluster.
	State    pulumi.StringPtrInput
	Timeouts VmwareengineClusterTimeoutsPtrInput
	// System-generated unique identifier for the resource.
	Uid                   pulumi.StringPtrInput
	VmwareengineClusterId pulumi.StringPtrInput
}

func (VmwareengineClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareengineClusterState)(nil)).Elem()
}

type vmwareengineClusterArgs struct {
	// Configuration of the autoscaling applied to this cluster
	AutoscalingSettings *VmwareengineClusterAutoscalingSettings `pulumi:"autoscalingSettings"`
	// The ID of the Cluster.
	Name *string `pulumi:"name"`
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to
	// the NodeType).
	NodeTypeConfigs []VmwareengineClusterNodeTypeConfig `pulumi:"nodeTypeConfigs"`
	// The resource name of the private cloud to create a new cluster in. Resource names are schemeless URIs that follow the
	// conventions in https://cloud.google.com/apis/design/resource_names. For example:
	// projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent                string                       `pulumi:"parent"`
	Timeouts              *VmwareengineClusterTimeouts `pulumi:"timeouts"`
	VmwareengineClusterId *string                      `pulumi:"vmwareengineClusterId"`
}

// The set of arguments for constructing a VmwareengineCluster resource.
type VmwareengineClusterArgs struct {
	// Configuration of the autoscaling applied to this cluster
	AutoscalingSettings VmwareengineClusterAutoscalingSettingsPtrInput
	// The ID of the Cluster.
	Name pulumi.StringPtrInput
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to
	// the NodeType).
	NodeTypeConfigs VmwareengineClusterNodeTypeConfigArrayInput
	// The resource name of the private cloud to create a new cluster in. Resource names are schemeless URIs that follow the
	// conventions in https://cloud.google.com/apis/design/resource_names. For example:
	// projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent                pulumi.StringInput
	Timeouts              VmwareengineClusterTimeoutsPtrInput
	VmwareengineClusterId pulumi.StringPtrInput
}

func (VmwareengineClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareengineClusterArgs)(nil)).Elem()
}

type VmwareengineClusterInput interface {
	pulumi.Input

	ToVmwareengineClusterOutput() VmwareengineClusterOutput
	ToVmwareengineClusterOutputWithContext(ctx context.Context) VmwareengineClusterOutput
}

func (*VmwareengineCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareengineCluster)(nil)).Elem()
}

func (i *VmwareengineCluster) ToVmwareengineClusterOutput() VmwareengineClusterOutput {
	return i.ToVmwareengineClusterOutputWithContext(context.Background())
}

func (i *VmwareengineCluster) ToVmwareengineClusterOutputWithContext(ctx context.Context) VmwareengineClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareengineClusterOutput)
}

type VmwareengineClusterOutput struct{ *pulumi.OutputState }

func (VmwareengineClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareengineCluster)(nil)).Elem()
}

func (o VmwareengineClusterOutput) ToVmwareengineClusterOutput() VmwareengineClusterOutput {
	return o
}

func (o VmwareengineClusterOutput) ToVmwareengineClusterOutputWithContext(ctx context.Context) VmwareengineClusterOutput {
	return o
}

// Configuration of the autoscaling applied to this cluster
func (o VmwareengineClusterOutput) AutoscalingSettings() VmwareengineClusterAutoscalingSettingsPtrOutput {
	return o.ApplyT(func(v *VmwareengineCluster) VmwareengineClusterAutoscalingSettingsPtrOutput {
		return v.AutoscalingSettings
	}).(VmwareengineClusterAutoscalingSettingsPtrOutput)
}

// True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private
// cloud and it has to be the first one.
func (o VmwareengineClusterOutput) Management() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareengineCluster) pulumi.BoolOutput { return v.Management }).(pulumi.BoolOutput)
}

// The ID of the Cluster.
func (o VmwareengineClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareengineCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to
// the NodeType).
func (o VmwareengineClusterOutput) NodeTypeConfigs() VmwareengineClusterNodeTypeConfigArrayOutput {
	return o.ApplyT(func(v *VmwareengineCluster) VmwareengineClusterNodeTypeConfigArrayOutput { return v.NodeTypeConfigs }).(VmwareengineClusterNodeTypeConfigArrayOutput)
}

// The resource name of the private cloud to create a new cluster in. Resource names are schemeless URIs that follow the
// conventions in https://cloud.google.com/apis/design/resource_names. For example:
// projects/my-project/locations/us-west1-a/privateClouds/my-cloud
func (o VmwareengineClusterOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareengineCluster) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// State of the Cluster.
func (o VmwareengineClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareengineCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o VmwareengineClusterOutput) Timeouts() VmwareengineClusterTimeoutsPtrOutput {
	return o.ApplyT(func(v *VmwareengineCluster) VmwareengineClusterTimeoutsPtrOutput { return v.Timeouts }).(VmwareengineClusterTimeoutsPtrOutput)
}

// System-generated unique identifier for the resource.
func (o VmwareengineClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareengineCluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

func (o VmwareengineClusterOutput) VmwareengineClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareengineCluster) pulumi.StringOutput { return v.VmwareengineClusterId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareengineClusterInput)(nil)).Elem(), &VmwareengineCluster{})
	pulumi.RegisterOutputType(VmwareengineClusterOutput{})
}
