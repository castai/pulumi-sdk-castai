// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeminiLoggingSetting struct {
	pulumi.CustomResourceState

	// Output only. [Output only] Create time stamp.
	CreateTime             pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveLabels        pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	GeminiLoggingSettingId pulumi.StringOutput    `pulumi:"geminiLoggingSettingId"`
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional. Whether to log metadata.
	LogMetadata pulumi.BoolPtrOutput `pulumi:"logMetadata"`
	// Optional. Whether to log prompts and responses.
	LogPromptsAndResponses pulumi.BoolPtrOutput `pulumi:"logPromptsAndResponses"`
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and setting_id from the
	// method_signature of Create RPC.
	LoggingSettingId pulumi.StringOutput `pulumi:"loggingSettingId"`
	// Identifier. Name of the resource. Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                `pulumi:"terraformLabels"`
	Timeouts        GeminiLoggingSettingTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. [Output only] Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGeminiLoggingSetting registers a new resource with the given unique name, arguments, and options.
func NewGeminiLoggingSetting(ctx *pulumi.Context,
	name string, args *GeminiLoggingSettingArgs, opts ...pulumi.ResourceOption) (*GeminiLoggingSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.LoggingSettingId == nil {
		return nil, errors.New("invalid value for required argument 'LoggingSettingId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GeminiLoggingSetting
	err = ctx.RegisterPackageResource("google-beta:index/geminiLoggingSetting:GeminiLoggingSetting", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeminiLoggingSetting gets an existing GeminiLoggingSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeminiLoggingSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeminiLoggingSettingState, opts ...pulumi.ResourceOption) (*GeminiLoggingSetting, error) {
	var resource GeminiLoggingSetting
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/geminiLoggingSetting:GeminiLoggingSetting", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeminiLoggingSetting resources.
type geminiLoggingSettingState struct {
	// Output only. [Output only] Create time stamp.
	CreateTime             *string           `pulumi:"createTime"`
	EffectiveLabels        map[string]string `pulumi:"effectiveLabels"`
	GeminiLoggingSettingId *string           `pulumi:"geminiLoggingSettingId"`
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Optional. Whether to log metadata.
	LogMetadata *bool `pulumi:"logMetadata"`
	// Optional. Whether to log prompts and responses.
	LogPromptsAndResponses *bool `pulumi:"logPromptsAndResponses"`
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and setting_id from the
	// method_signature of Create RPC.
	LoggingSettingId *string `pulumi:"loggingSettingId"`
	// Identifier. Name of the resource. Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string             `pulumi:"terraformLabels"`
	Timeouts        *GeminiLoggingSettingTimeouts `pulumi:"timeouts"`
	// Output only. [Output only] Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type GeminiLoggingSettingState struct {
	// Output only. [Output only] Create time stamp.
	CreateTime             pulumi.StringPtrInput
	EffectiveLabels        pulumi.StringMapInput
	GeminiLoggingSettingId pulumi.StringPtrInput
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Optional. Whether to log metadata.
	LogMetadata pulumi.BoolPtrInput
	// Optional. Whether to log prompts and responses.
	LogPromptsAndResponses pulumi.BoolPtrInput
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and setting_id from the
	// method_signature of Create RPC.
	LoggingSettingId pulumi.StringPtrInput
	// Identifier. Name of the resource. Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        GeminiLoggingSettingTimeoutsPtrInput
	// Output only. [Output only] Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (GeminiLoggingSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiLoggingSettingState)(nil)).Elem()
}

type geminiLoggingSettingArgs struct {
	GeminiLoggingSettingId *string `pulumi:"geminiLoggingSettingId"`
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// Optional. Whether to log metadata.
	LogMetadata *bool `pulumi:"logMetadata"`
	// Optional. Whether to log prompts and responses.
	LogPromptsAndResponses *bool `pulumi:"logPromptsAndResponses"`
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and setting_id from the
	// method_signature of Create RPC.
	LoggingSettingId string                        `pulumi:"loggingSettingId"`
	Project          *string                       `pulumi:"project"`
	Timeouts         *GeminiLoggingSettingTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a GeminiLoggingSetting resource.
type GeminiLoggingSettingArgs struct {
	GeminiLoggingSettingId pulumi.StringPtrInput
	// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
	// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
	// https://google.aip.dev/122.
	Location pulumi.StringInput
	// Optional. Whether to log metadata.
	LogMetadata pulumi.BoolPtrInput
	// Optional. Whether to log prompts and responses.
	LogPromptsAndResponses pulumi.BoolPtrInput
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and setting_id from the
	// method_signature of Create RPC.
	LoggingSettingId pulumi.StringInput
	Project          pulumi.StringPtrInput
	Timeouts         GeminiLoggingSettingTimeoutsPtrInput
}

func (GeminiLoggingSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiLoggingSettingArgs)(nil)).Elem()
}

type GeminiLoggingSettingInput interface {
	pulumi.Input

	ToGeminiLoggingSettingOutput() GeminiLoggingSettingOutput
	ToGeminiLoggingSettingOutputWithContext(ctx context.Context) GeminiLoggingSettingOutput
}

func (*GeminiLoggingSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiLoggingSetting)(nil)).Elem()
}

func (i *GeminiLoggingSetting) ToGeminiLoggingSettingOutput() GeminiLoggingSettingOutput {
	return i.ToGeminiLoggingSettingOutputWithContext(context.Background())
}

func (i *GeminiLoggingSetting) ToGeminiLoggingSettingOutputWithContext(ctx context.Context) GeminiLoggingSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiLoggingSettingOutput)
}

type GeminiLoggingSettingOutput struct{ *pulumi.OutputState }

func (GeminiLoggingSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiLoggingSetting)(nil)).Elem()
}

func (o GeminiLoggingSettingOutput) ToGeminiLoggingSettingOutput() GeminiLoggingSettingOutput {
	return o
}

func (o GeminiLoggingSettingOutput) ToGeminiLoggingSettingOutputWithContext(ctx context.Context) GeminiLoggingSettingOutput {
	return o
}

// Output only. [Output only] Create time stamp.
func (o GeminiLoggingSettingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GeminiLoggingSettingOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o GeminiLoggingSettingOutput) GeminiLoggingSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.GeminiLoggingSettingId }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs. **Note**: This field is non-authoritative, and will only manage the labels present
// in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o GeminiLoggingSettingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in
// https://google.aip.dev/122.
func (o GeminiLoggingSettingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Whether to log metadata.
func (o GeminiLoggingSettingOutput) LogMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.BoolPtrOutput { return v.LogMetadata }).(pulumi.BoolPtrOutput)
}

// Optional. Whether to log prompts and responses.
func (o GeminiLoggingSettingOutput) LogPromptsAndResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.BoolPtrOutput { return v.LogPromptsAndResponses }).(pulumi.BoolPtrOutput)
}

// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and setting_id from the
// method_signature of Create RPC.
func (o GeminiLoggingSettingOutput) LoggingSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.LoggingSettingId }).(pulumi.StringOutput)
}

// Identifier. Name of the resource. Format:projects/{project}/locations/{location}/loggingsettings/{loggingsetting}
func (o GeminiLoggingSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GeminiLoggingSettingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o GeminiLoggingSettingOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o GeminiLoggingSettingOutput) Timeouts() GeminiLoggingSettingTimeoutsPtrOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) GeminiLoggingSettingTimeoutsPtrOutput { return v.Timeouts }).(GeminiLoggingSettingTimeoutsPtrOutput)
}

// Output only. [Output only] Update time stamp.
func (o GeminiLoggingSettingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiLoggingSetting) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiLoggingSettingInput)(nil)).Elem(), &GeminiLoggingSetting{})
	pulumi.RegisterOutputType(GeminiLoggingSettingOutput{})
}
