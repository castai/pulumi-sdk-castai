// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeminiRepositoryGroupIamBinding struct {
	pulumi.CustomResourceState

	CodeRepositoryIndex               pulumi.StringOutput                               `pulumi:"codeRepositoryIndex"`
	Condition                         GeminiRepositoryGroupIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                              pulumi.StringOutput                               `pulumi:"etag"`
	GeminiRepositoryGroupIamBindingId pulumi.StringOutput                               `pulumi:"geminiRepositoryGroupIamBindingId"`
	Location                          pulumi.StringOutput                               `pulumi:"location"`
	Members                           pulumi.StringArrayOutput                          `pulumi:"members"`
	Project                           pulumi.StringOutput                               `pulumi:"project"`
	RepositoryGroupId                 pulumi.StringOutput                               `pulumi:"repositoryGroupId"`
	Role                              pulumi.StringOutput                               `pulumi:"role"`
}

// NewGeminiRepositoryGroupIamBinding registers a new resource with the given unique name, arguments, and options.
func NewGeminiRepositoryGroupIamBinding(ctx *pulumi.Context,
	name string, args *GeminiRepositoryGroupIamBindingArgs, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroupIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodeRepositoryIndex == nil {
		return nil, errors.New("invalid value for required argument 'CodeRepositoryIndex'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.RepositoryGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryGroupId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GeminiRepositoryGroupIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/geminiRepositoryGroupIamBinding:GeminiRepositoryGroupIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeminiRepositoryGroupIamBinding gets an existing GeminiRepositoryGroupIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeminiRepositoryGroupIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeminiRepositoryGroupIamBindingState, opts ...pulumi.ResourceOption) (*GeminiRepositoryGroupIamBinding, error) {
	var resource GeminiRepositoryGroupIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/geminiRepositoryGroupIamBinding:GeminiRepositoryGroupIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeminiRepositoryGroupIamBinding resources.
type geminiRepositoryGroupIamBindingState struct {
	CodeRepositoryIndex               *string                                   `pulumi:"codeRepositoryIndex"`
	Condition                         *GeminiRepositoryGroupIamBindingCondition `pulumi:"condition"`
	Etag                              *string                                   `pulumi:"etag"`
	GeminiRepositoryGroupIamBindingId *string                                   `pulumi:"geminiRepositoryGroupIamBindingId"`
	Location                          *string                                   `pulumi:"location"`
	Members                           []string                                  `pulumi:"members"`
	Project                           *string                                   `pulumi:"project"`
	RepositoryGroupId                 *string                                   `pulumi:"repositoryGroupId"`
	Role                              *string                                   `pulumi:"role"`
}

type GeminiRepositoryGroupIamBindingState struct {
	CodeRepositoryIndex               pulumi.StringPtrInput
	Condition                         GeminiRepositoryGroupIamBindingConditionPtrInput
	Etag                              pulumi.StringPtrInput
	GeminiRepositoryGroupIamBindingId pulumi.StringPtrInput
	Location                          pulumi.StringPtrInput
	Members                           pulumi.StringArrayInput
	Project                           pulumi.StringPtrInput
	RepositoryGroupId                 pulumi.StringPtrInput
	Role                              pulumi.StringPtrInput
}

func (GeminiRepositoryGroupIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupIamBindingState)(nil)).Elem()
}

type geminiRepositoryGroupIamBindingArgs struct {
	CodeRepositoryIndex               string                                    `pulumi:"codeRepositoryIndex"`
	Condition                         *GeminiRepositoryGroupIamBindingCondition `pulumi:"condition"`
	GeminiRepositoryGroupIamBindingId *string                                   `pulumi:"geminiRepositoryGroupIamBindingId"`
	Location                          *string                                   `pulumi:"location"`
	Members                           []string                                  `pulumi:"members"`
	Project                           *string                                   `pulumi:"project"`
	RepositoryGroupId                 string                                    `pulumi:"repositoryGroupId"`
	Role                              string                                    `pulumi:"role"`
}

// The set of arguments for constructing a GeminiRepositoryGroupIamBinding resource.
type GeminiRepositoryGroupIamBindingArgs struct {
	CodeRepositoryIndex               pulumi.StringInput
	Condition                         GeminiRepositoryGroupIamBindingConditionPtrInput
	GeminiRepositoryGroupIamBindingId pulumi.StringPtrInput
	Location                          pulumi.StringPtrInput
	Members                           pulumi.StringArrayInput
	Project                           pulumi.StringPtrInput
	RepositoryGroupId                 pulumi.StringInput
	Role                              pulumi.StringInput
}

func (GeminiRepositoryGroupIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geminiRepositoryGroupIamBindingArgs)(nil)).Elem()
}

type GeminiRepositoryGroupIamBindingInput interface {
	pulumi.Input

	ToGeminiRepositoryGroupIamBindingOutput() GeminiRepositoryGroupIamBindingOutput
	ToGeminiRepositoryGroupIamBindingOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamBindingOutput
}

func (*GeminiRepositoryGroupIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroupIamBinding)(nil)).Elem()
}

func (i *GeminiRepositoryGroupIamBinding) ToGeminiRepositoryGroupIamBindingOutput() GeminiRepositoryGroupIamBindingOutput {
	return i.ToGeminiRepositoryGroupIamBindingOutputWithContext(context.Background())
}

func (i *GeminiRepositoryGroupIamBinding) ToGeminiRepositoryGroupIamBindingOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeminiRepositoryGroupIamBindingOutput)
}

type GeminiRepositoryGroupIamBindingOutput struct{ *pulumi.OutputState }

func (GeminiRepositoryGroupIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeminiRepositoryGroupIamBinding)(nil)).Elem()
}

func (o GeminiRepositoryGroupIamBindingOutput) ToGeminiRepositoryGroupIamBindingOutput() GeminiRepositoryGroupIamBindingOutput {
	return o
}

func (o GeminiRepositoryGroupIamBindingOutput) ToGeminiRepositoryGroupIamBindingOutputWithContext(ctx context.Context) GeminiRepositoryGroupIamBindingOutput {
	return o
}

func (o GeminiRepositoryGroupIamBindingOutput) CodeRepositoryIndex() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput { return v.CodeRepositoryIndex }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) Condition() GeminiRepositoryGroupIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) GeminiRepositoryGroupIamBindingConditionPtrOutput {
		return v.Condition
	}).(GeminiRepositoryGroupIamBindingConditionPtrOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) GeminiRepositoryGroupIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput {
		return v.GeminiRepositoryGroupIamBindingId
	}).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) RepositoryGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput { return v.RepositoryGroupId }).(pulumi.StringOutput)
}

func (o GeminiRepositoryGroupIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GeminiRepositoryGroupIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeminiRepositoryGroupIamBindingInput)(nil)).Elem(), &GeminiRepositoryGroupIamBinding{})
	pulumi.RegisterOutputType(GeminiRepositoryGroupIamBindingOutput{})
}
