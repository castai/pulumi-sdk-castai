// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecurityposturePostureDeployment struct {
	pulumi.CustomResourceState

	// Time the posture deployment was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the posture deployment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture to be deployed.
	DesiredPostureId pulumi.StringOutput `pulumi:"desiredPostureId"`
	// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture revision_id to be deployed.
	DesiredPostureRevisionId pulumi.StringOutput `pulumi:"desiredPostureRevisionId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringOutput `pulumi:"etag"`
	// This is a output only optional field which will be filled in case where PostureDeployment enters a failure state like
	// UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
	// CREATE/UPDATE/DELETE methods.
	FailureMessage pulumi.StringOutput `pulumi:"failureMessage"`
	// The location of the resource, eg. global'.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the posture deployment instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// ID of the posture deployment.
	PostureDeploymentId pulumi.StringOutput `pulumi:"postureDeploymentId"`
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId pulumi.StringOutput `pulumi:"postureId"`
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId pulumi.StringOutput `pulumi:"postureRevisionId"`
	// If set, there are currently changes in flight to the posture deployment.
	Reconciling                        pulumi.BoolOutput   `pulumi:"reconciling"`
	SecurityposturePostureDeploymentId pulumi.StringOutput `pulumi:"securityposturePostureDeploymentId"`
	// State of the posture deployment. A posture deployment can be in the following terminal states: ACTIVE, CREATE_FAILED,
	// UPDATE_FAILED, DELETE_FAILED.
	State pulumi.StringOutput `pulumi:"state"`
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
	TargetResource pulumi.StringOutput                               `pulumi:"targetResource"`
	Timeouts       SecurityposturePostureDeploymentTimeoutsPtrOutput `pulumi:"timeouts"`
	// Time the posture deployment was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSecurityposturePostureDeployment registers a new resource with the given unique name, arguments, and options.
func NewSecurityposturePostureDeployment(ctx *pulumi.Context,
	name string, args *SecurityposturePostureDeploymentArgs, opts ...pulumi.ResourceOption) (*SecurityposturePostureDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.PostureDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'PostureDeploymentId'")
	}
	if args.PostureId == nil {
		return nil, errors.New("invalid value for required argument 'PostureId'")
	}
	if args.PostureRevisionId == nil {
		return nil, errors.New("invalid value for required argument 'PostureRevisionId'")
	}
	if args.TargetResource == nil {
		return nil, errors.New("invalid value for required argument 'TargetResource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SecurityposturePostureDeployment
	err = ctx.RegisterPackageResource("google-beta:index/securityposturePostureDeployment:SecurityposturePostureDeployment", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityposturePostureDeployment gets an existing SecurityposturePostureDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityposturePostureDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityposturePostureDeploymentState, opts ...pulumi.ResourceOption) (*SecurityposturePostureDeployment, error) {
	var resource SecurityposturePostureDeployment
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/securityposturePostureDeployment:SecurityposturePostureDeployment", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityposturePostureDeployment resources.
type securityposturePostureDeploymentState struct {
	// Time the posture deployment was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Description of the posture deployment.
	Description *string `pulumi:"description"`
	// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture to be deployed.
	DesiredPostureId *string `pulumi:"desiredPostureId"`
	// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture revision_id to be deployed.
	DesiredPostureRevisionId *string `pulumi:"desiredPostureRevisionId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag *string `pulumi:"etag"`
	// This is a output only optional field which will be filled in case where PostureDeployment enters a failure state like
	// UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
	// CREATE/UPDATE/DELETE methods.
	FailureMessage *string `pulumi:"failureMessage"`
	// The location of the resource, eg. global'.
	Location *string `pulumi:"location"`
	// Name of the posture deployment instance.
	Name *string `pulumi:"name"`
	// The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
	Parent *string `pulumi:"parent"`
	// ID of the posture deployment.
	PostureDeploymentId *string `pulumi:"postureDeploymentId"`
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId *string `pulumi:"postureId"`
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId *string `pulumi:"postureRevisionId"`
	// If set, there are currently changes in flight to the posture deployment.
	Reconciling                        *bool   `pulumi:"reconciling"`
	SecurityposturePostureDeploymentId *string `pulumi:"securityposturePostureDeploymentId"`
	// State of the posture deployment. A posture deployment can be in the following terminal states: ACTIVE, CREATE_FAILED,
	// UPDATE_FAILED, DELETE_FAILED.
	State *string `pulumi:"state"`
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
	TargetResource *string                                   `pulumi:"targetResource"`
	Timeouts       *SecurityposturePostureDeploymentTimeouts `pulumi:"timeouts"`
	// Time the posture deployment was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type SecurityposturePostureDeploymentState struct {
	// Time the posture deployment was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Description of the posture deployment.
	Description pulumi.StringPtrInput
	// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture to be deployed.
	DesiredPostureId pulumi.StringPtrInput
	// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture revision_id to be deployed.
	DesiredPostureRevisionId pulumi.StringPtrInput
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringPtrInput
	// This is a output only optional field which will be filled in case where PostureDeployment enters a failure state like
	// UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
	// CREATE/UPDATE/DELETE methods.
	FailureMessage pulumi.StringPtrInput
	// The location of the resource, eg. global'.
	Location pulumi.StringPtrInput
	// Name of the posture deployment instance.
	Name pulumi.StringPtrInput
	// The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
	Parent pulumi.StringPtrInput
	// ID of the posture deployment.
	PostureDeploymentId pulumi.StringPtrInput
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId pulumi.StringPtrInput
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId pulumi.StringPtrInput
	// If set, there are currently changes in flight to the posture deployment.
	Reconciling                        pulumi.BoolPtrInput
	SecurityposturePostureDeploymentId pulumi.StringPtrInput
	// State of the posture deployment. A posture deployment can be in the following terminal states: ACTIVE, CREATE_FAILED,
	// UPDATE_FAILED, DELETE_FAILED.
	State pulumi.StringPtrInput
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
	TargetResource pulumi.StringPtrInput
	Timeouts       SecurityposturePostureDeploymentTimeoutsPtrInput
	// Time the posture deployment was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (SecurityposturePostureDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityposturePostureDeploymentState)(nil)).Elem()
}

type securityposturePostureDeploymentArgs struct {
	// Description of the posture deployment.
	Description *string `pulumi:"description"`
	// The location of the resource, eg. global'.
	Location string `pulumi:"location"`
	// The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
	Parent string `pulumi:"parent"`
	// ID of the posture deployment.
	PostureDeploymentId string `pulumi:"postureDeploymentId"`
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId string `pulumi:"postureId"`
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId                  string  `pulumi:"postureRevisionId"`
	SecurityposturePostureDeploymentId *string `pulumi:"securityposturePostureDeploymentId"`
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
	TargetResource string                                    `pulumi:"targetResource"`
	Timeouts       *SecurityposturePostureDeploymentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SecurityposturePostureDeployment resource.
type SecurityposturePostureDeploymentArgs struct {
	// Description of the posture deployment.
	Description pulumi.StringPtrInput
	// The location of the resource, eg. global'.
	Location pulumi.StringInput
	// The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
	Parent pulumi.StringInput
	// ID of the posture deployment.
	PostureDeploymentId pulumi.StringInput
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId pulumi.StringInput
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId                  pulumi.StringInput
	SecurityposturePostureDeploymentId pulumi.StringPtrInput
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
	TargetResource pulumi.StringInput
	Timeouts       SecurityposturePostureDeploymentTimeoutsPtrInput
}

func (SecurityposturePostureDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityposturePostureDeploymentArgs)(nil)).Elem()
}

type SecurityposturePostureDeploymentInput interface {
	pulumi.Input

	ToSecurityposturePostureDeploymentOutput() SecurityposturePostureDeploymentOutput
	ToSecurityposturePostureDeploymentOutputWithContext(ctx context.Context) SecurityposturePostureDeploymentOutput
}

func (*SecurityposturePostureDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityposturePostureDeployment)(nil)).Elem()
}

func (i *SecurityposturePostureDeployment) ToSecurityposturePostureDeploymentOutput() SecurityposturePostureDeploymentOutput {
	return i.ToSecurityposturePostureDeploymentOutputWithContext(context.Background())
}

func (i *SecurityposturePostureDeployment) ToSecurityposturePostureDeploymentOutputWithContext(ctx context.Context) SecurityposturePostureDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityposturePostureDeploymentOutput)
}

type SecurityposturePostureDeploymentOutput struct{ *pulumi.OutputState }

func (SecurityposturePostureDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityposturePostureDeployment)(nil)).Elem()
}

func (o SecurityposturePostureDeploymentOutput) ToSecurityposturePostureDeploymentOutput() SecurityposturePostureDeploymentOutput {
	return o
}

func (o SecurityposturePostureDeploymentOutput) ToSecurityposturePostureDeploymentOutputWithContext(ctx context.Context) SecurityposturePostureDeploymentOutput {
	return o
}

// Time the posture deployment was created in UTC.
func (o SecurityposturePostureDeploymentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the posture deployment.
func (o SecurityposturePostureDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture to be deployed.
func (o SecurityposturePostureDeploymentOutput) DesiredPostureId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.DesiredPostureId }).(pulumi.StringOutput)
}

// This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
// CREATE_FAILED or DELETE_FAILED. It denotes the desired posture revision_id to be deployed.
func (o SecurityposturePostureDeploymentOutput) DesiredPostureRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.DesiredPostureRevisionId }).(pulumi.StringOutput)
}

// For Resource freshness validation (https://google.aip.dev/154)
func (o SecurityposturePostureDeploymentOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// This is a output only optional field which will be filled in case where PostureDeployment enters a failure state like
// UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
// CREATE/UPDATE/DELETE methods.
func (o SecurityposturePostureDeploymentOutput) FailureMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.FailureMessage }).(pulumi.StringOutput)
}

// The location of the resource, eg. global'.
func (o SecurityposturePostureDeploymentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the posture deployment instance.
func (o SecurityposturePostureDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
func (o SecurityposturePostureDeploymentOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// ID of the posture deployment.
func (o SecurityposturePostureDeploymentOutput) PostureDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.PostureDeploymentId }).(pulumi.StringOutput)
}

// Relative name of the posture which needs to be deployed. It should be in the format:
// organizations/{organization_id}/locations/{location}/postures/{posture_id}
func (o SecurityposturePostureDeploymentOutput) PostureId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.PostureId }).(pulumi.StringOutput)
}

// Revision_id the posture which needs to be deployed.
func (o SecurityposturePostureDeploymentOutput) PostureRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.PostureRevisionId }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the posture deployment.
func (o SecurityposturePostureDeploymentOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

func (o SecurityposturePostureDeploymentOutput) SecurityposturePostureDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput {
		return v.SecurityposturePostureDeploymentId
	}).(pulumi.StringOutput)
}

// State of the posture deployment. A posture deployment can be in the following terminal states: ACTIVE, CREATE_FAILED,
// UPDATE_FAILED, DELETE_FAILED.
func (o SecurityposturePostureDeploymentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The resource on which the posture should be deployed. This can be in one of the following formats:
// projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
func (o SecurityposturePostureDeploymentOutput) TargetResource() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.TargetResource }).(pulumi.StringOutput)
}

func (o SecurityposturePostureDeploymentOutput) Timeouts() SecurityposturePostureDeploymentTimeoutsPtrOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) SecurityposturePostureDeploymentTimeoutsPtrOutput {
		return v.Timeouts
	}).(SecurityposturePostureDeploymentTimeoutsPtrOutput)
}

// Time the posture deployment was updated in UTC.
func (o SecurityposturePostureDeploymentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityposturePostureDeployment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityposturePostureDeploymentInput)(nil)).Elem(), &SecurityposturePostureDeployment{})
	pulumi.RegisterOutputType(SecurityposturePostureDeploymentOutput{})
}
