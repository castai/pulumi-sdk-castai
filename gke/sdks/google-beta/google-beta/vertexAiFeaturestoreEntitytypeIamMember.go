// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreEntitytypeIamMember struct {
	pulumi.CustomResourceState

	Condition                                 VertexAiFeaturestoreEntitytypeIamMemberConditionPtrOutput `pulumi:"condition"`
	Entitytype                                pulumi.StringOutput                                       `pulumi:"entitytype"`
	Etag                                      pulumi.StringOutput                                       `pulumi:"etag"`
	Featurestore                              pulumi.StringOutput                                       `pulumi:"featurestore"`
	Member                                    pulumi.StringOutput                                       `pulumi:"member"`
	Role                                      pulumi.StringOutput                                       `pulumi:"role"`
	VertexAiFeaturestoreEntitytypeIamMemberId pulumi.StringOutput                                       `pulumi:"vertexAiFeaturestoreEntitytypeIamMemberId"`
}

// NewVertexAiFeaturestoreEntitytypeIamMember registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreEntitytypeIamMember(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreEntitytypeIamMemberArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entitytype == nil {
		return nil, errors.New("invalid value for required argument 'Entitytype'")
	}
	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreEntitytypeIamMember
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeIamMember:VertexAiFeaturestoreEntitytypeIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreEntitytypeIamMember gets an existing VertexAiFeaturestoreEntitytypeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreEntitytypeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreEntitytypeIamMemberState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeIamMember, error) {
	var resource VertexAiFeaturestoreEntitytypeIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeIamMember:VertexAiFeaturestoreEntitytypeIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreEntitytypeIamMember resources.
type vertexAiFeaturestoreEntitytypeIamMemberState struct {
	Condition                                 *VertexAiFeaturestoreEntitytypeIamMemberCondition `pulumi:"condition"`
	Entitytype                                *string                                           `pulumi:"entitytype"`
	Etag                                      *string                                           `pulumi:"etag"`
	Featurestore                              *string                                           `pulumi:"featurestore"`
	Member                                    *string                                           `pulumi:"member"`
	Role                                      *string                                           `pulumi:"role"`
	VertexAiFeaturestoreEntitytypeIamMemberId *string                                           `pulumi:"vertexAiFeaturestoreEntitytypeIamMemberId"`
}

type VertexAiFeaturestoreEntitytypeIamMemberState struct {
	Condition                                 VertexAiFeaturestoreEntitytypeIamMemberConditionPtrInput
	Entitytype                                pulumi.StringPtrInput
	Etag                                      pulumi.StringPtrInput
	Featurestore                              pulumi.StringPtrInput
	Member                                    pulumi.StringPtrInput
	Role                                      pulumi.StringPtrInput
	VertexAiFeaturestoreEntitytypeIamMemberId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeIamMemberState)(nil)).Elem()
}

type vertexAiFeaturestoreEntitytypeIamMemberArgs struct {
	Condition                                 *VertexAiFeaturestoreEntitytypeIamMemberCondition `pulumi:"condition"`
	Entitytype                                string                                            `pulumi:"entitytype"`
	Featurestore                              string                                            `pulumi:"featurestore"`
	Member                                    string                                            `pulumi:"member"`
	Role                                      string                                            `pulumi:"role"`
	VertexAiFeaturestoreEntitytypeIamMemberId *string                                           `pulumi:"vertexAiFeaturestoreEntitytypeIamMemberId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreEntitytypeIamMember resource.
type VertexAiFeaturestoreEntitytypeIamMemberArgs struct {
	Condition                                 VertexAiFeaturestoreEntitytypeIamMemberConditionPtrInput
	Entitytype                                pulumi.StringInput
	Featurestore                              pulumi.StringInput
	Member                                    pulumi.StringInput
	Role                                      pulumi.StringInput
	VertexAiFeaturestoreEntitytypeIamMemberId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeIamMemberArgs)(nil)).Elem()
}

type VertexAiFeaturestoreEntitytypeIamMemberInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreEntitytypeIamMemberOutput() VertexAiFeaturestoreEntitytypeIamMemberOutput
	ToVertexAiFeaturestoreEntitytypeIamMemberOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamMemberOutput
}

func (*VertexAiFeaturestoreEntitytypeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeIamMember)(nil)).Elem()
}

func (i *VertexAiFeaturestoreEntitytypeIamMember) ToVertexAiFeaturestoreEntitytypeIamMemberOutput() VertexAiFeaturestoreEntitytypeIamMemberOutput {
	return i.ToVertexAiFeaturestoreEntitytypeIamMemberOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreEntitytypeIamMember) ToVertexAiFeaturestoreEntitytypeIamMemberOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreEntitytypeIamMemberOutput)
}

type VertexAiFeaturestoreEntitytypeIamMemberOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreEntitytypeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeIamMember)(nil)).Elem()
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) ToVertexAiFeaturestoreEntitytypeIamMemberOutput() VertexAiFeaturestoreEntitytypeIamMemberOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) ToVertexAiFeaturestoreEntitytypeIamMemberOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamMemberOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) Condition() VertexAiFeaturestoreEntitytypeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) VertexAiFeaturestoreEntitytypeIamMemberConditionPtrOutput {
		return v.Condition
	}).(VertexAiFeaturestoreEntitytypeIamMemberConditionPtrOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) Entitytype() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) pulumi.StringOutput { return v.Entitytype }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamMemberOutput) VertexAiFeaturestoreEntitytypeIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamMember) pulumi.StringOutput {
		return v.VertexAiFeaturestoreEntitytypeIamMemberId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreEntitytypeIamMemberInput)(nil)).Elem(), &VertexAiFeaturestoreEntitytypeIamMember{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreEntitytypeIamMemberOutput{})
}
