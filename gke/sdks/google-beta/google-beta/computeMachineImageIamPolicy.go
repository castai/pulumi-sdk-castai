// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeMachineImageIamPolicy struct {
	pulumi.CustomResourceState

	ComputeMachineImageIamPolicyId pulumi.StringOutput `pulumi:"computeMachineImageIamPolicyId"`
	Etag                           pulumi.StringOutput `pulumi:"etag"`
	MachineImage                   pulumi.StringOutput `pulumi:"machineImage"`
	PolicyData                     pulumi.StringOutput `pulumi:"policyData"`
	Project                        pulumi.StringOutput `pulumi:"project"`
}

// NewComputeMachineImageIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewComputeMachineImageIamPolicy(ctx *pulumi.Context,
	name string, args *ComputeMachineImageIamPolicyArgs, opts ...pulumi.ResourceOption) (*ComputeMachineImageIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MachineImage == nil {
		return nil, errors.New("invalid value for required argument 'MachineImage'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeMachineImageIamPolicy
	err = ctx.RegisterPackageResource("google-beta:index/computeMachineImageIamPolicy:ComputeMachineImageIamPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeMachineImageIamPolicy gets an existing ComputeMachineImageIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeMachineImageIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeMachineImageIamPolicyState, opts ...pulumi.ResourceOption) (*ComputeMachineImageIamPolicy, error) {
	var resource ComputeMachineImageIamPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeMachineImageIamPolicy:ComputeMachineImageIamPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeMachineImageIamPolicy resources.
type computeMachineImageIamPolicyState struct {
	ComputeMachineImageIamPolicyId *string `pulumi:"computeMachineImageIamPolicyId"`
	Etag                           *string `pulumi:"etag"`
	MachineImage                   *string `pulumi:"machineImage"`
	PolicyData                     *string `pulumi:"policyData"`
	Project                        *string `pulumi:"project"`
}

type ComputeMachineImageIamPolicyState struct {
	ComputeMachineImageIamPolicyId pulumi.StringPtrInput
	Etag                           pulumi.StringPtrInput
	MachineImage                   pulumi.StringPtrInput
	PolicyData                     pulumi.StringPtrInput
	Project                        pulumi.StringPtrInput
}

func (ComputeMachineImageIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeMachineImageIamPolicyState)(nil)).Elem()
}

type computeMachineImageIamPolicyArgs struct {
	ComputeMachineImageIamPolicyId *string `pulumi:"computeMachineImageIamPolicyId"`
	MachineImage                   string  `pulumi:"machineImage"`
	PolicyData                     string  `pulumi:"policyData"`
	Project                        *string `pulumi:"project"`
}

// The set of arguments for constructing a ComputeMachineImageIamPolicy resource.
type ComputeMachineImageIamPolicyArgs struct {
	ComputeMachineImageIamPolicyId pulumi.StringPtrInput
	MachineImage                   pulumi.StringInput
	PolicyData                     pulumi.StringInput
	Project                        pulumi.StringPtrInput
}

func (ComputeMachineImageIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeMachineImageIamPolicyArgs)(nil)).Elem()
}

type ComputeMachineImageIamPolicyInput interface {
	pulumi.Input

	ToComputeMachineImageIamPolicyOutput() ComputeMachineImageIamPolicyOutput
	ToComputeMachineImageIamPolicyOutputWithContext(ctx context.Context) ComputeMachineImageIamPolicyOutput
}

func (*ComputeMachineImageIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeMachineImageIamPolicy)(nil)).Elem()
}

func (i *ComputeMachineImageIamPolicy) ToComputeMachineImageIamPolicyOutput() ComputeMachineImageIamPolicyOutput {
	return i.ToComputeMachineImageIamPolicyOutputWithContext(context.Background())
}

func (i *ComputeMachineImageIamPolicy) ToComputeMachineImageIamPolicyOutputWithContext(ctx context.Context) ComputeMachineImageIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeMachineImageIamPolicyOutput)
}

type ComputeMachineImageIamPolicyOutput struct{ *pulumi.OutputState }

func (ComputeMachineImageIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeMachineImageIamPolicy)(nil)).Elem()
}

func (o ComputeMachineImageIamPolicyOutput) ToComputeMachineImageIamPolicyOutput() ComputeMachineImageIamPolicyOutput {
	return o
}

func (o ComputeMachineImageIamPolicyOutput) ToComputeMachineImageIamPolicyOutputWithContext(ctx context.Context) ComputeMachineImageIamPolicyOutput {
	return o
}

func (o ComputeMachineImageIamPolicyOutput) ComputeMachineImageIamPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamPolicy) pulumi.StringOutput { return v.ComputeMachineImageIamPolicyId }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamPolicyOutput) MachineImage() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamPolicy) pulumi.StringOutput { return v.MachineImage }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ComputeMachineImageIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeMachineImageIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeMachineImageIamPolicyInput)(nil)).Elem(), &ComputeMachineImageIamPolicy{})
	pulumi.RegisterOutputType(ComputeMachineImageIamPolicyOutput{})
}
