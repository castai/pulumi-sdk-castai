// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerServicePerimeters struct {
	pulumi.CustomResourceState

	AccessContextManagerServicePerimetersId pulumi.StringOutput `pulumi:"accessContextManagerServicePerimetersId"`
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
	ServicePerimeters AccessContextManagerServicePerimetersServicePerimeterArrayOutput `pulumi:"servicePerimeters"`
	Timeouts          AccessContextManagerServicePerimetersTimeoutsPtrOutput           `pulumi:"timeouts"`
}

// NewAccessContextManagerServicePerimeters registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerServicePerimeters(ctx *pulumi.Context,
	name string, args *AccessContextManagerServicePerimetersArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeters, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerServicePerimeters
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerServicePerimeters:AccessContextManagerServicePerimeters", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerServicePerimeters gets an existing AccessContextManagerServicePerimeters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerServicePerimeters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerServicePerimetersState, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeters, error) {
	var resource AccessContextManagerServicePerimeters
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerServicePerimeters:AccessContextManagerServicePerimeters", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerServicePerimeters resources.
type accessContextManagerServicePerimetersState struct {
	AccessContextManagerServicePerimetersId *string `pulumi:"accessContextManagerServicePerimetersId"`
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent *string `pulumi:"parent"`
	// The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
	ServicePerimeters []AccessContextManagerServicePerimetersServicePerimeter `pulumi:"servicePerimeters"`
	Timeouts          *AccessContextManagerServicePerimetersTimeouts          `pulumi:"timeouts"`
}

type AccessContextManagerServicePerimetersState struct {
	AccessContextManagerServicePerimetersId pulumi.StringPtrInput
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent pulumi.StringPtrInput
	// The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
	ServicePerimeters AccessContextManagerServicePerimetersServicePerimeterArrayInput
	Timeouts          AccessContextManagerServicePerimetersTimeoutsPtrInput
}

func (AccessContextManagerServicePerimetersState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimetersState)(nil)).Elem()
}

type accessContextManagerServicePerimetersArgs struct {
	AccessContextManagerServicePerimetersId *string `pulumi:"accessContextManagerServicePerimetersId"`
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent string `pulumi:"parent"`
	// The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
	ServicePerimeters []AccessContextManagerServicePerimetersServicePerimeter `pulumi:"servicePerimeters"`
	Timeouts          *AccessContextManagerServicePerimetersTimeouts          `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessContextManagerServicePerimeters resource.
type AccessContextManagerServicePerimetersArgs struct {
	AccessContextManagerServicePerimetersId pulumi.StringPtrInput
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent pulumi.StringInput
	// The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
	ServicePerimeters AccessContextManagerServicePerimetersServicePerimeterArrayInput
	Timeouts          AccessContextManagerServicePerimetersTimeoutsPtrInput
}

func (AccessContextManagerServicePerimetersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimetersArgs)(nil)).Elem()
}

type AccessContextManagerServicePerimetersInput interface {
	pulumi.Input

	ToAccessContextManagerServicePerimetersOutput() AccessContextManagerServicePerimetersOutput
	ToAccessContextManagerServicePerimetersOutputWithContext(ctx context.Context) AccessContextManagerServicePerimetersOutput
}

func (*AccessContextManagerServicePerimeters) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeters)(nil)).Elem()
}

func (i *AccessContextManagerServicePerimeters) ToAccessContextManagerServicePerimetersOutput() AccessContextManagerServicePerimetersOutput {
	return i.ToAccessContextManagerServicePerimetersOutputWithContext(context.Background())
}

func (i *AccessContextManagerServicePerimeters) ToAccessContextManagerServicePerimetersOutputWithContext(ctx context.Context) AccessContextManagerServicePerimetersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerServicePerimetersOutput)
}

type AccessContextManagerServicePerimetersOutput struct{ *pulumi.OutputState }

func (AccessContextManagerServicePerimetersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeters)(nil)).Elem()
}

func (o AccessContextManagerServicePerimetersOutput) ToAccessContextManagerServicePerimetersOutput() AccessContextManagerServicePerimetersOutput {
	return o
}

func (o AccessContextManagerServicePerimetersOutput) ToAccessContextManagerServicePerimetersOutputWithContext(ctx context.Context) AccessContextManagerServicePerimetersOutput {
	return o
}

func (o AccessContextManagerServicePerimetersOutput) AccessContextManagerServicePerimetersId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeters) pulumi.StringOutput {
		return v.AccessContextManagerServicePerimetersId
	}).(pulumi.StringOutput)
}

// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
func (o AccessContextManagerServicePerimetersOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeters) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
func (o AccessContextManagerServicePerimetersOutput) ServicePerimeters() AccessContextManagerServicePerimetersServicePerimeterArrayOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeters) AccessContextManagerServicePerimetersServicePerimeterArrayOutput {
		return v.ServicePerimeters
	}).(AccessContextManagerServicePerimetersServicePerimeterArrayOutput)
}

func (o AccessContextManagerServicePerimetersOutput) Timeouts() AccessContextManagerServicePerimetersTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeters) AccessContextManagerServicePerimetersTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerServicePerimetersTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerServicePerimetersInput)(nil)).Elem(), &AccessContextManagerServicePerimeters{})
	pulumi.RegisterOutputType(AccessContextManagerServicePerimetersOutput{})
}
