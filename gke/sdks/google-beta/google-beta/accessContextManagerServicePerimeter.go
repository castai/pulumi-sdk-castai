// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessContextManagerServicePerimeter struct {
	pulumi.CustomResourceState

	AccessContextManagerServicePerimeterId pulumi.StringOutput `pulumi:"accessContextManagerServicePerimeterId"`
	// Time the AccessPolicy was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the ServicePerimeter and its use. Does not affect behavior.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
	// and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	Name pulumi.StringOutput `pulumi:"name"`
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
	// resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
	// addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
	// bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
	// (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
	// the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
	// with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
	// data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
	// "PERIMETER_TYPE_BRIDGE"]
	PerimeterType pulumi.StringPtrOutput `pulumi:"perimeterType"`
	// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
	// configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
	// is set.
	Spec AccessContextManagerServicePerimeterSpecPtrOutput `pulumi:"spec"`
	// ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
	// perimeter content and boundaries.
	Status   AccessContextManagerServicePerimeterStatusPtrOutput   `pulumi:"status"`
	Timeouts AccessContextManagerServicePerimeterTimeoutsPtrOutput `pulumi:"timeouts"`
	// Human readable title. Must be unique within the Policy.
	Title pulumi.StringOutput `pulumi:"title"`
	// Time the AccessPolicy was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
	// is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
	// the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
	// them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
	// useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
	UseExplicitDryRunSpec pulumi.BoolPtrOutput `pulumi:"useExplicitDryRunSpec"`
}

// NewAccessContextManagerServicePerimeter registers a new resource with the given unique name, arguments, and options.
func NewAccessContextManagerServicePerimeter(ctx *pulumi.Context,
	name string, args *AccessContextManagerServicePerimeterArgs, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource AccessContextManagerServicePerimeter
	err = ctx.RegisterPackageResource("google-beta:index/accessContextManagerServicePerimeter:AccessContextManagerServicePerimeter", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessContextManagerServicePerimeter gets an existing AccessContextManagerServicePerimeter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessContextManagerServicePerimeter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessContextManagerServicePerimeterState, opts ...pulumi.ResourceOption) (*AccessContextManagerServicePerimeter, error) {
	var resource AccessContextManagerServicePerimeter
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/accessContextManagerServicePerimeter:AccessContextManagerServicePerimeter", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessContextManagerServicePerimeter resources.
type accessContextManagerServicePerimeterState struct {
	AccessContextManagerServicePerimeterId *string `pulumi:"accessContextManagerServicePerimeterId"`
	// Time the AccessPolicy was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Description of the ServicePerimeter and its use. Does not affect behavior.
	Description *string `pulumi:"description"`
	// Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
	// and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	Name *string `pulumi:"name"`
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent *string `pulumi:"parent"`
	// Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
	// resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
	// addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
	// bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
	// (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
	// the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
	// with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
	// data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
	// "PERIMETER_TYPE_BRIDGE"]
	PerimeterType *string `pulumi:"perimeterType"`
	// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
	// configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
	// is set.
	Spec *AccessContextManagerServicePerimeterSpec `pulumi:"spec"`
	// ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
	// perimeter content and boundaries.
	Status   *AccessContextManagerServicePerimeterStatus   `pulumi:"status"`
	Timeouts *AccessContextManagerServicePerimeterTimeouts `pulumi:"timeouts"`
	// Human readable title. Must be unique within the Policy.
	Title *string `pulumi:"title"`
	// Time the AccessPolicy was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
	// is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
	// the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
	// them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
	// useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
	UseExplicitDryRunSpec *bool `pulumi:"useExplicitDryRunSpec"`
}

type AccessContextManagerServicePerimeterState struct {
	AccessContextManagerServicePerimeterId pulumi.StringPtrInput
	// Time the AccessPolicy was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Description of the ServicePerimeter and its use. Does not affect behavior.
	Description pulumi.StringPtrInput
	// Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
	// and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	Name pulumi.StringPtrInput
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent pulumi.StringPtrInput
	// Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
	// resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
	// addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
	// bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
	// (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
	// the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
	// with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
	// data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
	// "PERIMETER_TYPE_BRIDGE"]
	PerimeterType pulumi.StringPtrInput
	// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
	// configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
	// is set.
	Spec AccessContextManagerServicePerimeterSpecPtrInput
	// ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
	// perimeter content and boundaries.
	Status   AccessContextManagerServicePerimeterStatusPtrInput
	Timeouts AccessContextManagerServicePerimeterTimeoutsPtrInput
	// Human readable title. Must be unique within the Policy.
	Title pulumi.StringPtrInput
	// Time the AccessPolicy was updated in UTC.
	UpdateTime pulumi.StringPtrInput
	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
	// is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
	// the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
	// them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
	// useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
	UseExplicitDryRunSpec pulumi.BoolPtrInput
}

func (AccessContextManagerServicePerimeterState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimeterState)(nil)).Elem()
}

type accessContextManagerServicePerimeterArgs struct {
	AccessContextManagerServicePerimeterId *string `pulumi:"accessContextManagerServicePerimeterId"`
	// Description of the ServicePerimeter and its use. Does not affect behavior.
	Description *string `pulumi:"description"`
	// Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
	// and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	Name *string `pulumi:"name"`
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent string `pulumi:"parent"`
	// Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
	// resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
	// addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
	// bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
	// (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
	// the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
	// with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
	// data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
	// "PERIMETER_TYPE_BRIDGE"]
	PerimeterType *string `pulumi:"perimeterType"`
	// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
	// configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
	// is set.
	Spec *AccessContextManagerServicePerimeterSpec `pulumi:"spec"`
	// ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
	// perimeter content and boundaries.
	Status   *AccessContextManagerServicePerimeterStatus   `pulumi:"status"`
	Timeouts *AccessContextManagerServicePerimeterTimeouts `pulumi:"timeouts"`
	// Human readable title. Must be unique within the Policy.
	Title string `pulumi:"title"`
	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
	// is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
	// the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
	// them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
	// useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
	UseExplicitDryRunSpec *bool `pulumi:"useExplicitDryRunSpec"`
}

// The set of arguments for constructing a AccessContextManagerServicePerimeter resource.
type AccessContextManagerServicePerimeterArgs struct {
	AccessContextManagerServicePerimeterId pulumi.StringPtrInput
	// Description of the ServicePerimeter and its use. Does not affect behavior.
	Description pulumi.StringPtrInput
	// Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
	// and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	Name pulumi.StringPtrInput
	// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
	Parent pulumi.StringInput
	// Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
	// resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
	// addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
	// bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
	// (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
	// the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
	// with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
	// data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
	// "PERIMETER_TYPE_BRIDGE"]
	PerimeterType pulumi.StringPtrInput
	// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
	// configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
	// is set.
	Spec AccessContextManagerServicePerimeterSpecPtrInput
	// ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
	// perimeter content and boundaries.
	Status   AccessContextManagerServicePerimeterStatusPtrInput
	Timeouts AccessContextManagerServicePerimeterTimeoutsPtrInput
	// Human readable title. Must be unique within the Policy.
	Title pulumi.StringInput
	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
	// is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
	// the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
	// them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
	// useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
	UseExplicitDryRunSpec pulumi.BoolPtrInput
}

func (AccessContextManagerServicePerimeterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessContextManagerServicePerimeterArgs)(nil)).Elem()
}

type AccessContextManagerServicePerimeterInput interface {
	pulumi.Input

	ToAccessContextManagerServicePerimeterOutput() AccessContextManagerServicePerimeterOutput
	ToAccessContextManagerServicePerimeterOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterOutput
}

func (*AccessContextManagerServicePerimeter) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeter)(nil)).Elem()
}

func (i *AccessContextManagerServicePerimeter) ToAccessContextManagerServicePerimeterOutput() AccessContextManagerServicePerimeterOutput {
	return i.ToAccessContextManagerServicePerimeterOutputWithContext(context.Background())
}

func (i *AccessContextManagerServicePerimeter) ToAccessContextManagerServicePerimeterOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessContextManagerServicePerimeterOutput)
}

type AccessContextManagerServicePerimeterOutput struct{ *pulumi.OutputState }

func (AccessContextManagerServicePerimeterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessContextManagerServicePerimeter)(nil)).Elem()
}

func (o AccessContextManagerServicePerimeterOutput) ToAccessContextManagerServicePerimeterOutput() AccessContextManagerServicePerimeterOutput {
	return o
}

func (o AccessContextManagerServicePerimeterOutput) ToAccessContextManagerServicePerimeterOutputWithContext(ctx context.Context) AccessContextManagerServicePerimeterOutput {
	return o
}

func (o AccessContextManagerServicePerimeterOutput) AccessContextManagerServicePerimeterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringOutput {
		return v.AccessContextManagerServicePerimeterId
	}).(pulumi.StringOutput)
}

// Time the AccessPolicy was created in UTC.
func (o AccessContextManagerServicePerimeterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the ServicePerimeter and its use. Does not affect behavior.
func (o AccessContextManagerServicePerimeterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
// and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
func (o AccessContextManagerServicePerimeterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
func (o AccessContextManagerServicePerimeterOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
// resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
// addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
// bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
// (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
// the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
// with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
// data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
// "PERIMETER_TYPE_BRIDGE"]
func (o AccessContextManagerServicePerimeterOutput) PerimeterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringPtrOutput { return v.PerimeterType }).(pulumi.StringPtrOutput)
}

// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
// configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
// is set.
func (o AccessContextManagerServicePerimeterOutput) Spec() AccessContextManagerServicePerimeterSpecPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) AccessContextManagerServicePerimeterSpecPtrOutput {
		return v.Spec
	}).(AccessContextManagerServicePerimeterSpecPtrOutput)
}

// ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
// perimeter content and boundaries.
func (o AccessContextManagerServicePerimeterOutput) Status() AccessContextManagerServicePerimeterStatusPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) AccessContextManagerServicePerimeterStatusPtrOutput {
		return v.Status
	}).(AccessContextManagerServicePerimeterStatusPtrOutput)
}

func (o AccessContextManagerServicePerimeterOutput) Timeouts() AccessContextManagerServicePerimeterTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) AccessContextManagerServicePerimeterTimeoutsPtrOutput {
		return v.Timeouts
	}).(AccessContextManagerServicePerimeterTimeoutsPtrOutput)
}

// Human readable title. Must be unique within the Policy.
func (o AccessContextManagerServicePerimeterOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Time the AccessPolicy was updated in UTC.
func (o AccessContextManagerServicePerimeterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
// is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
// implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
// the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
// them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
// useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
func (o AccessContextManagerServicePerimeterOutput) UseExplicitDryRunSpec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessContextManagerServicePerimeter) pulumi.BoolPtrOutput { return v.UseExplicitDryRunSpec }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessContextManagerServicePerimeterInput)(nil)).Elem(), &AccessContextManagerServicePerimeter{})
	pulumi.RegisterOutputType(AccessContextManagerServicePerimeterOutput{})
}
