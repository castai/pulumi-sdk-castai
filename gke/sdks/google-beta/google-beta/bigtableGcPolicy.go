// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigtableGcPolicy struct {
	pulumi.CustomResourceState

	BigtableGcPolicyId pulumi.StringOutput `pulumi:"bigtableGcPolicyId"`
	// The name of the column family.
	ColumnFamily pulumi.StringOutput `pulumi:"columnFamily"`
	// The deletion policy for the GC policy. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
	// useful for GC policy as it cannot be deleted in a replicated instance. Possible values are: "ABANDON".
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// Serialized JSON string for garbage collection policy. Conflicts with "mode", "max_age" and "max_version".
	GcRules pulumi.StringPtrOutput `pulumi:"gcRules"`
	// Allows ignoring warnings when updating the GC policy. This can be used to increase the gc policy on replicated clusters.
	// Doing this may make clusters be inconsistent for a longer period of time, before using this make sure you understand the
	// risks listed at https://cloud.google.com/bigtable/docs/garbage-collection#increasing
	IgnoreWarnings pulumi.BoolPtrOutput `pulumi:"ignoreWarnings"`
	// The name of the Bigtable instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all cells older than the given age.
	MaxAge BigtableGcPolicyMaxAgePtrOutput `pulumi:"maxAge"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions BigtableGcPolicyMaxVersionArrayOutput `pulumi:"maxVersions"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. If multiple policies are set, you should choose between UNION OR INTERSECTION.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The name of the table.
	Table    pulumi.StringOutput               `pulumi:"table"`
	Timeouts BigtableGcPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewBigtableGcPolicy registers a new resource with the given unique name, arguments, and options.
func NewBigtableGcPolicy(ctx *pulumi.Context,
	name string, args *BigtableGcPolicyArgs, opts ...pulumi.ResourceOption) (*BigtableGcPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColumnFamily == nil {
		return nil, errors.New("invalid value for required argument 'ColumnFamily'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigtableGcPolicy
	err = ctx.RegisterPackageResource("google-beta:index/bigtableGcPolicy:BigtableGcPolicy", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigtableGcPolicy gets an existing BigtableGcPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigtableGcPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigtableGcPolicyState, opts ...pulumi.ResourceOption) (*BigtableGcPolicy, error) {
	var resource BigtableGcPolicy
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigtableGcPolicy:BigtableGcPolicy", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigtableGcPolicy resources.
type bigtableGcPolicyState struct {
	BigtableGcPolicyId *string `pulumi:"bigtableGcPolicyId"`
	// The name of the column family.
	ColumnFamily *string `pulumi:"columnFamily"`
	// The deletion policy for the GC policy. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
	// useful for GC policy as it cannot be deleted in a replicated instance. Possible values are: "ABANDON".
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Serialized JSON string for garbage collection policy. Conflicts with "mode", "max_age" and "max_version".
	GcRules *string `pulumi:"gcRules"`
	// Allows ignoring warnings when updating the GC policy. This can be used to increase the gc policy on replicated clusters.
	// Doing this may make clusters be inconsistent for a longer period of time, before using this make sure you understand the
	// risks listed at https://cloud.google.com/bigtable/docs/garbage-collection#increasing
	IgnoreWarnings *bool `pulumi:"ignoreWarnings"`
	// The name of the Bigtable instance.
	InstanceName *string `pulumi:"instanceName"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all cells older than the given age.
	MaxAge *BigtableGcPolicyMaxAge `pulumi:"maxAge"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions []BigtableGcPolicyMaxVersion `pulumi:"maxVersions"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. If multiple policies are set, you should choose between UNION OR INTERSECTION.
	Mode *string `pulumi:"mode"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the table.
	Table    *string                   `pulumi:"table"`
	Timeouts *BigtableGcPolicyTimeouts `pulumi:"timeouts"`
}

type BigtableGcPolicyState struct {
	BigtableGcPolicyId pulumi.StringPtrInput
	// The name of the column family.
	ColumnFamily pulumi.StringPtrInput
	// The deletion policy for the GC policy. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
	// useful for GC policy as it cannot be deleted in a replicated instance. Possible values are: "ABANDON".
	DeletionPolicy pulumi.StringPtrInput
	// Serialized JSON string for garbage collection policy. Conflicts with "mode", "max_age" and "max_version".
	GcRules pulumi.StringPtrInput
	// Allows ignoring warnings when updating the GC policy. This can be used to increase the gc policy on replicated clusters.
	// Doing this may make clusters be inconsistent for a longer period of time, before using this make sure you understand the
	// risks listed at https://cloud.google.com/bigtable/docs/garbage-collection#increasing
	IgnoreWarnings pulumi.BoolPtrInput
	// The name of the Bigtable instance.
	InstanceName pulumi.StringPtrInput
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all cells older than the given age.
	MaxAge BigtableGcPolicyMaxAgePtrInput
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions BigtableGcPolicyMaxVersionArrayInput
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. If multiple policies are set, you should choose between UNION OR INTERSECTION.
	Mode pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the table.
	Table    pulumi.StringPtrInput
	Timeouts BigtableGcPolicyTimeoutsPtrInput
}

func (BigtableGcPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableGcPolicyState)(nil)).Elem()
}

type bigtableGcPolicyArgs struct {
	BigtableGcPolicyId *string `pulumi:"bigtableGcPolicyId"`
	// The name of the column family.
	ColumnFamily string `pulumi:"columnFamily"`
	// The deletion policy for the GC policy. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
	// useful for GC policy as it cannot be deleted in a replicated instance. Possible values are: "ABANDON".
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Serialized JSON string for garbage collection policy. Conflicts with "mode", "max_age" and "max_version".
	GcRules *string `pulumi:"gcRules"`
	// Allows ignoring warnings when updating the GC policy. This can be used to increase the gc policy on replicated clusters.
	// Doing this may make clusters be inconsistent for a longer period of time, before using this make sure you understand the
	// risks listed at https://cloud.google.com/bigtable/docs/garbage-collection#increasing
	IgnoreWarnings *bool `pulumi:"ignoreWarnings"`
	// The name of the Bigtable instance.
	InstanceName string `pulumi:"instanceName"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all cells older than the given age.
	MaxAge *BigtableGcPolicyMaxAge `pulumi:"maxAge"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions []BigtableGcPolicyMaxVersion `pulumi:"maxVersions"`
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. If multiple policies are set, you should choose between UNION OR INTERSECTION.
	Mode *string `pulumi:"mode"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the table.
	Table    string                    `pulumi:"table"`
	Timeouts *BigtableGcPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a BigtableGcPolicy resource.
type BigtableGcPolicyArgs struct {
	BigtableGcPolicyId pulumi.StringPtrInput
	// The name of the column family.
	ColumnFamily pulumi.StringInput
	// The deletion policy for the GC policy. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
	// useful for GC policy as it cannot be deleted in a replicated instance. Possible values are: "ABANDON".
	DeletionPolicy pulumi.StringPtrInput
	// Serialized JSON string for garbage collection policy. Conflicts with "mode", "max_age" and "max_version".
	GcRules pulumi.StringPtrInput
	// Allows ignoring warnings when updating the GC policy. This can be used to increase the gc policy on replicated clusters.
	// Doing this may make clusters be inconsistent for a longer period of time, before using this make sure you understand the
	// risks listed at https://cloud.google.com/bigtable/docs/garbage-collection#increasing
	IgnoreWarnings pulumi.BoolPtrInput
	// The name of the Bigtable instance.
	InstanceName pulumi.StringInput
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all cells older than the given age.
	MaxAge BigtableGcPolicyMaxAgePtrInput
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions BigtableGcPolicyMaxVersionArrayInput
	// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
	// deprecated in the future. If multiple policies are set, you should choose between UNION OR INTERSECTION.
	Mode pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the table.
	Table    pulumi.StringInput
	Timeouts BigtableGcPolicyTimeoutsPtrInput
}

func (BigtableGcPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigtableGcPolicyArgs)(nil)).Elem()
}

type BigtableGcPolicyInput interface {
	pulumi.Input

	ToBigtableGcPolicyOutput() BigtableGcPolicyOutput
	ToBigtableGcPolicyOutputWithContext(ctx context.Context) BigtableGcPolicyOutput
}

func (*BigtableGcPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableGcPolicy)(nil)).Elem()
}

func (i *BigtableGcPolicy) ToBigtableGcPolicyOutput() BigtableGcPolicyOutput {
	return i.ToBigtableGcPolicyOutputWithContext(context.Background())
}

func (i *BigtableGcPolicy) ToBigtableGcPolicyOutputWithContext(ctx context.Context) BigtableGcPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableGcPolicyOutput)
}

type BigtableGcPolicyOutput struct{ *pulumi.OutputState }

func (BigtableGcPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableGcPolicy)(nil)).Elem()
}

func (o BigtableGcPolicyOutput) ToBigtableGcPolicyOutput() BigtableGcPolicyOutput {
	return o
}

func (o BigtableGcPolicyOutput) ToBigtableGcPolicyOutputWithContext(ctx context.Context) BigtableGcPolicyOutput {
	return o
}

func (o BigtableGcPolicyOutput) BigtableGcPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringOutput { return v.BigtableGcPolicyId }).(pulumi.StringOutput)
}

// The name of the column family.
func (o BigtableGcPolicyOutput) ColumnFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringOutput { return v.ColumnFamily }).(pulumi.StringOutput)
}

// The deletion policy for the GC policy. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
// useful for GC policy as it cannot be deleted in a replicated instance. Possible values are: "ABANDON".
func (o BigtableGcPolicyOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// Serialized JSON string for garbage collection policy. Conflicts with "mode", "max_age" and "max_version".
func (o BigtableGcPolicyOutput) GcRules() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringPtrOutput { return v.GcRules }).(pulumi.StringPtrOutput)
}

// Allows ignoring warnings when updating the GC policy. This can be used to increase the gc policy on replicated clusters.
// Doing this may make clusters be inconsistent for a longer period of time, before using this make sure you understand the
// risks listed at https://cloud.google.com/bigtable/docs/garbage-collection#increasing
func (o BigtableGcPolicyOutput) IgnoreWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.BoolPtrOutput { return v.IgnoreWarnings }).(pulumi.BoolPtrOutput)
}

// The name of the Bigtable instance.
func (o BigtableGcPolicyOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
// deprecated in the future. GC policy that applies to all cells older than the given age.
func (o BigtableGcPolicyOutput) MaxAge() BigtableGcPolicyMaxAgePtrOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) BigtableGcPolicyMaxAgePtrOutput { return v.MaxAge }).(BigtableGcPolicyMaxAgePtrOutput)
}

// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
// deprecated in the future. GC policy that applies to all versions of a cell except for the most recent.
func (o BigtableGcPolicyOutput) MaxVersions() BigtableGcPolicyMaxVersionArrayOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) BigtableGcPolicyMaxVersionArrayOutput { return v.MaxVersions }).(BigtableGcPolicyMaxVersionArrayOutput)
}

// NOTE: 'gc_rules' is more flexible, and should be preferred over this field for new resources. This field may be
// deprecated in the future. If multiple policies are set, you should choose between UNION OR INTERSECTION.
func (o BigtableGcPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (o BigtableGcPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The name of the table.
func (o BigtableGcPolicyOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

func (o BigtableGcPolicyOutput) Timeouts() BigtableGcPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *BigtableGcPolicy) BigtableGcPolicyTimeoutsPtrOutput { return v.Timeouts }).(BigtableGcPolicyTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableGcPolicyInput)(nil)).Elem(), &BigtableGcPolicy{})
	pulumi.RegisterOutputType(BigtableGcPolicyOutput{})
}
