// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryAnalyticsHubDataExchangeIamBinding struct {
	pulumi.CustomResourceState

	BigqueryAnalyticsHubDataExchangeIamBindingId pulumi.StringOutput                                          `pulumi:"bigqueryAnalyticsHubDataExchangeIamBindingId"`
	Condition                                    BigqueryAnalyticsHubDataExchangeIamBindingConditionPtrOutput `pulumi:"condition"`
	DataExchangeId                               pulumi.StringOutput                                          `pulumi:"dataExchangeId"`
	Etag                                         pulumi.StringOutput                                          `pulumi:"etag"`
	Location                                     pulumi.StringOutput                                          `pulumi:"location"`
	Members                                      pulumi.StringArrayOutput                                     `pulumi:"members"`
	Project                                      pulumi.StringOutput                                          `pulumi:"project"`
	Role                                         pulumi.StringOutput                                          `pulumi:"role"`
}

// NewBigqueryAnalyticsHubDataExchangeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewBigqueryAnalyticsHubDataExchangeIamBinding(ctx *pulumi.Context,
	name string, args *BigqueryAnalyticsHubDataExchangeIamBindingArgs, opts ...pulumi.ResourceOption) (*BigqueryAnalyticsHubDataExchangeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryAnalyticsHubDataExchangeIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/bigqueryAnalyticsHubDataExchangeIamBinding:BigqueryAnalyticsHubDataExchangeIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryAnalyticsHubDataExchangeIamBinding gets an existing BigqueryAnalyticsHubDataExchangeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryAnalyticsHubDataExchangeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryAnalyticsHubDataExchangeIamBindingState, opts ...pulumi.ResourceOption) (*BigqueryAnalyticsHubDataExchangeIamBinding, error) {
	var resource BigqueryAnalyticsHubDataExchangeIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigqueryAnalyticsHubDataExchangeIamBinding:BigqueryAnalyticsHubDataExchangeIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryAnalyticsHubDataExchangeIamBinding resources.
type bigqueryAnalyticsHubDataExchangeIamBindingState struct {
	BigqueryAnalyticsHubDataExchangeIamBindingId *string                                              `pulumi:"bigqueryAnalyticsHubDataExchangeIamBindingId"`
	Condition                                    *BigqueryAnalyticsHubDataExchangeIamBindingCondition `pulumi:"condition"`
	DataExchangeId                               *string                                              `pulumi:"dataExchangeId"`
	Etag                                         *string                                              `pulumi:"etag"`
	Location                                     *string                                              `pulumi:"location"`
	Members                                      []string                                             `pulumi:"members"`
	Project                                      *string                                              `pulumi:"project"`
	Role                                         *string                                              `pulumi:"role"`
}

type BigqueryAnalyticsHubDataExchangeIamBindingState struct {
	BigqueryAnalyticsHubDataExchangeIamBindingId pulumi.StringPtrInput
	Condition                                    BigqueryAnalyticsHubDataExchangeIamBindingConditionPtrInput
	DataExchangeId                               pulumi.StringPtrInput
	Etag                                         pulumi.StringPtrInput
	Location                                     pulumi.StringPtrInput
	Members                                      pulumi.StringArrayInput
	Project                                      pulumi.StringPtrInput
	Role                                         pulumi.StringPtrInput
}

func (BigqueryAnalyticsHubDataExchangeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryAnalyticsHubDataExchangeIamBindingState)(nil)).Elem()
}

type bigqueryAnalyticsHubDataExchangeIamBindingArgs struct {
	BigqueryAnalyticsHubDataExchangeIamBindingId *string                                              `pulumi:"bigqueryAnalyticsHubDataExchangeIamBindingId"`
	Condition                                    *BigqueryAnalyticsHubDataExchangeIamBindingCondition `pulumi:"condition"`
	DataExchangeId                               string                                               `pulumi:"dataExchangeId"`
	Location                                     *string                                              `pulumi:"location"`
	Members                                      []string                                             `pulumi:"members"`
	Project                                      *string                                              `pulumi:"project"`
	Role                                         string                                               `pulumi:"role"`
}

// The set of arguments for constructing a BigqueryAnalyticsHubDataExchangeIamBinding resource.
type BigqueryAnalyticsHubDataExchangeIamBindingArgs struct {
	BigqueryAnalyticsHubDataExchangeIamBindingId pulumi.StringPtrInput
	Condition                                    BigqueryAnalyticsHubDataExchangeIamBindingConditionPtrInput
	DataExchangeId                               pulumi.StringInput
	Location                                     pulumi.StringPtrInput
	Members                                      pulumi.StringArrayInput
	Project                                      pulumi.StringPtrInput
	Role                                         pulumi.StringInput
}

func (BigqueryAnalyticsHubDataExchangeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryAnalyticsHubDataExchangeIamBindingArgs)(nil)).Elem()
}

type BigqueryAnalyticsHubDataExchangeIamBindingInput interface {
	pulumi.Input

	ToBigqueryAnalyticsHubDataExchangeIamBindingOutput() BigqueryAnalyticsHubDataExchangeIamBindingOutput
	ToBigqueryAnalyticsHubDataExchangeIamBindingOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamBindingOutput
}

func (*BigqueryAnalyticsHubDataExchangeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryAnalyticsHubDataExchangeIamBinding)(nil)).Elem()
}

func (i *BigqueryAnalyticsHubDataExchangeIamBinding) ToBigqueryAnalyticsHubDataExchangeIamBindingOutput() BigqueryAnalyticsHubDataExchangeIamBindingOutput {
	return i.ToBigqueryAnalyticsHubDataExchangeIamBindingOutputWithContext(context.Background())
}

func (i *BigqueryAnalyticsHubDataExchangeIamBinding) ToBigqueryAnalyticsHubDataExchangeIamBindingOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryAnalyticsHubDataExchangeIamBindingOutput)
}

type BigqueryAnalyticsHubDataExchangeIamBindingOutput struct{ *pulumi.OutputState }

func (BigqueryAnalyticsHubDataExchangeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryAnalyticsHubDataExchangeIamBinding)(nil)).Elem()
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) ToBigqueryAnalyticsHubDataExchangeIamBindingOutput() BigqueryAnalyticsHubDataExchangeIamBindingOutput {
	return o
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) ToBigqueryAnalyticsHubDataExchangeIamBindingOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamBindingOutput {
	return o
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) BigqueryAnalyticsHubDataExchangeIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringOutput {
		return v.BigqueryAnalyticsHubDataExchangeIamBindingId
	}).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) Condition() BigqueryAnalyticsHubDataExchangeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) BigqueryAnalyticsHubDataExchangeIamBindingConditionPtrOutput {
		return v.Condition
	}).(BigqueryAnalyticsHubDataExchangeIamBindingConditionPtrOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryAnalyticsHubDataExchangeIamBindingInput)(nil)).Elem(), &BigqueryAnalyticsHubDataExchangeIamBinding{})
	pulumi.RegisterOutputType(BigqueryAnalyticsHubDataExchangeIamBindingOutput{})
}
