// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataprocGdcSparkApplication struct {
	pulumi.CustomResourceState

	// The annotations to associate with this application. Annotations may be used to store client information, but are not
	// used by the server. **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// An ApplicationEnvironment from which to inherit configuration properties.
	ApplicationEnvironment pulumi.StringPtrOutput `pulumi:"applicationEnvironment"`
	// The timestamp when the resource was created.
	CreateTime                    pulumi.StringOutput `pulumi:"createTime"`
	DataprocGdcSparkApplicationId pulumi.StringOutput `pulumi:"dataprocGdcSparkApplicationId"`
	// List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image.
	// If a file with the same name exists in 2 images then the file from later image is used.
	DependencyImages pulumi.StringArrayOutput `pulumi:"dependencyImages"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	EffectiveLabels      pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The labels to associate with this application. Labels may be used for filtering and billing tracking. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the spark application.
	Location pulumi.StringOutput `pulumi:"location"`
	// URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
	MonitoringEndpoint pulumi.StringOutput `pulumi:"monitoringEndpoint"`
	// Identifier. The name of the application. Format:
	// projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
	Name pulumi.StringOutput `pulumi:"name"`
	// The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not
	// in scope for private GA
	OutputUri pulumi.StringOutput `pulumi:"outputUri"`
	Project   pulumi.StringOutput `pulumi:"project"`
	// application-specific properties.
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	// Represents the PySparkApplicationConfig.
	PysparkApplicationConfig DataprocGdcSparkApplicationPysparkApplicationConfigPtrOutput `pulumi:"pysparkApplicationConfig"`
	// Whether the application is currently reconciling. True if the current state of the resource does not match the intended
	// state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The id of the service instance to which this spark application belongs.
	Serviceinstance pulumi.StringOutput `pulumi:"serviceinstance"`
	// Represents the SparkApplicationConfig.
	SparkApplicationConfig DataprocGdcSparkApplicationSparkApplicationConfigPtrOutput `pulumi:"sparkApplicationConfig"`
	// The id of the application
	SparkApplicationId pulumi.StringOutput `pulumi:"sparkApplicationId"`
	// Represents the SparkRApplicationConfig.
	SparkRApplicationConfig DataprocGdcSparkApplicationSparkRApplicationConfigPtrOutput `pulumi:"sparkRApplicationConfig"`
	// Represents the SparkRApplicationConfig.
	SparkSqlApplicationConfig DataprocGdcSparkApplicationSparkSqlApplicationConfigPtrOutput `pulumi:"sparkSqlApplicationConfig"`
	// The current state. Possible values: * 'STATE_UNSPECIFIED' * 'PENDING' * 'RUNNING' * 'CANCELLING' * 'CANCELLED' *
	// 'SUCCEEDED' * 'FAILED'
	State pulumi.StringOutput `pulumi:"state"`
	// A message explaining the current state.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                       `pulumi:"terraformLabels"`
	Timeouts        DataprocGdcSparkApplicationTimeoutsPtrOutput `pulumi:"timeouts"`
	// System generated unique identifier for this application, formatted as UUID4.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The Dataproc version of this application.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewDataprocGdcSparkApplication registers a new resource with the given unique name, arguments, and options.
func NewDataprocGdcSparkApplication(ctx *pulumi.Context,
	name string, args *DataprocGdcSparkApplicationArgs, opts ...pulumi.ResourceOption) (*DataprocGdcSparkApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Serviceinstance == nil {
		return nil, errors.New("invalid value for required argument 'Serviceinstance'")
	}
	if args.SparkApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'SparkApplicationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DataprocGdcSparkApplication
	err = ctx.RegisterPackageResource("google-beta:index/dataprocGdcSparkApplication:DataprocGdcSparkApplication", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataprocGdcSparkApplication gets an existing DataprocGdcSparkApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataprocGdcSparkApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataprocGdcSparkApplicationState, opts ...pulumi.ResourceOption) (*DataprocGdcSparkApplication, error) {
	var resource DataprocGdcSparkApplication
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/dataprocGdcSparkApplication:DataprocGdcSparkApplication", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataprocGdcSparkApplication resources.
type dataprocGdcSparkApplicationState struct {
	// The annotations to associate with this application. Annotations may be used to store client information, but are not
	// used by the server. **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// An ApplicationEnvironment from which to inherit configuration properties.
	ApplicationEnvironment *string `pulumi:"applicationEnvironment"`
	// The timestamp when the resource was created.
	CreateTime                    *string `pulumi:"createTime"`
	DataprocGdcSparkApplicationId *string `pulumi:"dataprocGdcSparkApplicationId"`
	// List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image.
	// If a file with the same name exists in 2 images then the file from later image is used.
	DependencyImages []string `pulumi:"dependencyImages"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	EffectiveLabels      map[string]string `pulumi:"effectiveLabels"`
	// The labels to associate with this application. Labels may be used for filtering and billing tracking. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the spark application.
	Location *string `pulumi:"location"`
	// URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
	MonitoringEndpoint *string `pulumi:"monitoringEndpoint"`
	// Identifier. The name of the application. Format:
	// projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
	Name *string `pulumi:"name"`
	// The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
	Namespace *string `pulumi:"namespace"`
	// An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not
	// in scope for private GA
	OutputUri *string `pulumi:"outputUri"`
	Project   *string `pulumi:"project"`
	// application-specific properties.
	Properties map[string]string `pulumi:"properties"`
	// Represents the PySparkApplicationConfig.
	PysparkApplicationConfig *DataprocGdcSparkApplicationPysparkApplicationConfig `pulumi:"pysparkApplicationConfig"`
	// Whether the application is currently reconciling. True if the current state of the resource does not match the intended
	// state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling *bool `pulumi:"reconciling"`
	// The id of the service instance to which this spark application belongs.
	Serviceinstance *string `pulumi:"serviceinstance"`
	// Represents the SparkApplicationConfig.
	SparkApplicationConfig *DataprocGdcSparkApplicationSparkApplicationConfig `pulumi:"sparkApplicationConfig"`
	// The id of the application
	SparkApplicationId *string `pulumi:"sparkApplicationId"`
	// Represents the SparkRApplicationConfig.
	SparkRApplicationConfig *DataprocGdcSparkApplicationSparkRApplicationConfig `pulumi:"sparkRApplicationConfig"`
	// Represents the SparkRApplicationConfig.
	SparkSqlApplicationConfig *DataprocGdcSparkApplicationSparkSqlApplicationConfig `pulumi:"sparkSqlApplicationConfig"`
	// The current state. Possible values: * 'STATE_UNSPECIFIED' * 'PENDING' * 'RUNNING' * 'CANCELLING' * 'CANCELLED' *
	// 'SUCCEEDED' * 'FAILED'
	State *string `pulumi:"state"`
	// A message explaining the current state.
	StateMessage *string `pulumi:"stateMessage"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                    `pulumi:"terraformLabels"`
	Timeouts        *DataprocGdcSparkApplicationTimeouts `pulumi:"timeouts"`
	// System generated unique identifier for this application, formatted as UUID4.
	Uid *string `pulumi:"uid"`
	// The timestamp when the resource was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
	// The Dataproc version of this application.
	Version *string `pulumi:"version"`
}

type DataprocGdcSparkApplicationState struct {
	// The annotations to associate with this application. Annotations may be used to store client information, but are not
	// used by the server. **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// An ApplicationEnvironment from which to inherit configuration properties.
	ApplicationEnvironment pulumi.StringPtrInput
	// The timestamp when the resource was created.
	CreateTime                    pulumi.StringPtrInput
	DataprocGdcSparkApplicationId pulumi.StringPtrInput
	// List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image.
	// If a file with the same name exists in 2 images then the file from later image is used.
	DependencyImages pulumi.StringArrayInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	EffectiveLabels      pulumi.StringMapInput
	// The labels to associate with this application. Labels may be used for filtering and billing tracking. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the spark application.
	Location pulumi.StringPtrInput
	// URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
	MonitoringEndpoint pulumi.StringPtrInput
	// Identifier. The name of the application. Format:
	// projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
	Name pulumi.StringPtrInput
	// The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
	Namespace pulumi.StringPtrInput
	// An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not
	// in scope for private GA
	OutputUri pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	// application-specific properties.
	Properties pulumi.StringMapInput
	// Represents the PySparkApplicationConfig.
	PysparkApplicationConfig DataprocGdcSparkApplicationPysparkApplicationConfigPtrInput
	// Whether the application is currently reconciling. True if the current state of the resource does not match the intended
	// state, and the system is working to reconcile them, whether or not the change was user initiated.
	Reconciling pulumi.BoolPtrInput
	// The id of the service instance to which this spark application belongs.
	Serviceinstance pulumi.StringPtrInput
	// Represents the SparkApplicationConfig.
	SparkApplicationConfig DataprocGdcSparkApplicationSparkApplicationConfigPtrInput
	// The id of the application
	SparkApplicationId pulumi.StringPtrInput
	// Represents the SparkRApplicationConfig.
	SparkRApplicationConfig DataprocGdcSparkApplicationSparkRApplicationConfigPtrInput
	// Represents the SparkRApplicationConfig.
	SparkSqlApplicationConfig DataprocGdcSparkApplicationSparkSqlApplicationConfigPtrInput
	// The current state. Possible values: * 'STATE_UNSPECIFIED' * 'PENDING' * 'RUNNING' * 'CANCELLING' * 'CANCELLED' *
	// 'SUCCEEDED' * 'FAILED'
	State pulumi.StringPtrInput
	// A message explaining the current state.
	StateMessage pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        DataprocGdcSparkApplicationTimeoutsPtrInput
	// System generated unique identifier for this application, formatted as UUID4.
	Uid pulumi.StringPtrInput
	// The timestamp when the resource was most recently updated.
	UpdateTime pulumi.StringPtrInput
	// The Dataproc version of this application.
	Version pulumi.StringPtrInput
}

func (DataprocGdcSparkApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocGdcSparkApplicationState)(nil)).Elem()
}

type dataprocGdcSparkApplicationArgs struct {
	// The annotations to associate with this application. Annotations may be used to store client information, but are not
	// used by the server. **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// An ApplicationEnvironment from which to inherit configuration properties.
	ApplicationEnvironment        *string `pulumi:"applicationEnvironment"`
	DataprocGdcSparkApplicationId *string `pulumi:"dataprocGdcSparkApplicationId"`
	// List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image.
	// If a file with the same name exists in 2 images then the file from later image is used.
	DependencyImages []string `pulumi:"dependencyImages"`
	// User-provided human-readable name to be used in user interfaces.
	DisplayName *string `pulumi:"displayName"`
	// The labels to associate with this application. Labels may be used for filtering and billing tracking. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the spark application.
	Location string `pulumi:"location"`
	// The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
	Namespace *string `pulumi:"namespace"`
	Project   *string `pulumi:"project"`
	// application-specific properties.
	Properties map[string]string `pulumi:"properties"`
	// Represents the PySparkApplicationConfig.
	PysparkApplicationConfig *DataprocGdcSparkApplicationPysparkApplicationConfig `pulumi:"pysparkApplicationConfig"`
	// The id of the service instance to which this spark application belongs.
	Serviceinstance string `pulumi:"serviceinstance"`
	// Represents the SparkApplicationConfig.
	SparkApplicationConfig *DataprocGdcSparkApplicationSparkApplicationConfig `pulumi:"sparkApplicationConfig"`
	// The id of the application
	SparkApplicationId string `pulumi:"sparkApplicationId"`
	// Represents the SparkRApplicationConfig.
	SparkRApplicationConfig *DataprocGdcSparkApplicationSparkRApplicationConfig `pulumi:"sparkRApplicationConfig"`
	// Represents the SparkRApplicationConfig.
	SparkSqlApplicationConfig *DataprocGdcSparkApplicationSparkSqlApplicationConfig `pulumi:"sparkSqlApplicationConfig"`
	Timeouts                  *DataprocGdcSparkApplicationTimeouts                  `pulumi:"timeouts"`
	// The Dataproc version of this application.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a DataprocGdcSparkApplication resource.
type DataprocGdcSparkApplicationArgs struct {
	// The annotations to associate with this application. Annotations may be used to store client information, but are not
	// used by the server. **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// An ApplicationEnvironment from which to inherit configuration properties.
	ApplicationEnvironment        pulumi.StringPtrInput
	DataprocGdcSparkApplicationId pulumi.StringPtrInput
	// List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image.
	// If a file with the same name exists in 2 images then the file from later image is used.
	DependencyImages pulumi.StringArrayInput
	// User-provided human-readable name to be used in user interfaces.
	DisplayName pulumi.StringPtrInput
	// The labels to associate with this application. Labels may be used for filtering and billing tracking. **Note**: This
	// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the spark application.
	Location pulumi.StringInput
	// The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
	Namespace pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	// application-specific properties.
	Properties pulumi.StringMapInput
	// Represents the PySparkApplicationConfig.
	PysparkApplicationConfig DataprocGdcSparkApplicationPysparkApplicationConfigPtrInput
	// The id of the service instance to which this spark application belongs.
	Serviceinstance pulumi.StringInput
	// Represents the SparkApplicationConfig.
	SparkApplicationConfig DataprocGdcSparkApplicationSparkApplicationConfigPtrInput
	// The id of the application
	SparkApplicationId pulumi.StringInput
	// Represents the SparkRApplicationConfig.
	SparkRApplicationConfig DataprocGdcSparkApplicationSparkRApplicationConfigPtrInput
	// Represents the SparkRApplicationConfig.
	SparkSqlApplicationConfig DataprocGdcSparkApplicationSparkSqlApplicationConfigPtrInput
	Timeouts                  DataprocGdcSparkApplicationTimeoutsPtrInput
	// The Dataproc version of this application.
	Version pulumi.StringPtrInput
}

func (DataprocGdcSparkApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataprocGdcSparkApplicationArgs)(nil)).Elem()
}

type DataprocGdcSparkApplicationInput interface {
	pulumi.Input

	ToDataprocGdcSparkApplicationOutput() DataprocGdcSparkApplicationOutput
	ToDataprocGdcSparkApplicationOutputWithContext(ctx context.Context) DataprocGdcSparkApplicationOutput
}

func (*DataprocGdcSparkApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocGdcSparkApplication)(nil)).Elem()
}

func (i *DataprocGdcSparkApplication) ToDataprocGdcSparkApplicationOutput() DataprocGdcSparkApplicationOutput {
	return i.ToDataprocGdcSparkApplicationOutputWithContext(context.Background())
}

func (i *DataprocGdcSparkApplication) ToDataprocGdcSparkApplicationOutputWithContext(ctx context.Context) DataprocGdcSparkApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocGdcSparkApplicationOutput)
}

type DataprocGdcSparkApplicationOutput struct{ *pulumi.OutputState }

func (DataprocGdcSparkApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocGdcSparkApplication)(nil)).Elem()
}

func (o DataprocGdcSparkApplicationOutput) ToDataprocGdcSparkApplicationOutput() DataprocGdcSparkApplicationOutput {
	return o
}

func (o DataprocGdcSparkApplicationOutput) ToDataprocGdcSparkApplicationOutputWithContext(ctx context.Context) DataprocGdcSparkApplicationOutput {
	return o
}

// The annotations to associate with this application. Annotations may be used to store client information, but are not
// used by the server. **Note**: This field is non-authoritative, and will only manage the annotations present in your
// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
func (o DataprocGdcSparkApplicationOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// An ApplicationEnvironment from which to inherit configuration properties.
func (o DataprocGdcSparkApplicationOutput) ApplicationEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringPtrOutput { return v.ApplicationEnvironment }).(pulumi.StringPtrOutput)
}

// The timestamp when the resource was created.
func (o DataprocGdcSparkApplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DataprocGdcSparkApplicationOutput) DataprocGdcSparkApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.DataprocGdcSparkApplicationId }).(pulumi.StringOutput)
}

// List of container image uris for additional file dependencies. Dependent files are sequentially copied from each image.
// If a file with the same name exists in 2 images then the file from later image is used.
func (o DataprocGdcSparkApplicationOutput) DependencyImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringArrayOutput { return v.DependencyImages }).(pulumi.StringArrayOutput)
}

// User-provided human-readable name to be used in user interfaces.
func (o DataprocGdcSparkApplicationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o DataprocGdcSparkApplicationOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

func (o DataprocGdcSparkApplicationOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The labels to associate with this application. Labels may be used for filtering and billing tracking. **Note**: This
// field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o DataprocGdcSparkApplicationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the spark application.
func (o DataprocGdcSparkApplicationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// URL for a monitoring UI for this application (for eventual Spark PHS/UI support) Out of scope for private GA
func (o DataprocGdcSparkApplicationOutput) MonitoringEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.MonitoringEndpoint }).(pulumi.StringOutput)
}

// Identifier. The name of the application. Format:
// projects/{project}/locations/{location}/serviceInstances/{service_instance}/sparkApplications/{application}
func (o DataprocGdcSparkApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Kubernetes namespace in which to create the application. This namespace must already exist on the cluster.
func (o DataprocGdcSparkApplicationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// An HCFS URI pointing to the location of stdout and stdout of the application Mainly useful for Pantheon and gcloud Not
// in scope for private GA
func (o DataprocGdcSparkApplicationOutput) OutputUri() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.OutputUri }).(pulumi.StringOutput)
}

func (o DataprocGdcSparkApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// application-specific properties.
func (o DataprocGdcSparkApplicationOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

// Represents the PySparkApplicationConfig.
func (o DataprocGdcSparkApplicationOutput) PysparkApplicationConfig() DataprocGdcSparkApplicationPysparkApplicationConfigPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) DataprocGdcSparkApplicationPysparkApplicationConfigPtrOutput {
		return v.PysparkApplicationConfig
	}).(DataprocGdcSparkApplicationPysparkApplicationConfigPtrOutput)
}

// Whether the application is currently reconciling. True if the current state of the resource does not match the intended
// state, and the system is working to reconcile them, whether or not the change was user initiated.
func (o DataprocGdcSparkApplicationOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The id of the service instance to which this spark application belongs.
func (o DataprocGdcSparkApplicationOutput) Serviceinstance() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.Serviceinstance }).(pulumi.StringOutput)
}

// Represents the SparkApplicationConfig.
func (o DataprocGdcSparkApplicationOutput) SparkApplicationConfig() DataprocGdcSparkApplicationSparkApplicationConfigPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) DataprocGdcSparkApplicationSparkApplicationConfigPtrOutput {
		return v.SparkApplicationConfig
	}).(DataprocGdcSparkApplicationSparkApplicationConfigPtrOutput)
}

// The id of the application
func (o DataprocGdcSparkApplicationOutput) SparkApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.SparkApplicationId }).(pulumi.StringOutput)
}

// Represents the SparkRApplicationConfig.
func (o DataprocGdcSparkApplicationOutput) SparkRApplicationConfig() DataprocGdcSparkApplicationSparkRApplicationConfigPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) DataprocGdcSparkApplicationSparkRApplicationConfigPtrOutput {
		return v.SparkRApplicationConfig
	}).(DataprocGdcSparkApplicationSparkRApplicationConfigPtrOutput)
}

// Represents the SparkRApplicationConfig.
func (o DataprocGdcSparkApplicationOutput) SparkSqlApplicationConfig() DataprocGdcSparkApplicationSparkSqlApplicationConfigPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) DataprocGdcSparkApplicationSparkSqlApplicationConfigPtrOutput {
		return v.SparkSqlApplicationConfig
	}).(DataprocGdcSparkApplicationSparkSqlApplicationConfigPtrOutput)
}

// The current state. Possible values: * 'STATE_UNSPECIFIED' * 'PENDING' * 'RUNNING' * 'CANCELLING' * 'CANCELLED' *
// 'SUCCEEDED' * 'FAILED'
func (o DataprocGdcSparkApplicationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A message explaining the current state.
func (o DataprocGdcSparkApplicationOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o DataprocGdcSparkApplicationOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o DataprocGdcSparkApplicationOutput) Timeouts() DataprocGdcSparkApplicationTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) DataprocGdcSparkApplicationTimeoutsPtrOutput { return v.Timeouts }).(DataprocGdcSparkApplicationTimeoutsPtrOutput)
}

// System generated unique identifier for this application, formatted as UUID4.
func (o DataprocGdcSparkApplicationOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when the resource was most recently updated.
func (o DataprocGdcSparkApplicationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The Dataproc version of this application.
func (o DataprocGdcSparkApplicationOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocGdcSparkApplication) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocGdcSparkApplicationInput)(nil)).Elem(), &DataprocGdcSparkApplication{})
	pulumi.RegisterOutputType(DataprocGdcSparkApplicationOutput{})
}
