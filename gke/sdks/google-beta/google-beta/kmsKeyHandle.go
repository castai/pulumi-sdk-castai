// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KmsKeyHandle struct {
	pulumi.CustomResourceState

	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested product/project/location, for example
	// 'projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff'
	KmsKey         pulumi.StringOutput `pulumi:"kmsKey"`
	KmsKeyHandleId pulumi.StringOutput `pulumi:"kmsKeyHandleId"`
	// The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the KeyHandle.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
	ResourceTypeSelector pulumi.StringOutput           `pulumi:"resourceTypeSelector"`
	Timeouts             KmsKeyHandleTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewKmsKeyHandle registers a new resource with the given unique name, arguments, and options.
func NewKmsKeyHandle(ctx *pulumi.Context,
	name string, args *KmsKeyHandleArgs, opts ...pulumi.ResourceOption) (*KmsKeyHandle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ResourceTypeSelector == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypeSelector'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource KmsKeyHandle
	err = ctx.RegisterPackageResource("google-beta:index/kmsKeyHandle:KmsKeyHandle", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsKeyHandle gets an existing KmsKeyHandle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsKeyHandle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsKeyHandleState, opts ...pulumi.ResourceOption) (*KmsKeyHandle, error) {
	var resource KmsKeyHandle
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/kmsKeyHandle:KmsKeyHandle", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsKeyHandle resources.
type kmsKeyHandleState struct {
	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested product/project/location, for example
	// 'projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff'
	KmsKey         *string `pulumi:"kmsKey"`
	KmsKeyHandleId *string `pulumi:"kmsKeyHandleId"`
	// The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location *string `pulumi:"location"`
	// The resource name for the KeyHandle.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
	ResourceTypeSelector *string               `pulumi:"resourceTypeSelector"`
	Timeouts             *KmsKeyHandleTimeouts `pulumi:"timeouts"`
}

type KmsKeyHandleState struct {
	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested product/project/location, for example
	// 'projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff'
	KmsKey         pulumi.StringPtrInput
	KmsKeyHandleId pulumi.StringPtrInput
	// The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location pulumi.StringPtrInput
	// The resource name for the KeyHandle.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
	ResourceTypeSelector pulumi.StringPtrInput
	Timeouts             KmsKeyHandleTimeoutsPtrInput
}

func (KmsKeyHandleState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyHandleState)(nil)).Elem()
}

type kmsKeyHandleArgs struct {
	KmsKeyHandleId *string `pulumi:"kmsKeyHandleId"`
	// The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location string `pulumi:"location"`
	// The resource name for the KeyHandle.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
	ResourceTypeSelector string                `pulumi:"resourceTypeSelector"`
	Timeouts             *KmsKeyHandleTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a KmsKeyHandle resource.
type KmsKeyHandleArgs struct {
	KmsKeyHandleId pulumi.StringPtrInput
	// The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
	Location pulumi.StringInput
	// The resource name for the KeyHandle.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
	ResourceTypeSelector pulumi.StringInput
	Timeouts             KmsKeyHandleTimeoutsPtrInput
}

func (KmsKeyHandleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyHandleArgs)(nil)).Elem()
}

type KmsKeyHandleInput interface {
	pulumi.Input

	ToKmsKeyHandleOutput() KmsKeyHandleOutput
	ToKmsKeyHandleOutputWithContext(ctx context.Context) KmsKeyHandleOutput
}

func (*KmsKeyHandle) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKeyHandle)(nil)).Elem()
}

func (i *KmsKeyHandle) ToKmsKeyHandleOutput() KmsKeyHandleOutput {
	return i.ToKmsKeyHandleOutputWithContext(context.Background())
}

func (i *KmsKeyHandle) ToKmsKeyHandleOutputWithContext(ctx context.Context) KmsKeyHandleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyHandleOutput)
}

type KmsKeyHandleOutput struct{ *pulumi.OutputState }

func (KmsKeyHandleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKeyHandle)(nil)).Elem()
}

func (o KmsKeyHandleOutput) ToKmsKeyHandleOutput() KmsKeyHandleOutput {
	return o
}

func (o KmsKeyHandleOutput) ToKmsKeyHandleOutputWithContext(ctx context.Context) KmsKeyHandleOutput {
	return o
}

// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested product/project/location, for example
// 'projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff'
func (o KmsKeyHandleOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyHandle) pulumi.StringOutput { return v.KmsKey }).(pulumi.StringOutput)
}

func (o KmsKeyHandleOutput) KmsKeyHandleId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyHandle) pulumi.StringOutput { return v.KmsKeyHandleId }).(pulumi.StringOutput)
}

// The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
func (o KmsKeyHandleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyHandle) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the KeyHandle.
func (o KmsKeyHandleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyHandle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KmsKeyHandleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyHandle) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
func (o KmsKeyHandleOutput) ResourceTypeSelector() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKeyHandle) pulumi.StringOutput { return v.ResourceTypeSelector }).(pulumi.StringOutput)
}

func (o KmsKeyHandleOutput) Timeouts() KmsKeyHandleTimeoutsPtrOutput {
	return o.ApplyT(func(v *KmsKeyHandle) KmsKeyHandleTimeoutsPtrOutput { return v.Timeouts }).(KmsKeyHandleTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmsKeyHandleInput)(nil)).Elem(), &KmsKeyHandle{})
	pulumi.RegisterOutputType(KmsKeyHandleOutput{})
}
