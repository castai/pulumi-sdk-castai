// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DocumentAiWarehouseDocumentSchema struct {
	pulumi.CustomResourceState

	// Name of the schema given by the user.
	DisplayName                         pulumi.StringOutput `pulumi:"displayName"`
	DocumentAiWarehouseDocumentSchemaId pulumi.StringOutput `pulumi:"documentAiWarehouseDocumentSchemaId"`
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder pulumi.BoolPtrOutput `pulumi:"documentIsFolder"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the document schema.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier of the project.
	ProjectNumber pulumi.StringOutput `pulumi:"projectNumber"`
	// Defines the metadata for a schema property.
	PropertyDefinitions DocumentAiWarehouseDocumentSchemaPropertyDefinitionArrayOutput `pulumi:"propertyDefinitions"`
	Timeouts            DocumentAiWarehouseDocumentSchemaTimeoutsPtrOutput             `pulumi:"timeouts"`
}

// NewDocumentAiWarehouseDocumentSchema registers a new resource with the given unique name, arguments, and options.
func NewDocumentAiWarehouseDocumentSchema(ctx *pulumi.Context,
	name string, args *DocumentAiWarehouseDocumentSchemaArgs, opts ...pulumi.ResourceOption) (*DocumentAiWarehouseDocumentSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProjectNumber == nil {
		return nil, errors.New("invalid value for required argument 'ProjectNumber'")
	}
	if args.PropertyDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'PropertyDefinitions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource DocumentAiWarehouseDocumentSchema
	err = ctx.RegisterPackageResource("google-beta:index/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentAiWarehouseDocumentSchema gets an existing DocumentAiWarehouseDocumentSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentAiWarehouseDocumentSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentAiWarehouseDocumentSchemaState, opts ...pulumi.ResourceOption) (*DocumentAiWarehouseDocumentSchema, error) {
	var resource DocumentAiWarehouseDocumentSchema
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentAiWarehouseDocumentSchema resources.
type documentAiWarehouseDocumentSchemaState struct {
	// Name of the schema given by the user.
	DisplayName                         *string `pulumi:"displayName"`
	DocumentAiWarehouseDocumentSchemaId *string `pulumi:"documentAiWarehouseDocumentSchemaId"`
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder *bool `pulumi:"documentIsFolder"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The resource name of the document schema.
	Name *string `pulumi:"name"`
	// The unique identifier of the project.
	ProjectNumber *string `pulumi:"projectNumber"`
	// Defines the metadata for a schema property.
	PropertyDefinitions []DocumentAiWarehouseDocumentSchemaPropertyDefinition `pulumi:"propertyDefinitions"`
	Timeouts            *DocumentAiWarehouseDocumentSchemaTimeouts            `pulumi:"timeouts"`
}

type DocumentAiWarehouseDocumentSchemaState struct {
	// Name of the schema given by the user.
	DisplayName                         pulumi.StringPtrInput
	DocumentAiWarehouseDocumentSchemaId pulumi.StringPtrInput
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder pulumi.BoolPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The resource name of the document schema.
	Name pulumi.StringPtrInput
	// The unique identifier of the project.
	ProjectNumber pulumi.StringPtrInput
	// Defines the metadata for a schema property.
	PropertyDefinitions DocumentAiWarehouseDocumentSchemaPropertyDefinitionArrayInput
	Timeouts            DocumentAiWarehouseDocumentSchemaTimeoutsPtrInput
}

func (DocumentAiWarehouseDocumentSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentAiWarehouseDocumentSchemaState)(nil)).Elem()
}

type documentAiWarehouseDocumentSchemaArgs struct {
	// Name of the schema given by the user.
	DisplayName                         string  `pulumi:"displayName"`
	DocumentAiWarehouseDocumentSchemaId *string `pulumi:"documentAiWarehouseDocumentSchemaId"`
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder *bool `pulumi:"documentIsFolder"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The unique identifier of the project.
	ProjectNumber string `pulumi:"projectNumber"`
	// Defines the metadata for a schema property.
	PropertyDefinitions []DocumentAiWarehouseDocumentSchemaPropertyDefinition `pulumi:"propertyDefinitions"`
	Timeouts            *DocumentAiWarehouseDocumentSchemaTimeouts            `pulumi:"timeouts"`
}

// The set of arguments for constructing a DocumentAiWarehouseDocumentSchema resource.
type DocumentAiWarehouseDocumentSchemaArgs struct {
	// Name of the schema given by the user.
	DisplayName                         pulumi.StringInput
	DocumentAiWarehouseDocumentSchemaId pulumi.StringPtrInput
	// Tells whether the document is a folder or a typical document.
	DocumentIsFolder pulumi.BoolPtrInput
	// The location of the resource.
	Location pulumi.StringInput
	// The unique identifier of the project.
	ProjectNumber pulumi.StringInput
	// Defines the metadata for a schema property.
	PropertyDefinitions DocumentAiWarehouseDocumentSchemaPropertyDefinitionArrayInput
	Timeouts            DocumentAiWarehouseDocumentSchemaTimeoutsPtrInput
}

func (DocumentAiWarehouseDocumentSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentAiWarehouseDocumentSchemaArgs)(nil)).Elem()
}

type DocumentAiWarehouseDocumentSchemaInput interface {
	pulumi.Input

	ToDocumentAiWarehouseDocumentSchemaOutput() DocumentAiWarehouseDocumentSchemaOutput
	ToDocumentAiWarehouseDocumentSchemaOutputWithContext(ctx context.Context) DocumentAiWarehouseDocumentSchemaOutput
}

func (*DocumentAiWarehouseDocumentSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentAiWarehouseDocumentSchema)(nil)).Elem()
}

func (i *DocumentAiWarehouseDocumentSchema) ToDocumentAiWarehouseDocumentSchemaOutput() DocumentAiWarehouseDocumentSchemaOutput {
	return i.ToDocumentAiWarehouseDocumentSchemaOutputWithContext(context.Background())
}

func (i *DocumentAiWarehouseDocumentSchema) ToDocumentAiWarehouseDocumentSchemaOutputWithContext(ctx context.Context) DocumentAiWarehouseDocumentSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentAiWarehouseDocumentSchemaOutput)
}

type DocumentAiWarehouseDocumentSchemaOutput struct{ *pulumi.OutputState }

func (DocumentAiWarehouseDocumentSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentAiWarehouseDocumentSchema)(nil)).Elem()
}

func (o DocumentAiWarehouseDocumentSchemaOutput) ToDocumentAiWarehouseDocumentSchemaOutput() DocumentAiWarehouseDocumentSchemaOutput {
	return o
}

func (o DocumentAiWarehouseDocumentSchemaOutput) ToDocumentAiWarehouseDocumentSchemaOutputWithContext(ctx context.Context) DocumentAiWarehouseDocumentSchemaOutput {
	return o
}

// Name of the schema given by the user.
func (o DocumentAiWarehouseDocumentSchemaOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o DocumentAiWarehouseDocumentSchemaOutput) DocumentAiWarehouseDocumentSchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) pulumi.StringOutput {
		return v.DocumentAiWarehouseDocumentSchemaId
	}).(pulumi.StringOutput)
}

// Tells whether the document is a folder or a typical document.
func (o DocumentAiWarehouseDocumentSchemaOutput) DocumentIsFolder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) pulumi.BoolPtrOutput { return v.DocumentIsFolder }).(pulumi.BoolPtrOutput)
}

// The location of the resource.
func (o DocumentAiWarehouseDocumentSchemaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the document schema.
func (o DocumentAiWarehouseDocumentSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier of the project.
func (o DocumentAiWarehouseDocumentSchemaOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) pulumi.StringOutput { return v.ProjectNumber }).(pulumi.StringOutput)
}

// Defines the metadata for a schema property.
func (o DocumentAiWarehouseDocumentSchemaOutput) PropertyDefinitions() DocumentAiWarehouseDocumentSchemaPropertyDefinitionArrayOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) DocumentAiWarehouseDocumentSchemaPropertyDefinitionArrayOutput {
		return v.PropertyDefinitions
	}).(DocumentAiWarehouseDocumentSchemaPropertyDefinitionArrayOutput)
}

func (o DocumentAiWarehouseDocumentSchemaOutput) Timeouts() DocumentAiWarehouseDocumentSchemaTimeoutsPtrOutput {
	return o.ApplyT(func(v *DocumentAiWarehouseDocumentSchema) DocumentAiWarehouseDocumentSchemaTimeoutsPtrOutput {
		return v.Timeouts
	}).(DocumentAiWarehouseDocumentSchemaTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentAiWarehouseDocumentSchemaInput)(nil)).Elem(), &DocumentAiWarehouseDocumentSchema{})
	pulumi.RegisterOutputType(DocumentAiWarehouseDocumentSchemaOutput{})
}
