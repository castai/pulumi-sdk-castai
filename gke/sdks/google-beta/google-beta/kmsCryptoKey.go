// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KmsCryptoKey struct {
	pulumi.CustomResourceState

	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey. The resource
	// name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringOutput `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If
	// not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringOutput    `pulumi:"destroyScheduledDuration"`
	EffectiveLabels          pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolOutput `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this field is present and this key is enrolled in
	// Key Access Justifications Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and sign operations, and
	// the operation will fail if rejected by the policy. The policy is defined by specifying zero or more allowed
	// justification codes. https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes By
	// default, this field is absent, and all justification codes are allowed. This field is currently in beta and is subject
	// to change.
	KeyAccessJustificationsPolicy KmsCryptoKeyKeyAccessJustificationsPolicyPtrOutput `pulumi:"keyAccessJustificationsPolicy"`
	// The KeyRing that this key belongs to. Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	KeyRing        pulumi.StringOutput `pulumi:"keyRing"`
	KmsCryptoKeyId pulumi.StringOutput `pulumi:"kmsCryptoKeyId"`
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name pulumi.StringOutput `pulumi:"name"`
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in
	// EncryptRequest.name. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	Primaries KmsCryptoKeyPrimaryArrayOutput `pulumi:"primaries"`
	// The immutable purpose of this CryptoKey. See the [purpose
	// reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs. Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringPtrOutput `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary. The first rotation will take
	// place after the specified period. The rotation period has the format of a decimal number with up to 9 fractional digits,
	// followed by the letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringPtrOutput `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must use the
	// 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion or 'google_kms_key_ring_import_job' resource
	// to import the CryptoKeyVersion.
	SkipInitialVersionCreation pulumi.BoolPtrOutput `pulumi:"skipInitialVersionCreation"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput        `pulumi:"terraformLabels"`
	Timeouts        KmsCryptoKeyTimeoutsPtrOutput `pulumi:"timeouts"`
	// A template describing settings for new crypto key versions.
	VersionTemplate KmsCryptoKeyVersionTemplatePtrOutput `pulumi:"versionTemplate"`
}

// NewKmsCryptoKey registers a new resource with the given unique name, arguments, and options.
func NewKmsCryptoKey(ctx *pulumi.Context,
	name string, args *KmsCryptoKeyArgs, opts ...pulumi.ResourceOption) (*KmsCryptoKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyRing == nil {
		return nil, errors.New("invalid value for required argument 'KeyRing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource KmsCryptoKey
	err = ctx.RegisterPackageResource("google-beta:index/kmsCryptoKey:KmsCryptoKey", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsCryptoKey gets an existing KmsCryptoKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsCryptoKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsCryptoKeyState, opts ...pulumi.ResourceOption) (*KmsCryptoKey, error) {
	var resource KmsCryptoKey
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/kmsCryptoKey:KmsCryptoKey", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsCryptoKey resources.
type kmsCryptoKeyState struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey. The resource
	// name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend *string `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If
	// not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration *string           `pulumi:"destroyScheduledDuration"`
	EffectiveLabels          map[string]string `pulumi:"effectiveLabels"`
	// Whether this key may contain imported versions only.
	ImportOnly *bool `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this field is present and this key is enrolled in
	// Key Access Justifications Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and sign operations, and
	// the operation will fail if rejected by the policy. The policy is defined by specifying zero or more allowed
	// justification codes. https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes By
	// default, this field is absent, and all justification codes are allowed. This field is currently in beta and is subject
	// to change.
	KeyAccessJustificationsPolicy *KmsCryptoKeyKeyAccessJustificationsPolicy `pulumi:"keyAccessJustificationsPolicy"`
	// The KeyRing that this key belongs to. Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	KeyRing        *string `pulumi:"keyRing"`
	KmsCryptoKeyId *string `pulumi:"kmsCryptoKeyId"`
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name *string `pulumi:"name"`
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in
	// EncryptRequest.name. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	Primaries []KmsCryptoKeyPrimary `pulumi:"primaries"`
	// The immutable purpose of this CryptoKey. See the [purpose
	// reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs. Default value is "ENCRYPT_DECRYPT".
	Purpose *string `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary. The first rotation will take
	// place after the specified period. The rotation period has the format of a decimal number with up to 9 fractional digits,
	// followed by the letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod *string `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must use the
	// 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion or 'google_kms_key_ring_import_job' resource
	// to import the CryptoKeyVersion.
	SkipInitialVersionCreation *bool `pulumi:"skipInitialVersionCreation"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string     `pulumi:"terraformLabels"`
	Timeouts        *KmsCryptoKeyTimeouts `pulumi:"timeouts"`
	// A template describing settings for new crypto key versions.
	VersionTemplate *KmsCryptoKeyVersionTemplate `pulumi:"versionTemplate"`
}

type KmsCryptoKeyState struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey. The resource
	// name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringPtrInput
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If
	// not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringPtrInput
	EffectiveLabels          pulumi.StringMapInput
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolPtrInput
	// The policy used for Key Access Justifications Policy Enforcement. If this field is present and this key is enrolled in
	// Key Access Justifications Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and sign operations, and
	// the operation will fail if rejected by the policy. The policy is defined by specifying zero or more allowed
	// justification codes. https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes By
	// default, this field is absent, and all justification codes are allowed. This field is currently in beta and is subject
	// to change.
	KeyAccessJustificationsPolicy KmsCryptoKeyKeyAccessJustificationsPolicyPtrInput
	// The KeyRing that this key belongs to. Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	KeyRing        pulumi.StringPtrInput
	KmsCryptoKeyId pulumi.StringPtrInput
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the CryptoKey.
	Name pulumi.StringPtrInput
	// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in
	// EncryptRequest.name. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
	Primaries KmsCryptoKeyPrimaryArrayInput
	// The immutable purpose of this CryptoKey. See the [purpose
	// reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs. Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringPtrInput
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary. The first rotation will take
	// place after the specified period. The rotation period has the format of a decimal number with up to 9 fractional digits,
	// followed by the letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringPtrInput
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must use the
	// 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion or 'google_kms_key_ring_import_job' resource
	// to import the CryptoKeyVersion.
	SkipInitialVersionCreation pulumi.BoolPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        KmsCryptoKeyTimeoutsPtrInput
	// A template describing settings for new crypto key versions.
	VersionTemplate KmsCryptoKeyVersionTemplatePtrInput
}

func (KmsCryptoKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsCryptoKeyState)(nil)).Elem()
}

type kmsCryptoKeyArgs struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey. The resource
	// name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend *string `pulumi:"cryptoKeyBackend"`
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If
	// not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration *string `pulumi:"destroyScheduledDuration"`
	// Whether this key may contain imported versions only.
	ImportOnly *bool `pulumi:"importOnly"`
	// The policy used for Key Access Justifications Policy Enforcement. If this field is present and this key is enrolled in
	// Key Access Justifications Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and sign operations, and
	// the operation will fail if rejected by the policy. The policy is defined by specifying zero or more allowed
	// justification codes. https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes By
	// default, this field is absent, and all justification codes are allowed. This field is currently in beta and is subject
	// to change.
	KeyAccessJustificationsPolicy *KmsCryptoKeyKeyAccessJustificationsPolicy `pulumi:"keyAccessJustificationsPolicy"`
	// The KeyRing that this key belongs to. Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	KeyRing        string  `pulumi:"keyRing"`
	KmsCryptoKeyId *string `pulumi:"kmsCryptoKeyId"`
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the CryptoKey.
	Name *string `pulumi:"name"`
	// The immutable purpose of this CryptoKey. See the [purpose
	// reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs. Default value is "ENCRYPT_DECRYPT".
	Purpose *string `pulumi:"purpose"`
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary. The first rotation will take
	// place after the specified period. The rotation period has the format of a decimal number with up to 9 fractional digits,
	// followed by the letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod *string `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must use the
	// 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion or 'google_kms_key_ring_import_job' resource
	// to import the CryptoKeyVersion.
	SkipInitialVersionCreation *bool                 `pulumi:"skipInitialVersionCreation"`
	Timeouts                   *KmsCryptoKeyTimeouts `pulumi:"timeouts"`
	// A template describing settings for new crypto key versions.
	VersionTemplate *KmsCryptoKeyVersionTemplate `pulumi:"versionTemplate"`
}

// The set of arguments for constructing a KmsCryptoKey resource.
type KmsCryptoKeyArgs struct {
	// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey. The resource
	// name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
	CryptoKeyBackend pulumi.StringPtrInput
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If
	// not specified at creation time, the default duration is 30 days.
	DestroyScheduledDuration pulumi.StringPtrInput
	// Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolPtrInput
	// The policy used for Key Access Justifications Policy Enforcement. If this field is present and this key is enrolled in
	// Key Access Justifications Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and sign operations, and
	// the operation will fail if rejected by the policy. The policy is defined by specifying zero or more allowed
	// justification codes. https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes By
	// default, this field is absent, and all justification codes are allowed. This field is currently in beta and is subject
	// to change.
	KeyAccessJustificationsPolicy KmsCryptoKeyKeyAccessJustificationsPolicyPtrInput
	// The KeyRing that this key belongs to. Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	KeyRing        pulumi.StringInput
	KmsCryptoKeyId pulumi.StringPtrInput
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The resource name for the CryptoKey.
	Name pulumi.StringPtrInput
	// The immutable purpose of this CryptoKey. See the [purpose
	// reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
	// for possible inputs. Default value is "ENCRYPT_DECRYPT".
	Purpose pulumi.StringPtrInput
	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary. The first rotation will take
	// place after the specified period. The rotation period has the format of a decimal number with up to 9 fractional digits,
	// followed by the letter 's' (seconds). It must be greater than a day (ie, 86400).
	RotationPeriod pulumi.StringPtrInput
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must use the
	// 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion or 'google_kms_key_ring_import_job' resource
	// to import the CryptoKeyVersion.
	SkipInitialVersionCreation pulumi.BoolPtrInput
	Timeouts                   KmsCryptoKeyTimeoutsPtrInput
	// A template describing settings for new crypto key versions.
	VersionTemplate KmsCryptoKeyVersionTemplatePtrInput
}

func (KmsCryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsCryptoKeyArgs)(nil)).Elem()
}

type KmsCryptoKeyInput interface {
	pulumi.Input

	ToKmsCryptoKeyOutput() KmsCryptoKeyOutput
	ToKmsCryptoKeyOutputWithContext(ctx context.Context) KmsCryptoKeyOutput
}

func (*KmsCryptoKey) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsCryptoKey)(nil)).Elem()
}

func (i *KmsCryptoKey) ToKmsCryptoKeyOutput() KmsCryptoKeyOutput {
	return i.ToKmsCryptoKeyOutputWithContext(context.Background())
}

func (i *KmsCryptoKey) ToKmsCryptoKeyOutputWithContext(ctx context.Context) KmsCryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsCryptoKeyOutput)
}

type KmsCryptoKeyOutput struct{ *pulumi.OutputState }

func (KmsCryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsCryptoKey)(nil)).Elem()
}

func (o KmsCryptoKeyOutput) ToKmsCryptoKeyOutput() KmsCryptoKeyOutput {
	return o
}

func (o KmsCryptoKeyOutput) ToKmsCryptoKeyOutputWithContext(ctx context.Context) KmsCryptoKeyOutput {
	return o
}

// The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey. The resource
// name is in the format "projects/*/locations/*/ekmConnections/*" and only applies to "EXTERNAL_VPC" keys.
func (o KmsCryptoKeyOutput) CryptoKeyBackend() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringOutput { return v.CryptoKeyBackend }).(pulumi.StringOutput)
}

// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If
// not specified at creation time, the default duration is 30 days.
func (o KmsCryptoKeyOutput) DestroyScheduledDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringOutput { return v.DestroyScheduledDuration }).(pulumi.StringOutput)
}

func (o KmsCryptoKeyOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Whether this key may contain imported versions only.
func (o KmsCryptoKeyOutput) ImportOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.BoolOutput { return v.ImportOnly }).(pulumi.BoolOutput)
}

// The policy used for Key Access Justifications Policy Enforcement. If this field is present and this key is enrolled in
// Key Access Justifications Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and sign operations, and
// the operation will fail if rejected by the policy. The policy is defined by specifying zero or more allowed
// justification codes. https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes By
// default, this field is absent, and all justification codes are allowed. This field is currently in beta and is subject
// to change.
func (o KmsCryptoKeyOutput) KeyAccessJustificationsPolicy() KmsCryptoKeyKeyAccessJustificationsPolicyPtrOutput {
	return o.ApplyT(func(v *KmsCryptoKey) KmsCryptoKeyKeyAccessJustificationsPolicyPtrOutput {
		return v.KeyAccessJustificationsPolicy
	}).(KmsCryptoKeyKeyAccessJustificationsPolicyPtrOutput)
}

// The KeyRing that this key belongs to. Format: ”projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}”.
func (o KmsCryptoKeyOutput) KeyRing() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringOutput { return v.KeyRing }).(pulumi.StringOutput)
}

func (o KmsCryptoKeyOutput) KmsCryptoKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringOutput { return v.KmsCryptoKeyId }).(pulumi.StringOutput)
}

// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o KmsCryptoKeyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the CryptoKey.
func (o KmsCryptoKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in
// EncryptRequest.name. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
func (o KmsCryptoKeyOutput) Primaries() KmsCryptoKeyPrimaryArrayOutput {
	return o.ApplyT(func(v *KmsCryptoKey) KmsCryptoKeyPrimaryArrayOutput { return v.Primaries }).(KmsCryptoKeyPrimaryArrayOutput)
}

// The immutable purpose of this CryptoKey. See the [purpose
// reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
// for possible inputs. Default value is "ENCRYPT_DECRYPT".
func (o KmsCryptoKeyOutput) Purpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringPtrOutput { return v.Purpose }).(pulumi.StringPtrOutput)
}

// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary. The first rotation will take
// place after the specified period. The rotation period has the format of a decimal number with up to 9 fractional digits,
// followed by the letter 's' (seconds). It must be greater than a day (ie, 86400).
func (o KmsCryptoKeyOutput) RotationPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringPtrOutput { return v.RotationPeriod }).(pulumi.StringPtrOutput)
}

// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must use the
// 'google_kms_crypto_key_version' resource to create a new CryptoKeyVersion or 'google_kms_key_ring_import_job' resource
// to import the CryptoKeyVersion.
func (o KmsCryptoKeyOutput) SkipInitialVersionCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.BoolPtrOutput { return v.SkipInitialVersionCreation }).(pulumi.BoolPtrOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o KmsCryptoKeyOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KmsCryptoKey) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o KmsCryptoKeyOutput) Timeouts() KmsCryptoKeyTimeoutsPtrOutput {
	return o.ApplyT(func(v *KmsCryptoKey) KmsCryptoKeyTimeoutsPtrOutput { return v.Timeouts }).(KmsCryptoKeyTimeoutsPtrOutput)
}

// A template describing settings for new crypto key versions.
func (o KmsCryptoKeyOutput) VersionTemplate() KmsCryptoKeyVersionTemplatePtrOutput {
	return o.ApplyT(func(v *KmsCryptoKey) KmsCryptoKeyVersionTemplatePtrOutput { return v.VersionTemplate }).(KmsCryptoKeyVersionTemplatePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmsCryptoKeyInput)(nil)).Elem(), &KmsCryptoKey{})
	pulumi.RegisterOutputType(KmsCryptoKeyOutput{})
}
