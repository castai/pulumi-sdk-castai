// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SccSourceIamBinding struct {
	pulumi.CustomResourceState

	Condition             SccSourceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                  pulumi.StringOutput                   `pulumi:"etag"`
	Members               pulumi.StringArrayOutput              `pulumi:"members"`
	Organization          pulumi.StringOutput                   `pulumi:"organization"`
	Role                  pulumi.StringOutput                   `pulumi:"role"`
	SccSourceIamBindingId pulumi.StringOutput                   `pulumi:"sccSourceIamBindingId"`
	Source                pulumi.StringOutput                   `pulumi:"source"`
}

// NewSccSourceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSccSourceIamBinding(ctx *pulumi.Context,
	name string, args *SccSourceIamBindingArgs, opts ...pulumi.ResourceOption) (*SccSourceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SccSourceIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/sccSourceIamBinding:SccSourceIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSccSourceIamBinding gets an existing SccSourceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSccSourceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SccSourceIamBindingState, opts ...pulumi.ResourceOption) (*SccSourceIamBinding, error) {
	var resource SccSourceIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sccSourceIamBinding:SccSourceIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SccSourceIamBinding resources.
type sccSourceIamBindingState struct {
	Condition             *SccSourceIamBindingCondition `pulumi:"condition"`
	Etag                  *string                       `pulumi:"etag"`
	Members               []string                      `pulumi:"members"`
	Organization          *string                       `pulumi:"organization"`
	Role                  *string                       `pulumi:"role"`
	SccSourceIamBindingId *string                       `pulumi:"sccSourceIamBindingId"`
	Source                *string                       `pulumi:"source"`
}

type SccSourceIamBindingState struct {
	Condition             SccSourceIamBindingConditionPtrInput
	Etag                  pulumi.StringPtrInput
	Members               pulumi.StringArrayInput
	Organization          pulumi.StringPtrInput
	Role                  pulumi.StringPtrInput
	SccSourceIamBindingId pulumi.StringPtrInput
	Source                pulumi.StringPtrInput
}

func (SccSourceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*sccSourceIamBindingState)(nil)).Elem()
}

type sccSourceIamBindingArgs struct {
	Condition             *SccSourceIamBindingCondition `pulumi:"condition"`
	Members               []string                      `pulumi:"members"`
	Organization          string                        `pulumi:"organization"`
	Role                  string                        `pulumi:"role"`
	SccSourceIamBindingId *string                       `pulumi:"sccSourceIamBindingId"`
	Source                string                        `pulumi:"source"`
}

// The set of arguments for constructing a SccSourceIamBinding resource.
type SccSourceIamBindingArgs struct {
	Condition             SccSourceIamBindingConditionPtrInput
	Members               pulumi.StringArrayInput
	Organization          pulumi.StringInput
	Role                  pulumi.StringInput
	SccSourceIamBindingId pulumi.StringPtrInput
	Source                pulumi.StringInput
}

func (SccSourceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sccSourceIamBindingArgs)(nil)).Elem()
}

type SccSourceIamBindingInput interface {
	pulumi.Input

	ToSccSourceIamBindingOutput() SccSourceIamBindingOutput
	ToSccSourceIamBindingOutputWithContext(ctx context.Context) SccSourceIamBindingOutput
}

func (*SccSourceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SccSourceIamBinding)(nil)).Elem()
}

func (i *SccSourceIamBinding) ToSccSourceIamBindingOutput() SccSourceIamBindingOutput {
	return i.ToSccSourceIamBindingOutputWithContext(context.Background())
}

func (i *SccSourceIamBinding) ToSccSourceIamBindingOutputWithContext(ctx context.Context) SccSourceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SccSourceIamBindingOutput)
}

type SccSourceIamBindingOutput struct{ *pulumi.OutputState }

func (SccSourceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SccSourceIamBinding)(nil)).Elem()
}

func (o SccSourceIamBindingOutput) ToSccSourceIamBindingOutput() SccSourceIamBindingOutput {
	return o
}

func (o SccSourceIamBindingOutput) ToSccSourceIamBindingOutputWithContext(ctx context.Context) SccSourceIamBindingOutput {
	return o
}

func (o SccSourceIamBindingOutput) Condition() SccSourceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) SccSourceIamBindingConditionPtrOutput { return v.Condition }).(SccSourceIamBindingConditionPtrOutput)
}

func (o SccSourceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SccSourceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o SccSourceIamBindingOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

func (o SccSourceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SccSourceIamBindingOutput) SccSourceIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) pulumi.StringOutput { return v.SccSourceIamBindingId }).(pulumi.StringOutput)
}

func (o SccSourceIamBindingOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SccSourceIamBinding) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SccSourceIamBindingInput)(nil)).Elem(), &SccSourceIamBinding{})
	pulumi.RegisterOutputType(SccSourceIamBindingOutput{})
}
