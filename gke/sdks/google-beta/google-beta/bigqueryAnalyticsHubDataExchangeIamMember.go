// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BigqueryAnalyticsHubDataExchangeIamMember struct {
	pulumi.CustomResourceState

	BigqueryAnalyticsHubDataExchangeIamMemberId pulumi.StringOutput                                         `pulumi:"bigqueryAnalyticsHubDataExchangeIamMemberId"`
	Condition                                   BigqueryAnalyticsHubDataExchangeIamMemberConditionPtrOutput `pulumi:"condition"`
	DataExchangeId                              pulumi.StringOutput                                         `pulumi:"dataExchangeId"`
	Etag                                        pulumi.StringOutput                                         `pulumi:"etag"`
	Location                                    pulumi.StringOutput                                         `pulumi:"location"`
	Member                                      pulumi.StringOutput                                         `pulumi:"member"`
	Project                                     pulumi.StringOutput                                         `pulumi:"project"`
	Role                                        pulumi.StringOutput                                         `pulumi:"role"`
}

// NewBigqueryAnalyticsHubDataExchangeIamMember registers a new resource with the given unique name, arguments, and options.
func NewBigqueryAnalyticsHubDataExchangeIamMember(ctx *pulumi.Context,
	name string, args *BigqueryAnalyticsHubDataExchangeIamMemberArgs, opts ...pulumi.ResourceOption) (*BigqueryAnalyticsHubDataExchangeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataExchangeId == nil {
		return nil, errors.New("invalid value for required argument 'DataExchangeId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource BigqueryAnalyticsHubDataExchangeIamMember
	err = ctx.RegisterPackageResource("google-beta:index/bigqueryAnalyticsHubDataExchangeIamMember:BigqueryAnalyticsHubDataExchangeIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryAnalyticsHubDataExchangeIamMember gets an existing BigqueryAnalyticsHubDataExchangeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryAnalyticsHubDataExchangeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryAnalyticsHubDataExchangeIamMemberState, opts ...pulumi.ResourceOption) (*BigqueryAnalyticsHubDataExchangeIamMember, error) {
	var resource BigqueryAnalyticsHubDataExchangeIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/bigqueryAnalyticsHubDataExchangeIamMember:BigqueryAnalyticsHubDataExchangeIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryAnalyticsHubDataExchangeIamMember resources.
type bigqueryAnalyticsHubDataExchangeIamMemberState struct {
	BigqueryAnalyticsHubDataExchangeIamMemberId *string                                             `pulumi:"bigqueryAnalyticsHubDataExchangeIamMemberId"`
	Condition                                   *BigqueryAnalyticsHubDataExchangeIamMemberCondition `pulumi:"condition"`
	DataExchangeId                              *string                                             `pulumi:"dataExchangeId"`
	Etag                                        *string                                             `pulumi:"etag"`
	Location                                    *string                                             `pulumi:"location"`
	Member                                      *string                                             `pulumi:"member"`
	Project                                     *string                                             `pulumi:"project"`
	Role                                        *string                                             `pulumi:"role"`
}

type BigqueryAnalyticsHubDataExchangeIamMemberState struct {
	BigqueryAnalyticsHubDataExchangeIamMemberId pulumi.StringPtrInput
	Condition                                   BigqueryAnalyticsHubDataExchangeIamMemberConditionPtrInput
	DataExchangeId                              pulumi.StringPtrInput
	Etag                                        pulumi.StringPtrInput
	Location                                    pulumi.StringPtrInput
	Member                                      pulumi.StringPtrInput
	Project                                     pulumi.StringPtrInput
	Role                                        pulumi.StringPtrInput
}

func (BigqueryAnalyticsHubDataExchangeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryAnalyticsHubDataExchangeIamMemberState)(nil)).Elem()
}

type bigqueryAnalyticsHubDataExchangeIamMemberArgs struct {
	BigqueryAnalyticsHubDataExchangeIamMemberId *string                                             `pulumi:"bigqueryAnalyticsHubDataExchangeIamMemberId"`
	Condition                                   *BigqueryAnalyticsHubDataExchangeIamMemberCondition `pulumi:"condition"`
	DataExchangeId                              string                                              `pulumi:"dataExchangeId"`
	Location                                    *string                                             `pulumi:"location"`
	Member                                      string                                              `pulumi:"member"`
	Project                                     *string                                             `pulumi:"project"`
	Role                                        string                                              `pulumi:"role"`
}

// The set of arguments for constructing a BigqueryAnalyticsHubDataExchangeIamMember resource.
type BigqueryAnalyticsHubDataExchangeIamMemberArgs struct {
	BigqueryAnalyticsHubDataExchangeIamMemberId pulumi.StringPtrInput
	Condition                                   BigqueryAnalyticsHubDataExchangeIamMemberConditionPtrInput
	DataExchangeId                              pulumi.StringInput
	Location                                    pulumi.StringPtrInput
	Member                                      pulumi.StringInput
	Project                                     pulumi.StringPtrInput
	Role                                        pulumi.StringInput
}

func (BigqueryAnalyticsHubDataExchangeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryAnalyticsHubDataExchangeIamMemberArgs)(nil)).Elem()
}

type BigqueryAnalyticsHubDataExchangeIamMemberInput interface {
	pulumi.Input

	ToBigqueryAnalyticsHubDataExchangeIamMemberOutput() BigqueryAnalyticsHubDataExchangeIamMemberOutput
	ToBigqueryAnalyticsHubDataExchangeIamMemberOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamMemberOutput
}

func (*BigqueryAnalyticsHubDataExchangeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryAnalyticsHubDataExchangeIamMember)(nil)).Elem()
}

func (i *BigqueryAnalyticsHubDataExchangeIamMember) ToBigqueryAnalyticsHubDataExchangeIamMemberOutput() BigqueryAnalyticsHubDataExchangeIamMemberOutput {
	return i.ToBigqueryAnalyticsHubDataExchangeIamMemberOutputWithContext(context.Background())
}

func (i *BigqueryAnalyticsHubDataExchangeIamMember) ToBigqueryAnalyticsHubDataExchangeIamMemberOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryAnalyticsHubDataExchangeIamMemberOutput)
}

type BigqueryAnalyticsHubDataExchangeIamMemberOutput struct{ *pulumi.OutputState }

func (BigqueryAnalyticsHubDataExchangeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryAnalyticsHubDataExchangeIamMember)(nil)).Elem()
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) ToBigqueryAnalyticsHubDataExchangeIamMemberOutput() BigqueryAnalyticsHubDataExchangeIamMemberOutput {
	return o
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) ToBigqueryAnalyticsHubDataExchangeIamMemberOutputWithContext(ctx context.Context) BigqueryAnalyticsHubDataExchangeIamMemberOutput {
	return o
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) BigqueryAnalyticsHubDataExchangeIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput {
		return v.BigqueryAnalyticsHubDataExchangeIamMemberId
	}).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) Condition() BigqueryAnalyticsHubDataExchangeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) BigqueryAnalyticsHubDataExchangeIamMemberConditionPtrOutput {
		return v.Condition
	}).(BigqueryAnalyticsHubDataExchangeIamMemberConditionPtrOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) DataExchangeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput { return v.DataExchangeId }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o BigqueryAnalyticsHubDataExchangeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryAnalyticsHubDataExchangeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryAnalyticsHubDataExchangeIamMemberInput)(nil)).Elem(), &BigqueryAnalyticsHubDataExchangeIamMember{})
	pulumi.RegisterOutputType(BigqueryAnalyticsHubDataExchangeIamMemberOutput{})
}
