// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectService struct {
	pulumi.CustomResourceState

	CheckIfServiceHasUsageOnDestroy pulumi.BoolPtrOutput            `pulumi:"checkIfServiceHasUsageOnDestroy"`
	DisableDependentServices        pulumi.BoolPtrOutput            `pulumi:"disableDependentServices"`
	DisableOnDestroy                pulumi.BoolPtrOutput            `pulumi:"disableOnDestroy"`
	Project                         pulumi.StringOutput             `pulumi:"project"`
	ProjectServiceId                pulumi.StringOutput             `pulumi:"projectServiceId"`
	Service                         pulumi.StringOutput             `pulumi:"service"`
	Timeouts                        ProjectServiceTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewProjectService registers a new resource with the given unique name, arguments, and options.
func NewProjectService(ctx *pulumi.Context,
	name string, args *ProjectServiceArgs, opts ...pulumi.ResourceOption) (*ProjectService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ProjectService
	err = ctx.RegisterPackageResource("google-beta:index/projectService:ProjectService", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectService gets an existing ProjectService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectServiceState, opts ...pulumi.ResourceOption) (*ProjectService, error) {
	var resource ProjectService
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/projectService:ProjectService", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectService resources.
type projectServiceState struct {
	CheckIfServiceHasUsageOnDestroy *bool                   `pulumi:"checkIfServiceHasUsageOnDestroy"`
	DisableDependentServices        *bool                   `pulumi:"disableDependentServices"`
	DisableOnDestroy                *bool                   `pulumi:"disableOnDestroy"`
	Project                         *string                 `pulumi:"project"`
	ProjectServiceId                *string                 `pulumi:"projectServiceId"`
	Service                         *string                 `pulumi:"service"`
	Timeouts                        *ProjectServiceTimeouts `pulumi:"timeouts"`
}

type ProjectServiceState struct {
	CheckIfServiceHasUsageOnDestroy pulumi.BoolPtrInput
	DisableDependentServices        pulumi.BoolPtrInput
	DisableOnDestroy                pulumi.BoolPtrInput
	Project                         pulumi.StringPtrInput
	ProjectServiceId                pulumi.StringPtrInput
	Service                         pulumi.StringPtrInput
	Timeouts                        ProjectServiceTimeoutsPtrInput
}

func (ProjectServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectServiceState)(nil)).Elem()
}

type projectServiceArgs struct {
	CheckIfServiceHasUsageOnDestroy *bool                   `pulumi:"checkIfServiceHasUsageOnDestroy"`
	DisableDependentServices        *bool                   `pulumi:"disableDependentServices"`
	DisableOnDestroy                *bool                   `pulumi:"disableOnDestroy"`
	Project                         *string                 `pulumi:"project"`
	ProjectServiceId                *string                 `pulumi:"projectServiceId"`
	Service                         string                  `pulumi:"service"`
	Timeouts                        *ProjectServiceTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ProjectService resource.
type ProjectServiceArgs struct {
	CheckIfServiceHasUsageOnDestroy pulumi.BoolPtrInput
	DisableDependentServices        pulumi.BoolPtrInput
	DisableOnDestroy                pulumi.BoolPtrInput
	Project                         pulumi.StringPtrInput
	ProjectServiceId                pulumi.StringPtrInput
	Service                         pulumi.StringInput
	Timeouts                        ProjectServiceTimeoutsPtrInput
}

func (ProjectServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectServiceArgs)(nil)).Elem()
}

type ProjectServiceInput interface {
	pulumi.Input

	ToProjectServiceOutput() ProjectServiceOutput
	ToProjectServiceOutputWithContext(ctx context.Context) ProjectServiceOutput
}

func (*ProjectService) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectService)(nil)).Elem()
}

func (i *ProjectService) ToProjectServiceOutput() ProjectServiceOutput {
	return i.ToProjectServiceOutputWithContext(context.Background())
}

func (i *ProjectService) ToProjectServiceOutputWithContext(ctx context.Context) ProjectServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectServiceOutput)
}

type ProjectServiceOutput struct{ *pulumi.OutputState }

func (ProjectServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectService)(nil)).Elem()
}

func (o ProjectServiceOutput) ToProjectServiceOutput() ProjectServiceOutput {
	return o
}

func (o ProjectServiceOutput) ToProjectServiceOutputWithContext(ctx context.Context) ProjectServiceOutput {
	return o
}

func (o ProjectServiceOutput) CheckIfServiceHasUsageOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectService) pulumi.BoolPtrOutput { return v.CheckIfServiceHasUsageOnDestroy }).(pulumi.BoolPtrOutput)
}

func (o ProjectServiceOutput) DisableDependentServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectService) pulumi.BoolPtrOutput { return v.DisableDependentServices }).(pulumi.BoolPtrOutput)
}

func (o ProjectServiceOutput) DisableOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectService) pulumi.BoolPtrOutput { return v.DisableOnDestroy }).(pulumi.BoolPtrOutput)
}

func (o ProjectServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ProjectServiceOutput) ProjectServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectService) pulumi.StringOutput { return v.ProjectServiceId }).(pulumi.StringOutput)
}

func (o ProjectServiceOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectService) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o ProjectServiceOutput) Timeouts() ProjectServiceTimeoutsPtrOutput {
	return o.ApplyT(func(v *ProjectService) ProjectServiceTimeoutsPtrOutput { return v.Timeouts }).(ProjectServiceTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectServiceInput)(nil)).Elem(), &ProjectService{})
	pulumi.RegisterOutputType(ProjectServiceOutput{})
}
