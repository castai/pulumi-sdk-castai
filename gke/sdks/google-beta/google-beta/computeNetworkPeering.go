// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeNetworkPeering struct {
	pulumi.CustomResourceState

	ComputeNetworkPeeringId pulumi.StringOutput `pulumi:"computeNetworkPeeringId"`
	// Whether to export the custom routes to the peer network. Defaults to false.
	ExportCustomRoutes             pulumi.BoolPtrOutput `pulumi:"exportCustomRoutes"`
	ExportSubnetRoutesWithPublicIp pulumi.BoolPtrOutput `pulumi:"exportSubnetRoutesWithPublicIp"`
	// Whether to export the custom routes from the peer network. Defaults to false.
	ImportCustomRoutes             pulumi.BoolPtrOutput `pulumi:"importCustomRoutes"`
	ImportSubnetRoutesWithPublicIp pulumi.BoolPtrOutput `pulumi:"importSubnetRoutesWithPublicIp"`
	// Name of the peering.
	Name pulumi.StringOutput `pulumi:"name"`
	// The primary network of the peering.
	Network pulumi.StringOutput `pulumi:"network"`
	// The peer network in the peering. The peer network may belong to a different project.
	PeerNetwork pulumi.StringOutput `pulumi:"peerNetwork"`
	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
	// value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
	StackType pulumi.StringPtrOutput `pulumi:"stackType"`
	// State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the
	// peer network.
	State pulumi.StringOutput `pulumi:"state"`
	// Details about the current state of the peering.
	StateDetails pulumi.StringOutput                    `pulumi:"stateDetails"`
	Timeouts     ComputeNetworkPeeringTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewComputeNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewComputeNetworkPeering(ctx *pulumi.Context,
	name string, args *ComputeNetworkPeeringArgs, opts ...pulumi.ResourceOption) (*ComputeNetworkPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.PeerNetwork == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetwork'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ComputeNetworkPeering
	err = ctx.RegisterPackageResource("google-beta:index/computeNetworkPeering:ComputeNetworkPeering", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeNetworkPeering gets an existing ComputeNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeNetworkPeeringState, opts ...pulumi.ResourceOption) (*ComputeNetworkPeering, error) {
	var resource ComputeNetworkPeering
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/computeNetworkPeering:ComputeNetworkPeering", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeNetworkPeering resources.
type computeNetworkPeeringState struct {
	ComputeNetworkPeeringId *string `pulumi:"computeNetworkPeeringId"`
	// Whether to export the custom routes to the peer network. Defaults to false.
	ExportCustomRoutes             *bool `pulumi:"exportCustomRoutes"`
	ExportSubnetRoutesWithPublicIp *bool `pulumi:"exportSubnetRoutesWithPublicIp"`
	// Whether to export the custom routes from the peer network. Defaults to false.
	ImportCustomRoutes             *bool `pulumi:"importCustomRoutes"`
	ImportSubnetRoutesWithPublicIp *bool `pulumi:"importSubnetRoutesWithPublicIp"`
	// Name of the peering.
	Name *string `pulumi:"name"`
	// The primary network of the peering.
	Network *string `pulumi:"network"`
	// The peer network in the peering. The peer network may belong to a different project.
	PeerNetwork *string `pulumi:"peerNetwork"`
	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
	// value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
	StackType *string `pulumi:"stackType"`
	// State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the
	// peer network.
	State *string `pulumi:"state"`
	// Details about the current state of the peering.
	StateDetails *string                        `pulumi:"stateDetails"`
	Timeouts     *ComputeNetworkPeeringTimeouts `pulumi:"timeouts"`
}

type ComputeNetworkPeeringState struct {
	ComputeNetworkPeeringId pulumi.StringPtrInput
	// Whether to export the custom routes to the peer network. Defaults to false.
	ExportCustomRoutes             pulumi.BoolPtrInput
	ExportSubnetRoutesWithPublicIp pulumi.BoolPtrInput
	// Whether to export the custom routes from the peer network. Defaults to false.
	ImportCustomRoutes             pulumi.BoolPtrInput
	ImportSubnetRoutesWithPublicIp pulumi.BoolPtrInput
	// Name of the peering.
	Name pulumi.StringPtrInput
	// The primary network of the peering.
	Network pulumi.StringPtrInput
	// The peer network in the peering. The peer network may belong to a different project.
	PeerNetwork pulumi.StringPtrInput
	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
	// value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
	StackType pulumi.StringPtrInput
	// State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the
	// peer network.
	State pulumi.StringPtrInput
	// Details about the current state of the peering.
	StateDetails pulumi.StringPtrInput
	Timeouts     ComputeNetworkPeeringTimeoutsPtrInput
}

func (ComputeNetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNetworkPeeringState)(nil)).Elem()
}

type computeNetworkPeeringArgs struct {
	ComputeNetworkPeeringId *string `pulumi:"computeNetworkPeeringId"`
	// Whether to export the custom routes to the peer network. Defaults to false.
	ExportCustomRoutes             *bool `pulumi:"exportCustomRoutes"`
	ExportSubnetRoutesWithPublicIp *bool `pulumi:"exportSubnetRoutesWithPublicIp"`
	// Whether to export the custom routes from the peer network. Defaults to false.
	ImportCustomRoutes             *bool `pulumi:"importCustomRoutes"`
	ImportSubnetRoutesWithPublicIp *bool `pulumi:"importSubnetRoutesWithPublicIp"`
	// Name of the peering.
	Name *string `pulumi:"name"`
	// The primary network of the peering.
	Network string `pulumi:"network"`
	// The peer network in the peering. The peer network may belong to a different project.
	PeerNetwork string `pulumi:"peerNetwork"`
	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
	// value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
	StackType *string                        `pulumi:"stackType"`
	Timeouts  *ComputeNetworkPeeringTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ComputeNetworkPeering resource.
type ComputeNetworkPeeringArgs struct {
	ComputeNetworkPeeringId pulumi.StringPtrInput
	// Whether to export the custom routes to the peer network. Defaults to false.
	ExportCustomRoutes             pulumi.BoolPtrInput
	ExportSubnetRoutesWithPublicIp pulumi.BoolPtrInput
	// Whether to export the custom routes from the peer network. Defaults to false.
	ImportCustomRoutes             pulumi.BoolPtrInput
	ImportSubnetRoutesWithPublicIp pulumi.BoolPtrInput
	// Name of the peering.
	Name pulumi.StringPtrInput
	// The primary network of the peering.
	Network pulumi.StringInput
	// The peer network in the peering. The peer network may belong to a different project.
	PeerNetwork pulumi.StringInput
	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
	// value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
	StackType pulumi.StringPtrInput
	Timeouts  ComputeNetworkPeeringTimeoutsPtrInput
}

func (ComputeNetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNetworkPeeringArgs)(nil)).Elem()
}

type ComputeNetworkPeeringInput interface {
	pulumi.Input

	ToComputeNetworkPeeringOutput() ComputeNetworkPeeringOutput
	ToComputeNetworkPeeringOutputWithContext(ctx context.Context) ComputeNetworkPeeringOutput
}

func (*ComputeNetworkPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNetworkPeering)(nil)).Elem()
}

func (i *ComputeNetworkPeering) ToComputeNetworkPeeringOutput() ComputeNetworkPeeringOutput {
	return i.ToComputeNetworkPeeringOutputWithContext(context.Background())
}

func (i *ComputeNetworkPeering) ToComputeNetworkPeeringOutputWithContext(ctx context.Context) ComputeNetworkPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeNetworkPeeringOutput)
}

type ComputeNetworkPeeringOutput struct{ *pulumi.OutputState }

func (ComputeNetworkPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNetworkPeering)(nil)).Elem()
}

func (o ComputeNetworkPeeringOutput) ToComputeNetworkPeeringOutput() ComputeNetworkPeeringOutput {
	return o
}

func (o ComputeNetworkPeeringOutput) ToComputeNetworkPeeringOutputWithContext(ctx context.Context) ComputeNetworkPeeringOutput {
	return o
}

func (o ComputeNetworkPeeringOutput) ComputeNetworkPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringOutput { return v.ComputeNetworkPeeringId }).(pulumi.StringOutput)
}

// Whether to export the custom routes to the peer network. Defaults to false.
func (o ComputeNetworkPeeringOutput) ExportCustomRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.BoolPtrOutput { return v.ExportCustomRoutes }).(pulumi.BoolPtrOutput)
}

func (o ComputeNetworkPeeringOutput) ExportSubnetRoutesWithPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.BoolPtrOutput { return v.ExportSubnetRoutesWithPublicIp }).(pulumi.BoolPtrOutput)
}

// Whether to export the custom routes from the peer network. Defaults to false.
func (o ComputeNetworkPeeringOutput) ImportCustomRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.BoolPtrOutput { return v.ImportCustomRoutes }).(pulumi.BoolPtrOutput)
}

func (o ComputeNetworkPeeringOutput) ImportSubnetRoutesWithPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.BoolPtrOutput { return v.ImportSubnetRoutesWithPublicIp }).(pulumi.BoolPtrOutput)
}

// Name of the peering.
func (o ComputeNetworkPeeringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The primary network of the peering.
func (o ComputeNetworkPeeringOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The peer network in the peering. The peer network may belong to a different project.
func (o ComputeNetworkPeeringOutput) PeerNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringOutput { return v.PeerNetwork }).(pulumi.StringOutput)
}

// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
// value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
func (o ComputeNetworkPeeringOutput) StackType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringPtrOutput { return v.StackType }).(pulumi.StringPtrOutput)
}

// State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the
// peer network.
func (o ComputeNetworkPeeringOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Details about the current state of the peering.
func (o ComputeNetworkPeeringOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

func (o ComputeNetworkPeeringOutput) Timeouts() ComputeNetworkPeeringTimeoutsPtrOutput {
	return o.ApplyT(func(v *ComputeNetworkPeering) ComputeNetworkPeeringTimeoutsPtrOutput { return v.Timeouts }).(ComputeNetworkPeeringTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeNetworkPeeringInput)(nil)).Elem(), &ComputeNetworkPeering{})
	pulumi.RegisterOutputType(ComputeNetworkPeeringOutput{})
}
