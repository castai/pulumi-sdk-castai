// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VertexAiFeaturestoreEntitytypeIamBinding struct {
	pulumi.CustomResourceState

	Condition                                  VertexAiFeaturestoreEntitytypeIamBindingConditionPtrOutput `pulumi:"condition"`
	Entitytype                                 pulumi.StringOutput                                        `pulumi:"entitytype"`
	Etag                                       pulumi.StringOutput                                        `pulumi:"etag"`
	Featurestore                               pulumi.StringOutput                                        `pulumi:"featurestore"`
	Members                                    pulumi.StringArrayOutput                                   `pulumi:"members"`
	Role                                       pulumi.StringOutput                                        `pulumi:"role"`
	VertexAiFeaturestoreEntitytypeIamBindingId pulumi.StringOutput                                        `pulumi:"vertexAiFeaturestoreEntitytypeIamBindingId"`
}

// NewVertexAiFeaturestoreEntitytypeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewVertexAiFeaturestoreEntitytypeIamBinding(ctx *pulumi.Context,
	name string, args *VertexAiFeaturestoreEntitytypeIamBindingArgs, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entitytype == nil {
		return nil, errors.New("invalid value for required argument 'Entitytype'")
	}
	if args.Featurestore == nil {
		return nil, errors.New("invalid value for required argument 'Featurestore'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource VertexAiFeaturestoreEntitytypeIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeIamBinding:VertexAiFeaturestoreEntitytypeIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexAiFeaturestoreEntitytypeIamBinding gets an existing VertexAiFeaturestoreEntitytypeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexAiFeaturestoreEntitytypeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexAiFeaturestoreEntitytypeIamBindingState, opts ...pulumi.ResourceOption) (*VertexAiFeaturestoreEntitytypeIamBinding, error) {
	var resource VertexAiFeaturestoreEntitytypeIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/vertexAiFeaturestoreEntitytypeIamBinding:VertexAiFeaturestoreEntitytypeIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexAiFeaturestoreEntitytypeIamBinding resources.
type vertexAiFeaturestoreEntitytypeIamBindingState struct {
	Condition                                  *VertexAiFeaturestoreEntitytypeIamBindingCondition `pulumi:"condition"`
	Entitytype                                 *string                                            `pulumi:"entitytype"`
	Etag                                       *string                                            `pulumi:"etag"`
	Featurestore                               *string                                            `pulumi:"featurestore"`
	Members                                    []string                                           `pulumi:"members"`
	Role                                       *string                                            `pulumi:"role"`
	VertexAiFeaturestoreEntitytypeIamBindingId *string                                            `pulumi:"vertexAiFeaturestoreEntitytypeIamBindingId"`
}

type VertexAiFeaturestoreEntitytypeIamBindingState struct {
	Condition                                  VertexAiFeaturestoreEntitytypeIamBindingConditionPtrInput
	Entitytype                                 pulumi.StringPtrInput
	Etag                                       pulumi.StringPtrInput
	Featurestore                               pulumi.StringPtrInput
	Members                                    pulumi.StringArrayInput
	Role                                       pulumi.StringPtrInput
	VertexAiFeaturestoreEntitytypeIamBindingId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeIamBindingState)(nil)).Elem()
}

type vertexAiFeaturestoreEntitytypeIamBindingArgs struct {
	Condition                                  *VertexAiFeaturestoreEntitytypeIamBindingCondition `pulumi:"condition"`
	Entitytype                                 string                                             `pulumi:"entitytype"`
	Featurestore                               string                                             `pulumi:"featurestore"`
	Members                                    []string                                           `pulumi:"members"`
	Role                                       string                                             `pulumi:"role"`
	VertexAiFeaturestoreEntitytypeIamBindingId *string                                            `pulumi:"vertexAiFeaturestoreEntitytypeIamBindingId"`
}

// The set of arguments for constructing a VertexAiFeaturestoreEntitytypeIamBinding resource.
type VertexAiFeaturestoreEntitytypeIamBindingArgs struct {
	Condition                                  VertexAiFeaturestoreEntitytypeIamBindingConditionPtrInput
	Entitytype                                 pulumi.StringInput
	Featurestore                               pulumi.StringInput
	Members                                    pulumi.StringArrayInput
	Role                                       pulumi.StringInput
	VertexAiFeaturestoreEntitytypeIamBindingId pulumi.StringPtrInput
}

func (VertexAiFeaturestoreEntitytypeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexAiFeaturestoreEntitytypeIamBindingArgs)(nil)).Elem()
}

type VertexAiFeaturestoreEntitytypeIamBindingInput interface {
	pulumi.Input

	ToVertexAiFeaturestoreEntitytypeIamBindingOutput() VertexAiFeaturestoreEntitytypeIamBindingOutput
	ToVertexAiFeaturestoreEntitytypeIamBindingOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamBindingOutput
}

func (*VertexAiFeaturestoreEntitytypeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeIamBinding)(nil)).Elem()
}

func (i *VertexAiFeaturestoreEntitytypeIamBinding) ToVertexAiFeaturestoreEntitytypeIamBindingOutput() VertexAiFeaturestoreEntitytypeIamBindingOutput {
	return i.ToVertexAiFeaturestoreEntitytypeIamBindingOutputWithContext(context.Background())
}

func (i *VertexAiFeaturestoreEntitytypeIamBinding) ToVertexAiFeaturestoreEntitytypeIamBindingOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAiFeaturestoreEntitytypeIamBindingOutput)
}

type VertexAiFeaturestoreEntitytypeIamBindingOutput struct{ *pulumi.OutputState }

func (VertexAiFeaturestoreEntitytypeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAiFeaturestoreEntitytypeIamBinding)(nil)).Elem()
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) ToVertexAiFeaturestoreEntitytypeIamBindingOutput() VertexAiFeaturestoreEntitytypeIamBindingOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) ToVertexAiFeaturestoreEntitytypeIamBindingOutputWithContext(ctx context.Context) VertexAiFeaturestoreEntitytypeIamBindingOutput {
	return o
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) Condition() VertexAiFeaturestoreEntitytypeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) VertexAiFeaturestoreEntitytypeIamBindingConditionPtrOutput {
		return v.Condition
	}).(VertexAiFeaturestoreEntitytypeIamBindingConditionPtrOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) Entitytype() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) pulumi.StringOutput { return v.Entitytype }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) Featurestore() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) pulumi.StringOutput { return v.Featurestore }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o VertexAiFeaturestoreEntitytypeIamBindingOutput) VertexAiFeaturestoreEntitytypeIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexAiFeaturestoreEntitytypeIamBinding) pulumi.StringOutput {
		return v.VertexAiFeaturestoreEntitytypeIamBindingId
	}).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAiFeaturestoreEntitytypeIamBindingInput)(nil)).Elem(), &VertexAiFeaturestoreEntitytypeIamBinding{})
	pulumi.RegisterOutputType(VertexAiFeaturestoreEntitytypeIamBindingOutput{})
}
