// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PrivatecaCertificate struct {
	pulumi.CustomResourceState

	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from a Certificate
	// Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
	// argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument
	// 'certificate_authority' should be set to 'my-ca'.
	CertificateAuthority pulumi.StringPtrOutput `pulumi:"certificateAuthority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions PrivatecaCertificateCertificateDescriptionArrayOutput `pulumi:"certificateDescriptions"`
	// The resource name for a CertificateTemplate used to issue this certificate, in the format
	// 'projects/*/locations/*/certificateTemplates/*'. If this is specified, the caller must have the necessary permission to
	// use this template. If this is omitted, no template will be used. This template must be in the same location as the
	// Certificate.
	CertificateTemplate pulumi.StringPtrOutput `pulumi:"certificateTemplate"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config PrivatecaCertificateConfigPtrOutput `pulumi:"config"`
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime      pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The resource name of the issuing CertificateAuthority in the format
	// 'projects/*/locations/*/caPools/*/certificateAuthorities/*'.
	IssuerCertificateAuthority pulumi.StringOutput `pulumi:"issuerCertificateAuthority"`
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrOutput `pulumi:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by running 'gcloud privateca locations list'.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name for this Certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate pulumi.StringOutput `pulumi:"pemCertificate"`
	// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC
	// 5246.
	PemCertificateChains pulumi.StringArrayOutput `pulumi:"pemCertificateChains"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrOutput `pulumi:"pemCsr"`
	// The name of the CaPool this Certificate belongs to.
	Pool                   pulumi.StringOutput `pulumi:"pool"`
	PrivatecaCertificateId pulumi.StringOutput `pulumi:"privatecaCertificateId"`
	Project                pulumi.StringOutput `pulumi:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails PrivatecaCertificateRevocationDetailArrayOutput `pulumi:"revocationDetails"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                `pulumi:"terraformLabels"`
	Timeouts        PrivatecaCertificateTimeoutsPtrOutput `pulumi:"timeouts"`
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPrivatecaCertificate registers a new resource with the given unique name, arguments, and options.
func NewPrivatecaCertificate(ctx *pulumi.Context,
	name string, args *PrivatecaCertificateArgs, opts ...pulumi.ResourceOption) (*PrivatecaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PrivatecaCertificate
	err = ctx.RegisterPackageResource("google-beta:index/privatecaCertificate:PrivatecaCertificate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivatecaCertificate gets an existing PrivatecaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivatecaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivatecaCertificateState, opts ...pulumi.ResourceOption) (*PrivatecaCertificate, error) {
	var resource PrivatecaCertificate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/privatecaCertificate:PrivatecaCertificate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivatecaCertificate resources.
type privatecaCertificateState struct {
	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from a Certificate
	// Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
	// argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument
	// 'certificate_authority' should be set to 'my-ca'.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions []PrivatecaCertificateCertificateDescription `pulumi:"certificateDescriptions"`
	// The resource name for a CertificateTemplate used to issue this certificate, in the format
	// 'projects/*/locations/*/certificateTemplates/*'. If this is specified, the caller must have the necessary permission to
	// use this template. If this is omitted, no template will be used. This template must be in the same location as the
	// Certificate.
	CertificateTemplate *string `pulumi:"certificateTemplate"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config *PrivatecaCertificateConfig `pulumi:"config"`
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime      *string           `pulumi:"createTime"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The resource name of the issuing CertificateAuthority in the format
	// 'projects/*/locations/*/caPools/*/certificateAuthorities/*'.
	IssuerCertificateAuthority *string `pulumi:"issuerCertificateAuthority"`
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by running 'gcloud privateca locations list'.
	Location *string `pulumi:"location"`
	// The name for this Certificate.
	Name *string `pulumi:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate *string `pulumi:"pemCertificate"`
	// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC
	// 5246.
	PemCertificateChains []string `pulumi:"pemCertificateChains"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr *string `pulumi:"pemCsr"`
	// The name of the CaPool this Certificate belongs to.
	Pool                   *string `pulumi:"pool"`
	PrivatecaCertificateId *string `pulumi:"privatecaCertificateId"`
	Project                *string `pulumi:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails []PrivatecaCertificateRevocationDetail `pulumi:"revocationDetails"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string             `pulumi:"terraformLabels"`
	Timeouts        *PrivatecaCertificateTimeouts `pulumi:"timeouts"`
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
}

type PrivatecaCertificateState struct {
	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from a Certificate
	// Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
	// argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument
	// 'certificate_authority' should be set to 'my-ca'.
	CertificateAuthority pulumi.StringPtrInput
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions PrivatecaCertificateCertificateDescriptionArrayInput
	// The resource name for a CertificateTemplate used to issue this certificate, in the format
	// 'projects/*/locations/*/certificateTemplates/*'. If this is specified, the caller must have the necessary permission to
	// use this template. If this is omitted, no template will be used. This template must be in the same location as the
	// Certificate.
	CertificateTemplate pulumi.StringPtrInput
	// The config used to create a self-signed X.509 certificate or CSR.
	Config PrivatecaCertificateConfigPtrInput
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime      pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The resource name of the issuing CertificateAuthority in the format
	// 'projects/*/locations/*/caPools/*/certificateAuthorities/*'.
	IssuerCertificateAuthority pulumi.StringPtrInput
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the Certificate. A full list of valid locations can be found by running 'gcloud privateca locations list'.
	Location pulumi.StringPtrInput
	// The name for this Certificate.
	Name pulumi.StringPtrInput
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate pulumi.StringPtrInput
	// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC
	// 5246.
	PemCertificateChains pulumi.StringArrayInput
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrInput
	// The name of the CaPool this Certificate belongs to.
	Pool                   pulumi.StringPtrInput
	PrivatecaCertificateId pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails PrivatecaCertificateRevocationDetailArrayInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        PrivatecaCertificateTimeoutsPtrInput
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
}

func (PrivatecaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*privatecaCertificateState)(nil)).Elem()
}

type privatecaCertificateArgs struct {
	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from a Certificate
	// Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
	// argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument
	// 'certificate_authority' should be set to 'my-ca'.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The resource name for a CertificateTemplate used to issue this certificate, in the format
	// 'projects/*/locations/*/certificateTemplates/*'. If this is specified, the caller must have the necessary permission to
	// use this template. If this is omitted, no template will be used. This template must be in the same location as the
	// Certificate.
	CertificateTemplate *string `pulumi:"certificateTemplate"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config *PrivatecaCertificateConfig `pulumi:"config"`
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by running 'gcloud privateca locations list'.
	Location string `pulumi:"location"`
	// The name for this Certificate.
	Name *string `pulumi:"name"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr *string `pulumi:"pemCsr"`
	// The name of the CaPool this Certificate belongs to.
	Pool                   string                        `pulumi:"pool"`
	PrivatecaCertificateId *string                       `pulumi:"privatecaCertificateId"`
	Project                *string                       `pulumi:"project"`
	Timeouts               *PrivatecaCertificateTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a PrivatecaCertificate resource.
type PrivatecaCertificateArgs struct {
	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from a Certificate
	// Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
	// argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument
	// 'certificate_authority' should be set to 'my-ca'.
	CertificateAuthority pulumi.StringPtrInput
	// The resource name for a CertificateTemplate used to issue this certificate, in the format
	// 'projects/*/locations/*/certificateTemplates/*'. If this is specified, the caller must have the necessary permission to
	// use this template. If this is omitted, no template will be used. This template must be in the same location as the
	// Certificate.
	CertificateTemplate pulumi.StringPtrInput
	// The config used to create a self-signed X.509 certificate or CSR.
	Config PrivatecaCertificateConfigPtrInput
	// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
	// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the Certificate. A full list of valid locations can be found by running 'gcloud privateca locations list'.
	Location pulumi.StringInput
	// The name for this Certificate.
	Name pulumi.StringPtrInput
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrInput
	// The name of the CaPool this Certificate belongs to.
	Pool                   pulumi.StringInput
	PrivatecaCertificateId pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	Timeouts               PrivatecaCertificateTimeoutsPtrInput
}

func (PrivatecaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privatecaCertificateArgs)(nil)).Elem()
}

type PrivatecaCertificateInput interface {
	pulumi.Input

	ToPrivatecaCertificateOutput() PrivatecaCertificateOutput
	ToPrivatecaCertificateOutputWithContext(ctx context.Context) PrivatecaCertificateOutput
}

func (*PrivatecaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatecaCertificate)(nil)).Elem()
}

func (i *PrivatecaCertificate) ToPrivatecaCertificateOutput() PrivatecaCertificateOutput {
	return i.ToPrivatecaCertificateOutputWithContext(context.Background())
}

func (i *PrivatecaCertificate) ToPrivatecaCertificateOutputWithContext(ctx context.Context) PrivatecaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatecaCertificateOutput)
}

type PrivatecaCertificateOutput struct{ *pulumi.OutputState }

func (PrivatecaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatecaCertificate)(nil)).Elem()
}

func (o PrivatecaCertificateOutput) ToPrivatecaCertificateOutput() PrivatecaCertificateOutput {
	return o
}

func (o PrivatecaCertificateOutput) ToPrivatecaCertificateOutputWithContext(ctx context.Context) PrivatecaCertificateOutput {
	return o
}

// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from a Certificate
// Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
// argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument
// 'certificate_authority' should be set to 'my-ca'.
func (o PrivatecaCertificateOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringPtrOutput { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
// this field is present.
func (o PrivatecaCertificateOutput) CertificateDescriptions() PrivatecaCertificateCertificateDescriptionArrayOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) PrivatecaCertificateCertificateDescriptionArrayOutput {
		return v.CertificateDescriptions
	}).(PrivatecaCertificateCertificateDescriptionArrayOutput)
}

// The resource name for a CertificateTemplate used to issue this certificate, in the format
// 'projects/*/locations/*/certificateTemplates/*'. If this is specified, the caller must have the necessary permission to
// use this template. If this is omitted, no template will be used. This template must be in the same location as the
// Certificate.
func (o PrivatecaCertificateOutput) CertificateTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringPtrOutput { return v.CertificateTemplate }).(pulumi.StringPtrOutput)
}

// The config used to create a self-signed X.509 certificate or CSR.
func (o PrivatecaCertificateOutput) Config() PrivatecaCertificateConfigPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) PrivatecaCertificateConfigPtrOutput { return v.Config }).(PrivatecaCertificateConfigPtrOutput)
}

// The time that this resource was created on the server. This is in RFC3339 text format.
func (o PrivatecaCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o PrivatecaCertificateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The resource name of the issuing CertificateAuthority in the format
// 'projects/*/locations/*/caPools/*/certificateAuthorities/*'.
func (o PrivatecaCertificateOutput) IssuerCertificateAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.IssuerCertificateAuthority }).(pulumi.StringOutput)
}

// Labels with user-defined metadata to apply to this resource. **Note**: This field is non-authoritative, and will only
// manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o PrivatecaCertificateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o PrivatecaCertificateOutput) Lifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringPtrOutput { return v.Lifetime }).(pulumi.StringPtrOutput)
}

// Location of the Certificate. A full list of valid locations can be found by running 'gcloud privateca locations list'.
func (o PrivatecaCertificateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name for this Certificate.
func (o PrivatecaCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Output only. The pem-encoded, signed X.509 certificate.
func (o PrivatecaCertificateOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.PemCertificate }).(pulumi.StringOutput)
}

// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC
// 5246.
func (o PrivatecaCertificateOutput) PemCertificateChains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringArrayOutput { return v.PemCertificateChains }).(pulumi.StringArrayOutput)
}

// Immutable. A pem-encoded X.509 certificate signing request (CSR).
func (o PrivatecaCertificateOutput) PemCsr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringPtrOutput { return v.PemCsr }).(pulumi.StringPtrOutput)
}

// The name of the CaPool this Certificate belongs to.
func (o PrivatecaCertificateOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

func (o PrivatecaCertificateOutput) PrivatecaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.PrivatecaCertificateId }).(pulumi.StringOutput)
}

func (o PrivatecaCertificateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
// this field is present.
func (o PrivatecaCertificateOutput) RevocationDetails() PrivatecaCertificateRevocationDetailArrayOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) PrivatecaCertificateRevocationDetailArrayOutput {
		return v.RevocationDetails
	}).(PrivatecaCertificateRevocationDetailArrayOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o PrivatecaCertificateOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o PrivatecaCertificateOutput) Timeouts() PrivatecaCertificateTimeoutsPtrOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) PrivatecaCertificateTimeoutsPtrOutput { return v.Timeouts }).(PrivatecaCertificateTimeoutsPtrOutput)
}

// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
func (o PrivatecaCertificateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivatecaCertificate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatecaCertificateInput)(nil)).Elem(), &PrivatecaCertificate{})
	pulumi.RegisterOutputType(PrivatecaCertificateOutput{})
}
