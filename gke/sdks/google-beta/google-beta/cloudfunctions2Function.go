// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cloudfunctions2Function struct {
	pulumi.CustomResourceState

	// Describes the Build step of the function that builds a container from the given source.
	BuildConfig               Cloudfunctions2FunctionBuildConfigPtrOutput `pulumi:"buildConfig"`
	Cloudfunctions2FunctionId pulumi.StringOutput                         `pulumi:"cloudfunctions2FunctionId"`
	// User-provided description of a function.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The environment the function is hosted on.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
	EventTrigger Cloudfunctions2FunctionEventTriggerPtrOutput `pulumi:"eventTrigger"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
	// pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	KmsKeyName pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	// A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of this cloud function.
	Location pulumi.StringOutput `pulumi:"location"`
	// A user-defined name of the function. Function names must be unique globally and match pattern
	// 'projects/*/locations/*/functions/*'.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Describes the Service being deployed.
	ServiceConfig Cloudfunctions2FunctionServiceConfigPtrOutput `pulumi:"serviceConfig"`
	// Describes the current state of the function.
	State pulumi.StringOutput `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapOutput                   `pulumi:"terraformLabels"`
	Timeouts        Cloudfunctions2FunctionTimeoutsPtrOutput `pulumi:"timeouts"`
	// The last update timestamp of a Cloud Function.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Output only. The deployed url for the function.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewCloudfunctions2Function registers a new resource with the given unique name, arguments, and options.
func NewCloudfunctions2Function(ctx *pulumi.Context,
	name string, args *Cloudfunctions2FunctionArgs, opts ...pulumi.ResourceOption) (*Cloudfunctions2Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource Cloudfunctions2Function
	err = ctx.RegisterPackageResource("google-beta:index/cloudfunctions2Function:Cloudfunctions2Function", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudfunctions2Function gets an existing Cloudfunctions2Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudfunctions2Function(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Cloudfunctions2FunctionState, opts ...pulumi.ResourceOption) (*Cloudfunctions2Function, error) {
	var resource Cloudfunctions2Function
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/cloudfunctions2Function:Cloudfunctions2Function", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cloudfunctions2Function resources.
type cloudfunctions2FunctionState struct {
	// Describes the Build step of the function that builds a container from the given source.
	BuildConfig               *Cloudfunctions2FunctionBuildConfig `pulumi:"buildConfig"`
	Cloudfunctions2FunctionId *string                             `pulumi:"cloudfunctions2FunctionId"`
	// User-provided description of a function.
	Description     *string           `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The environment the function is hosted on.
	Environment *string `pulumi:"environment"`
	// An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
	EventTrigger *Cloudfunctions2FunctionEventTrigger `pulumi:"eventTrigger"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
	// pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of this cloud function.
	Location *string `pulumi:"location"`
	// A user-defined name of the function. Function names must be unique globally and match pattern
	// 'projects/*/locations/*/functions/*'.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Describes the Service being deployed.
	ServiceConfig *Cloudfunctions2FunctionServiceConfig `pulumi:"serviceConfig"`
	// Describes the current state of the function.
	State *string `pulumi:"state"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels map[string]string                `pulumi:"terraformLabels"`
	Timeouts        *Cloudfunctions2FunctionTimeouts `pulumi:"timeouts"`
	// The last update timestamp of a Cloud Function.
	UpdateTime *string `pulumi:"updateTime"`
	// Output only. The deployed url for the function.
	Url *string `pulumi:"url"`
}

type Cloudfunctions2FunctionState struct {
	// Describes the Build step of the function that builds a container from the given source.
	BuildConfig               Cloudfunctions2FunctionBuildConfigPtrInput
	Cloudfunctions2FunctionId pulumi.StringPtrInput
	// User-provided description of a function.
	Description     pulumi.StringPtrInput
	EffectiveLabels pulumi.StringMapInput
	// The environment the function is hosted on.
	Environment pulumi.StringPtrInput
	// An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
	EventTrigger Cloudfunctions2FunctionEventTriggerPtrInput
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
	// pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	KmsKeyName pulumi.StringPtrInput
	// A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The location of this cloud function.
	Location pulumi.StringPtrInput
	// A user-defined name of the function. Function names must be unique globally and match pattern
	// 'projects/*/locations/*/functions/*'.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Describes the Service being deployed.
	ServiceConfig Cloudfunctions2FunctionServiceConfigPtrInput
	// Describes the current state of the function.
	State pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	TerraformLabels pulumi.StringMapInput
	Timeouts        Cloudfunctions2FunctionTimeoutsPtrInput
	// The last update timestamp of a Cloud Function.
	UpdateTime pulumi.StringPtrInput
	// Output only. The deployed url for the function.
	Url pulumi.StringPtrInput
}

func (Cloudfunctions2FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudfunctions2FunctionState)(nil)).Elem()
}

type cloudfunctions2FunctionArgs struct {
	// Describes the Build step of the function that builds a container from the given source.
	BuildConfig               *Cloudfunctions2FunctionBuildConfig `pulumi:"buildConfig"`
	Cloudfunctions2FunctionId *string                             `pulumi:"cloudfunctions2FunctionId"`
	// User-provided description of a function.
	Description *string `pulumi:"description"`
	// An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
	EventTrigger *Cloudfunctions2FunctionEventTrigger `pulumi:"eventTrigger"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
	// pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of this cloud function.
	Location string `pulumi:"location"`
	// A user-defined name of the function. Function names must be unique globally and match pattern
	// 'projects/*/locations/*/functions/*'.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Describes the Service being deployed.
	ServiceConfig *Cloudfunctions2FunctionServiceConfig `pulumi:"serviceConfig"`
	Timeouts      *Cloudfunctions2FunctionTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a Cloudfunctions2Function resource.
type Cloudfunctions2FunctionArgs struct {
	// Describes the Build step of the function that builds a container from the given source.
	BuildConfig               Cloudfunctions2FunctionBuildConfigPtrInput
	Cloudfunctions2FunctionId pulumi.StringPtrInput
	// User-provided description of a function.
	Description pulumi.StringPtrInput
	// An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
	EventTrigger Cloudfunctions2FunctionEventTriggerPtrInput
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
	// pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	KmsKeyName pulumi.StringPtrInput
	// A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
	// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
	// present on the resource.
	Labels pulumi.StringMapInput
	// The location of this cloud function.
	Location pulumi.StringInput
	// A user-defined name of the function. Function names must be unique globally and match pattern
	// 'projects/*/locations/*/functions/*'.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Describes the Service being deployed.
	ServiceConfig Cloudfunctions2FunctionServiceConfigPtrInput
	Timeouts      Cloudfunctions2FunctionTimeoutsPtrInput
}

func (Cloudfunctions2FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudfunctions2FunctionArgs)(nil)).Elem()
}

type Cloudfunctions2FunctionInput interface {
	pulumi.Input

	ToCloudfunctions2FunctionOutput() Cloudfunctions2FunctionOutput
	ToCloudfunctions2FunctionOutputWithContext(ctx context.Context) Cloudfunctions2FunctionOutput
}

func (*Cloudfunctions2Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Cloudfunctions2Function)(nil)).Elem()
}

func (i *Cloudfunctions2Function) ToCloudfunctions2FunctionOutput() Cloudfunctions2FunctionOutput {
	return i.ToCloudfunctions2FunctionOutputWithContext(context.Background())
}

func (i *Cloudfunctions2Function) ToCloudfunctions2FunctionOutputWithContext(ctx context.Context) Cloudfunctions2FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Cloudfunctions2FunctionOutput)
}

type Cloudfunctions2FunctionOutput struct{ *pulumi.OutputState }

func (Cloudfunctions2FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cloudfunctions2Function)(nil)).Elem()
}

func (o Cloudfunctions2FunctionOutput) ToCloudfunctions2FunctionOutput() Cloudfunctions2FunctionOutput {
	return o
}

func (o Cloudfunctions2FunctionOutput) ToCloudfunctions2FunctionOutputWithContext(ctx context.Context) Cloudfunctions2FunctionOutput {
	return o
}

// Describes the Build step of the function that builds a container from the given source.
func (o Cloudfunctions2FunctionOutput) BuildConfig() Cloudfunctions2FunctionBuildConfigPtrOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) Cloudfunctions2FunctionBuildConfigPtrOutput { return v.BuildConfig }).(Cloudfunctions2FunctionBuildConfigPtrOutput)
}

func (o Cloudfunctions2FunctionOutput) Cloudfunctions2FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.Cloudfunctions2FunctionId }).(pulumi.StringOutput)
}

// User-provided description of a function.
func (o Cloudfunctions2FunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o Cloudfunctions2FunctionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The environment the function is hosted on.
func (o Cloudfunctions2FunctionOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
func (o Cloudfunctions2FunctionOutput) EventTrigger() Cloudfunctions2FunctionEventTriggerPtrOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) Cloudfunctions2FunctionEventTriggerPtrOutput { return v.EventTrigger }).(Cloudfunctions2FunctionEventTriggerPtrOutput)
}

// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
// pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
func (o Cloudfunctions2FunctionOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
// only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
// present on the resource.
func (o Cloudfunctions2FunctionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of this cloud function.
func (o Cloudfunctions2FunctionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A user-defined name of the function. Function names must be unique globally and match pattern
// 'projects/*/locations/*/functions/*'.
func (o Cloudfunctions2FunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o Cloudfunctions2FunctionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Describes the Service being deployed.
func (o Cloudfunctions2FunctionOutput) ServiceConfig() Cloudfunctions2FunctionServiceConfigPtrOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) Cloudfunctions2FunctionServiceConfigPtrOutput { return v.ServiceConfig }).(Cloudfunctions2FunctionServiceConfigPtrOutput)
}

// Describes the current state of the function.
func (o Cloudfunctions2FunctionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o Cloudfunctions2FunctionOutput) TerraformLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringMapOutput { return v.TerraformLabels }).(pulumi.StringMapOutput)
}

func (o Cloudfunctions2FunctionOutput) Timeouts() Cloudfunctions2FunctionTimeoutsPtrOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) Cloudfunctions2FunctionTimeoutsPtrOutput { return v.Timeouts }).(Cloudfunctions2FunctionTimeoutsPtrOutput)
}

// The last update timestamp of a Cloud Function.
func (o Cloudfunctions2FunctionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Output only. The deployed url for the function.
func (o Cloudfunctions2FunctionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Cloudfunctions2Function) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Cloudfunctions2FunctionInput)(nil)).Elem(), &Cloudfunctions2Function{})
	pulumi.RegisterOutputType(Cloudfunctions2FunctionOutput{})
}
