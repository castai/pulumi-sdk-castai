// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeBackupBackupPlanIamBinding struct {
	pulumi.CustomResourceState

	Condition                       GkeBackupBackupPlanIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                            pulumi.StringOutput                             `pulumi:"etag"`
	GkeBackupBackupPlanIamBindingId pulumi.StringOutput                             `pulumi:"gkeBackupBackupPlanIamBindingId"`
	Location                        pulumi.StringOutput                             `pulumi:"location"`
	Members                         pulumi.StringArrayOutput                        `pulumi:"members"`
	Name                            pulumi.StringOutput                             `pulumi:"name"`
	Project                         pulumi.StringOutput                             `pulumi:"project"`
	Role                            pulumi.StringOutput                             `pulumi:"role"`
}

// NewGkeBackupBackupPlanIamBinding registers a new resource with the given unique name, arguments, and options.
func NewGkeBackupBackupPlanIamBinding(ctx *pulumi.Context,
	name string, args *GkeBackupBackupPlanIamBindingArgs, opts ...pulumi.ResourceOption) (*GkeBackupBackupPlanIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource GkeBackupBackupPlanIamBinding
	err = ctx.RegisterPackageResource("google-beta:index/gkeBackupBackupPlanIamBinding:GkeBackupBackupPlanIamBinding", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeBackupBackupPlanIamBinding gets an existing GkeBackupBackupPlanIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeBackupBackupPlanIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeBackupBackupPlanIamBindingState, opts ...pulumi.ResourceOption) (*GkeBackupBackupPlanIamBinding, error) {
	var resource GkeBackupBackupPlanIamBinding
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/gkeBackupBackupPlanIamBinding:GkeBackupBackupPlanIamBinding", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeBackupBackupPlanIamBinding resources.
type gkeBackupBackupPlanIamBindingState struct {
	Condition                       *GkeBackupBackupPlanIamBindingCondition `pulumi:"condition"`
	Etag                            *string                                 `pulumi:"etag"`
	GkeBackupBackupPlanIamBindingId *string                                 `pulumi:"gkeBackupBackupPlanIamBindingId"`
	Location                        *string                                 `pulumi:"location"`
	Members                         []string                                `pulumi:"members"`
	Name                            *string                                 `pulumi:"name"`
	Project                         *string                                 `pulumi:"project"`
	Role                            *string                                 `pulumi:"role"`
}

type GkeBackupBackupPlanIamBindingState struct {
	Condition                       GkeBackupBackupPlanIamBindingConditionPtrInput
	Etag                            pulumi.StringPtrInput
	GkeBackupBackupPlanIamBindingId pulumi.StringPtrInput
	Location                        pulumi.StringPtrInput
	Members                         pulumi.StringArrayInput
	Name                            pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	Role                            pulumi.StringPtrInput
}

func (GkeBackupBackupPlanIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeBackupBackupPlanIamBindingState)(nil)).Elem()
}

type gkeBackupBackupPlanIamBindingArgs struct {
	Condition                       *GkeBackupBackupPlanIamBindingCondition `pulumi:"condition"`
	GkeBackupBackupPlanIamBindingId *string                                 `pulumi:"gkeBackupBackupPlanIamBindingId"`
	Location                        *string                                 `pulumi:"location"`
	Members                         []string                                `pulumi:"members"`
	Name                            *string                                 `pulumi:"name"`
	Project                         *string                                 `pulumi:"project"`
	Role                            string                                  `pulumi:"role"`
}

// The set of arguments for constructing a GkeBackupBackupPlanIamBinding resource.
type GkeBackupBackupPlanIamBindingArgs struct {
	Condition                       GkeBackupBackupPlanIamBindingConditionPtrInput
	GkeBackupBackupPlanIamBindingId pulumi.StringPtrInput
	Location                        pulumi.StringPtrInput
	Members                         pulumi.StringArrayInput
	Name                            pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	Role                            pulumi.StringInput
}

func (GkeBackupBackupPlanIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeBackupBackupPlanIamBindingArgs)(nil)).Elem()
}

type GkeBackupBackupPlanIamBindingInput interface {
	pulumi.Input

	ToGkeBackupBackupPlanIamBindingOutput() GkeBackupBackupPlanIamBindingOutput
	ToGkeBackupBackupPlanIamBindingOutputWithContext(ctx context.Context) GkeBackupBackupPlanIamBindingOutput
}

func (*GkeBackupBackupPlanIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeBackupBackupPlanIamBinding)(nil)).Elem()
}

func (i *GkeBackupBackupPlanIamBinding) ToGkeBackupBackupPlanIamBindingOutput() GkeBackupBackupPlanIamBindingOutput {
	return i.ToGkeBackupBackupPlanIamBindingOutputWithContext(context.Background())
}

func (i *GkeBackupBackupPlanIamBinding) ToGkeBackupBackupPlanIamBindingOutputWithContext(ctx context.Context) GkeBackupBackupPlanIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeBackupBackupPlanIamBindingOutput)
}

type GkeBackupBackupPlanIamBindingOutput struct{ *pulumi.OutputState }

func (GkeBackupBackupPlanIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeBackupBackupPlanIamBinding)(nil)).Elem()
}

func (o GkeBackupBackupPlanIamBindingOutput) ToGkeBackupBackupPlanIamBindingOutput() GkeBackupBackupPlanIamBindingOutput {
	return o
}

func (o GkeBackupBackupPlanIamBindingOutput) ToGkeBackupBackupPlanIamBindingOutputWithContext(ctx context.Context) GkeBackupBackupPlanIamBindingOutput {
	return o
}

func (o GkeBackupBackupPlanIamBindingOutput) Condition() GkeBackupBackupPlanIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) GkeBackupBackupPlanIamBindingConditionPtrOutput {
		return v.Condition
	}).(GkeBackupBackupPlanIamBindingConditionPtrOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) GkeBackupBackupPlanIamBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringOutput { return v.GkeBackupBackupPlanIamBindingId }).(pulumi.StringOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o GkeBackupBackupPlanIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeBackupBackupPlanIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeBackupBackupPlanIamBindingInput)(nil)).Elem(), &GkeBackupBackupPlanIamBinding{})
	pulumi.RegisterOutputType(GkeBackupBackupPlanIamBindingOutput{})
}
