// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PubsubTopicIamMember struct {
	pulumi.CustomResourceState

	Condition              PubsubTopicIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                   pulumi.StringOutput                    `pulumi:"etag"`
	Member                 pulumi.StringOutput                    `pulumi:"member"`
	Project                pulumi.StringOutput                    `pulumi:"project"`
	PubsubTopicIamMemberId pulumi.StringOutput                    `pulumi:"pubsubTopicIamMemberId"`
	Role                   pulumi.StringOutput                    `pulumi:"role"`
	Topic                  pulumi.StringOutput                    `pulumi:"topic"`
}

// NewPubsubTopicIamMember registers a new resource with the given unique name, arguments, and options.
func NewPubsubTopicIamMember(ctx *pulumi.Context,
	name string, args *PubsubTopicIamMemberArgs, opts ...pulumi.ResourceOption) (*PubsubTopicIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource PubsubTopicIamMember
	err = ctx.RegisterPackageResource("google-beta:index/pubsubTopicIamMember:PubsubTopicIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPubsubTopicIamMember gets an existing PubsubTopicIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPubsubTopicIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PubsubTopicIamMemberState, opts ...pulumi.ResourceOption) (*PubsubTopicIamMember, error) {
	var resource PubsubTopicIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/pubsubTopicIamMember:PubsubTopicIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PubsubTopicIamMember resources.
type pubsubTopicIamMemberState struct {
	Condition              *PubsubTopicIamMemberCondition `pulumi:"condition"`
	Etag                   *string                        `pulumi:"etag"`
	Member                 *string                        `pulumi:"member"`
	Project                *string                        `pulumi:"project"`
	PubsubTopicIamMemberId *string                        `pulumi:"pubsubTopicIamMemberId"`
	Role                   *string                        `pulumi:"role"`
	Topic                  *string                        `pulumi:"topic"`
}

type PubsubTopicIamMemberState struct {
	Condition              PubsubTopicIamMemberConditionPtrInput
	Etag                   pulumi.StringPtrInput
	Member                 pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	PubsubTopicIamMemberId pulumi.StringPtrInput
	Role                   pulumi.StringPtrInput
	Topic                  pulumi.StringPtrInput
}

func (PubsubTopicIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubTopicIamMemberState)(nil)).Elem()
}

type pubsubTopicIamMemberArgs struct {
	Condition              *PubsubTopicIamMemberCondition `pulumi:"condition"`
	Member                 string                         `pulumi:"member"`
	Project                *string                        `pulumi:"project"`
	PubsubTopicIamMemberId *string                        `pulumi:"pubsubTopicIamMemberId"`
	Role                   string                         `pulumi:"role"`
	Topic                  string                         `pulumi:"topic"`
}

// The set of arguments for constructing a PubsubTopicIamMember resource.
type PubsubTopicIamMemberArgs struct {
	Condition              PubsubTopicIamMemberConditionPtrInput
	Member                 pulumi.StringInput
	Project                pulumi.StringPtrInput
	PubsubTopicIamMemberId pulumi.StringPtrInput
	Role                   pulumi.StringInput
	Topic                  pulumi.StringInput
}

func (PubsubTopicIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pubsubTopicIamMemberArgs)(nil)).Elem()
}

type PubsubTopicIamMemberInput interface {
	pulumi.Input

	ToPubsubTopicIamMemberOutput() PubsubTopicIamMemberOutput
	ToPubsubTopicIamMemberOutputWithContext(ctx context.Context) PubsubTopicIamMemberOutput
}

func (*PubsubTopicIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTopicIamMember)(nil)).Elem()
}

func (i *PubsubTopicIamMember) ToPubsubTopicIamMemberOutput() PubsubTopicIamMemberOutput {
	return i.ToPubsubTopicIamMemberOutputWithContext(context.Background())
}

func (i *PubsubTopicIamMember) ToPubsubTopicIamMemberOutputWithContext(ctx context.Context) PubsubTopicIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTopicIamMemberOutput)
}

type PubsubTopicIamMemberOutput struct{ *pulumi.OutputState }

func (PubsubTopicIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTopicIamMember)(nil)).Elem()
}

func (o PubsubTopicIamMemberOutput) ToPubsubTopicIamMemberOutput() PubsubTopicIamMemberOutput {
	return o
}

func (o PubsubTopicIamMemberOutput) ToPubsubTopicIamMemberOutputWithContext(ctx context.Context) PubsubTopicIamMemberOutput {
	return o
}

func (o PubsubTopicIamMemberOutput) Condition() PubsubTopicIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) PubsubTopicIamMemberConditionPtrOutput { return v.Condition }).(PubsubTopicIamMemberConditionPtrOutput)
}

func (o PubsubTopicIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o PubsubTopicIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o PubsubTopicIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PubsubTopicIamMemberOutput) PubsubTopicIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) pulumi.StringOutput { return v.PubsubTopicIamMemberId }).(pulumi.StringOutput)
}

func (o PubsubTopicIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o PubsubTopicIamMemberOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *PubsubTopicIamMember) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubTopicIamMemberInput)(nil)).Elem(), &PubsubTopicIamMember{})
	pulumi.RegisterOutputType(PubsubTopicIamMemberOutput{})
}
