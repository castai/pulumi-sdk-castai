// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googlebeta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/google-beta/v6/google-beta/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourcerepoRepositoryIamMember struct {
	pulumi.CustomResourceState

	Condition                       SourcerepoRepositoryIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                            pulumi.StringOutput                             `pulumi:"etag"`
	Member                          pulumi.StringOutput                             `pulumi:"member"`
	Project                         pulumi.StringOutput                             `pulumi:"project"`
	Repository                      pulumi.StringOutput                             `pulumi:"repository"`
	Role                            pulumi.StringOutput                             `pulumi:"role"`
	SourcerepoRepositoryIamMemberId pulumi.StringOutput                             `pulumi:"sourcerepoRepositoryIamMemberId"`
}

// NewSourcerepoRepositoryIamMember registers a new resource with the given unique name, arguments, and options.
func NewSourcerepoRepositoryIamMember(ctx *pulumi.Context,
	name string, args *SourcerepoRepositoryIamMemberArgs, opts ...pulumi.ResourceOption) (*SourcerepoRepositoryIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource SourcerepoRepositoryIamMember
	err = ctx.RegisterPackageResource("google-beta:index/sourcerepoRepositoryIamMember:SourcerepoRepositoryIamMember", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourcerepoRepositoryIamMember gets an existing SourcerepoRepositoryIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourcerepoRepositoryIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourcerepoRepositoryIamMemberState, opts ...pulumi.ResourceOption) (*SourcerepoRepositoryIamMember, error) {
	var resource SourcerepoRepositoryIamMember
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("google-beta:index/sourcerepoRepositoryIamMember:SourcerepoRepositoryIamMember", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourcerepoRepositoryIamMember resources.
type sourcerepoRepositoryIamMemberState struct {
	Condition                       *SourcerepoRepositoryIamMemberCondition `pulumi:"condition"`
	Etag                            *string                                 `pulumi:"etag"`
	Member                          *string                                 `pulumi:"member"`
	Project                         *string                                 `pulumi:"project"`
	Repository                      *string                                 `pulumi:"repository"`
	Role                            *string                                 `pulumi:"role"`
	SourcerepoRepositoryIamMemberId *string                                 `pulumi:"sourcerepoRepositoryIamMemberId"`
}

type SourcerepoRepositoryIamMemberState struct {
	Condition                       SourcerepoRepositoryIamMemberConditionPtrInput
	Etag                            pulumi.StringPtrInput
	Member                          pulumi.StringPtrInput
	Project                         pulumi.StringPtrInput
	Repository                      pulumi.StringPtrInput
	Role                            pulumi.StringPtrInput
	SourcerepoRepositoryIamMemberId pulumi.StringPtrInput
}

func (SourcerepoRepositoryIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcerepoRepositoryIamMemberState)(nil)).Elem()
}

type sourcerepoRepositoryIamMemberArgs struct {
	Condition                       *SourcerepoRepositoryIamMemberCondition `pulumi:"condition"`
	Member                          string                                  `pulumi:"member"`
	Project                         *string                                 `pulumi:"project"`
	Repository                      string                                  `pulumi:"repository"`
	Role                            string                                  `pulumi:"role"`
	SourcerepoRepositoryIamMemberId *string                                 `pulumi:"sourcerepoRepositoryIamMemberId"`
}

// The set of arguments for constructing a SourcerepoRepositoryIamMember resource.
type SourcerepoRepositoryIamMemberArgs struct {
	Condition                       SourcerepoRepositoryIamMemberConditionPtrInput
	Member                          pulumi.StringInput
	Project                         pulumi.StringPtrInput
	Repository                      pulumi.StringInput
	Role                            pulumi.StringInput
	SourcerepoRepositoryIamMemberId pulumi.StringPtrInput
}

func (SourcerepoRepositoryIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourcerepoRepositoryIamMemberArgs)(nil)).Elem()
}

type SourcerepoRepositoryIamMemberInput interface {
	pulumi.Input

	ToSourcerepoRepositoryIamMemberOutput() SourcerepoRepositoryIamMemberOutput
	ToSourcerepoRepositoryIamMemberOutputWithContext(ctx context.Context) SourcerepoRepositoryIamMemberOutput
}

func (*SourcerepoRepositoryIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcerepoRepositoryIamMember)(nil)).Elem()
}

func (i *SourcerepoRepositoryIamMember) ToSourcerepoRepositoryIamMemberOutput() SourcerepoRepositoryIamMemberOutput {
	return i.ToSourcerepoRepositoryIamMemberOutputWithContext(context.Background())
}

func (i *SourcerepoRepositoryIamMember) ToSourcerepoRepositoryIamMemberOutputWithContext(ctx context.Context) SourcerepoRepositoryIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcerepoRepositoryIamMemberOutput)
}

type SourcerepoRepositoryIamMemberOutput struct{ *pulumi.OutputState }

func (SourcerepoRepositoryIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourcerepoRepositoryIamMember)(nil)).Elem()
}

func (o SourcerepoRepositoryIamMemberOutput) ToSourcerepoRepositoryIamMemberOutput() SourcerepoRepositoryIamMemberOutput {
	return o
}

func (o SourcerepoRepositoryIamMemberOutput) ToSourcerepoRepositoryIamMemberOutputWithContext(ctx context.Context) SourcerepoRepositoryIamMemberOutput {
	return o
}

func (o SourcerepoRepositoryIamMemberOutput) Condition() SourcerepoRepositoryIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) SourcerepoRepositoryIamMemberConditionPtrOutput {
		return v.Condition
	}).(SourcerepoRepositoryIamMemberConditionPtrOutput)
}

func (o SourcerepoRepositoryIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamMemberOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o SourcerepoRepositoryIamMemberOutput) SourcerepoRepositoryIamMemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourcerepoRepositoryIamMember) pulumi.StringOutput { return v.SourcerepoRepositoryIamMemberId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourcerepoRepositoryIamMemberInput)(nil)).Elem(), &SourcerepoRepositoryIamMember{})
	pulumi.RegisterOutputType(SourcerepoRepositoryIamMemberOutput{})
}
