// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package helm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/helm/v2/helm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the helm package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The backend storage driver. Values are: configmap, secret, memory, sql
	HelmDriver pulumi.StringPtrOutput `pulumi:"helmDriver"`
	// The path to the helm plugins directory
	PluginsPath pulumi.StringPtrOutput `pulumi:"pluginsPath"`
	// The path to the registry config file
	RegistryConfigPath pulumi.StringPtrOutput `pulumi:"registryConfigPath"`
	// The path to the file containing cached repository indexes
	RepositoryCache pulumi.StringPtrOutput `pulumi:"repositoryCache"`
	// The path to the file containing repository names and URLs
	RepositoryConfigPath pulumi.StringPtrOutput `pulumi:"repositoryConfigPath"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource Provider
	err = ctx.RegisterPackageResource("pulumi:providers:helm", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Helm burst limit. Increase this if you have a cluster with many CRDs
	BurstLimit *float64 `pulumi:"burstLimit"`
	// Debug indicates whether or not Helm is running in Debug mode.
	Debug *bool `pulumi:"debug"`
	// Enable and disable experimental features.
	Experiments *ProviderExperiments `pulumi:"experiments"`
	// The backend storage driver. Values are: configmap, secret, memory, sql
	HelmDriver *string `pulumi:"helmDriver"`
	// Kubernetes configuration.
	Kubernetes *ProviderKubernetes `pulumi:"kubernetes"`
	// The path to the helm plugins directory
	PluginsPath *string `pulumi:"pluginsPath"`
	// RegistryClient configuration.
	Registries []ProviderRegistry `pulumi:"registries"`
	// The path to the registry config file
	RegistryConfigPath *string `pulumi:"registryConfigPath"`
	// The path to the file containing cached repository indexes
	RepositoryCache *string `pulumi:"repositoryCache"`
	// The path to the file containing repository names and URLs
	RepositoryConfigPath *string `pulumi:"repositoryConfigPath"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Helm burst limit. Increase this if you have a cluster with many CRDs
	BurstLimit pulumi.Float64PtrInput
	// Debug indicates whether or not Helm is running in Debug mode.
	Debug pulumi.BoolPtrInput
	// Enable and disable experimental features.
	Experiments ProviderExperimentsPtrInput
	// The backend storage driver. Values are: configmap, secret, memory, sql
	HelmDriver pulumi.StringPtrInput
	// Kubernetes configuration.
	Kubernetes ProviderKubernetesPtrInput
	// The path to the helm plugins directory
	PluginsPath pulumi.StringPtrInput
	// RegistryClient configuration.
	Registries ProviderRegistryArrayInput
	// The path to the registry config file
	RegistryConfigPath pulumi.StringPtrInput
	// The path to the file containing cached repository indexes
	RepositoryCache pulumi.StringPtrInput
	// The path to the file containing repository names and URLs
	RepositoryConfigPath pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The backend storage driver. Values are: configmap, secret, memory, sql
func (o ProviderOutput) HelmDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.HelmDriver }).(pulumi.StringPtrOutput)
}

// The path to the helm plugins directory
func (o ProviderOutput) PluginsPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PluginsPath }).(pulumi.StringPtrOutput)
}

// The path to the registry config file
func (o ProviderOutput) RegistryConfigPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.RegistryConfigPath }).(pulumi.StringPtrOutput)
}

// The path to the file containing cached repository indexes
func (o ProviderOutput) RepositoryCache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.RepositoryCache }).(pulumi.StringPtrOutput)
}

// The path to the file containing repository names and URLs
func (o ProviderOutput) RepositoryConfigPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.RepositoryConfigPath }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
