// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package helm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/helm/v2/helm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Release struct {
	pulumi.CustomResourceState

	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
	// to `false`.
	Atomic pulumi.BoolPtrOutput `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringOutput `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
	CleanupOnFail pulumi.BoolPtrOutput `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist. Defaults to `false`.
	CreateNamespace pulumi.BoolPtrOutput `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart. Defaults to `false`.
	DependencyUpdate pulumi.BoolPtrOutput `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel pulumi.BoolPtrOutput `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
	DisableCrdHooks pulumi.BoolPtrOutput `pulumi:"disableCrdHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
	// `false`.
	DisableOpenapiValidation pulumi.BoolPtrOutput `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.Defaults to `false`.
	DisableWebhooks pulumi.BoolPtrOutput `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed. Defaults to `false`.
	ForceUpdate pulumi.BoolPtrOutput `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
	// location set by `home`.
	Keyring pulumi.StringPtrOutput `pulumi:"keyring"`
	// Run helm lint when planning. Defaults to `false`.
	Lint pulumi.BoolPtrOutput `pulumi:"lint"`
	// The rendered manifest as JSON.
	Manifest pulumi.StringOutput `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
	MaxHistory pulumi.Float64PtrOutput `pulumi:"maxHistory"`
	// Status of the deployed release.
	Metadatas ReleaseMetadataArrayOutput `pulumi:"metadatas"`
	// Release name. The length must not be longer than 53 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Namespace to install the release into. Defaults to `default`.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Pass credentials to all domains. Defaults to `false`.
	PassCredentials pulumi.BoolPtrOutput `pulumi:"passCredentials"`
	// Postrender command configuration.
	Postrender ReleasePostrenderPtrOutput `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback. Defaults to `false`.
	RecreatePods pulumi.BoolPtrOutput `pulumi:"recreatePods"`
	ReleaseId    pulumi.StringOutput  `pulumi:"releaseId"`
	// If set, render subchart notes along with the parent. Defaults to `true`.
	RenderSubchartNotes pulumi.BoolPtrOutput `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
	Replace pulumi.BoolPtrOutput `pulumi:"replace"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository pulumi.StringPtrOutput `pulumi:"repository"`
	// The Repositories CA File
	RepositoryCaFile pulumi.StringPtrOutput `pulumi:"repositoryCaFile"`
	// The repositories cert file
	RepositoryCertFile pulumi.StringPtrOutput `pulumi:"repositoryCertFile"`
	// The repositories cert key file
	RepositoryKeyFile pulumi.StringPtrOutput `pulumi:"repositoryKeyFile"`
	// Password for HTTP basic authentication
	RepositoryPassword pulumi.StringPtrOutput `pulumi:"repositoryPassword"`
	// Username for HTTP basic authentication
	RepositoryUsername pulumi.StringPtrOutput `pulumi:"repositoryUsername"`
	// When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
	ResetValues pulumi.BoolPtrOutput `pulumi:"resetValues"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
	// ignored. Defaults to `false`.
	ReuseValues pulumi.BoolPtrOutput `pulumi:"reuseValues"`
	// Custom list values to be merged with the values.
	SetLists ReleaseSetListArrayOutput `pulumi:"setLists"`
	// Custom sensitive values to be merged with the values.
	SetSensitives ReleaseSetSensitiveArrayOutput `pulumi:"setSensitives"`
	// Custom values to be merged with the values.
	Sets ReleaseSetArrayOutput `pulumi:"sets"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
	SkipCrds pulumi.BoolPtrOutput `pulumi:"skipCrds"`
	// Status of the release.
	Status pulumi.StringOutput `pulumi:"status"`
	// Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
	Timeout pulumi.Float64PtrOutput `pulumi:"timeout"`
	// If true, the provider will install the release at the specified version even if a release not controlled by the provider
	// is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
	// for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
	UpgradeInstall pulumi.BoolPtrOutput `pulumi:"upgradeInstall"`
	// List of values in raw yaml format to pass to helm.
	Values pulumi.StringArrayOutput `pulumi:"values"`
	// Verify the package before installing it.Defaults to `false`.
	Verify pulumi.BoolPtrOutput `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringOutput `pulumi:"version"`
	// Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
	Wait pulumi.BoolPtrOutput `pulumi:"wait"`
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
	// `false``.
	WaitForJobs pulumi.BoolPtrOutput `pulumi:"waitForJobs"`
}

// NewRelease registers a new resource with the given unique name, arguments, and options.
func NewRelease(ctx *pulumi.Context,
	name string, args *ReleaseArgs, opts ...pulumi.ResourceOption) (*Release, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Chart == nil {
		return nil, errors.New("invalid value for required argument 'Chart'")
	}
	if args.RepositoryPassword != nil {
		args.RepositoryPassword = pulumi.ToSecret(args.RepositoryPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"repositoryPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource Release
	err = ctx.RegisterPackageResource("helm:index/release:Release", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelease gets an existing Release resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseState, opts ...pulumi.ResourceOption) (*Release, error) {
	var resource Release
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("helm:index/release:Release", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Release resources.
type releaseState struct {
	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
	// to `false`.
	Atomic *bool `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart *string `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist. Defaults to `false`.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart. Defaults to `false`.
	DependencyUpdate *bool `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description *string `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel *bool `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
	DisableCrdHooks *bool `pulumi:"disableCrdHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
	// `false`.
	DisableOpenapiValidation *bool `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.Defaults to `false`.
	DisableWebhooks *bool `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed. Defaults to `false`.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
	// location set by `home`.
	Keyring *string `pulumi:"keyring"`
	// Run helm lint when planning. Defaults to `false`.
	Lint *bool `pulumi:"lint"`
	// The rendered manifest as JSON.
	Manifest *string `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
	MaxHistory *float64 `pulumi:"maxHistory"`
	// Status of the deployed release.
	Metadatas []ReleaseMetadata `pulumi:"metadatas"`
	// Release name. The length must not be longer than 53 characters.
	Name *string `pulumi:"name"`
	// Namespace to install the release into. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// Pass credentials to all domains. Defaults to `false`.
	PassCredentials *bool `pulumi:"passCredentials"`
	// Postrender command configuration.
	Postrender *ReleasePostrender `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback. Defaults to `false`.
	RecreatePods *bool   `pulumi:"recreatePods"`
	ReleaseId    *string `pulumi:"releaseId"`
	// If set, render subchart notes along with the parent. Defaults to `true`.
	RenderSubchartNotes *bool `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
	Replace *bool `pulumi:"replace"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository *string `pulumi:"repository"`
	// The Repositories CA File
	RepositoryCaFile *string `pulumi:"repositoryCaFile"`
	// The repositories cert file
	RepositoryCertFile *string `pulumi:"repositoryCertFile"`
	// The repositories cert key file
	RepositoryKeyFile *string `pulumi:"repositoryKeyFile"`
	// Password for HTTP basic authentication
	RepositoryPassword *string `pulumi:"repositoryPassword"`
	// Username for HTTP basic authentication
	RepositoryUsername *string `pulumi:"repositoryUsername"`
	// When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
	ResetValues *bool `pulumi:"resetValues"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
	// ignored. Defaults to `false`.
	ReuseValues *bool `pulumi:"reuseValues"`
	// Custom list values to be merged with the values.
	SetLists []ReleaseSetList `pulumi:"setLists"`
	// Custom sensitive values to be merged with the values.
	SetSensitives []ReleaseSetSensitive `pulumi:"setSensitives"`
	// Custom values to be merged with the values.
	Sets []ReleaseSet `pulumi:"sets"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
	SkipCrds *bool `pulumi:"skipCrds"`
	// Status of the release.
	Status *string `pulumi:"status"`
	// Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
	Timeout *float64 `pulumi:"timeout"`
	// If true, the provider will install the release at the specified version even if a release not controlled by the provider
	// is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
	// for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
	UpgradeInstall *bool `pulumi:"upgradeInstall"`
	// List of values in raw yaml format to pass to helm.
	Values []string `pulumi:"values"`
	// Verify the package before installing it.Defaults to `false`.
	Verify *bool `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version *string `pulumi:"version"`
	// Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
	Wait *bool `pulumi:"wait"`
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
	// `false``.
	WaitForJobs *bool `pulumi:"waitForJobs"`
}

type ReleaseState struct {
	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
	// to `false`.
	Atomic pulumi.BoolPtrInput
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringPtrInput
	// Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
	CleanupOnFail pulumi.BoolPtrInput
	// Create the namespace if it does not exist. Defaults to `false`.
	CreateNamespace pulumi.BoolPtrInput
	// Run helm dependency update before installing the chart. Defaults to `false`.
	DependencyUpdate pulumi.BoolPtrInput
	// Add a custom description
	Description pulumi.StringPtrInput
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel pulumi.BoolPtrInput
	// Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
	DisableCrdHooks pulumi.BoolPtrInput
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
	// `false`.
	DisableOpenapiValidation pulumi.BoolPtrInput
	// Prevent hooks from running.Defaults to `false`.
	DisableWebhooks pulumi.BoolPtrInput
	// Force resource update through delete/recreate if needed. Defaults to `false`.
	ForceUpdate pulumi.BoolPtrInput
	// Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
	// location set by `home`.
	Keyring pulumi.StringPtrInput
	// Run helm lint when planning. Defaults to `false`.
	Lint pulumi.BoolPtrInput
	// The rendered manifest as JSON.
	Manifest pulumi.StringPtrInput
	// Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
	MaxHistory pulumi.Float64PtrInput
	// Status of the deployed release.
	Metadatas ReleaseMetadataArrayInput
	// Release name. The length must not be longer than 53 characters.
	Name pulumi.StringPtrInput
	// Namespace to install the release into. Defaults to `default`.
	Namespace pulumi.StringPtrInput
	// Pass credentials to all domains. Defaults to `false`.
	PassCredentials pulumi.BoolPtrInput
	// Postrender command configuration.
	Postrender ReleasePostrenderPtrInput
	// Perform pods restart during upgrade/rollback. Defaults to `false`.
	RecreatePods pulumi.BoolPtrInput
	ReleaseId    pulumi.StringPtrInput
	// If set, render subchart notes along with the parent. Defaults to `true`.
	RenderSubchartNotes pulumi.BoolPtrInput
	// Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
	Replace pulumi.BoolPtrInput
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository pulumi.StringPtrInput
	// The Repositories CA File
	RepositoryCaFile pulumi.StringPtrInput
	// The repositories cert file
	RepositoryCertFile pulumi.StringPtrInput
	// The repositories cert key file
	RepositoryKeyFile pulumi.StringPtrInput
	// Password for HTTP basic authentication
	RepositoryPassword pulumi.StringPtrInput
	// Username for HTTP basic authentication
	RepositoryUsername pulumi.StringPtrInput
	// When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
	ResetValues pulumi.BoolPtrInput
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
	// ignored. Defaults to `false`.
	ReuseValues pulumi.BoolPtrInput
	// Custom list values to be merged with the values.
	SetLists ReleaseSetListArrayInput
	// Custom sensitive values to be merged with the values.
	SetSensitives ReleaseSetSensitiveArrayInput
	// Custom values to be merged with the values.
	Sets ReleaseSetArrayInput
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
	SkipCrds pulumi.BoolPtrInput
	// Status of the release.
	Status pulumi.StringPtrInput
	// Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
	Timeout pulumi.Float64PtrInput
	// If true, the provider will install the release at the specified version even if a release not controlled by the provider
	// is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
	// for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
	UpgradeInstall pulumi.BoolPtrInput
	// List of values in raw yaml format to pass to helm.
	Values pulumi.StringArrayInput
	// Verify the package before installing it.Defaults to `false`.
	Verify pulumi.BoolPtrInput
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringPtrInput
	// Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
	Wait pulumi.BoolPtrInput
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
	// `false``.
	WaitForJobs pulumi.BoolPtrInput
}

func (ReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseState)(nil)).Elem()
}

type releaseArgs struct {
	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
	// to `false`.
	Atomic *bool `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart string `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist. Defaults to `false`.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart. Defaults to `false`.
	DependencyUpdate *bool `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description *string `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel *bool `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
	DisableCrdHooks *bool `pulumi:"disableCrdHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
	// `false`.
	DisableOpenapiValidation *bool `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.Defaults to `false`.
	DisableWebhooks *bool `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed. Defaults to `false`.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
	// location set by `home`.
	Keyring *string `pulumi:"keyring"`
	// Run helm lint when planning. Defaults to `false`.
	Lint *bool `pulumi:"lint"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
	MaxHistory *float64 `pulumi:"maxHistory"`
	// Release name. The length must not be longer than 53 characters.
	Name *string `pulumi:"name"`
	// Namespace to install the release into. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// Pass credentials to all domains. Defaults to `false`.
	PassCredentials *bool `pulumi:"passCredentials"`
	// Postrender command configuration.
	Postrender *ReleasePostrender `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback. Defaults to `false`.
	RecreatePods *bool   `pulumi:"recreatePods"`
	ReleaseId    *string `pulumi:"releaseId"`
	// If set, render subchart notes along with the parent. Defaults to `true`.
	RenderSubchartNotes *bool `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
	Replace *bool `pulumi:"replace"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository *string `pulumi:"repository"`
	// The Repositories CA File
	RepositoryCaFile *string `pulumi:"repositoryCaFile"`
	// The repositories cert file
	RepositoryCertFile *string `pulumi:"repositoryCertFile"`
	// The repositories cert key file
	RepositoryKeyFile *string `pulumi:"repositoryKeyFile"`
	// Password for HTTP basic authentication
	RepositoryPassword *string `pulumi:"repositoryPassword"`
	// Username for HTTP basic authentication
	RepositoryUsername *string `pulumi:"repositoryUsername"`
	// When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
	ResetValues *bool `pulumi:"resetValues"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
	// ignored. Defaults to `false`.
	ReuseValues *bool `pulumi:"reuseValues"`
	// Custom list values to be merged with the values.
	SetLists []ReleaseSetList `pulumi:"setLists"`
	// Custom sensitive values to be merged with the values.
	SetSensitives []ReleaseSetSensitive `pulumi:"setSensitives"`
	// Custom values to be merged with the values.
	Sets []ReleaseSet `pulumi:"sets"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
	SkipCrds *bool `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
	Timeout *float64 `pulumi:"timeout"`
	// If true, the provider will install the release at the specified version even if a release not controlled by the provider
	// is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
	// for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
	UpgradeInstall *bool `pulumi:"upgradeInstall"`
	// List of values in raw yaml format to pass to helm.
	Values []string `pulumi:"values"`
	// Verify the package before installing it.Defaults to `false`.
	Verify *bool `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version *string `pulumi:"version"`
	// Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
	Wait *bool `pulumi:"wait"`
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
	// `false``.
	WaitForJobs *bool `pulumi:"waitForJobs"`
}

// The set of arguments for constructing a Release resource.
type ReleaseArgs struct {
	// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
	// to `false`.
	Atomic pulumi.BoolPtrInput
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringInput
	// Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
	CleanupOnFail pulumi.BoolPtrInput
	// Create the namespace if it does not exist. Defaults to `false`.
	CreateNamespace pulumi.BoolPtrInput
	// Run helm dependency update before installing the chart. Defaults to `false`.
	DependencyUpdate pulumi.BoolPtrInput
	// Add a custom description
	Description pulumi.StringPtrInput
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
	Devel pulumi.BoolPtrInput
	// Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
	DisableCrdHooks pulumi.BoolPtrInput
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
	// `false`.
	DisableOpenapiValidation pulumi.BoolPtrInput
	// Prevent hooks from running.Defaults to `false`.
	DisableWebhooks pulumi.BoolPtrInput
	// Force resource update through delete/recreate if needed. Defaults to `false`.
	ForceUpdate pulumi.BoolPtrInput
	// Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
	// location set by `home`.
	Keyring pulumi.StringPtrInput
	// Run helm lint when planning. Defaults to `false`.
	Lint pulumi.BoolPtrInput
	// Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
	MaxHistory pulumi.Float64PtrInput
	// Release name. The length must not be longer than 53 characters.
	Name pulumi.StringPtrInput
	// Namespace to install the release into. Defaults to `default`.
	Namespace pulumi.StringPtrInput
	// Pass credentials to all domains. Defaults to `false`.
	PassCredentials pulumi.BoolPtrInput
	// Postrender command configuration.
	Postrender ReleasePostrenderPtrInput
	// Perform pods restart during upgrade/rollback. Defaults to `false`.
	RecreatePods pulumi.BoolPtrInput
	ReleaseId    pulumi.StringPtrInput
	// If set, render subchart notes along with the parent. Defaults to `true`.
	RenderSubchartNotes pulumi.BoolPtrInput
	// Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
	Replace pulumi.BoolPtrInput
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repository pulumi.StringPtrInput
	// The Repositories CA File
	RepositoryCaFile pulumi.StringPtrInput
	// The repositories cert file
	RepositoryCertFile pulumi.StringPtrInput
	// The repositories cert key file
	RepositoryKeyFile pulumi.StringPtrInput
	// Password for HTTP basic authentication
	RepositoryPassword pulumi.StringPtrInput
	// Username for HTTP basic authentication
	RepositoryUsername pulumi.StringPtrInput
	// When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
	ResetValues pulumi.BoolPtrInput
	// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
	// ignored. Defaults to `false`.
	ReuseValues pulumi.BoolPtrInput
	// Custom list values to be merged with the values.
	SetLists ReleaseSetListArrayInput
	// Custom sensitive values to be merged with the values.
	SetSensitives ReleaseSetSensitiveArrayInput
	// Custom values to be merged with the values.
	Sets ReleaseSetArrayInput
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
	SkipCrds pulumi.BoolPtrInput
	// Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
	Timeout pulumi.Float64PtrInput
	// If true, the provider will install the release at the specified version even if a release not controlled by the provider
	// is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
	// for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
	UpgradeInstall pulumi.BoolPtrInput
	// List of values in raw yaml format to pass to helm.
	Values pulumi.StringArrayInput
	// Verify the package before installing it.Defaults to `false`.
	Verify pulumi.BoolPtrInput
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringPtrInput
	// Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
	Wait pulumi.BoolPtrInput
	// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
	// `false``.
	WaitForJobs pulumi.BoolPtrInput
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseArgs)(nil)).Elem()
}

type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput
}

func (*Release) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *Release) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i *Release) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

// If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
// to `false`.
func (o ReleaseOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.Atomic }).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleaseOutput) Chart() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Chart }).(pulumi.StringOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
func (o ReleaseOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist. Defaults to `false`.
func (o ReleaseOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart. Defaults to `false`.
func (o ReleaseOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.DependencyUpdate }).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
func (o ReleaseOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.Devel }).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
func (o ReleaseOutput) DisableCrdHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.DisableCrdHooks }).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
// `false`.
func (o ReleaseOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.DisableOpenapiValidation }).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.Defaults to `false`.
func (o ReleaseOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.DisableWebhooks }).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed. Defaults to `false`.
func (o ReleaseOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
// location set by `home`.
func (o ReleaseOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.Keyring }).(pulumi.StringPtrOutput)
}

// Run helm lint when planning. Defaults to `false`.
func (o ReleaseOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.Lint }).(pulumi.BoolPtrOutput)
}

// The rendered manifest as JSON.
func (o ReleaseOutput) Manifest() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Manifest }).(pulumi.StringOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
func (o ReleaseOutput) MaxHistory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Release) pulumi.Float64PtrOutput { return v.MaxHistory }).(pulumi.Float64PtrOutput)
}

// Status of the deployed release.
func (o ReleaseOutput) Metadatas() ReleaseMetadataArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseMetadataArrayOutput { return v.Metadatas }).(ReleaseMetadataArrayOutput)
}

// Release name. The length must not be longer than 53 characters.
func (o ReleaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Namespace to install the release into. Defaults to `default`.
func (o ReleaseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Pass credentials to all domains. Defaults to `false`.
func (o ReleaseOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.PassCredentials }).(pulumi.BoolPtrOutput)
}

// Postrender command configuration.
func (o ReleaseOutput) Postrender() ReleasePostrenderPtrOutput {
	return o.ApplyT(func(v *Release) ReleasePostrenderPtrOutput { return v.Postrender }).(ReleasePostrenderPtrOutput)
}

// Perform pods restart during upgrade/rollback. Defaults to `false`.
func (o ReleaseOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.RecreatePods }).(pulumi.BoolPtrOutput)
}

func (o ReleaseOutput) ReleaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.ReleaseId }).(pulumi.StringOutput)
}

// If set, render subchart notes along with the parent. Defaults to `true`.
func (o ReleaseOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.RenderSubchartNotes }).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
func (o ReleaseOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.Replace }).(pulumi.BoolPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o ReleaseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.Repository }).(pulumi.StringPtrOutput)
}

// The Repositories CA File
func (o ReleaseOutput) RepositoryCaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.RepositoryCaFile }).(pulumi.StringPtrOutput)
}

// The repositories cert file
func (o ReleaseOutput) RepositoryCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.RepositoryCertFile }).(pulumi.StringPtrOutput)
}

// The repositories cert key file
func (o ReleaseOutput) RepositoryKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.RepositoryKeyFile }).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o ReleaseOutput) RepositoryPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.RepositoryPassword }).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o ReleaseOutput) RepositoryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.RepositoryUsername }).(pulumi.StringPtrOutput)
}

// When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
func (o ReleaseOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.ResetValues }).(pulumi.BoolPtrOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
// ignored. Defaults to `false`.
func (o ReleaseOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.ReuseValues }).(pulumi.BoolPtrOutput)
}

// Custom list values to be merged with the values.
func (o ReleaseOutput) SetLists() ReleaseSetListArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseSetListArrayOutput { return v.SetLists }).(ReleaseSetListArrayOutput)
}

// Custom sensitive values to be merged with the values.
func (o ReleaseOutput) SetSensitives() ReleaseSetSensitiveArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseSetSensitiveArrayOutput { return v.SetSensitives }).(ReleaseSetSensitiveArrayOutput)
}

// Custom values to be merged with the values.
func (o ReleaseOutput) Sets() ReleaseSetArrayOutput {
	return o.ApplyT(func(v *Release) ReleaseSetArrayOutput { return v.Sets }).(ReleaseSetArrayOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
func (o ReleaseOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.SkipCrds }).(pulumi.BoolPtrOutput)
}

// Status of the release.
func (o ReleaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
func (o ReleaseOutput) Timeout() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Release) pulumi.Float64PtrOutput { return v.Timeout }).(pulumi.Float64PtrOutput)
}

// If true, the provider will install the release at the specified version even if a release not controlled by the provider
// is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
// for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
func (o ReleaseOutput) UpgradeInstall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.UpgradeInstall }).(pulumi.BoolPtrOutput)
}

// List of values in raw yaml format to pass to helm.
func (o ReleaseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Release) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

// Verify the package before installing it.Defaults to `false`.
func (o ReleaseOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.Verify }).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
func (o ReleaseOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.Wait }).(pulumi.BoolPtrOutput)
}

// If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
// `false“.
func (o ReleaseOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.BoolPtrOutput { return v.WaitForJobs }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseInput)(nil)).Elem(), &Release{})
	pulumi.RegisterOutputType(ReleaseOutput{})
}
