// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupEksUserArn(ctx *pulumi.Context, args *LookupEksUserArnArgs, opts ...pulumi.InvokeOption) (*LookupEksUserArnResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var rv LookupEksUserArnResult
	err = ctx.InvokePackage("castai:index/getEksUserArn:getEksUserArn", args, &rv, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEksUserArn.
type LookupEksUserArnArgs struct {
	ClusterId string  `pulumi:"clusterId"`
	Id        *string `pulumi:"id"`
}

// A collection of values returned by getEksUserArn.
type LookupEksUserArnResult struct {
	Arn       string `pulumi:"arn"`
	ClusterId string `pulumi:"clusterId"`
	Id        string `pulumi:"id"`
}

func LookupEksUserArnOutput(ctx *pulumi.Context, args LookupEksUserArnOutputArgs, opts ...pulumi.InvokeOption) LookupEksUserArnResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEksUserArnResultOutput, error) {
			args := v.(LookupEksUserArnArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			ref, err := internal.PkgGetPackageRef(ctx)
			if err != nil {
				return LookupEksUserArnResultOutput{}, err
			}
			options.PackageRef = ref
			return ctx.InvokeOutput("castai:index/getEksUserArn:getEksUserArn", args, LookupEksUserArnResultOutput{}, options).(LookupEksUserArnResultOutput), nil
		}).(LookupEksUserArnResultOutput)
}

// A collection of arguments for invoking getEksUserArn.
type LookupEksUserArnOutputArgs struct {
	ClusterId pulumi.StringInput    `pulumi:"clusterId"`
	Id        pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupEksUserArnOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEksUserArnArgs)(nil)).Elem()
}

// A collection of values returned by getEksUserArn.
type LookupEksUserArnResultOutput struct{ *pulumi.OutputState }

func (LookupEksUserArnResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEksUserArnResult)(nil)).Elem()
}

func (o LookupEksUserArnResultOutput) ToLookupEksUserArnResultOutput() LookupEksUserArnResultOutput {
	return o
}

func (o LookupEksUserArnResultOutput) ToLookupEksUserArnResultOutputWithContext(ctx context.Context) LookupEksUserArnResultOutput {
	return o
}

func (o LookupEksUserArnResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEksUserArnResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupEksUserArnResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEksUserArnResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupEksUserArnResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEksUserArnResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEksUserArnResultOutput{})
}
