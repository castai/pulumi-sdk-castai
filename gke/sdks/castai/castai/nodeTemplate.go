// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NodeTemplate struct {
	pulumi.CustomResourceState

	// CAST AI cluster id.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// CAST AI node configuration id to be used for node template.
	ConfigurationId pulumi.StringPtrOutput           `pulumi:"configurationId"`
	Constraints     NodeTemplateConstraintsPtrOutput `pulumi:"constraints"`
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
	// only supported in GCP.
	CustomInstancesEnabled pulumi.BoolPtrOutput `pulumi:"customInstancesEnabled"`
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
	// Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled pulumi.BoolPtrOutput `pulumi:"customInstancesWithExtendedMemoryEnabled"`
	// Custom labels to be added to nodes created from this template.
	CustomLabels pulumi.StringMapOutput `pulumi:"customLabels"`
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
	// create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
	// nodes will be tainted with the default node template taint.
	CustomTaints NodeTemplateCustomTaintArrayOutput `pulumi:"customTaints"`
	// Flag whether the node template is default.
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Name of the node template.
	Name           pulumi.StringOutput `pulumi:"name"`
	NodeTemplateId pulumi.StringOutput `pulumi:"nodeTemplateId"`
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes pulumi.Float64PtrOutput `pulumi:"rebalancingConfigMinNodes"`
	// Marks whether the templated nodes will have a taint.
	ShouldTaint pulumi.BoolPtrOutput          `pulumi:"shouldTaint"`
	Timeouts    NodeTemplateTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNodeTemplate registers a new resource with the given unique name, arguments, and options.
func NewNodeTemplate(ctx *pulumi.Context,
	name string, args *NodeTemplateArgs, opts ...pulumi.ResourceOption) (*NodeTemplate, error) {
	if args == nil {
		args = &NodeTemplateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource NodeTemplate
	err = ctx.RegisterPackageResource("castai:index/nodeTemplate:NodeTemplate", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeTemplate gets an existing NodeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeTemplateState, opts ...pulumi.ResourceOption) (*NodeTemplate, error) {
	var resource NodeTemplate
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("castai:index/nodeTemplate:NodeTemplate", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeTemplate resources.
type nodeTemplateState struct {
	// CAST AI cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// CAST AI node configuration id to be used for node template.
	ConfigurationId *string                  `pulumi:"configurationId"`
	Constraints     *NodeTemplateConstraints `pulumi:"constraints"`
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
	// only supported in GCP.
	CustomInstancesEnabled *bool `pulumi:"customInstancesEnabled"`
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
	// Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled *bool `pulumi:"customInstancesWithExtendedMemoryEnabled"`
	// Custom labels to be added to nodes created from this template.
	CustomLabels map[string]string `pulumi:"customLabels"`
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
	// create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
	// nodes will be tainted with the default node template taint.
	CustomTaints []NodeTemplateCustomTaint `pulumi:"customTaints"`
	// Flag whether the node template is default.
	IsDefault *bool `pulumi:"isDefault"`
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the node template.
	Name           *string `pulumi:"name"`
	NodeTemplateId *string `pulumi:"nodeTemplateId"`
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes *float64 `pulumi:"rebalancingConfigMinNodes"`
	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool                 `pulumi:"shouldTaint"`
	Timeouts    *NodeTemplateTimeouts `pulumi:"timeouts"`
}

type NodeTemplateState struct {
	// CAST AI cluster id.
	ClusterId pulumi.StringPtrInput
	// CAST AI node configuration id to be used for node template.
	ConfigurationId pulumi.StringPtrInput
	Constraints     NodeTemplateConstraintsPtrInput
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
	// only supported in GCP.
	CustomInstancesEnabled pulumi.BoolPtrInput
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
	// Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled pulumi.BoolPtrInput
	// Custom labels to be added to nodes created from this template.
	CustomLabels pulumi.StringMapInput
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
	// create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
	// nodes will be tainted with the default node template taint.
	CustomTaints NodeTemplateCustomTaintArrayInput
	// Flag whether the node template is default.
	IsDefault pulumi.BoolPtrInput
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled pulumi.BoolPtrInput
	// Name of the node template.
	Name           pulumi.StringPtrInput
	NodeTemplateId pulumi.StringPtrInput
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes pulumi.Float64PtrInput
	// Marks whether the templated nodes will have a taint.
	ShouldTaint pulumi.BoolPtrInput
	Timeouts    NodeTemplateTimeoutsPtrInput
}

func (NodeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTemplateState)(nil)).Elem()
}

type nodeTemplateArgs struct {
	// CAST AI cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// CAST AI node configuration id to be used for node template.
	ConfigurationId *string                  `pulumi:"configurationId"`
	Constraints     *NodeTemplateConstraints `pulumi:"constraints"`
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
	// only supported in GCP.
	CustomInstancesEnabled *bool `pulumi:"customInstancesEnabled"`
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
	// Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled *bool `pulumi:"customInstancesWithExtendedMemoryEnabled"`
	// Custom labels to be added to nodes created from this template.
	CustomLabels map[string]string `pulumi:"customLabels"`
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
	// create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
	// nodes will be tainted with the default node template taint.
	CustomTaints []NodeTemplateCustomTaint `pulumi:"customTaints"`
	// Flag whether the node template is default.
	IsDefault *bool `pulumi:"isDefault"`
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the node template.
	Name           *string `pulumi:"name"`
	NodeTemplateId *string `pulumi:"nodeTemplateId"`
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes *float64 `pulumi:"rebalancingConfigMinNodes"`
	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool                 `pulumi:"shouldTaint"`
	Timeouts    *NodeTemplateTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NodeTemplate resource.
type NodeTemplateArgs struct {
	// CAST AI cluster id.
	ClusterId pulumi.StringPtrInput
	// CAST AI node configuration id to be used for node template.
	ConfigurationId pulumi.StringPtrInput
	Constraints     NodeTemplateConstraintsPtrInput
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
	// only supported in GCP.
	CustomInstancesEnabled pulumi.BoolPtrInput
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
	// Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled pulumi.BoolPtrInput
	// Custom labels to be added to nodes created from this template.
	CustomLabels pulumi.StringMapInput
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
	// create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
	// nodes will be tainted with the default node template taint.
	CustomTaints NodeTemplateCustomTaintArrayInput
	// Flag whether the node template is default.
	IsDefault pulumi.BoolPtrInput
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled pulumi.BoolPtrInput
	// Name of the node template.
	Name           pulumi.StringPtrInput
	NodeTemplateId pulumi.StringPtrInput
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes pulumi.Float64PtrInput
	// Marks whether the templated nodes will have a taint.
	ShouldTaint pulumi.BoolPtrInput
	Timeouts    NodeTemplateTimeoutsPtrInput
}

func (NodeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTemplateArgs)(nil)).Elem()
}

type NodeTemplateInput interface {
	pulumi.Input

	ToNodeTemplateOutput() NodeTemplateOutput
	ToNodeTemplateOutputWithContext(ctx context.Context) NodeTemplateOutput
}

func (*NodeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplate)(nil)).Elem()
}

func (i *NodeTemplate) ToNodeTemplateOutput() NodeTemplateOutput {
	return i.ToNodeTemplateOutputWithContext(context.Background())
}

func (i *NodeTemplate) ToNodeTemplateOutputWithContext(ctx context.Context) NodeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateOutput)
}

type NodeTemplateOutput struct{ *pulumi.OutputState }

func (NodeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplate)(nil)).Elem()
}

func (o NodeTemplateOutput) ToNodeTemplateOutput() NodeTemplateOutput {
	return o
}

func (o NodeTemplateOutput) ToNodeTemplateOutputWithContext(ctx context.Context) NodeTemplateOutput {
	return o
}

// CAST AI cluster id.
func (o NodeTemplateOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// CAST AI node configuration id to be used for node template.
func (o NodeTemplateOutput) ConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringPtrOutput { return v.ConfigurationId }).(pulumi.StringPtrOutput)
}

func (o NodeTemplateOutput) Constraints() NodeTemplateConstraintsPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) NodeTemplateConstraintsPtrOutput { return v.Constraints }).(NodeTemplateConstraintsPtrOutput)
}

// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
// only supported in GCP.
func (o NodeTemplateOutput) CustomInstancesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.CustomInstancesEnabled }).(pulumi.BoolPtrOutput)
}

// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
// Custom instances are only supported in GCP.
func (o NodeTemplateOutput) CustomInstancesWithExtendedMemoryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.CustomInstancesWithExtendedMemoryEnabled }).(pulumi.BoolPtrOutput)
}

// Custom labels to be added to nodes created from this template.
func (o NodeTemplateOutput) CustomLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringMapOutput { return v.CustomLabels }).(pulumi.StringMapOutput)
}

// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
// create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
// nodes will be tainted with the default node template taint.
func (o NodeTemplateOutput) CustomTaints() NodeTemplateCustomTaintArrayOutput {
	return o.ApplyT(func(v *NodeTemplate) NodeTemplateCustomTaintArrayOutput { return v.CustomTaints }).(NodeTemplateCustomTaintArrayOutput)
}

// Flag whether the node template is default.
func (o NodeTemplateOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Flag whether the node template is enabled and considered for autoscaling.
func (o NodeTemplateOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Name of the node template.
func (o NodeTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NodeTemplateOutput) NodeTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringOutput { return v.NodeTemplateId }).(pulumi.StringOutput)
}

// Minimum nodes that will be kept when rebalancing nodes using this node template.
func (o NodeTemplateOutput) RebalancingConfigMinNodes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.Float64PtrOutput { return v.RebalancingConfigMinNodes }).(pulumi.Float64PtrOutput)
}

// Marks whether the templated nodes will have a taint.
func (o NodeTemplateOutput) ShouldTaint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.ShouldTaint }).(pulumi.BoolPtrOutput)
}

func (o NodeTemplateOutput) Timeouts() NodeTemplateTimeoutsPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) NodeTemplateTimeoutsPtrOutput { return v.Timeouts }).(NodeTemplateTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTemplateInput)(nil)).Elem(), &NodeTemplate{})
	pulumi.RegisterOutputType(NodeTemplateOutput{})
}
