// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EksUserArn struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput `pulumi:"arn"`
	ClusterId    pulumi.StringOutput `pulumi:"clusterId"`
	EksUserArnId pulumi.StringOutput `pulumi:"eksUserArnId"`
}

// NewEksUserArn registers a new resource with the given unique name, arguments, and options.
func NewEksUserArn(ctx *pulumi.Context,
	name string, args *EksUserArnArgs, opts ...pulumi.ResourceOption) (*EksUserArn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EksUserArn
	err = ctx.RegisterPackageResource("castai:index/eksUserArn:EksUserArn", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksUserArn gets an existing EksUserArn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksUserArn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksUserArnState, opts ...pulumi.ResourceOption) (*EksUserArn, error) {
	var resource EksUserArn
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("castai:index/eksUserArn:EksUserArn", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksUserArn resources.
type eksUserArnState struct {
	Arn          *string `pulumi:"arn"`
	ClusterId    *string `pulumi:"clusterId"`
	EksUserArnId *string `pulumi:"eksUserArnId"`
}

type EksUserArnState struct {
	Arn          pulumi.StringPtrInput
	ClusterId    pulumi.StringPtrInput
	EksUserArnId pulumi.StringPtrInput
}

func (EksUserArnState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksUserArnState)(nil)).Elem()
}

type eksUserArnArgs struct {
	ClusterId    string  `pulumi:"clusterId"`
	EksUserArnId *string `pulumi:"eksUserArnId"`
}

// The set of arguments for constructing a EksUserArn resource.
type EksUserArnArgs struct {
	ClusterId    pulumi.StringInput
	EksUserArnId pulumi.StringPtrInput
}

func (EksUserArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksUserArnArgs)(nil)).Elem()
}

type EksUserArnInput interface {
	pulumi.Input

	ToEksUserArnOutput() EksUserArnOutput
	ToEksUserArnOutputWithContext(ctx context.Context) EksUserArnOutput
}

func (*EksUserArn) ElementType() reflect.Type {
	return reflect.TypeOf((**EksUserArn)(nil)).Elem()
}

func (i *EksUserArn) ToEksUserArnOutput() EksUserArnOutput {
	return i.ToEksUserArnOutputWithContext(context.Background())
}

func (i *EksUserArn) ToEksUserArnOutputWithContext(ctx context.Context) EksUserArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksUserArnOutput)
}

type EksUserArnOutput struct{ *pulumi.OutputState }

func (EksUserArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksUserArn)(nil)).Elem()
}

func (o EksUserArnOutput) ToEksUserArnOutput() EksUserArnOutput {
	return o
}

func (o EksUserArnOutput) ToEksUserArnOutputWithContext(ctx context.Context) EksUserArnOutput {
	return o
}

func (o EksUserArnOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EksUserArn) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EksUserArnOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksUserArn) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o EksUserArnOutput) EksUserArnId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksUserArn) pulumi.StringOutput { return v.EksUserArnId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EksUserArnInput)(nil)).Elem(), &EksUserArn{})
	pulumi.RegisterOutputType(EksUserArnOutput{})
}
