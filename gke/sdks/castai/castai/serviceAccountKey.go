// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceAccountKey struct {
	pulumi.CustomResourceState

	// Whether the service account key is active. Defaults to true.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// Last time the service account key was used.
	LastUsedAt pulumi.StringOutput `pulumi:"lastUsedAt"`
	// Name of the service account key.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Prefix of the service account key.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// ID of the service account.
	ServiceAccountId    pulumi.StringOutput                `pulumi:"serviceAccountId"`
	ServiceAccountKeyId pulumi.StringOutput                `pulumi:"serviceAccountKeyId"`
	Timeouts            ServiceAccountKeyTimeoutsPtrOutput `pulumi:"timeouts"`
	// The token of the service account key used for authentication.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewServiceAccountKey registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountKey(ctx *pulumi.Context,
	name string, args *ServiceAccountKeyArgs, opts ...pulumi.ResourceOption) (*ServiceAccountKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource ServiceAccountKey
	err = ctx.RegisterPackageResource("castai:index/serviceAccountKey:ServiceAccountKey", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountKey gets an existing ServiceAccountKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountKeyState, opts ...pulumi.ResourceOption) (*ServiceAccountKey, error) {
	var resource ServiceAccountKey
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("castai:index/serviceAccountKey:ServiceAccountKey", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountKey resources.
type serviceAccountKeyState struct {
	// Whether the service account key is active. Defaults to true.
	Active *bool `pulumi:"active"`
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Last time the service account key was used.
	LastUsedAt *string `pulumi:"lastUsedAt"`
	// Name of the service account key.
	Name *string `pulumi:"name"`
	// ID of the organization.
	OrganizationId *string `pulumi:"organizationId"`
	// Prefix of the service account key.
	Prefix *string `pulumi:"prefix"`
	// ID of the service account.
	ServiceAccountId    *string                    `pulumi:"serviceAccountId"`
	ServiceAccountKeyId *string                    `pulumi:"serviceAccountKeyId"`
	Timeouts            *ServiceAccountKeyTimeouts `pulumi:"timeouts"`
	// The token of the service account key used for authentication.
	Token *string `pulumi:"token"`
}

type ServiceAccountKeyState struct {
	// Whether the service account key is active. Defaults to true.
	Active pulumi.BoolPtrInput
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt pulumi.StringPtrInput
	// Last time the service account key was used.
	LastUsedAt pulumi.StringPtrInput
	// Name of the service account key.
	Name pulumi.StringPtrInput
	// ID of the organization.
	OrganizationId pulumi.StringPtrInput
	// Prefix of the service account key.
	Prefix pulumi.StringPtrInput
	// ID of the service account.
	ServiceAccountId    pulumi.StringPtrInput
	ServiceAccountKeyId pulumi.StringPtrInput
	Timeouts            ServiceAccountKeyTimeoutsPtrInput
	// The token of the service account key used for authentication.
	Token pulumi.StringPtrInput
}

func (ServiceAccountKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountKeyState)(nil)).Elem()
}

type serviceAccountKeyArgs struct {
	// Whether the service account key is active. Defaults to true.
	Active *bool `pulumi:"active"`
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the service account key.
	Name *string `pulumi:"name"`
	// ID of the organization.
	OrganizationId string `pulumi:"organizationId"`
	// ID of the service account.
	ServiceAccountId    string                     `pulumi:"serviceAccountId"`
	ServiceAccountKeyId *string                    `pulumi:"serviceAccountKeyId"`
	Timeouts            *ServiceAccountKeyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ServiceAccountKey resource.
type ServiceAccountKeyArgs struct {
	// Whether the service account key is active. Defaults to true.
	Active pulumi.BoolPtrInput
	// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
	ExpiresAt pulumi.StringPtrInput
	// Name of the service account key.
	Name pulumi.StringPtrInput
	// ID of the organization.
	OrganizationId pulumi.StringInput
	// ID of the service account.
	ServiceAccountId    pulumi.StringInput
	ServiceAccountKeyId pulumi.StringPtrInput
	Timeouts            ServiceAccountKeyTimeoutsPtrInput
}

func (ServiceAccountKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountKeyArgs)(nil)).Elem()
}

type ServiceAccountKeyInput interface {
	pulumi.Input

	ToServiceAccountKeyOutput() ServiceAccountKeyOutput
	ToServiceAccountKeyOutputWithContext(ctx context.Context) ServiceAccountKeyOutput
}

func (*ServiceAccountKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountKey)(nil)).Elem()
}

func (i *ServiceAccountKey) ToServiceAccountKeyOutput() ServiceAccountKeyOutput {
	return i.ToServiceAccountKeyOutputWithContext(context.Background())
}

func (i *ServiceAccountKey) ToServiceAccountKeyOutputWithContext(ctx context.Context) ServiceAccountKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyOutput)
}

type ServiceAccountKeyOutput struct{ *pulumi.OutputState }

func (ServiceAccountKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountKey)(nil)).Elem()
}

func (o ServiceAccountKeyOutput) ToServiceAccountKeyOutput() ServiceAccountKeyOutput {
	return o
}

func (o ServiceAccountKeyOutput) ToServiceAccountKeyOutputWithContext(ctx context.Context) ServiceAccountKeyOutput {
	return o
}

// Whether the service account key is active. Defaults to true.
func (o ServiceAccountKeyOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
func (o ServiceAccountKeyOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// Last time the service account key was used.
func (o ServiceAccountKeyOutput) LastUsedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.LastUsedAt }).(pulumi.StringOutput)
}

// Name of the service account key.
func (o ServiceAccountKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization.
func (o ServiceAccountKeyOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Prefix of the service account key.
func (o ServiceAccountKeyOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// ID of the service account.
func (o ServiceAccountKeyOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.ServiceAccountId }).(pulumi.StringOutput)
}

func (o ServiceAccountKeyOutput) ServiceAccountKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.ServiceAccountKeyId }).(pulumi.StringOutput)
}

func (o ServiceAccountKeyOutput) Timeouts() ServiceAccountKeyTimeoutsPtrOutput {
	return o.ApplyT(func(v *ServiceAccountKey) ServiceAccountKeyTimeoutsPtrOutput { return v.Timeouts }).(ServiceAccountKeyTimeoutsPtrOutput)
}

// The token of the service account key used for authentication.
func (o ServiceAccountKeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountKeyInput)(nil)).Elem(), &ServiceAccountKey{})
	pulumi.RegisterOutputType(ServiceAccountKeyOutput{})
}
