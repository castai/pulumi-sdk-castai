// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EvictorAdvancedConfig struct {
	pulumi.CustomResourceState

	// CAST AI cluster id.
	ClusterId               pulumi.StringOutput `pulumi:"clusterId"`
	EvictorAdvancedConfigId pulumi.StringOutput `pulumi:"evictorAdvancedConfigId"`
	// evictor advanced configuration to target specific node/pod
	EvictorAdvancedConfigs EvictorAdvancedConfigEvictorAdvancedConfigArrayOutput `pulumi:"evictorAdvancedConfigs"`
	Timeouts               EvictorAdvancedConfigTimeoutsPtrOutput                `pulumi:"timeouts"`
}

// NewEvictorAdvancedConfig registers a new resource with the given unique name, arguments, and options.
func NewEvictorAdvancedConfig(ctx *pulumi.Context,
	name string, args *EvictorAdvancedConfigArgs, opts ...pulumi.ResourceOption) (*EvictorAdvancedConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.EvictorAdvancedConfigs == nil {
		return nil, errors.New("invalid value for required argument 'EvictorAdvancedConfigs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EvictorAdvancedConfig
	err = ctx.RegisterPackageResource("castai:index/evictorAdvancedConfig:EvictorAdvancedConfig", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvictorAdvancedConfig gets an existing EvictorAdvancedConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvictorAdvancedConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvictorAdvancedConfigState, opts ...pulumi.ResourceOption) (*EvictorAdvancedConfig, error) {
	var resource EvictorAdvancedConfig
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("castai:index/evictorAdvancedConfig:EvictorAdvancedConfig", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EvictorAdvancedConfig resources.
type evictorAdvancedConfigState struct {
	// CAST AI cluster id.
	ClusterId               *string `pulumi:"clusterId"`
	EvictorAdvancedConfigId *string `pulumi:"evictorAdvancedConfigId"`
	// evictor advanced configuration to target specific node/pod
	EvictorAdvancedConfigs []EvictorAdvancedConfigEvictorAdvancedConfig `pulumi:"evictorAdvancedConfigs"`
	Timeouts               *EvictorAdvancedConfigTimeouts               `pulumi:"timeouts"`
}

type EvictorAdvancedConfigState struct {
	// CAST AI cluster id.
	ClusterId               pulumi.StringPtrInput
	EvictorAdvancedConfigId pulumi.StringPtrInput
	// evictor advanced configuration to target specific node/pod
	EvictorAdvancedConfigs EvictorAdvancedConfigEvictorAdvancedConfigArrayInput
	Timeouts               EvictorAdvancedConfigTimeoutsPtrInput
}

func (EvictorAdvancedConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*evictorAdvancedConfigState)(nil)).Elem()
}

type evictorAdvancedConfigArgs struct {
	// CAST AI cluster id.
	ClusterId               string  `pulumi:"clusterId"`
	EvictorAdvancedConfigId *string `pulumi:"evictorAdvancedConfigId"`
	// evictor advanced configuration to target specific node/pod
	EvictorAdvancedConfigs []EvictorAdvancedConfigEvictorAdvancedConfig `pulumi:"evictorAdvancedConfigs"`
	Timeouts               *EvictorAdvancedConfigTimeouts               `pulumi:"timeouts"`
}

// The set of arguments for constructing a EvictorAdvancedConfig resource.
type EvictorAdvancedConfigArgs struct {
	// CAST AI cluster id.
	ClusterId               pulumi.StringInput
	EvictorAdvancedConfigId pulumi.StringPtrInput
	// evictor advanced configuration to target specific node/pod
	EvictorAdvancedConfigs EvictorAdvancedConfigEvictorAdvancedConfigArrayInput
	Timeouts               EvictorAdvancedConfigTimeoutsPtrInput
}

func (EvictorAdvancedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evictorAdvancedConfigArgs)(nil)).Elem()
}

type EvictorAdvancedConfigInput interface {
	pulumi.Input

	ToEvictorAdvancedConfigOutput() EvictorAdvancedConfigOutput
	ToEvictorAdvancedConfigOutputWithContext(ctx context.Context) EvictorAdvancedConfigOutput
}

func (*EvictorAdvancedConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**EvictorAdvancedConfig)(nil)).Elem()
}

func (i *EvictorAdvancedConfig) ToEvictorAdvancedConfigOutput() EvictorAdvancedConfigOutput {
	return i.ToEvictorAdvancedConfigOutputWithContext(context.Background())
}

func (i *EvictorAdvancedConfig) ToEvictorAdvancedConfigOutputWithContext(ctx context.Context) EvictorAdvancedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictorAdvancedConfigOutput)
}

type EvictorAdvancedConfigOutput struct{ *pulumi.OutputState }

func (EvictorAdvancedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvictorAdvancedConfig)(nil)).Elem()
}

func (o EvictorAdvancedConfigOutput) ToEvictorAdvancedConfigOutput() EvictorAdvancedConfigOutput {
	return o
}

func (o EvictorAdvancedConfigOutput) ToEvictorAdvancedConfigOutputWithContext(ctx context.Context) EvictorAdvancedConfigOutput {
	return o
}

// CAST AI cluster id.
func (o EvictorAdvancedConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *EvictorAdvancedConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o EvictorAdvancedConfigOutput) EvictorAdvancedConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *EvictorAdvancedConfig) pulumi.StringOutput { return v.EvictorAdvancedConfigId }).(pulumi.StringOutput)
}

// evictor advanced configuration to target specific node/pod
func (o EvictorAdvancedConfigOutput) EvictorAdvancedConfigs() EvictorAdvancedConfigEvictorAdvancedConfigArrayOutput {
	return o.ApplyT(func(v *EvictorAdvancedConfig) EvictorAdvancedConfigEvictorAdvancedConfigArrayOutput {
		return v.EvictorAdvancedConfigs
	}).(EvictorAdvancedConfigEvictorAdvancedConfigArrayOutput)
}

func (o EvictorAdvancedConfigOutput) Timeouts() EvictorAdvancedConfigTimeoutsPtrOutput {
	return o.ApplyT(func(v *EvictorAdvancedConfig) EvictorAdvancedConfigTimeoutsPtrOutput { return v.Timeouts }).(EvictorAdvancedConfigTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvictorAdvancedConfigInput)(nil)).Elem(), &EvictorAdvancedConfig{})
	pulumi.RegisterOutputType(EvictorAdvancedConfigOutput{})
}
