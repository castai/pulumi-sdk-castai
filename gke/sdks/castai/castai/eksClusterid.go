// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EksClusterid struct {
	pulumi.CustomResourceState

	AccountId      pulumi.StringOutput `pulumi:"accountId"`
	ClusterName    pulumi.StringOutput `pulumi:"clusterName"`
	EksClusteridId pulumi.StringOutput `pulumi:"eksClusteridId"`
	Region         pulumi.StringOutput `pulumi:"region"`
}

// NewEksClusterid registers a new resource with the given unique name, arguments, and options.
func NewEksClusterid(ctx *pulumi.Context,
	name string, args *EksClusteridArgs, opts ...pulumi.ResourceOption) (*EksClusterid, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource EksClusterid
	err = ctx.RegisterPackageResource("castai:index/eksClusterid:EksClusterid", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksClusterid gets an existing EksClusterid resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksClusterid(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksClusteridState, opts ...pulumi.ResourceOption) (*EksClusterid, error) {
	var resource EksClusterid
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("castai:index/eksClusterid:EksClusterid", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksClusterid resources.
type eksClusteridState struct {
	AccountId      *string `pulumi:"accountId"`
	ClusterName    *string `pulumi:"clusterName"`
	EksClusteridId *string `pulumi:"eksClusteridId"`
	Region         *string `pulumi:"region"`
}

type EksClusteridState struct {
	AccountId      pulumi.StringPtrInput
	ClusterName    pulumi.StringPtrInput
	EksClusteridId pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
}

func (EksClusteridState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusteridState)(nil)).Elem()
}

type eksClusteridArgs struct {
	AccountId      string  `pulumi:"accountId"`
	ClusterName    string  `pulumi:"clusterName"`
	EksClusteridId *string `pulumi:"eksClusteridId"`
	Region         string  `pulumi:"region"`
}

// The set of arguments for constructing a EksClusterid resource.
type EksClusteridArgs struct {
	AccountId      pulumi.StringInput
	ClusterName    pulumi.StringInput
	EksClusteridId pulumi.StringPtrInput
	Region         pulumi.StringInput
}

func (EksClusteridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusteridArgs)(nil)).Elem()
}

type EksClusteridInput interface {
	pulumi.Input

	ToEksClusteridOutput() EksClusteridOutput
	ToEksClusteridOutputWithContext(ctx context.Context) EksClusteridOutput
}

func (*EksClusterid) ElementType() reflect.Type {
	return reflect.TypeOf((**EksClusterid)(nil)).Elem()
}

func (i *EksClusterid) ToEksClusteridOutput() EksClusteridOutput {
	return i.ToEksClusteridOutputWithContext(context.Background())
}

func (i *EksClusterid) ToEksClusteridOutputWithContext(ctx context.Context) EksClusteridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusteridOutput)
}

type EksClusteridOutput struct{ *pulumi.OutputState }

func (EksClusteridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksClusterid)(nil)).Elem()
}

func (o EksClusteridOutput) ToEksClusteridOutput() EksClusteridOutput {
	return o
}

func (o EksClusteridOutput) ToEksClusteridOutputWithContext(ctx context.Context) EksClusteridOutput {
	return o
}

func (o EksClusteridOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterid) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o EksClusteridOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterid) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o EksClusteridOutput) EksClusteridId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterid) pulumi.StringOutput { return v.EksClusteridId }).(pulumi.StringOutput)
}

func (o EksClusteridOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterid) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusteridInput)(nil)).Elem(), &EksClusterid{})
	pulumi.RegisterOutputType(EksClusteridOutput{})
}
