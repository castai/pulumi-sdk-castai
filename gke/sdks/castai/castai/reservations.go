// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-terraform-provider/sdks/go/castai/v7/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Reservations struct {
	pulumi.CustomResourceState

	// organization
	OrganizationId pulumi.StringPtrOutput             `pulumi:"organizationId"`
	Reservations   ReservationsReservationArrayOutput `pulumi:"reservations"`
	// csv file containing reservations
	ReservationsCsv pulumi.StringOutput           `pulumi:"reservationsCsv"`
	ReservationsId  pulumi.StringOutput           `pulumi:"reservationsId"`
	Timeouts        ReservationsTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewReservations registers a new resource with the given unique name, arguments, and options.
func NewReservations(ctx *pulumi.Context,
	name string, args *ReservationsArgs, opts ...pulumi.ResourceOption) (*Reservations, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReservationsCsv == nil {
		return nil, errors.New("invalid value for required argument 'ReservationsCsv'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource Reservations
	err = ctx.RegisterPackageResource("castai:index/reservations:Reservations", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservations gets an existing Reservations resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservations(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservationsState, opts ...pulumi.ResourceOption) (*Reservations, error) {
	var resource Reservations
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("castai:index/reservations:Reservations", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Reservations resources.
type reservationsState struct {
	// organization
	OrganizationId *string                   `pulumi:"organizationId"`
	Reservations   []ReservationsReservation `pulumi:"reservations"`
	// csv file containing reservations
	ReservationsCsv *string               `pulumi:"reservationsCsv"`
	ReservationsId  *string               `pulumi:"reservationsId"`
	Timeouts        *ReservationsTimeouts `pulumi:"timeouts"`
}

type ReservationsState struct {
	// organization
	OrganizationId pulumi.StringPtrInput
	Reservations   ReservationsReservationArrayInput
	// csv file containing reservations
	ReservationsCsv pulumi.StringPtrInput
	ReservationsId  pulumi.StringPtrInput
	Timeouts        ReservationsTimeoutsPtrInput
}

func (ReservationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationsState)(nil)).Elem()
}

type reservationsArgs struct {
	// organization
	OrganizationId *string `pulumi:"organizationId"`
	// csv file containing reservations
	ReservationsCsv string                `pulumi:"reservationsCsv"`
	ReservationsId  *string               `pulumi:"reservationsId"`
	Timeouts        *ReservationsTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Reservations resource.
type ReservationsArgs struct {
	// organization
	OrganizationId pulumi.StringPtrInput
	// csv file containing reservations
	ReservationsCsv pulumi.StringInput
	ReservationsId  pulumi.StringPtrInput
	Timeouts        ReservationsTimeoutsPtrInput
}

func (ReservationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationsArgs)(nil)).Elem()
}

type ReservationsInput interface {
	pulumi.Input

	ToReservationsOutput() ReservationsOutput
	ToReservationsOutputWithContext(ctx context.Context) ReservationsOutput
}

func (*Reservations) ElementType() reflect.Type {
	return reflect.TypeOf((**Reservations)(nil)).Elem()
}

func (i *Reservations) ToReservationsOutput() ReservationsOutput {
	return i.ToReservationsOutputWithContext(context.Background())
}

func (i *Reservations) ToReservationsOutputWithContext(ctx context.Context) ReservationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationsOutput)
}

type ReservationsOutput struct{ *pulumi.OutputState }

func (ReservationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Reservations)(nil)).Elem()
}

func (o ReservationsOutput) ToReservationsOutput() ReservationsOutput {
	return o
}

func (o ReservationsOutput) ToReservationsOutputWithContext(ctx context.Context) ReservationsOutput {
	return o
}

// organization
func (o ReservationsOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Reservations) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

func (o ReservationsOutput) Reservations() ReservationsReservationArrayOutput {
	return o.ApplyT(func(v *Reservations) ReservationsReservationArrayOutput { return v.Reservations }).(ReservationsReservationArrayOutput)
}

// csv file containing reservations
func (o ReservationsOutput) ReservationsCsv() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservations) pulumi.StringOutput { return v.ReservationsCsv }).(pulumi.StringOutput)
}

func (o ReservationsOutput) ReservationsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservations) pulumi.StringOutput { return v.ReservationsId }).(pulumi.StringOutput)
}

func (o ReservationsOutput) Timeouts() ReservationsTimeoutsPtrOutput {
	return o.ApplyT(func(v *Reservations) ReservationsTimeoutsPtrOutput { return v.Timeouts }).(ReservationsTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationsInput)(nil)).Elem(), &Reservations{})
	pulumi.RegisterOutputType(ReservationsOutput{})
}
